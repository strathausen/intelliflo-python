# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DPAApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_client_dpa_policy_agreement(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new DPA policy agreement for a client.  # noqa: E501

        Creates a new DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * The firm's existing DPA policy should be specified for an agreement to be created.  * In order to be valid, an agreement should contain 'Yes' answers to all policy statements and the agreement date populated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_dpa_policy_agreement(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicyAgreement body: DPA policy Agreement document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_dpa_policy_agreement_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_dpa_policy_agreement_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_dpa_policy_agreement_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new DPA policy agreement for a client.  # noqa: E501

        Creates a new DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * The firm's existing DPA policy should be specified for an agreement to be created.  * In order to be valid, an agreement should contain 'Yes' answers to all policy statements and the agreement date populated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_dpa_policy_agreement_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicyAgreement body: DPA policy Agreement document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_dpa_policy_agreement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_dpa_policy_agreement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dpa_agreements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dpa_policy(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new DPA policy which will become the current DPA policy when created (see notes on party type above).  # noqa: E501

        If a party type is specified the DPA policy will be related to that party type. If no party type is specified it becomes the default DPA policy for the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dpa_policy(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dpa_policy_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dpa_policy_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_dpa_policy_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new DPA policy which will become the current DPA policy when created (see notes on party type above).  # noqa: E501

        If a party type is specified the DPA policy will be related to that party type. If no party type is specified it becomes the default DPA policy for the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dpa_policy_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dpa_policy`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dpa_policy(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing DPA policy. Only policies that are not associated with client agreements can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dpa_policy(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_dpa_policy_with_http_info(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing DPA policy. Only policies that are not associated with client agreements can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dpa_policy_with_http_info(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'policy_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `delete_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_dpa_policy_agreement(self, agreement_id, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy agreement for a client.  # noqa: E501

        Returns a single DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * DPA policy agreement has a maximum of 5 statements with Yes/No responses and an agreement date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_dpa_policy_agreement(agreement_id, authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agreement_id: DPA Policy Agreement identifier. The special value 'current' can be used to indicate the latest agreement. (required)
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_dpa_policy_agreement_with_http_info(agreement_id, authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_dpa_policy_agreement_with_http_info(agreement_id, authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_dpa_policy_agreement_with_http_info(self, agreement_id, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy agreement for a client.  # noqa: E501

        Returns a single DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * DPA policy agreement has a maximum of 5 statements with Yes/No responses and an agreement date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_dpa_policy_agreement_with_http_info(agreement_id, authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agreement_id: DPA Policy Agreement identifier. The special value 'current' can be used to indicate the latest agreement. (required)
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['agreement_id', 'authorization', 'client_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_dpa_policy_agreement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'agreement_id' is set
        if ('agreement_id' not in params or
                params['agreement_id'] is None):
            raise ValueError("Missing the required parameter `agreement_id` when calling `get_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_dpa_policy_agreement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'agreement_id' in params:
            path_params['agreementId'] = params['agreement_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dpa_agreements/{agreementId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_dpa_policy(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns the current default DPA policy (see notes on party type above).  # noqa: E501

        To retrieve the current DPA policy for a specific party type rather than the default DPA policy, specify the party type in a preference header. The current DPA policy is most recent active policy.                To specify a preference header add a header named 'prefer'  header to one of the following options:   * partytype=Corporate   * partytype=Persons   * partytype=Trust  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_dpa_policy(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate the party type associated with the DPA for the request. Options: PartyType=Person
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_dpa_policy_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_dpa_policy_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_current_dpa_policy_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns the current default DPA policy (see notes on party type above).  # noqa: E501

        To retrieve the current DPA policy for a specific party type rather than the default DPA policy, specify the party type in a preference header. The current DPA policy is most recent active policy.                To specify a preference header add a header named 'prefer'  header to one of the following options:   * partytype=Corporate   * partytype=Persons   * partytype=Trust  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_dpa_policy_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate the party type associated with the DPA for the request. Options: PartyType=Person
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_current_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_current_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dpa_policy(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy.  # noqa: E501

        To retrieve the active DPA policy use  the /dpa_policies/current'endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dpa_policy(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: The DPA policy identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_dpa_policy_with_http_info(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy.  # noqa: E501

        To retrieve the active DPA policy use  the /dpa_policies/current'endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dpa_policy_with_http_info(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: The DPA policy identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'policy_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_dpa_policy_agreements(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client's DPA policy agreements.  # noqa: E501

        Returns a list of client's DPA policy agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_dpa_policy_agreements(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int top: Number of records to retrieve (default '25', max '100').
        :return: DPAPolicyAgreementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_dpa_policy_agreements_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_dpa_policy_agreements_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_dpa_policy_agreements_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client's DPA policy agreements.  # noqa: E501

        Returns a list of client's DPA policy agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_dpa_policy_agreements_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int top: Number of records to retrieve (default '25', max '100').
        :return: DPAPolicyAgreementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_dpa_policy_agreements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_dpa_policy_agreements`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_dpa_policy_agreements`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_dpa_policy_agreements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dpa_agreements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyAgreementCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dpa_policies(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of DPA policies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dpa_policies(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:  *  `name (in)`  *  `partyType (eq)`                Valid values for party type are 'Person', 'Corporate', 'Trust' or 'Default'                See [QueryLang](docs/ApiQueryLang) for further details of how to use the filtering and sorting parameters.
        :param str orderby: Supported sorting options:  *  `name`  *  `partyType'  *  `createdat
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve.
        :return: DPAPolicyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_dpa_policies_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_dpa_policies_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_dpa_policies_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of DPA policies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dpa_policies_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:  *  `name (in)`  *  `partyType (eq)`                Valid values for party type are 'Person', 'Corporate', 'Trust' or 'Default'                See [QueryLang](docs/ApiQueryLang) for further details of how to use the filtering and sorting parameters.
        :param str orderby: Supported sorting options:  *  `name`  *  `partyType'  *  `createdat
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve.
        :return: DPAPolicyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dpa_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_dpa_policies`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_dpa_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_dpa_policy(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dpa_policy(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the DPA policy.
Only the following paths may be modified:
* `/clientCanAccept`
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/clientCanAccept",
    "value": "True"
}
            
would result in the clientCanAccept value for the targeted resource being set to 'True'. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
            return data

    def patch_dpa_policy_with_http_info(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the DPA policy.
Only the following paths may be modified:
* `/clientCanAccept`
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/clientCanAccept",
    "value": "True"
}
            
would result in the clientCanAccept value for the targeted resource being set to 'True'. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'policy_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_dpa_policy`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `patch_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `patch_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `patch_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dpa_policy(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dpa_policy(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: The DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
            return data

    def update_dpa_policy_with_http_info(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: The DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'policy_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dpa_policy`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
