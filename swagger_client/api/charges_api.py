# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ChargesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_client_plan_charge(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Creates a new charge for a client's plan.  # noqa: E501

        Creates a new charge for a client's plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_plan_charge(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanCharge body: Charge document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str accept:
        :return: PlanCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_plan_charge_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_plan_charge_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
            return data

    def create_client_plan_charge_with_http_info(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Creates a new charge for a client's plan.  # noqa: E501

        Creates a new charge for a client's plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_plan_charge_with_http_info(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanCharge body: Charge document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str accept:
        :return: PlanCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'plan_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_plan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `create_client_plan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/charges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanCharge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_plan_charge(self, authorization, charge_id, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing charge for a client's plan.  # noqa: E501

        Deletes an existing charge for a client's plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_plan_charge(authorization, charge_id, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int charge_id: Charge Id. (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_plan_charge_with_http_info(authorization, charge_id, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_plan_charge_with_http_info(authorization, charge_id, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_plan_charge_with_http_info(self, authorization, charge_id, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing charge for a client's plan.  # noqa: E501

        Deletes an existing charge for a client's plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_plan_charge_with_http_info(authorization, charge_id, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int charge_id: Charge Id. (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'charge_id', 'client_id', 'plan_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_plan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'charge_id' is set
        if ('charge_id' not in params or
                params['charge_id'] is None):
            raise ValueError("Missing the required parameter `charge_id` when calling `delete_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `delete_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_plan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'charge_id' in params:
            path_params['chargeId'] = params['charge_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/charges/{chargeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_plan_charge(self, authorization, charge_id, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single charge for a client's plan.  # noqa: E501

        Returns a single charge for a client's plan. A charge is a cost related to a plan/product.                **Notes**:  * Charges are separate to adviser fees.  * Charge types can be One-off Charge, Ongoing Charge, Transaction Cost, Incidental Cost.  * There can be multiple charges recorded against a plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_charge(authorization, charge_id, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int charge_id: Charge identifier. (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: PlanCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_plan_charge_with_http_info(authorization, charge_id, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_plan_charge_with_http_info(authorization, charge_id, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_plan_charge_with_http_info(self, authorization, charge_id, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single charge for a client's plan.  # noqa: E501

        Returns a single charge for a client's plan. A charge is a cost related to a plan/product.                **Notes**:  * Charges are separate to adviser fees.  * Charge types can be One-off Charge, Ongoing Charge, Transaction Cost, Incidental Cost.  * There can be multiple charges recorded against a plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_charge_with_http_info(authorization, charge_id, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int charge_id: Charge identifier. (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: PlanCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'charge_id', 'client_id', 'plan_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_plan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'charge_id' is set
        if ('charge_id' not in params or
                params['charge_id'] is None):
            raise ValueError("Missing the required parameter `charge_id` when calling `get_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_plan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'charge_id' in params:
            path_params['chargeId'] = params['charge_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/charges/{chargeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanCharge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plan_charges(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of charge for a client's plan.  # noqa: E501

        Returns a list of charge for a client's plan.                Filtering:  * `chargedOn` can be filtered by equals (`eq`), greater than (`gt`), greater or equal (`ge`), less than (`lt`), less than or equal (`le`).  * `totalAmount` can be filtered by greater than (`gt`), greater or equal (`ge`), less than (`lt`), less than or equal (`le`).  * `id` and `type` can be filtered using `in`.                Multiple filter expressions can be combined using `and` operator.                *Examples:* top=5&skip=22&filter= type in ('OneOffCharge', 'OngoingCharge') and chargedOn ge '2018-01-01' and id in '(987,654,126)'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_charges(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. Supported operators: 'and', 'gt', 'ge', 'lt', 'le','eq', 'ne', 'in', 'not', 'or'. Available Fields: 'id', 'type', 'chargedOn', 'totalAmount'.
        :param str orderby: Optional. Supported fields: 'id', 'type', 'chargedOn', 'totalAmount'. If 'asc' or 'desc' not specified, then the resources will be ordered in ascending order. e.g: 'orderby=id asc'.
        :param int skip: Number of records to skip. Default value is '0'. Must be greater than or equal to zero.
        :param int top: Number of records to retrieve. Default value is '100'. Must be greater than zero. Max allowed value is '250'.
        :return: PlanChargeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plan_charges_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plan_charges_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plan_charges_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of charge for a client's plan.  # noqa: E501

        Returns a list of charge for a client's plan.                Filtering:  * `chargedOn` can be filtered by equals (`eq`), greater than (`gt`), greater or equal (`ge`), less than (`lt`), less than or equal (`le`).  * `totalAmount` can be filtered by greater than (`gt`), greater or equal (`ge`), less than (`lt`), less than or equal (`le`).  * `id` and `type` can be filtered using `in`.                Multiple filter expressions can be combined using `and` operator.                *Examples:* top=5&skip=22&filter= type in ('OneOffCharge', 'OngoingCharge') and chargedOn ge '2018-01-01' and id in '(987,654,126)'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_charges_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. Supported operators: 'and', 'gt', 'ge', 'lt', 'le','eq', 'ne', 'in', 'not', 'or'. Available Fields: 'id', 'type', 'chargedOn', 'totalAmount'.
        :param str orderby: Optional. Supported fields: 'id', 'type', 'chargedOn', 'totalAmount'. If 'asc' or 'desc' not specified, then the resources will be ordered in ascending order. e.g: 'orderby=id asc'.
        :param int skip: Number of records to skip. Default value is '0'. Must be greater than or equal to zero.
        :param int top: Number of records to retrieve. Default value is '100'. Must be greater than zero. Max allowed value is '250'.
        :return: PlanChargeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plan_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plan_charges`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plan_charges`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `list_client_plan_charges`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plan_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanChargeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_plan_charge(self, body, authorization, x_api_key, charge_id, client_id, plan_id, **kwargs):  # noqa: E501
        """Updates an existing charge for a client's plan.  # noqa: E501

        Updates an existing charge for a client's plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan_charge(body, authorization, x_api_key, charge_id, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanCharge body: Plan Charge document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int charge_id: Charge Id. (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str accept:
        :return: PlanCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_plan_charge_with_http_info(body, authorization, x_api_key, charge_id, client_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_plan_charge_with_http_info(body, authorization, x_api_key, charge_id, client_id, plan_id, **kwargs)  # noqa: E501
            return data

    def update_client_plan_charge_with_http_info(self, body, authorization, x_api_key, charge_id, client_id, plan_id, **kwargs):  # noqa: E501
        """Updates an existing charge for a client's plan.  # noqa: E501

        Updates an existing charge for a client's plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan_charge_with_http_info(body, authorization, x_api_key, charge_id, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PlanCharge body: Plan Charge document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int charge_id: Charge Id. (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan identifier. (required)
        :param str accept:
        :return: PlanCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'charge_id', 'client_id', 'plan_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_plan_charge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'charge_id' is set
        if ('charge_id' not in params or
                params['charge_id'] is None):
            raise ValueError("Missing the required parameter `charge_id` when calling `update_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_plan_charge`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `update_client_plan_charge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'charge_id' in params:
            path_params['chargeId'] = params['charge_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/charges/{chargeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanCharge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
