# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuotesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_client_quote_applicant(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Adds a secondary client owner to a given quote.  # noqa: E501

        This endpoint allows an API user to add a secondary owner for the quote or illustration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_quote_applicant(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_quote_applicant_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_quote_applicant_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def add_client_quote_applicant_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Adds a secondary client owner to a given quote.  # noqa: E501

        This endpoint allows an API user to add a secondary owner for the quote or illustration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_quote_applicant_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_quote_applicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_client_quote_applicant`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_client_quote_applicant`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `add_client_quote_applicant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `add_client_quote_applicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_quote_exists(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote exists for a given client.  # noqa: E501

        This endpoint allows an API user to check if a specific quote or illustration exists for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_exists(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_quote_exists_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.client_quote_exists_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def client_quote_exists_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote exists for a given client.  # noqa: E501

        This endpoint allows an API user to check if a specific quote or illustration exists for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_exists_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_quote_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `client_quote_exists`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `client_quote_exists`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `client_quote_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `client_quote_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_quote_results_exists(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote result exists for a client quote.  # noqa: E501

        This endpoint allows an API user to check if the results for a quote or illustration for a client exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_results_exists(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_quote_results_exists_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.client_quote_results_exists_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def client_quote_results_exists_with_http_info(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote result exists for a client quote.  # noqa: E501

        This endpoint allows an API user to check if the results for a quote or illustration for a client exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_results_exists_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'quote_result_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_quote_results_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `client_quote_results_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_quote(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new client quote.  # noqa: E501

        This endpoint allows an API user to create a quote or illustration for a client using the document in the body of this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: Request document with quote details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_quote_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_quote_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_quote_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new client quote.  # noqa: E501

        This endpoint allows an API user to create a quote or illustration for a client using the document in the body of this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: Request document with quote details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_quote`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_quote`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_quote`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_quote_result(self, body, authorization, x_api_key, client_id, quote_id, **kwargs):  # noqa: E501
        """Creates a new client quote result.  # noqa: E501

        This endpoint allows an API user to create the results for a quote or illustration using the document supplied in the body of the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote_result(body, authorization, x_api_key, client_id, quote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QuoteResult body: Request document with quote result details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_quote_result_with_http_info(body, authorization, x_api_key, client_id, quote_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_quote_result_with_http_info(body, authorization, x_api_key, client_id, quote_id, **kwargs)  # noqa: E501
            return data

    def create_client_quote_result_with_http_info(self, body, authorization, x_api_key, client_id, quote_id, **kwargs):  # noqa: E501
        """Creates a new client quote result.  # noqa: E501

        This endpoint allows an API user to create the results for a quote or illustration using the document supplied in the body of the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote_result_with_http_info(body, authorization, x_api_key, client_id, quote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QuoteResult body: Request document with quote result details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'quote_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_quote_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `create_client_quote_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_quote(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote or illustration for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_quote_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_quote_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_quote_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote or illustration for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_quote`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_quote`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `get_client_quote`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_quote_result(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote result.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote result or illustration result for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_quote_result_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_quote_result_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_quote_result_with_http_info(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote result.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote result or illustration result for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'quote_result_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_quote_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_quote_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_quote_result_product_benefits(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """This endpoint allows an API user to retrieve product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result_product_benefits(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_quote_result_product_benefits_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_quote_result_product_benefits_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_quote_result_product_benefits_with_http_info(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """This endpoint allows an API user to retrieve product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result_product_benefits_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'quote_result_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_quote_result_product_benefits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_quote_result_product_benefits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}/benefits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductBenefitFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_quote_results(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client quote results.  # noqa: E501

        This endpoint provides the ability to identify all of client's quote and illustration results.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quote_results(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`eq`, `ne`, `in`, `gt`, `ge`, `lt`, `le`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuoteResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_quote_results_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_quote_results_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_quote_results_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client quote results.  # noqa: E501

        This endpoint provides the ability to identify all of client's quote and illustration results.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quote_results_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`eq`, `ne`, `in`, `gt`, `ge`, `lt`, `le`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuoteResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_quote_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_quote_results`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_quote_results`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `list_client_quote_results`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_quote_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResultCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_quotes(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of quotes.  # noqa: E501

        This endpoint allows an API user to identify all of a client's quotes and illustrations.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quotes(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`in`),  * `appName` (`startswith`),  * `customReference` (`startswith`),  * `reference` (`startswith`),  * `serviceCase.id` (`eq`, `in`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`),  * `appName` (`asc` or `desc`),  * `customReference` (`asc` or `desc`),  * `reference` (`asc` or `desc`),  * `status` (`asc` or `desc`),  * `productGroup` (`asc` or `desc`),  * `createdAt` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuotesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_quotes_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_quotes_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_quotes_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of quotes.  # noqa: E501

        This endpoint allows an API user to identify all of a client's quotes and illustrations.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quotes_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`in`),  * `appName` (`startswith`),  * `customReference` (`startswith`),  * `reference` (`startswith`),  * `serviceCase.id` (`eq`, `in`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`),  * `appName` (`asc` or `desc`),  * `customReference` (`asc` or `desc`),  * `reference` (`asc` or `desc`),  * `status` (`asc` or `desc`),  * `productGroup` (`asc` or `desc`),  * `createdAt` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuotesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_quotes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_quotes`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_quotes`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_quotes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotesCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_client_quote_status(self, body, authorization, x_api_key, client_id, quote_id, status, **kwargs):  # noqa: E501
        """Sets a new status for the client quote.  # noqa: E501

        This endpoint allows an API user to create a new status for the quote or illustration.  This will replace the current status value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_client_quote_status(body, authorization, x_api_key, client_id, quote_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str status: New quote status. Supported values are Initiated, Submitted, Failed, Expired and Complete. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_client_quote_status_with_http_info(body, authorization, x_api_key, client_id, quote_id, status, **kwargs)  # noqa: E501
        else:
            (data) = self.set_client_quote_status_with_http_info(body, authorization, x_api_key, client_id, quote_id, status, **kwargs)  # noqa: E501
            return data

    def set_client_quote_status_with_http_info(self, body, authorization, x_api_key, client_id, quote_id, status, **kwargs):  # noqa: E501
        """Sets a new status for the client quote.  # noqa: E501

        This endpoint allows an API user to create a new status for the quote or illustration.  This will replace the current status value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_client_quote_status_with_http_info(body, authorization, x_api_key, client_id, quote_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str status: New quote status. Supported values are Initiated, Submitted, Failed, Expired and Complete. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'quote_id', 'status', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_client_quote_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `set_client_quote_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'status' in params:
            path_params['status'] = params['status']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/status/{status}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_quote_result_product_benefits(self, body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs):  # noqa: E501
        """This endpoint allows an API user to update product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_quote_result_product_benefits(body, authorization, x_api_key, client_id, quote_id, quote_result_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductBenefitFeatures body: Request document with product benefit features (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_quote_result_product_benefits_with_http_info(body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_quote_result_product_benefits_with_http_info(body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs)  # noqa: E501
            return data

    def update_client_quote_result_product_benefits_with_http_info(self, body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs):  # noqa: E501
        """This endpoint allows an API user to update product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_quote_result_product_benefits_with_http_info(body, authorization, x_api_key, client_id, quote_id, quote_result_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductBenefitFeatures body: Request document with product benefit features (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'quote_id', 'quote_result_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_quote_result_product_benefits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `update_client_quote_result_product_benefits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}/benefits', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductBenefitFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
