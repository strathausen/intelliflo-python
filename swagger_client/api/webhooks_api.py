# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WebhooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_webhook(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates or updates an existing webhook subscription.  # noqa: E501

        This will create or update a webhook subscription, see [Events](/apis/events) for supported events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webhook(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookCreate body: Resource Document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_webhook_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_webhook_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_webhook_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates or updates an existing webhook subscription.  # noqa: E501

        This will create or update a webhook subscription, see [Events](/apis/events) for supported events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webhook_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WebhookCreate body: Resource Document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_webhook`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_webhook`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-client-credentials']  # noqa: E501

        return self.api_client.call_api(
            '/hub/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webhook(self, id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Deletes a specific webhook subscription by id (Unsubscribe).  # noqa: E501

        This will delete a specific webhook subscription by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook(id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Subscription identifier. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webhook_with_http_info(id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webhook_with_http_info(id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_webhook_with_http_info(self, id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Deletes a specific webhook subscription by id (Unsubscribe).  # noqa: E501

        This will delete a specific webhook subscription by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_with_http_info(id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Subscription identifier. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_webhook`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_webhook`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-client-credentials']  # noqa: E501

        return self.api_client.call_api(
            '/hub/webhooks/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webhook(self, id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a specific webhook subscription by id.  # noqa: E501

        This will return a specific webhook subscription by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook(id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Subscription identifier. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webhook_with_http_info(id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webhook_with_http_info(id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_webhook_with_http_info(self, id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a specific webhook subscription by id.  # noqa: E501

        This will return a specific webhook subscription by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhook_with_http_info(id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Subscription identifier. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_webhook`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_webhook`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-client-credentials']  # noqa: E501

        return self.api_client.call_api(
            '/hub/webhooks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_webhooks(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns the list of webhook subscriptions.  # noqa: E501

        This will return a list of webhook subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webhooks(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: WebhookCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_webhooks_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_webhooks_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_webhooks_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns the list of webhook subscriptions.  # noqa: E501

        This will return a list of webhook subscriptions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webhooks_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: WebhookCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_webhooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_webhooks`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_webhooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-client-credentials']  # noqa: E501

        return self.api_client.call_api(
            '/hub/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WebhookCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def subscribe_unsubscribe_web_sub(self, hub_mode, hub_topic, hub_callback, hub_lease_seconds, hub_secret, authorization, x_api_key, **kwargs):  # noqa: E501
        """A WebSub compliant endpoint which creates or updates an existing webhook subscription.  # noqa: E501

        This endpoint is a [WebSub](https://www.w3.org/TR/websub/#subscriber-sends-subscription-request) compliant hub for managing subscriptions to event topics, see [Events](/apis/events) for supported events.  This request MUST have a Content-Type header of `application/x-www-form-urlencoded` and use the described parameters in the body as described below.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscribe_unsubscribe_web_sub(hub_mode, hub_topic, hub_callback, hub_lease_seconds, hub_secret, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_mode: (required)
        :param str hub_topic: (required)
        :param str hub_callback: (required)
        :param int hub_lease_seconds: (required)
        :param str hub_secret: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.subscribe_unsubscribe_web_sub_with_http_info(hub_mode, hub_topic, hub_callback, hub_lease_seconds, hub_secret, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.subscribe_unsubscribe_web_sub_with_http_info(hub_mode, hub_topic, hub_callback, hub_lease_seconds, hub_secret, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def subscribe_unsubscribe_web_sub_with_http_info(self, hub_mode, hub_topic, hub_callback, hub_lease_seconds, hub_secret, authorization, x_api_key, **kwargs):  # noqa: E501
        """A WebSub compliant endpoint which creates or updates an existing webhook subscription.  # noqa: E501

        This endpoint is a [WebSub](https://www.w3.org/TR/websub/#subscriber-sends-subscription-request) compliant hub for managing subscriptions to event topics, see [Events](/apis/events) for supported events.  This request MUST have a Content-Type header of `application/x-www-form-urlencoded` and use the described parameters in the body as described below.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.subscribe_unsubscribe_web_sub_with_http_info(hub_mode, hub_topic, hub_callback, hub_lease_seconds, hub_secret, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_mode: (required)
        :param str hub_topic: (required)
        :param str hub_callback: (required)
        :param int hub_lease_seconds: (required)
        :param str hub_secret: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hub_mode', 'hub_topic', 'hub_callback', 'hub_lease_seconds', 'hub_secret', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_unsubscribe_web_sub" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hub_mode' is set
        if ('hub_mode' not in params or
                params['hub_mode'] is None):
            raise ValueError("Missing the required parameter `hub_mode` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501
        # verify the required parameter 'hub_topic' is set
        if ('hub_topic' not in params or
                params['hub_topic'] is None):
            raise ValueError("Missing the required parameter `hub_topic` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501
        # verify the required parameter 'hub_callback' is set
        if ('hub_callback' not in params or
                params['hub_callback'] is None):
            raise ValueError("Missing the required parameter `hub_callback` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501
        # verify the required parameter 'hub_lease_seconds' is set
        if ('hub_lease_seconds' not in params or
                params['hub_lease_seconds'] is None):
            raise ValueError("Missing the required parameter `hub_lease_seconds` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501
        # verify the required parameter 'hub_secret' is set
        if ('hub_secret' not in params or
                params['hub_secret'] is None):
            raise ValueError("Missing the required parameter `hub_secret` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `subscribe_unsubscribe_web_sub`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'hub_mode' in params:
            form_params.append(('hub.mode', params['hub_mode']))  # noqa: E501
        if 'hub_topic' in params:
            form_params.append(('hub.topic', params['hub_topic']))  # noqa: E501
        if 'hub_callback' in params:
            form_params.append(('hub.callback', params['hub_callback']))  # noqa: E501
        if 'hub_lease_seconds' in params:
            form_params.append(('hub.lease_seconds', params['hub_lease_seconds']))  # noqa: E501
        if 'hub_secret' in params:
            form_params.append(('hub.secret', params['hub_secret']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-client-credentials']  # noqa: E501

        return self.api_client.call_api(
            '/hub', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
