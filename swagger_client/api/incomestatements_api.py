# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IncomestatementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_income_statement(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_income_statement_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_income_statement_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_income_statement_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_income_statement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_income_statement_items(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Creates income statement items for an income statement.  # noqa: E501

        Add income statement items to an existing income statement.  There is a limit of 10000 items per post, however you can make multiple posts.  You cannot post if the statement is matched or any of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement_items(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItemBatch body: A batch of income statement items (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_income_statement_items_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_income_statement_items_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
            return data

    def create_income_statement_items_with_http_info(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Creates income statement items for an income statement.  # noqa: E501

        Add income statement items to an existing income statement.  There is a limit of 10000 items per post, however you can make multiple posts.  You cannot post if the statement is matched or any of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement_items_with_http_info(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItemBatch body: A batch of income statement items (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'income_statement_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_income_statement_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_income_statement_items`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_income_statement_items`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_income_statement_items`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `create_income_statement_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_income_statement(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing income statement.  # noqa: E501

        You can only delete an income statement if it is not matched and none of the items are analysed.  This will delete the income statement and the associated items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_income_statement(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_income_statement_with_http_info(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing income statement.  # noqa: E501

        You can only delete an income statement if it is not matched and none of the items are analysed.  This will delete the income statement and the associated items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_income_statement_with_http_info(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_income_statement`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `delete_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_income_statement(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns an income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_income_statement_with_http_info(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns an income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement_with_http_info(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_income_statement`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `get_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_income_statement_item(self, authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a given item for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement_item(authorization, income_statement_id, income_statement_item_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_income_statement_item_with_http_info(authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_income_statement_item_with_http_info(authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_income_statement_item_with_http_info(self, authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a given item for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement_item_with_http_info(authorization, income_statement_id, income_statement_item_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'income_statement_item_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_income_statement_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `get_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_item_id' is set
        if ('income_statement_item_id' not in params or
                params['income_statement_item_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_item_id` when calling `get_income_statement_item`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_income_statement_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501
        if 'income_statement_item_id' in params:
            path_params['incomeStatementItemId'] = params['income_statement_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items/{incomeStatementItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_income_statement_items(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of items for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statement_items(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __type__ ( in, eq )   * __isAnalysed__ ( eq, ne )    Usage example: `isAnalysed eq false and type in ('OngFee', 'Lvl')`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__   (asc,desc)  * __type__ (asc,desc)  * __isAnalysed__ (asc,desc)    Usage example: `orderby=type asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_income_statement_items_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_income_statement_items_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_income_statement_items_with_http_info(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of items for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statement_items_with_http_info(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __type__ ( in, eq )   * __isAnalysed__ ( eq, ne )    Usage example: `isAnalysed eq false and type in ('OngFee', 'Lvl')`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__   (asc,desc)  * __type__ (asc,desc)  * __isAnalysed__ (asc,desc)    Usage example: `orderby=type asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_income_statement_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_income_statement_items`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `list_income_statement_items`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_income_statement_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_income_statements(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of income statements.  # noqa: E501

        If called with  [Tenant Client Credentials Flow](/docs/Authentication#TCCFlow) and firm_data.incomestatement then it will return income statements for the authenticated client(app) and tenant.  If you add the additional app_data scope then you will receive all your apps data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statements(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __date__ ( eq, ne, gt, ge, lt, le )   * __isMatched__ ( eq, ne )   * __reference__ ( eq, in, startswith )    Usage example: `isMatched eq true and date gt '2019-01-01T00:00:00.000'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __date__  * __reference__    Usage example: `orderby=date asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_income_statements_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_income_statements_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_income_statements_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of income statements.  # noqa: E501

        If called with  [Tenant Client Credentials Flow](/docs/Authentication#TCCFlow) and firm_data.incomestatement then it will return income statements for the authenticated client(app) and tenant.  If you add the additional app_data scope then you will receive all your apps data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statements_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __date__ ( eq, ne, gt, ge, lt, le )   * __isMatched__ ( eq, ne )   * __reference__ ( eq, in, startswith )    Usage example: `isMatched eq true and date gt '2019-01-01T00:00:00.000'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __date__  * __reference__    Usage example: `orderby=date asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_income_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_income_statements`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_income_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_income_statement(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Updates an income statement.  # noqa: E501

        You can only edit the income statement if it is not matched and none of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_income_statement_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_income_statement_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
            return data

    def update_income_statement_with_http_info(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Updates an income statement.  # noqa: E501

        You can only edit the income statement if it is not matched and none of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement_with_http_info(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'income_statement_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_income_statement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_income_statement`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `update_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_income_statement_item(self, body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs):  # noqa: E501
        """Updates an income statement item for a given income statement.  # noqa: E501

        You cannot edit any properties if the item is analysed.  You can edit policy and client if the item is not analysed and the statement is matched.  You can edit policy, client and gross amount if the item is not analysed and the statement is not matched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement_item(body, authorization, x_api_key, income_statement_id, income_statement_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItem body: Income statement item document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_income_statement_item_with_http_info(body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_income_statement_item_with_http_info(body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs)  # noqa: E501
            return data

    def update_income_statement_item_with_http_info(self, body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs):  # noqa: E501
        """Updates an income statement item for a given income statement.  # noqa: E501

        You cannot edit any properties if the item is analysed.  You can edit policy and client if the item is not analysed and the statement is matched.  You can edit policy, client and gross amount if the item is not analysed and the statement is not matched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement_item_with_http_info(body, authorization, x_api_key, income_statement_id, income_statement_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItem body: Income statement item document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'income_statement_id', 'income_statement_item_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_income_statement_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_item_id' is set
        if ('income_statement_item_id' not in params or
                params['income_statement_item_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_item_id` when calling `update_income_statement_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501
        if 'income_statement_item_id' in params:
            path_params['incomeStatementItemId'] = params['income_statement_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items/{incomeStatementItemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
