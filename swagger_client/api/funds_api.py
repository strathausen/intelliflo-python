# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FundsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_fund(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a non-feed fund.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_fund(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fund body: Fund request (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier
        :return: Fund
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_fund_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_fund_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_fund_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a non-feed fund.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_fund_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fund body: Fund request (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier
        :return: Fund
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fund" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_fund`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_fund`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_fund`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/funds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fund',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fund(self, authorization, fund_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fund/equity for a given fundId/equityId.   # noqa: E501

        **Note:** Use of the this API is subject to specific terms of use.   The data obtained from this API may be used to drive UI applications where the users are licensed Intelligent Office users or customers thereof. Valid use cases fall within the production of print or other media as part of the normal course of financial services business.  The data from this API may **not** be extracted in bulk or redistributed for any purposes other than those stated above. Please be aware that any consumers that operate outside of these terms may have access to these endpoints removed or restricted. If in doubt, please contact us to discuss your use case and we can advise further.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fund(authorization, fund_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str fund_id: Fund identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier
        :return: Fund
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fund_with_http_info(authorization, fund_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fund_with_http_info(authorization, fund_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_fund_with_http_info(self, authorization, fund_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fund/equity for a given fundId/equityId.   # noqa: E501

        **Note:** Use of the this API is subject to specific terms of use.   The data obtained from this API may be used to drive UI applications where the users are licensed Intelligent Office users or customers thereof. Valid use cases fall within the production of print or other media as part of the normal course of financial services business.  The data from this API may **not** be extracted in bulk or redistributed for any purposes other than those stated above. Please be aware that any consumers that operate outside of these terms may have access to these endpoints removed or restricted. If in doubt, please contact us to discuss your use case and we can advise further.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fund_with_http_info(authorization, fund_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str fund_id: Fund identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier
        :return: Fund
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'fund_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fund" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_fund`")  # noqa: E501
        # verify the required parameter 'fund_id' is set
        if ('fund_id' not in params or
                params['fund_id'] is None):
            raise ValueError("Missing the required parameter `fund_id` when calling `get_fund`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_fund`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fund_id' in params:
            path_params['fundId'] = params['fund_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/funds/{fundId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fund',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_funds(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of funds (feed and non-feed funds) and equities.   # noqa: E501

        **Note:** Use of the this API is subject to specific terms of use.   The data obtained from this API may be used to drive UI applications where the users are licensed Intelligent Office users or customers thereof. Valid use cases fall within the production of print or other media as part of the normal course of financial services business.  The data from this API may **not** be extracted in bulk or redistributed for any purposes other than those stated above. Please be aware that any consumers that operate outside of these terms may have access to these endpoints removed or restricted. If in doubt, please contact us to discuss your use case and we can advise further.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_funds(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported operator(s): `eq`, `ne`, `in` and `startswith`. Available field(s): `source`, `name`, `type`, `sector`, `provider`, `codes.sedol`,  `codes.isin`, `codes.mex`, `codes.citi`, `codes.epic` and `isClosed`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant identifier
        :param int top: The number of records to retrieve (default 100, max 500)
        :return: FundCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_funds_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_funds_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_funds_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of funds (feed and non-feed funds) and equities.   # noqa: E501

        **Note:** Use of the this API is subject to specific terms of use.   The data obtained from this API may be used to drive UI applications where the users are licensed Intelligent Office users or customers thereof. Valid use cases fall within the production of print or other media as part of the normal course of financial services business.  The data from this API may **not** be extracted in bulk or redistributed for any purposes other than those stated above. Please be aware that any consumers that operate outside of these terms may have access to these endpoints removed or restricted. If in doubt, please contact us to discuss your use case and we can advise further.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_funds_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported operator(s): `eq`, `ne`, `in` and `startswith`. Available field(s): `source`, `name`, `type`, `sector`, `provider`, `codes.sedol`,  `codes.isin`, `codes.mex`, `codes.citi`, `codes.epic` and `isClosed`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant identifier
        :param int top: The number of records to retrieve (default 100, max 500)
        :return: FundCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_funds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_funds`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_funds`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/funds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_fund(self, body, authorization, x_api_key, fund_id, **kwargs):  # noqa: E501
        """Updates a non-feed fund for a given fund.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fund(body, authorization, x_api_key, fund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateFund body: Fund request (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str fund_id: Fund identifier (required)
        :param str accept:
        :param int tenant_id: Tenant identifier
        :return: Fund
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_fund_with_http_info(body, authorization, x_api_key, fund_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_fund_with_http_info(body, authorization, x_api_key, fund_id, **kwargs)  # noqa: E501
            return data

    def update_fund_with_http_info(self, body, authorization, x_api_key, fund_id, **kwargs):  # noqa: E501
        """Updates a non-feed fund for a given fund.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_fund_with_http_info(body, authorization, x_api_key, fund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateFund body: Fund request (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str fund_id: Fund identifier (required)
        :param str accept:
        :param int tenant_id: Tenant identifier
        :return: Fund
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'fund_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fund" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_fund`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_fund`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_fund`")  # noqa: E501
        # verify the required parameter 'fund_id' is set
        if ('fund_id' not in params or
                params['fund_id'] is None):
            raise ValueError("Missing the required parameter `fund_id` when calling `update_fund`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fund_id' in params:
            path_params['fundId'] = params['fund_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/funds/{fundId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fund',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
