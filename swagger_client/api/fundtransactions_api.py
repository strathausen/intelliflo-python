# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FundtransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_client_plan_holding_transaction(self, authorization, client_id, holding_id, plan_id, tenant_id, transaction_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fund holdings transaction for a given client, plan, holding and transaction.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_holding_transaction(authorization, client_id, holding_id, plan_id, tenant_id, transaction_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int holding_id: Fund Holding identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int tenant_id: Tenant identifier (required)
        :param int transaction_id: Transaction identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: FundTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_plan_holding_transaction_with_http_info(authorization, client_id, holding_id, plan_id, tenant_id, transaction_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_plan_holding_transaction_with_http_info(authorization, client_id, holding_id, plan_id, tenant_id, transaction_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_plan_holding_transaction_with_http_info(self, authorization, client_id, holding_id, plan_id, tenant_id, transaction_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fund holdings transaction for a given client, plan, holding and transaction.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_holding_transaction_with_http_info(authorization, client_id, holding_id, plan_id, tenant_id, transaction_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int holding_id: Fund Holding identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int tenant_id: Tenant identifier (required)
        :param int transaction_id: Transaction identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: FundTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'holding_id', 'plan_id', 'tenant_id', 'transaction_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_plan_holding_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_plan_holding_transaction`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_plan_holding_transaction`")  # noqa: E501
        # verify the required parameter 'holding_id' is set
        if ('holding_id' not in params or
                params['holding_id'] is None):
            raise ValueError("Missing the required parameter `holding_id` when calling `get_client_plan_holding_transaction`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_client_plan_holding_transaction`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_client_plan_holding_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `get_client_plan_holding_transaction`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_plan_holding_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'holding_id' in params:
            path_params['holdingId'] = params['holding_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/holdings/{holdingId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plan_holding_transactions(self, authorization, client_id, holding_id, plan_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of fund holdings transactions for a given client, plan and holding.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_holding_transactions(authorization, client_id, holding_id, plan_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int holding_id: Plan holding identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int tenant_id: Tenant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators: type (in), transactiondate (lt, le, gt, ge): e.g. filter=type in ('sale','purchase') and transactiondate gt 'startDate'
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: FundTransactionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plan_holding_transactions_with_http_info(authorization, client_id, holding_id, plan_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plan_holding_transactions_with_http_info(authorization, client_id, holding_id, plan_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plan_holding_transactions_with_http_info(self, authorization, client_id, holding_id, plan_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of fund holdings transactions for a given client, plan and holding.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_holding_transactions_with_http_info(authorization, client_id, holding_id, plan_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int holding_id: Plan holding identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int tenant_id: Tenant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators: type (in), transactiondate (lt, le, gt, ge): e.g. filter=type in ('sale','purchase') and transactiondate gt 'startDate'
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: FundTransactionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'holding_id', 'plan_id', 'tenant_id', 'x_api_key', 'accept', 'filter', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plan_holding_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plan_holding_transactions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plan_holding_transactions`")  # noqa: E501
        # verify the required parameter 'holding_id' is set
        if ('holding_id' not in params or
                params['holding_id'] is None):
            raise ValueError("Missing the required parameter `holding_id` when calling `list_client_plan_holding_transactions`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `list_client_plan_holding_transactions`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_client_plan_holding_transactions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plan_holding_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'holding_id' in params:
            path_params['holdingId'] = params['holding_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/holdings/{holdingId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FundTransactionCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
