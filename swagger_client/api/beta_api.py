# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BetaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_client_quote_applicant(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Adds a secondary client owner to a given quote.  # noqa: E501

        This endpoint allows an API user to add a secondary owner for the quote or illustration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_quote_applicant(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_quote_applicant_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_quote_applicant_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def add_client_quote_applicant_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Adds a secondary client owner to a given quote.  # noqa: E501

        This endpoint allows an API user to add a secondary owner for the quote or illustration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_quote_applicant_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_quote_applicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_client_quote_applicant`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_client_quote_applicant`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `add_client_quote_applicant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `add_client_quote_applicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_create_client_transactions(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a batch of transactions for different plans for a particular client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_create_client_transactions(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionBatch body: A collection of transactions. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id (required)
        :param str accept:
        :param bool x_iflo_batch_ignore_error: You can choose to set \"x-iflo-ignore-error=true\" when posting a batch of transactions.              This processes the entire batch and skip any row containing transaction we cannot match against the plan or underlying holding.
        :param int tenant_id: Tenant Id
        :return: TransactionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_create_client_transactions_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_create_client_transactions_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def batch_create_client_transactions_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a batch of transactions for different plans for a particular client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_create_client_transactions_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionBatch body: A collection of transactions. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id (required)
        :param str accept:
        :param bool x_iflo_batch_ignore_error: You can choose to set \"x-iflo-ignore-error=true\" when posting a batch of transactions.              This processes the entire batch and skip any row containing transaction we cannot match against the plan or underlying holding.
        :param int tenant_id: Tenant Id
        :return: TransactionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'x_iflo_batch_ignore_error', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_create_client_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `batch_create_client_transactions`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `batch_create_client_transactions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `batch_create_client_transactions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `batch_create_client_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_batch_ignore_error' in params:
            header_params['x-iflo-batch-ignore-error'] = params['x_iflo_batch_ignore_error']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionBatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_create_transactions(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a batch of transactions for different plans.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_create_transactions(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionBatch body: A collection of transactions. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_batch_ignore_error: You can choose to set \"x-iflo-ignore-error=true\" when posting a batch of transactions.              This processes the entire batch and skip any row containing transaction we cannot match against the plan or underlying holding.
        :param int tenant_id: Tenant Id
        :return: TransactionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_create_transactions_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_create_transactions_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def batch_create_transactions_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a batch of transactions for different plans.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_create_transactions_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionBatch body: A collection of transactions. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_batch_ignore_error: You can choose to set \"x-iflo-ignore-error=true\" when posting a batch of transactions.              This processes the entire batch and skip any row containing transaction we cannot match against the plan or underlying holding.
        :param int tenant_id: Tenant Id
        :return: TransactionBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'x_iflo_batch_ignore_error', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_create_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `batch_create_transactions`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `batch_create_transactions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `batch_create_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_batch_ignore_error' in params:
            header_params['x-iflo-batch-ignore-error'] = params['x_iflo_batch_ignore_error']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionBatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_plan_transaction_exists(self, authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs):  # noqa: E501
        """Check to see if a transaction exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_plan_transaction_exists(authorization, client_id, plan_id, transaction_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the special value \\\"me\\\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id - the id of the plan. (required)
        :param int transaction_id: Transaction Id - the id of the transaction. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_plan_transaction_exists_with_http_info(authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.client_plan_transaction_exists_with_http_info(authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def client_plan_transaction_exists_with_http_info(self, authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs):  # noqa: E501
        """Check to see if a transaction exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_plan_transaction_exists_with_http_info(authorization, client_id, plan_id, transaction_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the special value \\\"me\\\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id - the id of the plan. (required)
        :param int transaction_id: Transaction Id - the id of the transaction. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'transaction_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_plan_transaction_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `client_plan_transaction_exists`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `client_plan_transaction_exists`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `client_plan_transaction_exists`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `client_plan_transaction_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `client_plan_transaction_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/transactions/{transactionId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_quote_exists(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote exists for a given client.  # noqa: E501

        This endpoint allows an API user to check if a specific quote or illustration exists for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_exists(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_quote_exists_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.client_quote_exists_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def client_quote_exists_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote exists for a given client.  # noqa: E501

        This endpoint allows an API user to check if a specific quote or illustration exists for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_exists_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_quote_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `client_quote_exists`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `client_quote_exists`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `client_quote_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `client_quote_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_quote_results_exists(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote result exists for a client quote.  # noqa: E501

        This endpoint allows an API user to check if the results for a quote or illustration for a client exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_results_exists(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_quote_results_exists_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.client_quote_results_exists_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def client_quote_results_exists_with_http_info(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Checks that a quote result exists for a client quote.  # noqa: E501

        This endpoint allows an API user to check if the results for a quote or illustration for a client exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_quote_results_exists_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'quote_result_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_quote_results_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `client_quote_results_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `client_quote_results_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_dependant(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a dependant for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_dependant(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Dependant body: Dependant document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param str accept:
        :return: Dependant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_dependant_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_dependant_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_dependant_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a dependant for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_dependant_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Dependant body: Dependant document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param str accept:
        :return: Dependant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_dependant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_dependant`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_dependant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_dependant`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_dependant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dependants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dependant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_dpa_policy_agreement(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new DPA policy agreement for a client.  # noqa: E501

        Creates a new DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * The firm's existing DPA policy should be specified for an agreement to be created.  * In order to be valid, an agreement should contain 'Yes' answers to all policy statements and the agreement date populated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_dpa_policy_agreement(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicyAgreement body: DPA policy Agreement document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_dpa_policy_agreement_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_dpa_policy_agreement_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_dpa_policy_agreement_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new DPA policy agreement for a client.  # noqa: E501

        Creates a new DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * The firm's existing DPA policy should be specified for an agreement to be created.  * In order to be valid, an agreement should contain 'Yes' answers to all policy statements and the agreement date populated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_dpa_policy_agreement_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicyAgreement body: DPA policy Agreement document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_dpa_policy_agreement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_dpa_policy_agreement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dpa_agreements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_expenditure(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates an expenditure record for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_expenditure(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Expenditure body: Details of the expenditure to be created. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Expenditure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_expenditure_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_expenditure_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_expenditure_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates an expenditure record for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_expenditure_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Expenditure body: Details of the expenditure to be created. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Expenditure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_expenditure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_expenditure`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_expenditure`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_expenditure`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_expenditure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/expenditures', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Expenditure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_fees(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a fee for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_fees(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeeDocument body: Fee (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_fees_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_fees_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_fees_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a fee for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_fees_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeeDocument body: Fee (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_fees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_fees`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_fees`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_fees`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_fees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/fees', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_income(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates an income record for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_income(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateIncome body: The created income record. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Income
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_income_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_income_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_income_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates an income record for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_income_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateIncome body: The created income record. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Income
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_income" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_income`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_income`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_income`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_income`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/incomes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Income',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_plan_fee(self, authorization, client_id, fee_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Creates an association on a fee with a client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_plan_fee(authorization, client_id, fee_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_client_plan_fee_with_http_info(self, authorization, client_id, fee_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Creates an association on a fee with a client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'fee_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_plan_fee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `create_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `create_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_plan_fee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['feeId'] = params['fee_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/fees/{feeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_quote(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new client quote.  # noqa: E501

        This endpoint allows an API user to create a quote or illustration for a client using the document in the body of this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: Request document with quote details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_quote_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_quote_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_quote_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new client quote.  # noqa: E501

        This endpoint allows an API user to create a quote or illustration for a client using the document in the body of this request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: Request document with quote details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_quote`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_quote`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_quote`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_quote_result(self, body, authorization, x_api_key, client_id, quote_id, **kwargs):  # noqa: E501
        """Creates a new client quote result.  # noqa: E501

        This endpoint allows an API user to create the results for a quote or illustration using the document supplied in the body of the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote_result(body, authorization, x_api_key, client_id, quote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QuoteResult body: Request document with quote result details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_quote_result_with_http_info(body, authorization, x_api_key, client_id, quote_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_quote_result_with_http_info(body, authorization, x_api_key, client_id, quote_id, **kwargs)  # noqa: E501
            return data

    def create_client_quote_result_with_http_info(self, body, authorization, x_api_key, client_id, quote_id, **kwargs):  # noqa: E501
        """Creates a new client quote result.  # noqa: E501

        This endpoint allows an API user to create the results for a quote or illustration using the document supplied in the body of the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_quote_result_with_http_info(body, authorization, x_api_key, client_id, quote_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QuoteResult body: Request document with quote result details. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'quote_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_quote_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_quote_result`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `create_client_quote_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dpa_policy(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new DPA policy which will become the current DPA policy when created (see notes on party type above).  # noqa: E501

        If a party type is specified the DPA policy will be related to that party type. If no party type is specified it becomes the default DPA policy for the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dpa_policy(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dpa_policy_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dpa_policy_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_dpa_policy_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new DPA policy which will become the current DPA policy when created (see notes on party type above).  # noqa: E501

        If a party type is specified the DPA policy will be related to that party type. If no party type is specified it becomes the default DPA policy for the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dpa_policy_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dpa_policy`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_income_statement(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_income_statement_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_income_statement_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_income_statement_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_income_statement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_income_statement_items(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Creates income statement items for an income statement.  # noqa: E501

        Add income statement items to an existing income statement.  There is a limit of 10000 items per post, however you can make multiple posts.  You cannot post if the statement is matched or any of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement_items(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItemBatch body: A batch of income statement items (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_income_statement_items_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_income_statement_items_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
            return data

    def create_income_statement_items_with_http_info(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Creates income statement items for an income statement.  # noqa: E501

        Add income statement items to an existing income statement.  There is a limit of 10000 items per post, however you can make multiple posts.  You cannot post if the statement is matched or any of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_income_statement_items_with_http_info(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItemBatch body: A batch of income statement items (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'income_statement_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_income_statement_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_income_statement_items`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_income_statement_items`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_income_statement_items`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `create_income_statement_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_provider_model(self, body, authorization, x_api_key, app_id, **kwargs):  # noqa: E501
        """Creates a new provider model.  # noqa: E501

        Create a new provider model or a new version of an existing model.  To create a new version of an existing model make sure that the model.code is the same.  This will then archive the previous version and the firm can then approve the new version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_provider_model(body, authorization, x_api_key, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProviderModel body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_provider_model_with_http_info(body, authorization, x_api_key, app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_provider_model_with_http_info(body, authorization, x_api_key, app_id, **kwargs)  # noqa: E501
            return data

    def create_provider_model_with_http_info(self, body, authorization, x_api_key, app_id, **kwargs):  # noqa: E501
        """Creates a new provider model.  # noqa: E501

        Create a new provider model or a new version of an existing model.  To create a new version of an existing model make sure that the model.code is the same.  This will then archive the previous version and the firm can then approve the new version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_provider_model_with_http_info(body, authorization, x_api_key, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProviderModel body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'app_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_provider_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_provider_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_provider_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_provider_model`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `create_provider_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{appId}/models', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_dependant(self, authorization, client_id, dependant_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes a dependant for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_dependant(authorization, client_id, dependant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int dependant_id: Dependant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_dependant_with_http_info(authorization, client_id, dependant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_dependant_with_http_info(authorization, client_id, dependant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_dependant_with_http_info(self, authorization, client_id, dependant_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes a dependant for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_dependant_with_http_info(authorization, client_id, dependant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int dependant_id: Dependant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'dependant_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_dependant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_dependant`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_dependant`")  # noqa: E501
        # verify the required parameter 'dependant_id' is set
        if ('dependant_id' not in params or
                params['dependant_id'] is None):
            raise ValueError("Missing the required parameter `dependant_id` when calling `delete_client_dependant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_dependant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dependant_id' in params:
            path_params['dependantId'] = params['dependant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dependants/{dependantId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_expenditure(self, authorization, client_id, expenditure_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes a client's expenditure record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_expenditure(authorization, client_id, expenditure_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int expenditure_id: The identifier of the expenditure record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_expenditure_with_http_info(authorization, client_id, expenditure_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_expenditure_with_http_info(authorization, client_id, expenditure_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_expenditure_with_http_info(self, authorization, client_id, expenditure_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes a client's expenditure record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_expenditure_with_http_info(authorization, client_id, expenditure_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int expenditure_id: The identifier of the expenditure record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'expenditure_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_expenditure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_expenditure`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_expenditure`")  # noqa: E501
        # verify the required parameter 'expenditure_id' is set
        if ('expenditure_id' not in params or
                params['expenditure_id'] is None):
            raise ValueError("Missing the required parameter `expenditure_id` when calling `delete_client_expenditure`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_expenditure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'expenditure_id' in params:
            path_params['expenditureId'] = params['expenditure_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/expenditures/{expenditureId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_income(self, authorization, client_id, income_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes a client's income record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_income(authorization, client_id, income_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int income_id: The identifier for the income record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_income_with_http_info(authorization, client_id, income_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_income_with_http_info(authorization, client_id, income_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_income_with_http_info(self, authorization, client_id, income_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes a client's income record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_income_with_http_info(authorization, client_id, income_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int income_id: The identifier for the income record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'income_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_income" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_income`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_income`")  # noqa: E501
        # verify the required parameter 'income_id' is set
        if ('income_id' not in params or
                params['income_id'] is None):
            raise ValueError("Missing the required parameter `income_id` when calling `delete_client_income`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_income`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'income_id' in params:
            path_params['incomeId'] = params['income_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/incomes/{incomeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_plan_fee(self, authorization, client_id, fee_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes the association on the fee with a client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_plan_fee(authorization, client_id, fee_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_plan_fee_with_http_info(self, authorization, client_id, fee_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes the association on the fee with a client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'fee_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_plan_fee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `delete_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `delete_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_plan_fee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['feeId'] = params['fee_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/fees/{feeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dpa_policy(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing DPA policy. Only policies that are not associated with client agreements can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dpa_policy(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_dpa_policy_with_http_info(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing DPA policy. Only policies that are not associated with client agreements can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dpa_policy_with_http_info(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'policy_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `delete_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_income_statement(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing income statement.  # noqa: E501

        You can only delete an income statement if it is not matched and none of the items are analysed.  This will delete the income statement and the associated items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_income_statement(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_income_statement_with_http_info(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing income statement.  # noqa: E501

        You can only delete an income statement if it is not matched and none of the items are analysed.  This will delete the income statement and the associated items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_income_statement_with_http_info(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_income_statement`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `delete_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_valuation_batch(self, authorization, batch_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing valuationbatch and undo any related valuations and transactions  # noqa: E501

        Use this endpoint to undo any valuations and transactions.                * Only valuationbatches in `completed` state can be undone.  * This is **NOT** meant as a regular use case, instead should only be used when incorrect data was sent in a previous batch.  * Any such incorrect data must be undone within 3 months of creating the valuationbatch or it will be `expired` and then it can no longer be undone.  * If you need to undo the batch, make sure you have spoken to the tenant first so they can take appropriate actions if they have already used the incorrect data when advising a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_valuation_batch(authorization, batch_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: Batch Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_valuation_batch_with_http_info(authorization, batch_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_valuation_batch_with_http_info(authorization, batch_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_valuation_batch_with_http_info(self, authorization, batch_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing valuationbatch and undo any related valuations and transactions  # noqa: E501

        Use this endpoint to undo any valuations and transactions.                * Only valuationbatches in `completed` state can be undone.  * This is **NOT** meant as a regular use case, instead should only be used when incorrect data was sent in a previous batch.  * Any such incorrect data must be undone within 3 months of creating the valuationbatch or it will be `expired` and then it can no longer be undone.  * If you need to undo the batch, make sure you have spoken to the tenant first so they can take appropriate actions if they have already used the incorrect data when advising a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_valuation_batch_with_http_info(authorization, batch_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: Batch Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'batch_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_valuation_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_valuation_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `delete_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_valuation_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchId'] = params['batch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches/{batchId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enqueue_valuation_batch(self, body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs):  # noqa: E501
        """Creates a new valuationbatch and enqueues it for importing  # noqa: E501

        Use this endpoint to upload large batches of valuation data.    ### Request Headers  In addition to standard headers like `Authorization` and `x-api-key` there are some additional `headers` required for bulk valuation.  Please see **Request Headers** section below for details.    ### Request Body  * Header must be provided in the first line separated with `single tab` and must be as below.  `PolicyNumber    PortalReference CodeType    Code    Name    Units   UnitsDate   UnitPrice   CurrencyCode`  * Data must be of the product provider  and/or of any its linked product providers.  * Maximum size supported per batch is 10 MB.  * Data can be split in multiple batches, but ensure single policy's holdings are NOT split between batches.  * Any duplicate holdings for a single policy must be merged.  * Unit price can be omitted if the fund can be matched to a feed fund or equity or an existing manual fund.    #### Details of schema    | Field Name     | Type  |Description |  |:-----------------|:-------------------|:---------|  | PolicyNumber    | string(255) | **Required**.  Unique number to identify the plan |  | PortalReference | string(255) | **Optional**.  Any additional provider reference|  | CodeType        | string(15) | **Required**.  Allowed values are ` 'ISIN','SEDOL','CITI','MEX','EPIC','ProviderCode','APIR','TICKER' depending on region.`|  | Code | string(50) | **Required**.|  | Name | string(255) | **Required**.|  | Units | decimal(18,4) | **Required**.|  | UnitsDate | string(10) | **Required**.  Must be in ISO 8601 Date format (` 'YYYY-MM-DD' `) |  | UnitPrice | decimal(18,4) | **Optional**.|  | CurrencyCode | string(3) | **Required**. Must be the three letter ISO 4217 alphabetic code, We also support `GBX` |  ### Example   Note: A full list of regional URL's are available [here](docs/URLs).  ```curl  $YOUR_API_KEY='your Intelliflo API access key'  $YOUR_AUTHENTICATION_TOKEN='your JSON Web Token'  $PRODUCT_PROVIDER_ID='correct product provider id - double check if you are not sure'  curl -X POST \\    https://api.intelliflo.com/v2/valuations/batches \\    -H 'Authorization: $YOUR_AUTHENTICATION_TOKEN' \\    -H 'x-api-key: $YOUR_API_KEY' \\    -H 'Content-Type: text/tab-separated-values' \\    -H 'x-iflo-productProviderId: $PRODUCT_PROVIDER_ID' \\    -d '  PolicyNumber PortalReference CodeType Code Name Units UnitsDate UnitPrice CurrencyCode  isa01  isin IE00BGJWXV08 Metzler Cap 100 2019-02-28 85 GBP  isa01  Epic 0JGD ISHARES GLOBAL 50 2019-02-26 77.00 EUR  isa01  ProviderCode Cash Cash 75 2019-02-26 1 GBX  '  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enqueue_valuation_batch(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppId body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int x_iflo_product_provider_id: Id of the Product Provider  You can list the available product providers using the [ProductProviders API](/apis?tags=productproviders#ListProductproviders) (required)
        :param int tenant_id: (required)
        :param str accept:
        :param bool x_iflo_planmatch_includeportalreference: Determines whether to include the portal reference in matching algorithm.  Default is `false` and plans will be matched only on `PolicyNumber`.  By providing `true` in here plans will be matched on `PolicyNumber`  and `PortalReference`.  You may want to consider this when `PolicyNumber` is not unique to the product provider.
        :param bool x_iflo_planmatch_normalised: Determines whether to sanitize the field values in the matching algorithm.  Default is `false` and will be an exact (but not case sensitive) match on the matching fields.  By providing `true` in here we will remove any spaces and any leading zeroes in IO before matching.  In such case ensure the batch has them already removed in the matching fields.
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enqueue_valuation_batch_with_http_info(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.enqueue_valuation_batch_with_http_info(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs)  # noqa: E501
            return data

    def enqueue_valuation_batch_with_http_info(self, body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs):  # noqa: E501
        """Creates a new valuationbatch and enqueues it for importing  # noqa: E501

        Use this endpoint to upload large batches of valuation data.    ### Request Headers  In addition to standard headers like `Authorization` and `x-api-key` there are some additional `headers` required for bulk valuation.  Please see **Request Headers** section below for details.    ### Request Body  * Header must be provided in the first line separated with `single tab` and must be as below.  `PolicyNumber    PortalReference CodeType    Code    Name    Units   UnitsDate   UnitPrice   CurrencyCode`  * Data must be of the product provider  and/or of any its linked product providers.  * Maximum size supported per batch is 10 MB.  * Data can be split in multiple batches, but ensure single policy's holdings are NOT split between batches.  * Any duplicate holdings for a single policy must be merged.  * Unit price can be omitted if the fund can be matched to a feed fund or equity or an existing manual fund.    #### Details of schema    | Field Name     | Type  |Description |  |:-----------------|:-------------------|:---------|  | PolicyNumber    | string(255) | **Required**.  Unique number to identify the plan |  | PortalReference | string(255) | **Optional**.  Any additional provider reference|  | CodeType        | string(15) | **Required**.  Allowed values are ` 'ISIN','SEDOL','CITI','MEX','EPIC','ProviderCode','APIR','TICKER' depending on region.`|  | Code | string(50) | **Required**.|  | Name | string(255) | **Required**.|  | Units | decimal(18,4) | **Required**.|  | UnitsDate | string(10) | **Required**.  Must be in ISO 8601 Date format (` 'YYYY-MM-DD' `) |  | UnitPrice | decimal(18,4) | **Optional**.|  | CurrencyCode | string(3) | **Required**. Must be the three letter ISO 4217 alphabetic code, We also support `GBX` |  ### Example   Note: A full list of regional URL's are available [here](docs/URLs).  ```curl  $YOUR_API_KEY='your Intelliflo API access key'  $YOUR_AUTHENTICATION_TOKEN='your JSON Web Token'  $PRODUCT_PROVIDER_ID='correct product provider id - double check if you are not sure'  curl -X POST \\    https://api.intelliflo.com/v2/valuations/batches \\    -H 'Authorization: $YOUR_AUTHENTICATION_TOKEN' \\    -H 'x-api-key: $YOUR_API_KEY' \\    -H 'Content-Type: text/tab-separated-values' \\    -H 'x-iflo-productProviderId: $PRODUCT_PROVIDER_ID' \\    -d '  PolicyNumber PortalReference CodeType Code Name Units UnitsDate UnitPrice CurrencyCode  isa01  isin IE00BGJWXV08 Metzler Cap 100 2019-02-28 85 GBP  isa01  Epic 0JGD ISHARES GLOBAL 50 2019-02-26 77.00 EUR  isa01  ProviderCode Cash Cash 75 2019-02-26 1 GBX  '  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enqueue_valuation_batch_with_http_info(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppId body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int x_iflo_product_provider_id: Id of the Product Provider  You can list the available product providers using the [ProductProviders API](/apis?tags=productproviders#ListProductproviders) (required)
        :param int tenant_id: (required)
        :param str accept:
        :param bool x_iflo_planmatch_includeportalreference: Determines whether to include the portal reference in matching algorithm.  Default is `false` and plans will be matched only on `PolicyNumber`.  By providing `true` in here plans will be matched on `PolicyNumber`  and `PortalReference`.  You may want to consider this when `PolicyNumber` is not unique to the product provider.
        :param bool x_iflo_planmatch_normalised: Determines whether to sanitize the field values in the matching algorithm.  Default is `false` and will be an exact (but not case sensitive) match on the matching fields.  By providing `true` in here we will remove any spaces and any leading zeroes in IO before matching.  In such case ensure the batch has them already removed in the matching fields.
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'x_iflo_product_provider_id', 'tenant_id', 'accept', 'x_iflo_planmatch_includeportalreference', 'x_iflo_planmatch_normalised']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enqueue_valuation_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_iflo_product_provider_id' is set
        if ('x_iflo_product_provider_id' not in params or
                params['x_iflo_product_provider_id'] is None):
            raise ValueError("Missing the required parameter `x_iflo_product_provider_id` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `enqueue_valuation_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_planmatch_includeportalreference' in params:
            header_params['x-iflo-planmatch-includeportalreference'] = params['x_iflo_planmatch_includeportalreference']  # noqa: E501
        if 'x_iflo_planmatch_normalised' in params:
            header_params['x-iflo-planmatch-normalised'] = params['x_iflo_planmatch_normalised']  # noqa: E501
        if 'x_iflo_product_provider_id' in params:
            header_params['x-iflo-productProviderId'] = params['x_iflo_product_provider_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/tab-separated-values', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exist_installed_app(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Checks if an installed app exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exist_installed_app(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exist_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.exist_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def exist_installed_app_with_http_info(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Checks if an installed app exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exist_installed_app_with_http_info(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exist_installed_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `exist_installed_app`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `exist_installed_app`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `exist_installed_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_dependant(self, authorization, client_id, dependant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a dependant for a given client and dependant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_dependant(authorization, client_id, dependant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int dependant_id: Dependant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Dependant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_dependant_with_http_info(authorization, client_id, dependant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_dependant_with_http_info(authorization, client_id, dependant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_dependant_with_http_info(self, authorization, client_id, dependant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a dependant for a given client and dependant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_dependant_with_http_info(authorization, client_id, dependant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int dependant_id: Dependant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Dependant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'dependant_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_dependant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_dependant`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_dependant`")  # noqa: E501
        # verify the required parameter 'dependant_id' is set
        if ('dependant_id' not in params or
                params['dependant_id'] is None):
            raise ValueError("Missing the required parameter `dependant_id` when calling `get_client_dependant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_dependant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dependant_id' in params:
            path_params['dependantId'] = params['dependant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dependants/{dependantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dependant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_dpa_policy_agreement(self, agreement_id, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy agreement for a client.  # noqa: E501

        Returns a single DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * DPA policy agreement has a maximum of 5 statements with Yes/No responses and an agreement date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_dpa_policy_agreement(agreement_id, authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agreement_id: DPA Policy Agreement identifier. The special value 'current' can be used to indicate the latest agreement. (required)
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_dpa_policy_agreement_with_http_info(agreement_id, authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_dpa_policy_agreement_with_http_info(agreement_id, authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_dpa_policy_agreement_with_http_info(self, agreement_id, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy agreement for a client.  # noqa: E501

        Returns a single DPA policy agreement for a client. A DPA policy agreement is a client's response to a firm's DPA policy.                **Notes:**  * DPA policy agreement has a maximum of 5 statements with Yes/No responses and an agreement date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_dpa_policy_agreement_with_http_info(agreement_id, authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agreement_id: DPA Policy Agreement identifier. The special value 'current' can be used to indicate the latest agreement. (required)
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicyAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['agreement_id', 'authorization', 'client_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_dpa_policy_agreement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'agreement_id' is set
        if ('agreement_id' not in params or
                params['agreement_id'] is None):
            raise ValueError("Missing the required parameter `agreement_id` when calling `get_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_dpa_policy_agreement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_dpa_policy_agreement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'agreement_id' in params:
            path_params['agreementId'] = params['agreement_id']  # noqa: E501
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dpa_agreements/{agreementId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_expenditure(self, authorization, client_id, expenditure_id, x_api_key, **kwargs):  # noqa: E501
        """Retrieves a client's expenditure record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_expenditure(authorization, client_id, expenditure_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int expenditure_id: The id of the expenditure record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Expenditure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_expenditure_with_http_info(authorization, client_id, expenditure_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_expenditure_with_http_info(authorization, client_id, expenditure_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_expenditure_with_http_info(self, authorization, client_id, expenditure_id, x_api_key, **kwargs):  # noqa: E501
        """Retrieves a client's expenditure record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_expenditure_with_http_info(authorization, client_id, expenditure_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int expenditure_id: The id of the expenditure record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Expenditure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'expenditure_id', 'x_api_key', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_expenditure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_expenditure`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_expenditure`")  # noqa: E501
        # verify the required parameter 'expenditure_id' is set
        if ('expenditure_id' not in params or
                params['expenditure_id'] is None):
            raise ValueError("Missing the required parameter `expenditure_id` when calling `get_client_expenditure`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_expenditure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'expenditure_id' in params:
            path_params['expenditureId'] = params['expenditure_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/expenditures/{expenditureId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Expenditure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_fee(self, authorization, client_id, fee_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fee for a given client and fee.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_fee(authorization, client_id, fee_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_fee_with_http_info(authorization, client_id, fee_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_fee_with_http_info(authorization, client_id, fee_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_fee_with_http_info(self, authorization, client_id, fee_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fee for a given client and fee.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_fee_with_http_info(authorization, client_id, fee_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'fee_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_fee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_fee`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_fee`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `get_client_fee`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_fee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['feeId'] = params['fee_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/fees/{feeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_income(self, authorization, client_id, income_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the income for a given client and income.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_income(authorization, client_id, income_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int income_id: The identifier for the income record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Income
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_income_with_http_info(authorization, client_id, income_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_income_with_http_info(authorization, client_id, income_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_income_with_http_info(self, authorization, client_id, income_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the income for a given client and income.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_income_with_http_info(authorization, client_id, income_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int income_id: The identifier for the income record. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Income
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'income_id', 'x_api_key', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_income" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_income`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_income`")  # noqa: E501
        # verify the required parameter 'income_id' is set
        if ('income_id' not in params or
                params['income_id'] is None):
            raise ValueError("Missing the required parameter `income_id` when calling `get_client_income`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_income`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'income_id' in params:
            path_params['incomeId'] = params['income_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/incomes/{incomeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Income',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_marketing_preferences(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns client's current marketing preferences.  # noqa: E501

        Use this endpoint to return  a client's marketing preferences broken down by medium where appropriate.  A successful response (200) will return client's  marketing preferences document.  If a client has not yet provided their preferences and/or consent, the returned preferences will be defaulted to a suitable privacy configuration.  The returned configuration should be adhered to regardless of whether consent has been given yet or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_marketing_preferences(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ClientMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_marketing_preferences_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_marketing_preferences_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_marketing_preferences_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns client's current marketing preferences.  # noqa: E501

        Use this endpoint to return  a client's marketing preferences broken down by medium where appropriate.  A successful response (200) will return client's  marketing preferences document.  If a client has not yet provided their preferences and/or consent, the returned preferences will be defaulted to a suitable privacy configuration.  The returned configuration should be adhered to regardless of whether consent has been given yet or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_marketing_preferences_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ClientMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_marketing_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_marketing_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/marketing_preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientMarketingPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_plan_fee(self, authorization, client_id, fee_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fee for a given plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_fee(authorization, client_id, fee_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_plan_fee_with_http_info(self, authorization, client_id, fee_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a fee for a given plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_fee_with_http_info(authorization, client_id, fee_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'fee_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_plan_fee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `get_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_client_plan_fee`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_plan_fee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['feeId'] = params['fee_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/fees/{feeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_plan_transaction(self, authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs):  # noqa: E501
        """Gets a single transaction by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_transaction(authorization, client_id, plan_id, transaction_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the special value \\\"me\\\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id - the id of the plan. (required)
        :param int transaction_id: Transaction Id - the id of the transaction. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_plan_transaction_with_http_info(authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_plan_transaction_with_http_info(authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_plan_transaction_with_http_info(self, authorization, client_id, plan_id, transaction_id, x_api_key, **kwargs):  # noqa: E501
        """Gets a single transaction by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_transaction_with_http_info(authorization, client_id, plan_id, transaction_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the special value \\\"me\\\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id - the id of the plan. (required)
        :param int transaction_id: Transaction Id - the id of the transaction. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'transaction_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_plan_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `get_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_plan_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/transactions/{transactionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_quote(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote or illustration for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_quote_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_quote_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_quote_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote or illustration for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_quote`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_quote`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `get_client_quote`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_quote_result(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote result.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote result or illustration result for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_quote_result_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_quote_result_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_quote_result_with_http_info(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a client quote result.  # noqa: E501

        This endpoint allows an API user to retrieve a specific quote result or illustration result for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: QuoteResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'quote_result_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_quote_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `get_client_quote_result`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_quote_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_quote_result_product_benefits(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """This endpoint allows an API user to retrieve product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result_product_benefits(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_quote_result_product_benefits_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_quote_result_product_benefits_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_quote_result_product_benefits_with_http_info(self, authorization, client_id, quote_id, quote_result_id, x_api_key, **kwargs):  # noqa: E501
        """This endpoint allows an API user to retrieve product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_quote_result_product_benefits_with_http_info(authorization, client_id, quote_id, quote_result_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'quote_result_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_quote_result_product_benefits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `get_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_quote_result_product_benefits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}/benefits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductBenefitFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_dpa_policy(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns the current default DPA policy (see notes on party type above).  # noqa: E501

        To retrieve the current DPA policy for a specific party type rather than the default DPA policy, specify the party type in a preference header. The current DPA policy is most recent active policy.                To specify a preference header add a header named 'prefer'  header to one of the following options:   * partytype=Corporate   * partytype=Persons   * partytype=Trust  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_dpa_policy(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate the party type associated with the DPA for the request. Options: PartyType=Person
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_dpa_policy_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_dpa_policy_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_current_dpa_policy_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns the current default DPA policy (see notes on party type above).  # noqa: E501

        To retrieve the current DPA policy for a specific party type rather than the default DPA policy, specify the party type in a preference header. The current DPA policy is most recent active policy.                To specify a preference header add a header named 'prefer'  header to one of the following options:   * partytype=Corporate   * partytype=Persons   * partytype=Trust  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_dpa_policy_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate the party type associated with the DPA for the request. Options: PartyType=Person
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_current_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_current_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dpa_policy(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy.  # noqa: E501

        To retrieve the active DPA policy use  the /dpa_policies/current'endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dpa_policy(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: The DPA policy identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dpa_policy_with_http_info(authorization, policy_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_dpa_policy_with_http_info(self, authorization, policy_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single DPA policy.  # noqa: E501

        To retrieve the active DPA policy use  the /dpa_policies/current'endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dpa_policy_with_http_info(authorization, policy_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int policy_id: The DPA policy identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'policy_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_income_statement(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns an income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_income_statement_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_income_statement_with_http_info(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns an income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement_with_http_info(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_income_statement`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `get_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_income_statement_item(self, authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a given item for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement_item(authorization, income_statement_id, income_statement_item_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_income_statement_item_with_http_info(authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_income_statement_item_with_http_info(authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_income_statement_item_with_http_info(self, authorization, income_statement_id, income_statement_item_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a given item for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_income_statement_item_with_http_info(authorization, income_statement_id, income_statement_item_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'income_statement_item_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_income_statement_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `get_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_item_id' is set
        if ('income_statement_item_id' not in params or
                params['income_statement_item_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_item_id` when calling `get_income_statement_item`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_income_statement_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501
        if 'income_statement_item_id' in params:
            path_params['incomeStatementItemId'] = params['income_statement_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items/{incomeStatementItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_app(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns an installed app  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: App
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_installed_app_with_http_info(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns an installed app  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_with_http_info(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: App
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_installed_app`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_installed_app`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_installed_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='App',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_app_group_settings(self, app_id, authorization, group_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with this will return the specific group settings for the group. This endpoint will not traverse the hierarchy to find the first instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_group_settings(app_id, authorization, group_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str group_id: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_app_group_settings_with_http_info(app_id, authorization, group_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_app_group_settings_with_http_info(app_id, authorization, group_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_installed_app_group_settings_with_http_info(self, app_id, authorization, group_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with this will return the specific group settings for the group. This endpoint will not traverse the hierarchy to find the first instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_group_settings_with_http_info(app_id, authorization, group_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str group_id: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'group_id', 'tenant_id', 'x_api_key', 'accept', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_app_group_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_installed_app_group_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/group_settings/{groupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_app_user_settings(self, app_id, authorization, tenant_id, user_id, x_api_key, **kwargs):  # noqa: E501
        """Returns user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will allow the retrieval of the current users settings only. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return the user settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_user_settings(app_id, authorization, tenant_id, user_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str user_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, user_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, user_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_installed_app_user_settings_with_http_info(self, app_id, authorization, tenant_id, user_id, x_api_key, **kwargs):  # noqa: E501
        """Returns user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will allow the retrieval of the current users settings only. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return the user settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, user_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str user_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'tenant_id', 'user_id', 'x_api_key', 'accept', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_app_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_installed_app_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/user_settings/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lead_marketing_preferences(self, authorization, lead_id, x_api_key, **kwargs):  # noqa: E501
        """Returns lead's current marketing preferences.  # noqa: E501

        Use this endpoint to return  a lead's marketing preferences broken down by medium where appropriate.  A successful response (200) will return lead's  marketing preferences document.  If a lead has not yet provided their preferences and/or consent, the returned preferences will be defaulted to a suitable privacy configuration.  The returned configuration should be adhered to regardless of whether consent has been given yet or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lead_marketing_preferences(authorization, lead_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: LeadMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lead_marketing_preferences_with_http_info(authorization, lead_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lead_marketing_preferences_with_http_info(authorization, lead_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_lead_marketing_preferences_with_http_info(self, authorization, lead_id, x_api_key, **kwargs):  # noqa: E501
        """Returns lead's current marketing preferences.  # noqa: E501

        Use this endpoint to return  a lead's marketing preferences broken down by medium where appropriate.  A successful response (200) will return lead's  marketing preferences document.  If a lead has not yet provided their preferences and/or consent, the returned preferences will be defaulted to a suitable privacy configuration.  The returned configuration should be adhered to regardless of whether consent has been given yet or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lead_marketing_preferences_with_http_info(authorization, lead_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: LeadMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lead_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lead_marketing_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_lead_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `get_lead_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_lead_marketing_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/marketing_preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeadMarketingPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lifecycle(self, authorization, lifecycle_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lifecycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lifecycle(authorization, lifecycle_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lifecycle_id: Lifecycle identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Lifecycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lifecycle_with_http_info(authorization, lifecycle_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lifecycle_with_http_info(authorization, lifecycle_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_lifecycle_with_http_info(self, authorization, lifecycle_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lifecycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lifecycle_with_http_info(authorization, lifecycle_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lifecycle_id: Lifecycle identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Lifecycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lifecycle_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lifecycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_lifecycle`")  # noqa: E501
        # verify the required parameter 'lifecycle_id' is set
        if ('lifecycle_id' not in params or
                params['lifecycle_id'] is None):
            raise ValueError("Missing the required parameter `lifecycle_id` when calling `get_lifecycle`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_lifecycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lifecycle_id' in params:
            path_params['lifecycleId'] = params['lifecycle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/lifecycles/{lifecycleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lifecycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provider_model(self, app_id, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a provider model.  # noqa: E501

        Gives model providers the ability to view and manage their models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_model(app_id, authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int model_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provider_model_with_http_info(app_id, authorization, model_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_model_with_http_info(app_id, authorization, model_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_provider_model_with_http_info(self, app_id, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a provider model.  # noqa: E501

        Gives model providers the ability to view and manage their models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_model_with_http_info(app_id, authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int model_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'model_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_provider_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_provider_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_provider_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_provider_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{appId}/models/{modelId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provider_models(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of provider models.  # noqa: E501

        This will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_models(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __isAccepted__ ( in, eq, ne )   * __appId__ (in, eq, ne, startswith )   * __code__ ( in, eq, ne, startswith )   * __name__ ( in, eq, ne, startswith )   * __atr.code__ ( in, eq, startswith )  Usage example: `filter=appId eq 'a13f242' and code startswith 'abc'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __isAccepted__  * __code__  * __name__    Usage example: `orderby=name asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: ProviderModelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provider_models_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_models_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_provider_models_with_http_info(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of provider models.  # noqa: E501

        This will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_models_with_http_info(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __isAccepted__ ( in, eq, ne )   * __appId__ (in, eq, ne, startswith )   * __code__ ( in, eq, ne, startswith )   * __name__ ( in, eq, ne, startswith )   * __atr.code__ ( in, eq, startswith )  Usage example: `filter=appId eq 'a13f242' and code startswith 'abc'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __isAccepted__  * __code__  * __name__    Usage example: `orderby=name asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: ProviderModelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_provider_models`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_provider_models`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_provider_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{appId}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderModelCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tenant(self, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Retrieves the tenant resource specified   # noqa: E501

        Retrieves the tenant resource specified. Tenants are typically resources that represent a firm, legal entity or network.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant(authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int tenant_id: Tenant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tenant_with_http_info(authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tenant_with_http_info(authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_tenant_with_http_info(self, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Retrieves the tenant resource specified   # noqa: E501

        Retrieves the tenant resource specified. Tenants are typically resources that represent a firm, legal entity or network.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tenant_with_http_info(authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int tenant_id: Tenant identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Tenant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'tenant_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tenant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_tenant`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_tenant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/tenants/{tenantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tenant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_valuation_batch(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single valuationbatch  # noqa: E501

        Use this endpoint to view the status of a batch.                Batch can have one of the following status  * Queued  * InProgress  * Failed  * Completed  * DeleteInProgress  * DeleteFailed  * Expired (When a batch is older than 3 months batch data will be removed and the batch state will be set to `Expired` by system)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_valuation_batch(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_valuation_batch_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_valuation_batch_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_valuation_batch_with_http_info(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single valuationbatch  # noqa: E501

        Use this endpoint to view the status of a batch.                Batch can have one of the following status  * Queued  * InProgress  * Failed  * Completed  * DeleteInProgress  * DeleteFailed  * Expired (When a batch is older than 3 months batch data will be removed and the batch state will be set to `Expired` by system)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_valuation_batch_with_http_info(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'batch_id', 'tenant_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_valuation_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_valuation_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `get_valuation_batch`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_valuation_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchId'] = params['batch_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches/{batchId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_dependants(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of dependants for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_dependants(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: The number of records to retrieve (default 100, max 500)
        :return: DependantCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_dependants_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_dependants_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_dependants_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of dependants for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_dependants_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: The number of records to retrieve (default 100, max 500)
        :return: DependantCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_dependants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_dependants`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_dependants`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_dependants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dependants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DependantCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_dpa_policy_agreements(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client's DPA policy agreements.  # noqa: E501

        Returns a list of client's DPA policy agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_dpa_policy_agreements(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int top: Number of records to retrieve (default '25', max '100').
        :return: DPAPolicyAgreementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_dpa_policy_agreements_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_dpa_policy_agreements_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_dpa_policy_agreements_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client's DPA policy agreements.  # noqa: E501

        Returns a list of client's DPA policy agreements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_dpa_policy_agreements_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client that agreed to the DPA policy. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int top: Number of records to retrieve (default '25', max '100').
        :return: DPAPolicyAgreementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_dpa_policy_agreements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_dpa_policy_agreements`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_dpa_policy_agreements`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_dpa_policy_agreements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dpa_agreements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyAgreementCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_expenditures(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of expenditure records for a client. The returned list may be filtered.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_expenditures(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The returned list of questions can be filtered using one or more of the following supported fields and operators:                * `id` (`in`)  * `frequency` (`in`, `eq`, `ne`)                Usage examples:  * `filter=id in (1,2)`  * `filter=frequency eq 'Monthly' or frequency in ('Weekly','Monthly')`.                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :param int skip: Optional. Number of records to skip. Must be greater than or equal to zero. Defaults to zero if not specified.
        :param int top: Optional. The number of records to retrieve (max 500). Defaults to 100 if not specified.
        :return: ExpenditureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_expenditures_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_expenditures_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_expenditures_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of expenditure records for a client. The returned list may be filtered.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_expenditures_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The returned list of questions can be filtered using one or more of the following supported fields and operators:                * `id` (`in`)  * `frequency` (`in`, `eq`, `ne`)                Usage examples:  * `filter=id in (1,2)`  * `filter=frequency eq 'Monthly' or frequency in ('Weekly','Monthly')`.                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :param int skip: Optional. Number of records to skip. Must be greater than or equal to zero. Defaults to zero if not specified.
        :param int top: Optional. The number of records to retrieve (max 500). Defaults to 100 if not specified.
        :return: ExpenditureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'prefer', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_expenditures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_expenditures`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_expenditures`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_expenditures`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/expenditures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpenditureCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_fees(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of fees for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_fees(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`in`, `eq`, `ne`, `gt`, `ge`, `lt`, `le`)    `status` (`in`, `eq`, `ne`, `startswith`)    `feeType.Name` (`in`, `eq`, `ne`, `startswith`)    `feeType.Category` (`in`, `eq`, `ne`)    `feeChargingType.Name` (`eq`)    `clients.id` (`in`)  See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant Identifier.
        :param int top: The number of records to retrieve (default 100, max 500).
        :return: FeeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_fees_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_fees_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_fees_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of fees for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_fees_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`in`, `eq`, `ne`, `gt`, `ge`, `lt`, `le`)    `status` (`in`, `eq`, `ne`, `startswith`)    `feeType.Name` (`in`, `eq`, `ne`, `startswith`)    `feeType.Category` (`in`, `eq`, `ne`)    `feeChargingType.Name` (`eq`)    `clients.id` (`in`)  See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant Identifier.
        :param int top: The number of records to retrieve (default 100, max 500).
        :return: FeeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_fees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_fees`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_fees`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_fees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/fees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_incomes(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of incomes for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_incomes(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The returned list of questions can be filtered using one or more of the following supported fields and operators:                * `id` (`in`)  * `employment.id` (`in`, `eq`)  * `frequency` (`in`, `eq`, `ne`)                Usage examples:  * `filter=id in (1,2)`  * `filter=employment.id eq 22 and id in (1,2)`  * `filter=frequency eq 'Single' or frequency in ('Single','Monthly')`.                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :param int skip: Optional. Number of records to skip. Must be greater than or equal to zero. Defaults to zero if not specified.
        :param int top: Optional. The number of records to retrieve (max 500). Defaults to 100 if not specified.
        :return: IncomeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_incomes_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_incomes_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_incomes_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of incomes for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_incomes_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The returned list of questions can be filtered using one or more of the following supported fields and operators:                * `id` (`in`)  * `employment.id` (`in`, `eq`)  * `frequency` (`in`, `eq`, `ne`)                Usage examples:  * `filter=id in (1,2)`  * `filter=employment.id eq 22 and id in (1,2)`  * `filter=frequency eq 'Single' or frequency in ('Single','Monthly')`.                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :param int skip: Optional. Number of records to skip. Must be greater than or equal to zero. Defaults to zero if not specified.
        :param int top: Optional. The number of records to retrieve (max 500). Defaults to 100 if not specified.
        :return: IncomeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'prefer', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_incomes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_incomes`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_incomes`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_incomes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/incomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plan_contributions(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns list of contributions for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_contributions(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The results can be filtered using one or more of the supported fields and operators.               For details on how to filter and sort data (using the query language) please see [QueryLang](docs/ApiQueryLang).                             The supported fields and operators are:                             * `appliesTo`(`eq`)               * `contributionType` (`eq`, `ne`, `in`)               * `id` (`eq`, `in`)               * `isCurrent` (`eq`)               * `startsOn` (`eq`, `gt`, `lt`,`ge`, `le`)               * `stopsOn` (`eq`, `ne`, `gt`, `lt`,`ge`, `le`)                             Note. By default contributions without a stopson date are returned when using the stopson filter. To filter these records the `eq` and `ne` operators accept null as the parameter                     and can be used to filter for contributions where the stopson date has not been set.                     e.g. filter=stopsOn eq null.
        :param str order_by: The results can be ordered by the following fields:                             * `Id`               * `contributionType`               * `isCurrent`               * `startsOn`               * `stopsOn`                             By default the results are ordered by Id.
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant Identifier.
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: ContributionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plan_contributions_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plan_contributions_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plan_contributions_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns list of contributions for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_contributions_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The results can be filtered using one or more of the supported fields and operators.               For details on how to filter and sort data (using the query language) please see [QueryLang](docs/ApiQueryLang).                             The supported fields and operators are:                             * `appliesTo`(`eq`)               * `contributionType` (`eq`, `ne`, `in`)               * `id` (`eq`, `in`)               * `isCurrent` (`eq`)               * `startsOn` (`eq`, `gt`, `lt`,`ge`, `le`)               * `stopsOn` (`eq`, `ne`, `gt`, `lt`,`ge`, `le`)                             Note. By default contributions without a stopson date are returned when using the stopson filter. To filter these records the `eq` and `ne` operators accept null as the parameter                     and can be used to filter for contributions where the stopson date has not been set.                     e.g. filter=stopsOn eq null.
        :param str order_by: The results can be ordered by the following fields:                             * `Id`               * `contributionType`               * `isCurrent`               * `startsOn`               * `stopsOn`                             By default the results are ordered by Id.
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant Identifier.
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: ContributionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plan_contributions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plan_contributions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plan_contributions`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `list_client_plan_contributions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plan_contributions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/contributions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContributionCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plan_fees(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of fees for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_fees(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant identifier.
        :param int top: The number of records to retrieve (default 25, max 100).
        :return: FeeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plan_fees_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plan_fees_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plan_fees_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of fees for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_fees_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param int plan_id: Plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant identifier.
        :param int top: The number of records to retrieve (default 25, max 100).
        :return: FeeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plan_fees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plan_fees`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plan_fees`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `list_client_plan_fees`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plan_fees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/fees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plan_transactions(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of transactions for a client plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_transactions(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the id of the client. (required)
        :param int plan_id: Plan Id - the id of the plan. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:  * `id` (eq,ne,gt,ge,lt,le,in)  * `source` (eq)  * `debitCreditIndicator` (eq)  * `type` (eq, in)  * `transactionDate` (le,lt,gt,ge,eq)  * `category1` (eq,ne)  * `category2` (eq,ne)  * `description` (eq,startswith)  * `gross` (eq,ne,gt,ge,lt,le,in)  * `unitPrice` (eq,ne,gt,ge,lt,le,in)  * `externalReference` (eq,ne,startswith,in)
        :param str order_by: By default the list will be ordered desc by Id.  However it can be changed using one or more supported fields below.  Supported fields:  * `transactionDate`  * `category1`  * `category2`  * `description`  * `gross`                Supported directions asc, desc.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant Id
        :param int top: The number of records to retrieve (default 100, max 500).
        :return: TransactionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plan_transactions_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plan_transactions_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plan_transactions_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of transactions for a client plan.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_transactions_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the id of the client. (required)
        :param int plan_id: Plan Id - the id of the plan. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:  * `id` (eq,ne,gt,ge,lt,le,in)  * `source` (eq)  * `debitCreditIndicator` (eq)  * `type` (eq, in)  * `transactionDate` (le,lt,gt,ge,eq)  * `category1` (eq,ne)  * `category2` (eq,ne)  * `description` (eq,startswith)  * `gross` (eq,ne,gt,ge,lt,le,in)  * `unitPrice` (eq,ne,gt,ge,lt,le,in)  * `externalReference` (eq,ne,startswith,in)
        :param str order_by: By default the list will be ordered desc by Id.  However it can be changed using one or more supported fields below.  Supported fields:  * `transactionDate`  * `category1`  * `category2`  * `description`  * `gross`                Supported directions asc, desc.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant Id
        :param int top: The number of records to retrieve (default 100, max 500).
        :return: TransactionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plan_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plan_transactions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plan_transactions`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `list_client_plan_transactions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plan_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plan_withdrawals(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of withdrawal for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_withdrawals(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: WithdrawalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plan_withdrawals_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plan_withdrawals_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plan_withdrawals_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of withdrawal for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plan_withdrawals_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: WithdrawalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plan_withdrawals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plan_withdrawals`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plan_withdrawals`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `list_client_plan_withdrawals`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plan_withdrawals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/withdrawals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WithdrawalCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_quote_results(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client quote results.  # noqa: E501

        This endpoint provides the ability to identify all of client's quote and illustration results.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quote_results(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`eq`, `ne`, `in`, `gt`, `ge`, `lt`, `le`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuoteResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_quote_results_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_quote_results_with_http_info(authorization, client_id, quote_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_quote_results_with_http_info(self, authorization, client_id, quote_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of client quote results.  # noqa: E501

        This endpoint provides the ability to identify all of client's quote and illustration results.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quote_results_with_http_info(authorization, client_id, quote_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`eq`, `ne`, `in`, `gt`, `ge`, `lt`, `le`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuoteResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'quote_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_quote_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_quote_results`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_quote_results`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `list_client_quote_results`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_quote_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResultCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_quotes(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of quotes.  # noqa: E501

        This endpoint allows an API user to identify all of a client's quotes and illustrations.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quotes(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`in`),  * `appName` (`startswith`),  * `customReference` (`startswith`),  * `reference` (`startswith`),  * `serviceCase.id` (`eq`, `in`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`),  * `appName` (`asc` or `desc`),  * `customReference` (`asc` or `desc`),  * `reference` (`asc` or `desc`),  * `status` (`asc` or `desc`),  * `productGroup` (`asc` or `desc`),  * `createdAt` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuotesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_quotes_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_quotes_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_quotes_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of quotes.  # noqa: E501

        This endpoint allows an API user to identify all of a client's quotes and illustrations.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_quotes_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `id` (`in`),  * `appName` (`startswith`),  * `customReference` (`startswith`),  * `reference` (`startswith`),  * `serviceCase.id` (`eq`, `in`)                See[QueryLang] (docs/ApiQueryLang) for further usage details.
        :param str orderby: Supported Sort Properties:  * `id` (`asc` or `desc`),  * `appName` (`asc` or `desc`),  * `customReference` (`asc` or `desc`),  * `reference` (`asc` or `desc`),  * `status` (`asc` or `desc`),  * `productGroup` (`asc` or `desc`),  * `createdAt` (`asc` or `desc`)                Default: `id` `desc`.
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve (default: 25, max: 500).
        :return: QuotesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_quotes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_quotes`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_quotes`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_quotes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotesCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_transactions(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of transactions for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_transactions(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the id of the client. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:  * `id` (eq,ne,gt,ge,lt,le,in)  * `source` (eq)  * `plan.id` (eq,in)  * `debitCreditIndicator` (eq)  * `type` (eq, in)  * `transactionDate` (le,lt,gt,ge,eq)  * `category1` (eq,ne)  * `category2` (eq,ne)  * `description` (eq,startswith)  * `gross` (eq,ne,gt,ge,lt,le,in)  * `unitPrice` (eq,ne,gt,ge,lt,le,in)  * `externalReference` (eq,ne,startswith,in)
        :param str order_by: By default the list will be ordered desc by Id.  However it can be changed using one or more supported fields below.  Supported fields:  * `transactionDate`  * `category1`  * `category2`  * `description`  * `gross`                Supported directions asc, desc.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant Id
        :param int top: The number of records to retrieve (default 100, max 500).
        :return: TransactionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_transactions_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_transactions_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_transactions_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of transactions for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_transactions_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - the id of the client. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:  * `id` (eq,ne,gt,ge,lt,le,in)  * `source` (eq)  * `plan.id` (eq,in)  * `debitCreditIndicator` (eq)  * `type` (eq, in)  * `transactionDate` (le,lt,gt,ge,eq)  * `category1` (eq,ne)  * `category2` (eq,ne)  * `description` (eq,startswith)  * `gross` (eq,ne,gt,ge,lt,le,in)  * `unitPrice` (eq,ne,gt,ge,lt,le,in)  * `externalReference` (eq,ne,startswith,in)
        :param str order_by: By default the list will be ordered desc by Id.  However it can be changed using one or more supported fields below.  Supported fields:  * `transactionDate`  * `category1`  * `category2`  * `description`  * `gross`                Supported directions asc, desc.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: Tenant Id
        :param int top: The number of records to retrieve (default 100, max 500).
        :return: TransactionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_transactions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_transactions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dpa_policies(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of DPA policies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dpa_policies(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:  *  `name (in)`  *  `partyType (eq)`                Valid values for party type are 'Person', 'Corporate', 'Trust' or 'Default'                See [QueryLang](docs/ApiQueryLang) for further details of how to use the filtering and sorting parameters.
        :param str orderby: Supported sorting options:  *  `name`  *  `partyType'  *  `createdat
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve.
        :return: DPAPolicyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_dpa_policies_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_dpa_policies_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_dpa_policies_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of DPA policies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dpa_policies_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:  *  `name (in)`  *  `partyType (eq)`                Valid values for party type are 'Person', 'Corporate', 'Trust' or 'Default'                See [QueryLang](docs/ApiQueryLang) for further details of how to use the filtering and sorting parameters.
        :param str orderby: Supported sorting options:  *  `name`  *  `partyType'  *  `createdat
        :param int skip: The number of records to skip. Must be greater than or equal to zero.
        :param int top: The number of records to retrieve.
        :return: DPAPolicyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dpa_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_dpa_policies`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_dpa_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_income_statement_items(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of items for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statement_items(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __type__ ( in, eq )   * __isAnalysed__ ( eq, ne )    Usage example: `isAnalysed eq false and type in ('OngFee', 'Lvl')`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__   (asc,desc)  * __type__ (asc,desc)  * __isAnalysed__ (asc,desc)    Usage example: `orderby=type asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_income_statement_items_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_income_statement_items_with_http_info(authorization, income_statement_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_income_statement_items_with_http_info(self, authorization, income_statement_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of items for a given income statement.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statement_items_with_http_info(authorization, income_statement_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __type__ ( in, eq )   * __isAnalysed__ ( eq, ne )    Usage example: `isAnalysed eq false and type in ('OngFee', 'Lvl')`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__   (asc,desc)  * __type__ (asc,desc)  * __isAnalysed__ (asc,desc)    Usage example: `orderby=type asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementItemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'income_statement_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_income_statement_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_income_statement_items`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `list_income_statement_items`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_income_statement_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementItemCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_income_statements(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of income statements.  # noqa: E501

        If called with  [Tenant Client Credentials Flow](/docs/Authentication#TCCFlow) and firm_data.incomestatement then it will return income statements for the authenticated client(app) and tenant.  If you add the additional app_data scope then you will receive all your apps data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statements(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __date__ ( eq, ne, gt, ge, lt, le )   * __isMatched__ ( eq, ne )   * __reference__ ( eq, in, startswith )    Usage example: `isMatched eq true and date gt '2019-01-01T00:00:00.000'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __date__  * __reference__    Usage example: `orderby=date asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_income_statements_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_income_statements_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_income_statements_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of income statements.  # noqa: E501

        If called with  [Tenant Client Credentials Flow](/docs/Authentication#TCCFlow) and firm_data.incomestatement then it will return income statements for the authenticated client(app) and tenant.  If you add the additional app_data scope then you will receive all your apps data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_income_statements_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __date__ ( eq, ne, gt, ge, lt, le )   * __isMatched__ ( eq, ne )   * __reference__ ( eq, in, startswith )    Usage example: `isMatched eq true and date gt '2019-01-01T00:00:00.000'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __date__  * __reference__    Usage example: `orderby=date asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: IncomeStatementCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_income_statements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_income_statements`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_income_statements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_installed_app_group_settings(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of group settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will return the first instance of group settings in the upward lineage of the tenants group hierarchy. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all group settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_group_settings(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_installed_app_group_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_installed_app_group_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_installed_app_group_settings_with_http_info(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of group settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will return the first instance of group settings in the upward lineage of the tenants group hierarchy. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all group settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_group_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'tenant_id', 'x_api_key', 'accept', 'skip', 'top', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_installed_app_group_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `list_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_installed_app_group_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/group_settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstalledAppGroupSettingCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_installed_app_user_settings(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lists of user settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) this will return the current users settings only. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all user settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_user_settings(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_installed_app_user_settings_with_http_info(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lists of user settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) this will return the current users settings only. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all user settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'tenant_id', 'x_api_key', 'accept', 'skip', 'top', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_installed_app_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `list_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_installed_app_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/user_settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstalledAppGroupSettingCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_installed_apps(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of installed apps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_apps(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int tenant_id:
        :param int top:
        :param int user_id:
        :return: AppCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_installed_apps_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_installed_apps_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_installed_apps_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of installed apps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_apps_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int tenant_id:
        :param int top:
        :param int user_id:
        :return: AppCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'skip', 'tenant_id', 'top', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_installed_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_installed_apps`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_installed_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_lifecycles(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of lifecycles.  # noqa: E501

        This endpoint provides the ability to identify the plan lifecycles that have been set for a tenant.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycles(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3),              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre%'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_lifecycles_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_lifecycles_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_lifecycles_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of lifecycles.  # noqa: E501

        This endpoint provides the ability to identify the plan lifecycles that have been set for a tenant.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycles_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3),              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre%'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_lifecycles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_lifecycles`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_lifecycles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/lifecycles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LifecycleDocumentCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_plantype_lifecycles(self, authorization, name, x_api_key, **kwargs):  # noqa: E501
        """Retrieves a list of lifecycles associated with the specified planType  # noqa: E501

        A lifecycle represents the many stages that a plan can pass through.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plantype_lifecycles(authorization, name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str name: Plan type name (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3)              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_plantype_lifecycles_with_http_info(authorization, name, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_plantype_lifecycles_with_http_info(authorization, name, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_plantype_lifecycles_with_http_info(self, authorization, name, x_api_key, **kwargs):  # noqa: E501
        """Retrieves a list of lifecycles associated with the specified planType  # noqa: E501

        A lifecycle represents the many stages that a plan can pass through.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plantype_lifecycles_with_http_info(authorization, name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str name: Plan type name (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3)              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'name', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_plantype_lifecycles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_plantype_lifecycles`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `list_plantype_lifecycles`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_plantype_lifecycles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/plantypes/{name}/lifecycles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LifecycleDocumentCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_valuation_batch_results(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the results for a single valuationbatch.  # noqa: E501

        Use this endpoint to view the results of a valuationbatch  * Results will not be available after the valuationbatch is `expired`  * It will have items grouped in `holdings` by `policyNumber` and `portalReference`  * It will have a `matched_plan` indicating if the item has matched to a plan or not  * when `matched_plan = true`      * It will have a `matched_plan_href` to navigate to the plan  * when `matched_plan = true and is_imported = true`      * Holdings will have a `matched_holding_href` to navigate to the holding  * Note that if no fund price is supplied and the fund cannot be matched to a feed fund or equity    then the valuation for plan will not be imported  Use GET valuations/batches to get the batch id and to see the status of the batch.  You can use the optional header x-iflo-exclude-holdings=true to exclude the holdings detail from the response.  This is advisable when fetching the results of large batches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batch_results(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `PolicyNumber` ( `in`, `eq`, `ne`, `startswith` ),              `PortalReference` ( `in`, `eq`, `ne`, `startswith` ),              `Matched_Plan` ( `eq`, `ne` )              `Is_Imported` ( `eq`, `ne` )              Usage example: `filter=matched_plan eq false`
        :param str orderby: By default the results will be ordered asc by PolicyNumber.              However it can be changed using one or more supported fields below.              `PolicyNumber`, `PortalReference`, `matched_plan`              Usage example: `orderby=PortalReference desc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :param bool x_iflo_exclude_holdings:
        :return: ValuationBatchResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_valuation_batch_results_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_valuation_batch_results_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_valuation_batch_results_with_http_info(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the results for a single valuationbatch.  # noqa: E501

        Use this endpoint to view the results of a valuationbatch  * Results will not be available after the valuationbatch is `expired`  * It will have items grouped in `holdings` by `policyNumber` and `portalReference`  * It will have a `matched_plan` indicating if the item has matched to a plan or not  * when `matched_plan = true`      * It will have a `matched_plan_href` to navigate to the plan  * when `matched_plan = true and is_imported = true`      * Holdings will have a `matched_holding_href` to navigate to the holding  * Note that if no fund price is supplied and the fund cannot be matched to a feed fund or equity    then the valuation for plan will not be imported  Use GET valuations/batches to get the batch id and to see the status of the batch.  You can use the optional header x-iflo-exclude-holdings=true to exclude the holdings detail from the response.  This is advisable when fetching the results of large batches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batch_results_with_http_info(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `PolicyNumber` ( `in`, `eq`, `ne`, `startswith` ),              `PortalReference` ( `in`, `eq`, `ne`, `startswith` ),              `Matched_Plan` ( `eq`, `ne` )              `Is_Imported` ( `eq`, `ne` )              Usage example: `filter=matched_plan eq false`
        :param str orderby: By default the results will be ordered asc by PolicyNumber.              However it can be changed using one or more supported fields below.              `PolicyNumber`, `PortalReference`, `matched_plan`              Usage example: `orderby=PortalReference desc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :param bool x_iflo_exclude_holdings:
        :return: ValuationBatchResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'batch_id', 'tenant_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top', 'x_iflo_exclude_holdings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_valuation_batch_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_valuation_batch_results`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `list_valuation_batch_results`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_valuation_batch_results`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_valuation_batch_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchId'] = params['batch_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_exclude_holdings' in params:
            header_params['x-iflo-exclude-holdings'] = params['x_iflo_exclude_holdings']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches/{batchId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatchResultCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_valuation_batches(self, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of valuationbatch  # noqa: E501

        Use this endpoint to view the statuses of multiple valuationbatches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batches(authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: List can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `State` (`in`,`eq`,`ne`),              `CreatedAt` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `ProductProvider.Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `CreatedBy.Name` (`in`,`eq`,`ne`,`startswith`)              Usage example: `filter=state eq 'failed' `
        :param str orderby: By default the list will be ordered desc by Id.              However it can be changed using one or more supported fields below.              `Id`, `CreatedAt`, `ProductProvider.Id`, `CreatedBy.Name`              Usage example: `orderby=CreatedAt asc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :return: ValuationBatchCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_valuation_batches_with_http_info(authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_valuation_batches_with_http_info(authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_valuation_batches_with_http_info(self, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of valuationbatch  # noqa: E501

        Use this endpoint to view the statuses of multiple valuationbatches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batches_with_http_info(authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: List can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `State` (`in`,`eq`,`ne`),              `CreatedAt` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `ProductProvider.Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `CreatedBy.Name` (`in`,`eq`,`ne`,`startswith`)              Usage example: `filter=state eq 'failed' `
        :param str orderby: By default the list will be ordered desc by Id.              However it can be changed using one or more supported fields below.              `Id`, `CreatedAt`, `ProductProvider.Id`, `CreatedBy.Name`              Usage example: `orderby=CreatedAt asc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :return: ValuationBatchCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'tenant_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_valuation_batches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_valuation_batches`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_valuation_batches`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_valuation_batches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatchCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_dpa_policy(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dpa_policy(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the DPA policy.
Only the following paths may be modified:
* `/clientCanAccept`
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/clientCanAccept",
    "value": "True"
}
            
would result in the clientCanAccept value for the targeted resource being set to 'True'. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
            return data

    def patch_dpa_policy_with_http_info(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the DPA policy.
Only the following paths may be modified:
* `/clientCanAccept`
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/clientCanAccept",
    "value": "True"
}
            
would result in the clientCanAccept value for the targeted resource being set to 'True'. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'policy_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_dpa_policy`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `patch_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `patch_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `patch_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_client_quote_status(self, body, authorization, x_api_key, client_id, quote_id, status, **kwargs):  # noqa: E501
        """Sets a new status for the client quote.  # noqa: E501

        This endpoint allows an API user to create a new status for the quote or illustration.  This will replace the current status value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_client_quote_status(body, authorization, x_api_key, client_id, quote_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str status: New quote status. Supported values are Initiated, Submitted, Failed, Expired and Complete. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_client_quote_status_with_http_info(body, authorization, x_api_key, client_id, quote_id, status, **kwargs)  # noqa: E501
        else:
            (data) = self.set_client_quote_status_with_http_info(body, authorization, x_api_key, client_id, quote_id, status, **kwargs)  # noqa: E501
            return data

    def set_client_quote_status_with_http_info(self, body, authorization, x_api_key, client_id, quote_id, status, **kwargs):  # noqa: E501
        """Sets a new status for the client quote.  # noqa: E501

        This endpoint allows an API user to create a new status for the quote or illustration.  This will replace the current status value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_client_quote_status_with_http_info(body, authorization, x_api_key, client_id, quote_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Quote body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param str status: New quote status. Supported values are Initiated, Submitted, Failed, Expired and Complete. (required)
        :param str accept:
        :return: Quote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'quote_id', 'status', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_client_quote_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `set_client_quote_status`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `set_client_quote_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'status' in params:
            path_params['status'] = params['status']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/status/{status}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_dependant(self, body, authorization, x_api_key, client_id, dependant_id, **kwargs):  # noqa: E501
        """Updates a dependant for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_dependant(body, authorization, x_api_key, client_id, dependant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Dependant body: Dependant document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param int dependant_id: Dependant identifier (required)
        :param str accept:
        :return: Dependant
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_dependant_with_http_info(body, authorization, x_api_key, client_id, dependant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_dependant_with_http_info(body, authorization, x_api_key, client_id, dependant_id, **kwargs)  # noqa: E501
            return data

    def update_client_dependant_with_http_info(self, body, authorization, x_api_key, client_id, dependant_id, **kwargs):  # noqa: E501
        """Updates a dependant for a given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_dependant_with_http_info(body, authorization, x_api_key, client_id, dependant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Dependant body: Dependant document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param int dependant_id: Dependant identifier (required)
        :param str accept:
        :return: Dependant
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'dependant_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_dependant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_dependant`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_dependant`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_dependant`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_dependant`")  # noqa: E501
        # verify the required parameter 'dependant_id' is set
        if ('dependant_id' not in params or
                params['dependant_id'] is None):
            raise ValueError("Missing the required parameter `dependant_id` when calling `update_client_dependant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'dependant_id' in params:
            path_params['dependantId'] = params['dependant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/dependants/{dependantId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dependant',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_expenditure(self, body, authorization, x_api_key, client_id, expenditure_id, **kwargs):  # noqa: E501
        """Updates a client's expenditure record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_expenditure(body, authorization, x_api_key, client_id, expenditure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Expenditure body: The updated details for the expenditure. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int expenditure_id: The identifier for the expenditure record to update. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Expenditure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_expenditure_with_http_info(body, authorization, x_api_key, client_id, expenditure_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_expenditure_with_http_info(body, authorization, x_api_key, client_id, expenditure_id, **kwargs)  # noqa: E501
            return data

    def update_client_expenditure_with_http_info(self, body, authorization, x_api_key, client_id, expenditure_id, **kwargs):  # noqa: E501
        """Updates a client's expenditure record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_expenditure_with_http_info(body, authorization, x_api_key, client_id, expenditure_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Expenditure body: The updated details for the expenditure. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int expenditure_id: The identifier for the expenditure record to update. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the expenditure categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Expenditure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'expenditure_id', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_expenditure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_expenditure`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_expenditure`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_expenditure`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_expenditure`")  # noqa: E501
        # verify the required parameter 'expenditure_id' is set
        if ('expenditure_id' not in params or
                params['expenditure_id'] is None):
            raise ValueError("Missing the required parameter `expenditure_id` when calling `update_client_expenditure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'expenditure_id' in params:
            path_params['expenditureId'] = params['expenditure_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/expenditures/{expenditureId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Expenditure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_fee(self, body, authorization, x_api_key, client_id, fee_id, **kwargs):  # noqa: E501
        """Updates a fee for a given client and fee.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_fee(body, authorization, x_api_key, client_id, fee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeeDocument body: Fee. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_fee_with_http_info(body, authorization, x_api_key, client_id, fee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_fee_with_http_info(body, authorization, x_api_key, client_id, fee_id, **kwargs)  # noqa: E501
            return data

    def update_client_fee_with_http_info(self, body, authorization, x_api_key, client_id, fee_id, **kwargs):  # noqa: E501
        """Updates a fee for a given client and fee.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_fee_with_http_info(body, authorization, x_api_key, client_id, fee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeeDocument body: Fee. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. (required)
        :param int fee_id: Fee identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier.
        :return: FeeDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'fee_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_fee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_fee`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_fee`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_fee`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_fee`")  # noqa: E501
        # verify the required parameter 'fee_id' is set
        if ('fee_id' not in params or
                params['fee_id'] is None):
            raise ValueError("Missing the required parameter `fee_id` when calling `update_client_fee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'fee_id' in params:
            path_params['feeId'] = params['fee_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/fees/{feeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeeDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_income(self, body, authorization, x_api_key, client_id, income_id, **kwargs):  # noqa: E501
        """Updates a client's income record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_income(body, authorization, x_api_key, client_id, income_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Income body: The updated income record. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int income_id: The identifier for the income record. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Income
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_income_with_http_info(body, authorization, x_api_key, client_id, income_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_income_with_http_info(body, authorization, x_api_key, client_id, income_id, **kwargs)  # noqa: E501
            return data

    def update_client_income_with_http_info(self, body, authorization, x_api_key, client_id, income_id, **kwargs):  # noqa: E501
        """Updates a client's income record.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_income_with_http_info(body, authorization, x_api_key, client_id, income_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Income body: The updated income record. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int income_id: The identifier for the income record. (required)
        :param str accept:
        :param str prefer: Used to indicate which format the income categories are returned in. Valid options are: 'x-iflo-apiversion=1' or 'x-iflo-apiversion=2'. If not specified the default is 'x-iflo-apiversion=1'
        :return: Income
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'income_id', 'accept', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_income" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_income`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_income`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_income`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_income`")  # noqa: E501
        # verify the required parameter 'income_id' is set
        if ('income_id' not in params or
                params['income_id'] is None):
            raise ValueError("Missing the required parameter `income_id` when calling `update_client_income`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'income_id' in params:
            path_params['incomeId'] = params['income_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/incomes/{incomeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Income',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_marketing_preferences(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Updates client's marketing preferences.  # noqa: E501

        Use this endpoint to updates a client's marketing preferences broken down by medium where appropriate.  A successful response (200) will return updated client's  marketing preferences document.  If a client has not yet provided their preferences and/or consent, new preferences will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_marketing_preferences(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientMarketingPreferences body: Client Marketing Preferences document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: ClientMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_marketing_preferences_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_marketing_preferences_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def update_client_marketing_preferences_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Updates client's marketing preferences.  # noqa: E501

        Use this endpoint to updates a client's marketing preferences broken down by medium where appropriate.  A successful response (200) will return updated client's  marketing preferences document.  If a client has not yet provided their preferences and/or consent, new preferences will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_marketing_preferences_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientMarketingPreferences body: Client Marketing Preferences document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: ClientMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_marketing_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_marketing_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/marketing_preferences', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientMarketingPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_plan(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Updates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: PlanId (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
            return data

    def update_client_plan_with_http_info(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Updates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: PlanId (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'plan_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `update_client_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_plan_transaction(self, body, authorization, x_api_key, client_id, plan_id, transaction_id, **kwargs):  # noqa: E501
        """Updates a client plan transaction.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan_transaction(body, authorization, x_api_key, client_id, plan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the client plan transaction resource.
Only the following paths may be modified:
* `/category1`
* `/category1Code`
* `/category2`
* `/category2Code1`
* `/description`
* `/unitPrice`
* `/unitNumber`
* `/transactionDate`
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/category1",
    "value": "New Category 1"
}
            
would result in the category1 value for the targeted resource being set to 'New Category 1'. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id (required)
        :param int plan_id: Plan Id (required)
        :param int transaction_id: Transaction Id (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_plan_transaction_with_http_info(body, authorization, x_api_key, client_id, plan_id, transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_plan_transaction_with_http_info(body, authorization, x_api_key, client_id, plan_id, transaction_id, **kwargs)  # noqa: E501
            return data

    def update_client_plan_transaction_with_http_info(self, body, authorization, x_api_key, client_id, plan_id, transaction_id, **kwargs):  # noqa: E501
        """Updates a client plan transaction.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan_transaction_with_http_info(body, authorization, x_api_key, client_id, plan_id, transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the client plan transaction resource.
Only the following paths may be modified:
* `/category1`
* `/category1Code`
* `/category2`
* `/category2Code1`
* `/description`
* `/unitPrice`
* `/unitNumber`
* `/transactionDate`
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/category1",
    "value": "New Category 1"
}
            
would result in the category1 value for the targeted resource being set to 'New Category 1'. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id (required)
        :param int plan_id: Plan Id (required)
        :param int transaction_id: Transaction Id (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: Transaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'plan_id', 'transaction_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_plan_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `update_client_plan_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `update_client_plan_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'transaction_id' in params:
            path_params['transactionId'] = params['transaction_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}/transactions/{transactionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_quote_result_product_benefits(self, body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs):  # noqa: E501
        """This endpoint allows an API user to update product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_quote_result_product_benefits(body, authorization, x_api_key, client_id, quote_id, quote_result_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductBenefitFeatures body: Request document with product benefit features (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_quote_result_product_benefits_with_http_info(body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_quote_result_product_benefits_with_http_info(body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs)  # noqa: E501
            return data

    def update_client_quote_result_product_benefits_with_http_info(self, body, authorization, x_api_key, client_id, quote_id, quote_result_id, **kwargs):  # noqa: E501
        """This endpoint allows an API user to update product details of a specific quote result or illustration result for a client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_quote_result_product_benefits_with_http_info(body, authorization, x_api_key, client_id, quote_id, quote_result_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductBenefitFeatures body: Request document with product benefit features (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier - The special value `me` can be used to indicate the authenticated user. (required)
        :param int quote_id: Quote identifier. (required)
        :param int quote_result_id: Quote result identifier. (required)
        :param str accept:
        :return: ProductBenefitFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'quote_id', 'quote_result_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_quote_result_product_benefits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `update_client_quote_result_product_benefits`")  # noqa: E501
        # verify the required parameter 'quote_result_id' is set
        if ('quote_result_id' not in params or
                params['quote_result_id'] is None):
            raise ValueError("Missing the required parameter `quote_result_id` when calling `update_client_quote_result_product_benefits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'quote_id' in params:
            path_params['quoteId'] = params['quote_id']  # noqa: E501
        if 'quote_result_id' in params:
            path_params['quoteResultId'] = params['quote_result_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/quotes/{quoteId}/results/{quoteResultId}/benefits', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductBenefitFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dpa_policy(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dpa_policy(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: The DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, **kwargs)  # noqa: E501
            return data

    def update_dpa_policy_with_http_info(self, body, authorization, x_api_key, policy_id, **kwargs):  # noqa: E501
        """Updates an existing DPA policy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dpa_policy_with_http_info(body, authorization, x_api_key, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DPAPolicy body: A DPA policy document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int policy_id: The DPA policy Identifier. (required)
        :param str accept:
        :return: DPAPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'policy_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dpa_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dpa_policy`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_dpa_policy`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_dpa_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_dpa_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/dpa_policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DPAPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_income_statement(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Updates an income statement.  # noqa: E501

        You can only edit the income statement if it is not matched and none of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_income_statement_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_income_statement_with_http_info(body, authorization, x_api_key, income_statement_id, **kwargs)  # noqa: E501
            return data

    def update_income_statement_with_http_info(self, body, authorization, x_api_key, income_statement_id, **kwargs):  # noqa: E501
        """Updates an income statement.  # noqa: E501

        You can only edit the income statement if it is not matched and none of the items are analysed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement_with_http_info(body, authorization, x_api_key, income_statement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatement body: Income statement document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param str accept:
        :return: IncomeStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'income_statement_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_income_statement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_income_statement`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_income_statement`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_income_statement`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `update_income_statement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_income_statement_item(self, body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs):  # noqa: E501
        """Updates an income statement item for a given income statement.  # noqa: E501

        You cannot edit any properties if the item is analysed.  You can edit policy and client if the item is not analysed and the statement is matched.  You can edit policy, client and gross amount if the item is not analysed and the statement is not matched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement_item(body, authorization, x_api_key, income_statement_id, income_statement_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItem body: Income statement item document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_income_statement_item_with_http_info(body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_income_statement_item_with_http_info(body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs)  # noqa: E501
            return data

    def update_income_statement_item_with_http_info(self, body, authorization, x_api_key, income_statement_id, income_statement_item_id, **kwargs):  # noqa: E501
        """Updates an income statement item for a given income statement.  # noqa: E501

        You cannot edit any properties if the item is analysed.  You can edit policy and client if the item is not analysed and the statement is matched.  You can edit policy, client and gross amount if the item is not analysed and the statement is not matched.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_income_statement_item_with_http_info(body, authorization, x_api_key, income_statement_id, income_statement_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IncomeStatementItem body: Income statement item document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int income_statement_id: Income statement identifier (required)
        :param int income_statement_item_id: Income statement item identifier (required)
        :param str accept:
        :return: IncomeStatementItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'income_statement_id', 'income_statement_item_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_income_statement_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_id' is set
        if ('income_statement_id' not in params or
                params['income_statement_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_id` when calling `update_income_statement_item`")  # noqa: E501
        # verify the required parameter 'income_statement_item_id' is set
        if ('income_statement_item_id' not in params or
                params['income_statement_item_id'] is None):
            raise ValueError("Missing the required parameter `income_statement_item_id` when calling `update_income_statement_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'income_statement_id' in params:
            path_params['incomeStatementId'] = params['income_statement_id']  # noqa: E501
        if 'income_statement_item_id' in params:
            path_params['incomeStatementItemId'] = params['income_statement_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/incomestatements/{incomeStatementId}/items/{incomeStatementItemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncomeStatementItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_installed_app_group_settings(self, body, authorization, x_api_key, app_id, group_id, **kwargs):  # noqa: E501
        """Updates group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the specific group settings for the group.       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_group_settings(body, authorization, x_api_key, app_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str group_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_installed_app_group_settings_with_http_info(body, authorization, x_api_key, app_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_installed_app_group_settings_with_http_info(body, authorization, x_api_key, app_id, group_id, **kwargs)  # noqa: E501
            return data

    def update_installed_app_group_settings_with_http_info(self, body, authorization, x_api_key, app_id, group_id, **kwargs):  # noqa: E501
        """Updates group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the specific group settings for the group.       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_group_settings_with_http_info(body, authorization, x_api_key, app_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str group_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'app_id', 'group_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_installed_app_group_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_installed_app_group_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/group_settings/{groupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_installed_app_user_settings(self, body, authorization, x_api_key, app_id, user_id, **kwargs):  # noqa: E501
        """Updates user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the settings for the current user. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will save the settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_user_settings(body, authorization, x_api_key, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str user_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_installed_app_user_settings_with_http_info(body, authorization, x_api_key, app_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_installed_app_user_settings_with_http_info(body, authorization, x_api_key, app_id, user_id, **kwargs)  # noqa: E501
            return data

    def update_installed_app_user_settings_with_http_info(self, body, authorization, x_api_key, app_id, user_id, **kwargs):  # noqa: E501
        """Updates user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the settings for the current user. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will save the settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_user_settings_with_http_info(body, authorization, x_api_key, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str user_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'app_id', 'user_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_installed_app_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_installed_app_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/user_settings/{userId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_lead_marketing_preferences(self, body, authorization, x_api_key, lead_id, **kwargs):  # noqa: E501
        """Updates lead's marketing preferences.  # noqa: E501

        Use this endpoint to updates a lead's marketing preferences broken down by medium where appropriate.  A successful response (200) will return updated client's  marketing preferences document.  If a lead has not yet provided their preferences and/or consent, new preferences will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lead_marketing_preferences(body, authorization, x_api_key, lead_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeadMarketingPreferences body: Lead Marketing Preferences document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: LeadMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_lead_marketing_preferences_with_http_info(body, authorization, x_api_key, lead_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_lead_marketing_preferences_with_http_info(body, authorization, x_api_key, lead_id, **kwargs)  # noqa: E501
            return data

    def update_lead_marketing_preferences_with_http_info(self, body, authorization, x_api_key, lead_id, **kwargs):  # noqa: E501
        """Updates lead's marketing preferences.  # noqa: E501

        Use this endpoint to updates a lead's marketing preferences broken down by medium where appropriate.  A successful response (200) will return updated client's  marketing preferences document.  If a lead has not yet provided their preferences and/or consent, new preferences will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lead_marketing_preferences_with_http_info(body, authorization, x_api_key, lead_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeadMarketingPreferences body: Lead Marketing Preferences document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier. The special value 'me' can be used to indicate the authenticated user. (required)
        :param str accept:
        :return: LeadMarketingPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'lead_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lead_marketing_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_lead_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_lead_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_lead_marketing_preferences`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `update_lead_marketing_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/marketing_preferences', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeadMarketingPreferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
