# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_client_tag(self, authorization, client_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Creates a new tag for a given client.  # noqa: E501

        Creates a new tag for a given client.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  * Maximum 30 unique tags per client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_tag(authorization, client_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTagDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_tag_with_http_info(authorization, client_id, tag_name, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_tag_with_http_info(authorization, client_id, tag_name, x_api_key, **kwargs)  # noqa: E501
            return data

    def add_client_tag_with_http_info(self, authorization, client_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Creates a new tag for a given client.  # noqa: E501

        Creates a new tag for a given client.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  * Maximum 30 unique tags per client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_tag_with_http_info(authorization, client_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTagDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'tag_name', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_client_tag`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `add_client_tag`")  # noqa: E501
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params or
                params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `add_client_tag`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `add_client_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'tag_name' in params:
            path_params['tagName'] = params['tag_name']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/tags/{tagName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientTagDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_lead_tag(self, authorization, lead_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Creates a new tag for a given lead.  # noqa: E501

        Creates a new tag for a given lead.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  * Maximum 30 unique tags per lead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_lead_tag(authorization, lead_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: LeadTagDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_lead_tag_with_http_info(authorization, lead_id, tag_name, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_lead_tag_with_http_info(authorization, lead_id, tag_name, x_api_key, **kwargs)  # noqa: E501
            return data

    def add_lead_tag_with_http_info(self, authorization, lead_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Creates a new tag for a given lead.  # noqa: E501

        Creates a new tag for a given lead.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  * Maximum 30 unique tags per lead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_lead_tag_with_http_info(authorization, lead_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: LeadTagDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lead_id', 'tag_name', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_lead_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `add_lead_tag`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `add_lead_tag`")  # noqa: E501
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params or
                params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `add_lead_tag`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `add_lead_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501
        if 'tag_name' in params:
            path_params['tagName'] = params['tag_name']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/tags/{tagName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeadTagDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_tags(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of tags for a given client.  # noqa: E501

        Returns a list of tags for a given client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_tags(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_tags_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_tags_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_tags_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of tags for a given client.  # noqa: E501

        Returns a list of tags for a given client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_tags_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_tags`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_tags`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_lead_tags(self, authorization, lead_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of tags for a given lead.  # noqa: E501

        Returns a list of tags for a given lead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lead_tags(authorization, lead_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_lead_tags_with_http_info(authorization, lead_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_lead_tags_with_http_info(authorization, lead_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_lead_tags_with_http_info(self, authorization, lead_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of tags for a given lead.  # noqa: E501

        Returns a list of tags for a given lead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lead_tags_with_http_info(authorization, lead_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lead_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_lead_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_lead_tags`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `list_lead_tags`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_lead_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_tags(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of tags for the client and lead resources.  # noqa: E501

        Returns a list of the first 100 tags for the client and lead resources, in alphabetical order.  Some specific filtering is optionally supported.  The following fields are supported using operators `startswith`:  * `tag`  *Example:* ?filter=tag startswith 'tagName'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_tags(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. Supported operators: 'startswith'. Available Fields: 'tag'.
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: ClientTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_tags_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_tags_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_tags_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of tags for the client and lead resources.  # noqa: E501

        Returns a list of the first 100 tags for the client and lead resources, in alphabetical order.  Some specific filtering is optionally supported.  The following fields are supported using operators `startswith`:  * `tag`  *Example:* ?filter=tag startswith 'tagName'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_tags_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. Supported operators: 'startswith'. Available Fields: 'tag'.
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: ClientTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_tags`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_client_tag(self, authorization, client_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing tag for a given client.  # noqa: E501

        Deletes an existing tag for a given client.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_client_tag(authorization, client_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_client_tag_with_http_info(authorization, client_id, tag_name, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_client_tag_with_http_info(authorization, client_id, tag_name, x_api_key, **kwargs)  # noqa: E501
            return data

    def remove_client_tag_with_http_info(self, authorization, client_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing tag for a given client.  # noqa: E501

        Deletes an existing tag for a given client.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_client_tag_with_http_info(authorization, client_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'tag_name', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_client_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `remove_client_tag`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `remove_client_tag`")  # noqa: E501
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params or
                params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `remove_client_tag`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `remove_client_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'tag_name' in params:
            path_params['tagName'] = params['tag_name']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/tags/{tagName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_lead_tag(self, authorization, lead_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing tag for a given lead.  # noqa: E501

        Deletes an existing tag for a given lead.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_lead_tag(authorization, lead_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_lead_tag_with_http_info(authorization, lead_id, tag_name, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_lead_tag_with_http_info(authorization, lead_id, tag_name, x_api_key, **kwargs)  # noqa: E501
            return data

    def remove_lead_tag_with_http_info(self, authorization, lead_id, tag_name, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing tag for a given lead.  # noqa: E501

        Deletes an existing tag for a given lead.                **Notes:**  * Maximum 100 characters per tag.  * Tag must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_lead_tag_with_http_info(authorization, lead_id, tag_name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str tag_name: Tag name. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lead_id', 'tag_name', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_lead_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `remove_lead_tag`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `remove_lead_tag`")  # noqa: E501
        # verify the required parameter 'tag_name' is set
        if ('tag_name' not in params or
                params['tag_name'] is None):
            raise ValueError("Missing the required parameter `tag_name` when calling `remove_lead_tag`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `remove_lead_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501
        if 'tag_name' in params:
            path_params['tagName'] = params['tag_name']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/tags/{tagName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_tags(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Updates/Creates client's tags.  # noqa: E501

        Updates/Creates client's tags.  If a client has not yet tags, tags will be created.  A successful response (200) will return updated/created client's  tags.                **Notes:**  * Maximum 30 unique tags per client.  * Maximum 100 characters per tag.  * Tags must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_tags(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientTag body: Tags document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTagCollectionDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_tags_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_tags_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def update_client_tags_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Updates/Creates client's tags.  # noqa: E501

        Updates/Creates client's tags.  If a client has not yet tags, tags will be created.  A successful response (200) will return updated/created client's  tags.                **Notes:**  * Maximum 30 unique tags per client.  * Maximum 100 characters per tag.  * Tags must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_tags_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientTag body: Tags document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: ClientTagCollectionDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_tags`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_tags`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_tags`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientTagCollectionDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_lead_tags(self, body, authorization, x_api_key, lead_id, **kwargs):  # noqa: E501
        """Updates/Creates lead's tags.  # noqa: E501

        Updates/Creates lead's tags.  If a lead has not yet tags, tags will be created.  A successful response (200) will return updated/created lead's  tags.                **Notes:**  * Maximum 30 unique tags per lead.  * Maximum 100 characters per tag.  * Tags must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lead_tags(body, authorization, x_api_key, lead_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientTag body: Tags document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: LeadTagCollectionDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_lead_tags_with_http_info(body, authorization, x_api_key, lead_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_lead_tags_with_http_info(body, authorization, x_api_key, lead_id, **kwargs)  # noqa: E501
            return data

    def update_lead_tags_with_http_info(self, body, authorization, x_api_key, lead_id, **kwargs):  # noqa: E501
        """Updates/Creates lead's tags.  # noqa: E501

        Updates/Creates lead's tags.  If a lead has not yet tags, tags will be created.  A successful response (200) will return updated/created lead's  tags.                **Notes:**  * Maximum 30 unique tags per lead.  * Maximum 100 characters per tag.  * Tags must not contain spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lead_tags_with_http_info(body, authorization, x_api_key, lead_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientTag body: Tags document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach.
        :return: LeadTagCollectionDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'lead_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lead_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_lead_tags`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_lead_tags`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_lead_tags`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `update_lead_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeadTagCollectionDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
