# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AdvisersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adviser_exists(self, adviser_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Checks if the adviser exists.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adviser_exists(adviser_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int adviser_id: Adviser identifier. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adviser_exists_with_http_info(adviser_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.adviser_exists_with_http_info(adviser_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def adviser_exists_with_http_info(self, adviser_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Checks if the adviser exists.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adviser_exists_with_http_info(adviser_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int adviser_id: Adviser identifier. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adviser_id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adviser_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adviser_id' is set
        if ('adviser_id' not in params or
                params['adviser_id'] is None):
            raise ValueError("Missing the required parameter `adviser_id` when calling `adviser_exists`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `adviser_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `adviser_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'adviser_id' in params:
            path_params['adviserId'] = params['adviser_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/advisers/{adviserId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_adviser(self, adviser_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns an adviser for a given adviser.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_adviser(adviser_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int adviser_id: Adviser identifier (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Adviser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_adviser_with_http_info(adviser_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_adviser_with_http_info(adviser_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_adviser_with_http_info(self, adviser_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns an adviser for a given adviser.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_adviser_with_http_info(adviser_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int adviser_id: Adviser identifier (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Adviser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adviser_id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_adviser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adviser_id' is set
        if ('adviser_id' not in params or
                params['adviser_id'] is None):
            raise ValueError("Missing the required parameter `adviser_id` when calling `get_adviser`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_adviser`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_adviser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'adviser_id' in params:
            path_params['adviserId'] = params['adviser_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/advisers/{adviserId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Adviser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_advisers(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of advisers.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_advisers(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The list of Advisers returned can be filtered using one or more of the supported fields and operators.  The supported fields and operators are:    * `externalRef1` (`eq`)  * `externalRef2` (`eq`)  * `fcaRefNo` (`eq`)  * `group.id` (`eq`, `in`)  * `group.name` (`eq`, `startswith`)  * `id` (`eq`, `in`)  * `person.firstName` (`eq`, `startswith`)  * `person.lastName` (`eq`, `startswith`)  * `userId` (`eq`, `in`)                Example filters:      filter= person.firstName eq 'john' and person.lastName startswith 'j'      filter= id in (987,7654,126)        For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str orderby: The list of Advisers returned can be sorted on the following fields:    * `id` (`asc` or `desc`)  * `person.firstName` (`asc` or `desc`)  * `person.lastName` (`asc` or `desc`)  * `externalRef1` (`asc` or `desc`)  * `externalRef2` (`asc` or `desc`)                Example orderBy:      orderBy=person.lastname desc        By default the list of Advisers are ordered by Id in descending order.
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: AdviserCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_advisers_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_advisers_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_advisers_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of advisers.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_advisers_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The list of Advisers returned can be filtered using one or more of the supported fields and operators.  The supported fields and operators are:    * `externalRef1` (`eq`)  * `externalRef2` (`eq`)  * `fcaRefNo` (`eq`)  * `group.id` (`eq`, `in`)  * `group.name` (`eq`, `startswith`)  * `id` (`eq`, `in`)  * `person.firstName` (`eq`, `startswith`)  * `person.lastName` (`eq`, `startswith`)  * `userId` (`eq`, `in`)                Example filters:      filter= person.firstName eq 'john' and person.lastName startswith 'j'      filter= id in (987,7654,126)        For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str orderby: The list of Advisers returned can be sorted on the following fields:    * `id` (`asc` or `desc`)  * `person.firstName` (`asc` or `desc`)  * `person.lastName` (`asc` or `desc`)  * `externalRef1` (`asc` or `desc`)  * `externalRef2` (`asc` or `desc`)                Example orderBy:      orderBy=person.lastname desc        By default the list of Advisers are ordered by Id in descending order.
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: AdviserCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_advisers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_advisers`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_advisers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/advisers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdviserCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
