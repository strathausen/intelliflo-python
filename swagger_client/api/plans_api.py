# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PlansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_client_opportunity_plan(self, authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Updates an opportunity with a plan for a given client, opportunity and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_opportunity_plan(authorization, client_id, opportunity_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_opportunity_plan_with_http_info(authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_opportunity_plan_with_http_info(authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_client_opportunity_plan_with_http_info(self, authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Updates an opportunity with a plan for a given client, opportunity and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_opportunity_plan_with_http_info(authorization, client_id, opportunity_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'opportunity_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_opportunity_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'opportunity_id' is set
        if ('opportunity_id' not in params or
                params['opportunity_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_id` when calling `create_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `create_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_opportunity_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'opportunity_id' in params:
            path_params['opportunityId'] = params['opportunity_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/opportunities/{opportunityId}/plans/{planId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_plans(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_plans(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_plans_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_plans_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_plans_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_plans_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_plans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_plans`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_plans`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_plans`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_plans`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_servicecase_plan(self, authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs):  # noqa: E501
        """Creates an association with a service on a plan for a given client, service and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_servicecase_plan(authorization, client_id, plan_id, service_case_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int service_case_id: Service Case identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_servicecase_plan_with_http_info(authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_servicecase_plan_with_http_info(authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_client_servicecase_plan_with_http_info(self, authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs):  # noqa: E501
        """Creates an association with a service on a plan for a given client, service and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_servicecase_plan_with_http_info(authorization, client_id, plan_id, service_case_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int service_case_id: Service Case identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'service_case_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_servicecase_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `create_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'service_case_id' is set
        if ('service_case_id' not in params or
                params['service_case_id'] is None):
            raise ValueError("Missing the required parameter `service_case_id` when calling `create_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_servicecase_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'service_case_id' in params:
            path_params['serviceCaseId'] = params['service_case_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/servicecases/{serviceCaseId}/plans/{planId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_topup_plan(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Creates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_topup_plan(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: PlanId (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_topup_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_topup_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
            return data

    def create_topup_plan_with_http_info(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Creates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_topup_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: PlanId (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'plan_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_topup_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_topup_plan`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_topup_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_topup_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_topup_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `create_topup_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_opportunity_plan(self, authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an opportunity from a plan for a given client, opportunity and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_opportunity_plan(authorization, client_id, opportunity_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_opportunity_plan_with_http_info(authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_opportunity_plan_with_http_info(authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_opportunity_plan_with_http_info(self, authorization, client_id, opportunity_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an opportunity from a plan for a given client, opportunity and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_opportunity_plan_with_http_info(authorization, client_id, opportunity_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param int plan_id: Plan identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'opportunity_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_opportunity_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'opportunity_id' is set
        if ('opportunity_id' not in params or
                params['opportunity_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_id` when calling `delete_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `delete_client_opportunity_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_opportunity_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'opportunity_id' in params:
            path_params['opportunityId'] = params['opportunity_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/opportunities/{opportunityId}/plans/{planId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_plan(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes the client plan by the given client id and plan id.  # noqa: E501

        This operation performs a soft deletion of a clients plan. Only the user that created the plan is allowed to delete it, i.e. if the plan was created  by an adviser within IO it can't be deleted by an app unless the app identifies itself as the adviser who created the plan (authorization code flow).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_plan(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: The plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The tenant identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_plan_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes the client plan by the given client id and plan id.  # noqa: E501

        This operation performs a soft deletion of a clients plan. Only the user that created the plan is allowed to delete it, i.e. if the plan was created  by an adviser within IO it can't be deleted by an app unless the app identifies itself as the adviser who created the plan (authorization code flow).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: The plan identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The tenant identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `delete_client_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_servicecase_plan(self, authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an association on a service with a plan for a given client, service and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_servicecase_plan(authorization, client_id, plan_id, service_case_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int service_case_id: Service case identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_servicecase_plan_with_http_info(authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_servicecase_plan_with_http_info(authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_client_servicecase_plan_with_http_info(self, authorization, client_id, plan_id, service_case_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an association on a service with a plan for a given client, service and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_servicecase_plan_with_http_info(authorization, client_id, plan_id, service_case_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int plan_id: Plan identifier (required)
        :param int service_case_id: Service case identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'service_case_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_servicecase_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `delete_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'service_case_id' is set
        if ('service_case_id' not in params or
                params['service_case_id'] is None):
            raise ValueError("Missing the required parameter `service_case_id` when calling `delete_client_servicecase_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_client_servicecase_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'service_case_id' in params:
            path_params['serviceCaseId'] = params['service_case_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/servicecases/{serviceCaseId}/plans/{planId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exists_client_plan(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Checks a plan exists for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exists_client_plan(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exists_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.exists_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def exists_client_plan_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Checks a plan exists for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exists_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exists_client_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `exists_client_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `exists_client_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `exists_client_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `exists_client_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_plan(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a plan for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate preferred behaviours, by the client. Options: include=fundProposal
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_plan_with_http_info(self, authorization, client_id, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a plan for a given client and plan.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_plan_with_http_info(authorization, client_id, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str prefer: Used to indicate preferred behaviours, by the client. Options: include=fundProposal
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'plan_id', 'x_api_key', 'accept', 'prefer', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_client_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plan(self, authorization, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Get a Plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plan(authorization, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str permission_type: Permission type: Read or ReadWrite              * `When read, it will return all plans that the client can read (IncludeInPfp). When readwrite, it will return only plans that the client can modify(owner)`
        :param str prefer: Used to indicate preferred behaviours, by the client. Options: include=fundProposal
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_plan_with_http_info(authorization, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_plan_with_http_info(authorization, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_plan_with_http_info(self, authorization, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Get a Plan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plan_with_http_info(authorization, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str permission_type: Permission type: Read or ReadWrite              * `When read, it will return all plans that the client can read (IncludeInPfp). When readwrite, it will return only plans that the client can modify(owner)`
        :param str prefer: Used to indicate preferred behaviours, by the client. Options: include=fundProposal
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'plan_id', 'x_api_key', 'accept', 'permission_type', 'prefer', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'permission_type' in params:
            query_params.append(('permissionType', params['permission_type']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/plans/{planId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_plans(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of plans for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plans(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: List can be filtered using one or more supported fields and operators below.                Supported fields (operators) are:  * `Id` (`in`)  * `ProductProvider.Id` (`in`,`eq`,`ne`)  * `ProductProvider.Name` (`in`,`eq`,`ne`,`startswith`)  * `PlanType.Name` (`in`,`eq`,`ne`)  * `PlanType.PortfolioCategory` (`in`,`eq`) `valid values are: [investments, currentaccounts, savings, pensions, property, protection, creditcards, mortgages, loans]`  * `CurrentStatus` (`in`,`eq`,`ne`)  * `SystemStatus` (`in`,`ne`)  * `QuoteResult.Id` (`in`,`eq`,`ne`)  * `Parent.Id` (`in`,`eq`)  * `tags` (`startswith`,`in`,`eq`)  * `IsProviderManaged` (`eq`)  * `ProviderCodes.Code1` (`in`, `eq`)  * `ProviderCodes.Code2` (`in`, `eq`)  * `ProviderCodes.Code3` (`in`, `eq`)  * `CratedAt` (`gt`, `lt`)  * `Program.Id` (`in`,`eq`)                Usage examples:  * `filter=id in (1,2)`  * `filter=currentstatus eq 'in force'`  * `filter=tag eq 'tagName'  * `filter=tag in ('tag1', 'tag2')  * `filter=tag startswith 'tagName'  * `filter=createdAt gt yyyy-MM-dd`  * `filter=createdAt lt yyyy-MM-dd`                See [QueryLang](docs/ApiQueryLang) for further usage details.
        :param str prefer: Used to indicate preferred behaviours, by the client. Options: include=fundProposal
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant Id
        :param int top: The number of records to retrieve (default 25, max 100)
        :param str type_of: Filters by discriminator (abstract or concrete), e.g 'AssetPlan', will return plans that inherit from AssetPlan.
        :return: PlanCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_plans_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_plans_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_plans_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of plans for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_plans_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: List can be filtered using one or more supported fields and operators below.                Supported fields (operators) are:  * `Id` (`in`)  * `ProductProvider.Id` (`in`,`eq`,`ne`)  * `ProductProvider.Name` (`in`,`eq`,`ne`,`startswith`)  * `PlanType.Name` (`in`,`eq`,`ne`)  * `PlanType.PortfolioCategory` (`in`,`eq`) `valid values are: [investments, currentaccounts, savings, pensions, property, protection, creditcards, mortgages, loans]`  * `CurrentStatus` (`in`,`eq`,`ne`)  * `SystemStatus` (`in`,`ne`)  * `QuoteResult.Id` (`in`,`eq`,`ne`)  * `Parent.Id` (`in`,`eq`)  * `tags` (`startswith`,`in`,`eq`)  * `IsProviderManaged` (`eq`)  * `ProviderCodes.Code1` (`in`, `eq`)  * `ProviderCodes.Code2` (`in`, `eq`)  * `ProviderCodes.Code3` (`in`, `eq`)  * `CratedAt` (`gt`, `lt`)  * `Program.Id` (`in`,`eq`)                Usage examples:  * `filter=id in (1,2)`  * `filter=currentstatus eq 'in force'`  * `filter=tag eq 'tagName'  * `filter=tag in ('tag1', 'tag2')  * `filter=tag startswith 'tagName'  * `filter=createdAt gt yyyy-MM-dd`  * `filter=createdAt lt yyyy-MM-dd`                See [QueryLang](docs/ApiQueryLang) for further usage details.
        :param str prefer: Used to indicate preferred behaviours, by the client. Options: include=fundProposal
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant Id
        :param int top: The number of records to retrieve (default 25, max 100)
        :param str type_of: Filters by discriminator (abstract or concrete), e.g 'AssetPlan', will return plans that inherit from AssetPlan.
        :return: PlanCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'prefer', 'skip', 'tenant_id', 'top', 'type_of']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_plans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_plans`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_plans`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_plans`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'type_of' in params:
            query_params.append(('typeOf', params['type_of']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'prefer' in params:
            header_params['Prefer'] = params['prefer']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlanCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_client_plan(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Patch update a client plan for given client id and plan id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_client_plan(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the client plan resource.
Properties which cannot be updated on PUT, cannot be updated using patch
            
For a simple example a request contains the following JSON:
            
[{
    "op": "replace",
    "path": "/policyNumber",
    "value": "new policy number"
},
{
    "op": "add",
    "path": "/tags/-",
    "value": "tag2"
},
{
    "op": "remove",
    "path": "/parent"
}]
            
This would result in the following updates to the plan:
            
* The value of the policyNumber property would be updated to 'new policy number' text.
* A new tag 'tag2' would be added to the existing list of tags.
* The value of the parent property would be removed. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. (required)
        :param int plan_id: The plan identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
            return data

    def patch_client_plan_with_http_info(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Patch update a client plan for given client id and plan id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the client plan resource.
Properties which cannot be updated on PUT, cannot be updated using patch
            
For a simple example a request contains the following JSON:
            
[{
    "op": "replace",
    "path": "/policyNumber",
    "value": "new policy number"
},
{
    "op": "add",
    "path": "/tags/-",
    "value": "tag2"
},
{
    "op": "remove",
    "path": "/parent"
}]
            
This would result in the following updates to the plan:
            
* The value of the policyNumber property would be updated to 'new policy number' text.
* A new tag 'tag2' would be added to the existing list of tags.
* The value of the parent property would be removed. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: The client identifier. (required)
        :param int plan_id: The plan identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'plan_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_client_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_client_plan`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `patch_client_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `patch_client_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `patch_client_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `patch_client_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def plan_exists(self, authorization, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Check that plan available for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plan_exists(authorization, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str permission_type: Permission Type
        :param int tenant_id: Tenant Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.plan_exists_with_http_info(authorization, plan_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.plan_exists_with_http_info(authorization, plan_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def plan_exists_with_http_info(self, authorization, plan_id, x_api_key, **kwargs):  # noqa: E501
        """Check that plan available for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.plan_exists_with_http_info(authorization, plan_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int plan_id: Plan Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str permission_type: Permission Type
        :param int tenant_id: Tenant Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'plan_id', 'x_api_key', 'accept', 'permission_type', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `plan_exists`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `plan_exists`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `plan_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'permission_type' in params:
            query_params.append(('permissionType', params['permission_type']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/plans/{planId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_plan(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Updates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: PlanId (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, **kwargs)  # noqa: E501
            return data

    def update_client_plan_with_http_info(self, body, authorization, x_api_key, client_id, plan_id, **kwargs):  # noqa: E501
        """Updates a plan for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_plan_with_http_info(body, authorization, x_api_key, client_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BasePlan body: Plan (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client Id - The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int plan_id: PlanId (required)
        :param str accept:
        :param int tenant_id: Tenant Id
        :return: BasePlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'plan_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_plan`")  # noqa: E501
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `update_client_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/plans/{planId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BasePlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
