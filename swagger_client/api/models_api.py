# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ModelsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_portfolio_model(self, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Activates or deactivates a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_portfolio_model(authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int model_id: The model identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool is_active: Toggle to activate or deactivate model.
        :param int tenant_id: The tenant identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_portfolio_model_with_http_info(authorization, model_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_portfolio_model_with_http_info(authorization, model_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def activate_portfolio_model_with_http_info(self, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Activates or deactivates a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_portfolio_model_with_http_info(authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int model_id: The model identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool is_active: Toggle to activate or deactivate model.
        :param int tenant_id: The tenant identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'model_id', 'x_api_key', 'accept', 'is_active', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_portfolio_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `activate_portfolio_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `activate_portfolio_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `activate_portfolio_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []
        if 'is_active' in params:
            query_params.append(('isActive', params['is_active']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models/{modelId}/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_draft_portfolio_model(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a draft portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_draft_portfolio_model(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftPortfolioModel body: The Portfolio Model request. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The Tenant Identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_draft_portfolio_model_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_draft_portfolio_model_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_draft_portfolio_model_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a draft portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_draft_portfolio_model_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftPortfolioModel body: The Portfolio Model request. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The Tenant Identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_draft_portfolio_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_draft_portfolio_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models/draft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_model(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_model(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePortfolioModel body: The Portfolio Model request. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The Tenant Identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_model_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_model_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_model_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_model_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePortfolioModel body: The Portfolio Model request. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The Tenant Identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_provider_model(self, body, authorization, x_api_key, app_id, **kwargs):  # noqa: E501
        """Creates a new provider model.  # noqa: E501

        Create a new provider model or a new version of an existing model.  To create a new version of an existing model make sure that the model.code is the same.  This will then archive the previous version and the firm can then approve the new version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_provider_model(body, authorization, x_api_key, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProviderModel body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_provider_model_with_http_info(body, authorization, x_api_key, app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_provider_model_with_http_info(body, authorization, x_api_key, app_id, **kwargs)  # noqa: E501
            return data

    def create_provider_model_with_http_info(self, body, authorization, x_api_key, app_id, **kwargs):  # noqa: E501
        """Creates a new provider model.  # noqa: E501

        Create a new provider model or a new version of an existing model.  To create a new version of an existing model make sure that the model.code is the same.  This will then archive the previous version and the firm can then approve the new version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_provider_model_with_http_info(body, authorization, x_api_key, app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProviderModel body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'app_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_provider_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_provider_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_provider_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_provider_model`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `create_provider_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{appId}/models', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model(self, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model(authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int model_id: The model identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The tenant identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_with_http_info(authorization, model_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_with_http_info(authorization, model_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_model_with_http_info(self, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_with_http_info(authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int model_id: The model identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The tenant identifier.
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'model_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models/{modelId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provider_model(self, app_id, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a provider model.  # noqa: E501

        Gives model providers the ability to view and manage their models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_model(app_id, authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int model_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provider_model_with_http_info(app_id, authorization, model_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_model_with_http_info(app_id, authorization, model_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_provider_model_with_http_info(self, app_id, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a provider model.  # noqa: E501

        Gives model providers the ability to view and manage their models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_model_with_http_info(app_id, authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int model_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ProviderModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'model_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_provider_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_provider_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_provider_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_provider_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{appId}/models/{modelId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provider_models(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of provider models.  # noqa: E501

        This will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_models(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __isAccepted__ ( in, eq, ne )   * __appId__ (in, eq, ne, startswith )   * __code__ ( in, eq, ne, startswith )   * __name__ ( in, eq, ne, startswith )   * __atr.code__ ( in, eq, startswith )  Usage example: `filter=appId eq 'a13f242' and code startswith 'abc'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __isAccepted__  * __code__  * __name__    Usage example: `orderby=name asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: ProviderModelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_provider_models_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_models_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_provider_models_with_http_info(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of provider models.  # noqa: E501

        This will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_provider_models_with_http_info(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.  For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).  Supported fields and operators:   * __id__ ( in, eq, ne, gt, ge, lt, le )   * __isAccepted__ ( in, eq, ne )   * __appId__ (in, eq, ne, startswith )   * __code__ ( in, eq, ne, startswith )   * __name__ ( in, eq, ne, startswith )   * __atr.code__ ( in, eq, startswith )  Usage example: `filter=appId eq 'a13f242' and code startswith 'abc'`
        :param str orderby: By default the list will be ordered desc by Id.    However it can be changed using one or more supported fields below.  Supported fields:   * __id__  * __isAccepted__  * __code__  * __name__    Usage example: `orderby=name asc`
        :param int skip: Index from which the results will start.
        :param int top: Number of records to retrieve
        :return: ProviderModelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_provider_models`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_provider_models`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_provider_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{appId}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProviderModelCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_models(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of portfolio models.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_models(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool details_only: Flag to choose full or short version of Model Portfolio.
        :param str filter: <returns>A list of matching portfolio model documents.</returns>              Results can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields and operators:              * `id` (eq, ne, in, gt, ge, lt, le)              * `isActive` (eq)              * `provider` (eq, startswith, in)              * `code` (eq, in)              * `createdAt` (le,lt,gt,ge,eq)              * `name` (startswith)              * `groupOwner.id` (eq, in)              * `groupOwner.name` (startswith)              * `currentGroupName` (startswith)              * `allowRebalance` (eq)              * `isInvested` (eq)              * `tags.any` (in)              * `investmentAmountLower` (le, ge)              * `investmentAmountUpper` (le, ge)              * `atr.code` (eq, startswith, in)              * `atr.code.any` (in)              * `status` (eq)              * `version` (eq)              * `allowRebalance` (eq)              * `isLatestVersion` (eq)              * `investmentObjective` (in)              * `investmentManagementStyle` (eq)              * `taxQualified` (eq)              * `esg` (in)              * `riskProfile.Id` (eq, in)              * `isImps` (eq)              * `IsExternallyManaged` (eq)              * `IsDiscretionaryFundManaged` (eq)              * `platformProvider` (startswith)
        :param str order_by: By default the list will be ordered desc by Id.  However it can be changed using one or more supported fields below.  Supported fields:  * `id`  * `code`  * `createdAt`  * `name`  * `provider`  * `groupOwner.name`  * `currentGroupName`  * `status`  * `version`  * `IsDiscretionaryFundManaged`  Supported directions asc, desc.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: The tenant identifier.
        :param int top: The number of records to retrieve (default 25, max 100).
        :return: PortfolioModelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_models_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_models_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_models_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of portfolio models.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_models_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool details_only: Flag to choose full or short version of Model Portfolio.
        :param str filter: <returns>A list of matching portfolio model documents.</returns>              Results can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields and operators:              * `id` (eq, ne, in, gt, ge, lt, le)              * `isActive` (eq)              * `provider` (eq, startswith, in)              * `code` (eq, in)              * `createdAt` (le,lt,gt,ge,eq)              * `name` (startswith)              * `groupOwner.id` (eq, in)              * `groupOwner.name` (startswith)              * `currentGroupName` (startswith)              * `allowRebalance` (eq)              * `isInvested` (eq)              * `tags.any` (in)              * `investmentAmountLower` (le, ge)              * `investmentAmountUpper` (le, ge)              * `atr.code` (eq, startswith, in)              * `atr.code.any` (in)              * `status` (eq)              * `version` (eq)              * `allowRebalance` (eq)              * `isLatestVersion` (eq)              * `investmentObjective` (in)              * `investmentManagementStyle` (eq)              * `taxQualified` (eq)              * `esg` (in)              * `riskProfile.Id` (eq, in)              * `isImps` (eq)              * `IsExternallyManaged` (eq)              * `IsDiscretionaryFundManaged` (eq)              * `platformProvider` (startswith)
        :param str order_by: By default the list will be ordered desc by Id.  However it can be changed using one or more supported fields below.  Supported fields:  * `id`  * `code`  * `createdAt`  * `name`  * `provider`  * `groupOwner.name`  * `currentGroupName`  * `status`  * `version`  * `IsDiscretionaryFundManaged`  Supported directions asc, desc.
        :param int skip: Number of records to skip. Must be greater than or equal to zero.
        :param int tenant_id: The tenant identifier.
        :param int top: The number of records to retrieve (default 25, max 100).
        :return: PortfolioModelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'details_only', 'filter', 'order_by', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_models`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'details_only' in params:
            query_params.append(('detailsOnly', params['details_only']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModelCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_model(self, body, authorization, x_api_key, tenant_id, model_id, **kwargs):  # noqa: E501
        """Patch update a model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_model(body, authorization, x_api_key, tenant_id, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the model resource.
Properties which cannot be updated on PUT, cannot be updated using patch
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/expectedReturn",
    "value": "1.234"
} (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int tenant_id: The tenant Id (required)
        :param int model_id: The model identifier. (required)
        :param str accept:
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_model_with_http_info(body, authorization, x_api_key, tenant_id, model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_model_with_http_info(body, authorization, x_api_key, tenant_id, model_id, **kwargs)  # noqa: E501
            return data

    def patch_model_with_http_info(self, body, authorization, x_api_key, tenant_id, model_id, **kwargs):  # noqa: E501
        """Patch update a model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_model_with_http_info(body, authorization, x_api_key, tenant_id, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Operation] body: A Json Patch document containing details of modifications to be made to the model resource.
Properties which cannot be updated on PUT, cannot be updated using patch
            
For a simple example a request contains the following JSON:
            
{
    "op": "replace",
    "path": "/expectedReturn",
    "value": "1.234"
} (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int tenant_id: The tenant Id (required)
        :param int model_id: The model identifier. (required)
        :param str accept:
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'tenant_id', 'model_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `patch_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `patch_model`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `patch_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `patch_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models/{modelId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_draft_portfolio_model(self, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Publishes a draft portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_draft_portfolio_model(authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int model_id: The model identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The tenant identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_draft_portfolio_model_with_http_info(authorization, model_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_draft_portfolio_model_with_http_info(authorization, model_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def publish_draft_portfolio_model_with_http_info(self, authorization, model_id, x_api_key, **kwargs):  # noqa: E501
        """Publishes a draft portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_draft_portfolio_model_with_http_info(authorization, model_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int model_id: The model identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The tenant identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'model_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_draft_portfolio_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `publish_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `publish_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `publish_draft_portfolio_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models/draft/{modelId}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_draft_portfolio_model(self, body, authorization, x_api_key, tenant_id, model_id, **kwargs):  # noqa: E501
        """Put update a draft portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_portfolio_model(body, authorization, x_api_key, tenant_id, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftPortfolioModel body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int tenant_id: The tenant Id (required)
        :param int model_id: The model identifier. (required)
        :param str accept:
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_draft_portfolio_model_with_http_info(body, authorization, x_api_key, tenant_id, model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_draft_portfolio_model_with_http_info(body, authorization, x_api_key, tenant_id, model_id, **kwargs)  # noqa: E501
            return data

    def update_draft_portfolio_model_with_http_info(self, body, authorization, x_api_key, tenant_id, model_id, **kwargs):  # noqa: E501
        """Put update a draft portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_draft_portfolio_model_with_http_info(body, authorization, x_api_key, tenant_id, model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DraftPortfolioModel body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int tenant_id: The tenant Id (required)
        :param int model_id: The model identifier. (required)
        :param str accept:
        :return: PortfolioModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'tenant_id', 'model_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_draft_portfolio_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `update_draft_portfolio_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params or
                params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `update_draft_portfolio_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models/draft/{modelId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortfolioModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_or_create_portfolio_model(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Updates or creates a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_or_create_portfolio_model(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortfolioModel body: The Portfolio Model request. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The Tenant Identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_or_create_portfolio_model_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_or_create_portfolio_model_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def update_or_create_portfolio_model_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Updates or creates a portfolio model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_or_create_portfolio_model_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortfolioModel body: The Portfolio Model request. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: The Tenant Identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_or_create_portfolio_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_or_create_portfolio_model`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_or_create_portfolio_model`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_or_create_portfolio_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/models', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
