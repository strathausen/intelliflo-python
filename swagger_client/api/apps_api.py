# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AppsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exist_installed_app(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Checks if an installed app exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exist_installed_app(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exist_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.exist_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def exist_installed_app_with_http_info(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Checks if an installed app exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exist_installed_app_with_http_info(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exist_installed_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `exist_installed_app`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `exist_installed_app`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `exist_installed_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_app(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns an installed app  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: App
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_app_with_http_info(app_id, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_installed_app_with_http_info(self, app_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns an installed app  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_with_http_info(app_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: App
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_installed_app`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_installed_app`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_installed_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='App',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_app_group_settings(self, app_id, authorization, group_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with this will return the specific group settings for the group. This endpoint will not traverse the hierarchy to find the first instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_group_settings(app_id, authorization, group_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str group_id: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_app_group_settings_with_http_info(app_id, authorization, group_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_app_group_settings_with_http_info(app_id, authorization, group_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_installed_app_group_settings_with_http_info(self, app_id, authorization, group_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with this will return the specific group settings for the group. This endpoint will not traverse the hierarchy to find the first instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_group_settings_with_http_info(app_id, authorization, group_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param str group_id: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'group_id', 'tenant_id', 'x_api_key', 'accept', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_app_group_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_installed_app_group_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/group_settings/{groupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_installed_app_user_settings(self, app_id, authorization, tenant_id, user_id, x_api_key, **kwargs):  # noqa: E501
        """Returns user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will allow the retrieval of the current users settings only. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return the user settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_user_settings(app_id, authorization, tenant_id, user_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str user_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, user_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, user_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_installed_app_user_settings_with_http_info(self, app_id, authorization, tenant_id, user_id, x_api_key, **kwargs):  # noqa: E501
        """Returns user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will allow the retrieval of the current users settings only. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return the user settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, user_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str user_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param bool x_iflo_decrypt:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'tenant_id', 'user_id', 'x_api_key', 'accept', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_installed_app_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_installed_app_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/user_settings/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_installed_app_group_settings(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of group settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will return the first instance of group settings in the upward lineage of the tenants group hierarchy. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all group settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_group_settings(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_installed_app_group_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_installed_app_group_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_installed_app_group_settings_with_http_info(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of group settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will return the first instance of group settings in the upward lineage of the tenants group hierarchy. If called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all group settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_group_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'tenant_id', 'x_api_key', 'accept', 'skip', 'top', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_installed_app_group_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `list_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_installed_app_group_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/group_settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstalledAppGroupSettingCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_installed_app_user_settings(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lists of user settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) this will return the current users settings only. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all user settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_user_settings(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_installed_app_user_settings_with_http_info(self, app_id, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lists of user settings for a given installed app  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) this will return the current users settings only. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will return all user settings for a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_app_user_settings_with_http_info(app_id, authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int top:
        :param bool x_iflo_decrypt:
        :return: InstalledAppGroupSettingCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization', 'tenant_id', 'x_api_key', 'accept', 'skip', 'top', 'x_iflo_decrypt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_installed_app_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `list_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_installed_app_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_decrypt' in params:
            header_params['x-iflo-decrypt'] = params['x_iflo_decrypt']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/user_settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstalledAppGroupSettingCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_installed_apps(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of installed apps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_apps(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int tenant_id:
        :param int top:
        :param int user_id:
        :return: AppCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_installed_apps_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_installed_apps_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_installed_apps_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of installed apps  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_installed_apps_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int skip:
        :param int tenant_id:
        :param int top:
        :param int user_id:
        :return: AppCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'skip', 'tenant_id', 'top', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_installed_apps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_installed_apps`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_installed_apps`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_installed_app_group_settings(self, body, authorization, x_api_key, app_id, group_id, **kwargs):  # noqa: E501
        """Updates group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the specific group settings for the group.       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_group_settings(body, authorization, x_api_key, app_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str group_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_installed_app_group_settings_with_http_info(body, authorization, x_api_key, app_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_installed_app_group_settings_with_http_info(body, authorization, x_api_key, app_id, group_id, **kwargs)  # noqa: E501
            return data

    def update_installed_app_group_settings_with_http_info(self, body, authorization, x_api_key, app_id, group_id, **kwargs):  # noqa: E501
        """Updates group settings for a given installed app and group  # noqa: E501

        Give Apps the ability to define and capture their own dynamic group settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorisation Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the specific group settings for the group.       # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_group_settings_with_http_info(body, authorization, x_api_key, app_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str group_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'app_id', 'group_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_installed_app_group_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `update_installed_app_group_settings`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_installed_app_group_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/group_settings/{groupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_installed_app_user_settings(self, body, authorization, x_api_key, app_id, user_id, **kwargs):  # noqa: E501
        """Updates user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the settings for the current user. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will save the settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_user_settings(body, authorization, x_api_key, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str user_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_installed_app_user_settings_with_http_info(body, authorization, x_api_key, app_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_installed_app_user_settings_with_http_info(body, authorization, x_api_key, app_id, user_id, **kwargs)  # noqa: E501
            return data

    def update_installed_app_user_settings_with_http_info(self, body, authorization, x_api_key, app_id, user_id, **kwargs):  # noqa: E501
        """Updates user settings for a given installed app and user  # noqa: E501

        Give Apps the ability to define and capture their own dynamic user settings data using JSON schema definitions. For more detail and usage refer to [AppSettingsExtension](https://developer.gb.intelliflo.net/docs/ExtensionReference#iflo:store:AppSettingsExtension)  When called with [Authorization Code flow](https://developer.gb.intelliflo.net/docs/Authentication#CodeFlow) then this will save the settings for the current user. If it is called with [Tenant Client Credentials flow](https://developer.gb.intelliflo.net/docs/Authentication#TCCFlow) then it will save the settings for the requested user within a tenant.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installed_app_user_settings_with_http_info(body, authorization, x_api_key, app_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppSettingsDocument body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str app_id: (required)
        :param str user_id: (required)
        :param str accept:
        :param int tenant_id:
        :return: AppSettingsDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'app_id', 'user_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_installed_app_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `update_installed_app_user_settings`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_installed_app_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/installed_apps/{appId}/user_settings/{userId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppSettingsDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
