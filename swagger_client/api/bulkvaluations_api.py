# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BulkvaluationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_valuation_batch(self, authorization, batch_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing valuationbatch and undo any related valuations and transactions  # noqa: E501

        Use this endpoint to undo any valuations and transactions.                * Only valuationbatches in `completed` state can be undone.  * This is **NOT** meant as a regular use case, instead should only be used when incorrect data was sent in a previous batch.  * Any such incorrect data must be undone within 3 months of creating the valuationbatch or it will be `expired` and then it can no longer be undone.  * If you need to undo the batch, make sure you have spoken to the tenant first so they can take appropriate actions if they have already used the incorrect data when advising a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_valuation_batch(authorization, batch_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: Batch Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_valuation_batch_with_http_info(authorization, batch_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_valuation_batch_with_http_info(authorization, batch_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_valuation_batch_with_http_info(self, authorization, batch_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing valuationbatch and undo any related valuations and transactions  # noqa: E501

        Use this endpoint to undo any valuations and transactions.                * Only valuationbatches in `completed` state can be undone.  * This is **NOT** meant as a regular use case, instead should only be used when incorrect data was sent in a previous batch.  * Any such incorrect data must be undone within 3 months of creating the valuationbatch or it will be `expired` and then it can no longer be undone.  * If you need to undo the batch, make sure you have spoken to the tenant first so they can take appropriate actions if they have already used the incorrect data when advising a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_valuation_batch_with_http_info(authorization, batch_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: Batch Id (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'batch_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_valuation_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_valuation_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `delete_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_valuation_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchId'] = params['batch_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches/{batchId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enqueue_valuation_batch(self, body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs):  # noqa: E501
        """Creates a new valuationbatch and enqueues it for importing  # noqa: E501

        Use this endpoint to upload large batches of valuation data.    ### Request Headers  In addition to standard headers like `Authorization` and `x-api-key` there are some additional `headers` required for bulk valuation.  Please see **Request Headers** section below for details.    ### Request Body  * Header must be provided in the first line separated with `single tab` and must be as below.  `PolicyNumber    PortalReference CodeType    Code    Name    Units   UnitsDate   UnitPrice   CurrencyCode`  * Data must be of the product provider  and/or of any its linked product providers.  * Maximum size supported per batch is 10 MB.  * Data can be split in multiple batches, but ensure single policy's holdings are NOT split between batches.  * Any duplicate holdings for a single policy must be merged.  * Unit price can be omitted if the fund can be matched to a feed fund or equity or an existing manual fund.    #### Details of schema    | Field Name     | Type  |Description |  |:-----------------|:-------------------|:---------|  | PolicyNumber    | string(255) | **Required**.  Unique number to identify the plan |  | PortalReference | string(255) | **Optional**.  Any additional provider reference|  | CodeType        | string(15) | **Required**.  Allowed values are ` 'ISIN','SEDOL','CITI','MEX','EPIC','ProviderCode','APIR','TICKER' depending on region.`|  | Code | string(50) | **Required**.|  | Name | string(255) | **Required**.|  | Units | decimal(18,4) | **Required**.|  | UnitsDate | string(10) | **Required**.  Must be in ISO 8601 Date format (` 'YYYY-MM-DD' `) |  | UnitPrice | decimal(18,4) | **Optional**.|  | CurrencyCode | string(3) | **Required**. Must be the three letter ISO 4217 alphabetic code, We also support `GBX` |  ### Example   Note: A full list of regional URL's are available [here](docs/URLs).  ```curl  $YOUR_API_KEY='your Intelliflo API access key'  $YOUR_AUTHENTICATION_TOKEN='your JSON Web Token'  $PRODUCT_PROVIDER_ID='correct product provider id - double check if you are not sure'  curl -X POST \\    https://api.intelliflo.com/v2/valuations/batches \\    -H 'Authorization: $YOUR_AUTHENTICATION_TOKEN' \\    -H 'x-api-key: $YOUR_API_KEY' \\    -H 'Content-Type: text/tab-separated-values' \\    -H 'x-iflo-productProviderId: $PRODUCT_PROVIDER_ID' \\    -d '  PolicyNumber PortalReference CodeType Code Name Units UnitsDate UnitPrice CurrencyCode  isa01  isin IE00BGJWXV08 Metzler Cap 100 2019-02-28 85 GBP  isa01  Epic 0JGD ISHARES GLOBAL 50 2019-02-26 77.00 EUR  isa01  ProviderCode Cash Cash 75 2019-02-26 1 GBX  '  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enqueue_valuation_batch(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppId body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int x_iflo_product_provider_id: Id of the Product Provider  You can list the available product providers using the [ProductProviders API](/apis?tags=productproviders#ListProductproviders) (required)
        :param int tenant_id: (required)
        :param str accept:
        :param bool x_iflo_planmatch_includeportalreference: Determines whether to include the portal reference in matching algorithm.  Default is `false` and plans will be matched only on `PolicyNumber`.  By providing `true` in here plans will be matched on `PolicyNumber`  and `PortalReference`.  You may want to consider this when `PolicyNumber` is not unique to the product provider.
        :param bool x_iflo_planmatch_normalised: Determines whether to sanitize the field values in the matching algorithm.  Default is `false` and will be an exact (but not case sensitive) match on the matching fields.  By providing `true` in here we will remove any spaces and any leading zeroes in IO before matching.  In such case ensure the batch has them already removed in the matching fields.
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enqueue_valuation_batch_with_http_info(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.enqueue_valuation_batch_with_http_info(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs)  # noqa: E501
            return data

    def enqueue_valuation_batch_with_http_info(self, body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, **kwargs):  # noqa: E501
        """Creates a new valuationbatch and enqueues it for importing  # noqa: E501

        Use this endpoint to upload large batches of valuation data.    ### Request Headers  In addition to standard headers like `Authorization` and `x-api-key` there are some additional `headers` required for bulk valuation.  Please see **Request Headers** section below for details.    ### Request Body  * Header must be provided in the first line separated with `single tab` and must be as below.  `PolicyNumber    PortalReference CodeType    Code    Name    Units   UnitsDate   UnitPrice   CurrencyCode`  * Data must be of the product provider  and/or of any its linked product providers.  * Maximum size supported per batch is 10 MB.  * Data can be split in multiple batches, but ensure single policy's holdings are NOT split between batches.  * Any duplicate holdings for a single policy must be merged.  * Unit price can be omitted if the fund can be matched to a feed fund or equity or an existing manual fund.    #### Details of schema    | Field Name     | Type  |Description |  |:-----------------|:-------------------|:---------|  | PolicyNumber    | string(255) | **Required**.  Unique number to identify the plan |  | PortalReference | string(255) | **Optional**.  Any additional provider reference|  | CodeType        | string(15) | **Required**.  Allowed values are ` 'ISIN','SEDOL','CITI','MEX','EPIC','ProviderCode','APIR','TICKER' depending on region.`|  | Code | string(50) | **Required**.|  | Name | string(255) | **Required**.|  | Units | decimal(18,4) | **Required**.|  | UnitsDate | string(10) | **Required**.  Must be in ISO 8601 Date format (` 'YYYY-MM-DD' `) |  | UnitPrice | decimal(18,4) | **Optional**.|  | CurrencyCode | string(3) | **Required**. Must be the three letter ISO 4217 alphabetic code, We also support `GBX` |  ### Example   Note: A full list of regional URL's are available [here](docs/URLs).  ```curl  $YOUR_API_KEY='your Intelliflo API access key'  $YOUR_AUTHENTICATION_TOKEN='your JSON Web Token'  $PRODUCT_PROVIDER_ID='correct product provider id - double check if you are not sure'  curl -X POST \\    https://api.intelliflo.com/v2/valuations/batches \\    -H 'Authorization: $YOUR_AUTHENTICATION_TOKEN' \\    -H 'x-api-key: $YOUR_API_KEY' \\    -H 'Content-Type: text/tab-separated-values' \\    -H 'x-iflo-productProviderId: $PRODUCT_PROVIDER_ID' \\    -d '  PolicyNumber PortalReference CodeType Code Name Units UnitsDate UnitPrice CurrencyCode  isa01  isin IE00BGJWXV08 Metzler Cap 100 2019-02-28 85 GBP  isa01  Epic 0JGD ISHARES GLOBAL 50 2019-02-26 77.00 EUR  isa01  ProviderCode Cash Cash 75 2019-02-26 1 GBX  '  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enqueue_valuation_batch_with_http_info(body, authorization, x_api_key, x_iflo_product_provider_id, tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppId body: (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int x_iflo_product_provider_id: Id of the Product Provider  You can list the available product providers using the [ProductProviders API](/apis?tags=productproviders#ListProductproviders) (required)
        :param int tenant_id: (required)
        :param str accept:
        :param bool x_iflo_planmatch_includeportalreference: Determines whether to include the portal reference in matching algorithm.  Default is `false` and plans will be matched only on `PolicyNumber`.  By providing `true` in here plans will be matched on `PolicyNumber`  and `PortalReference`.  You may want to consider this when `PolicyNumber` is not unique to the product provider.
        :param bool x_iflo_planmatch_normalised: Determines whether to sanitize the field values in the matching algorithm.  Default is `false` and will be an exact (but not case sensitive) match on the matching fields.  By providing `true` in here we will remove any spaces and any leading zeroes in IO before matching.  In such case ensure the batch has them already removed in the matching fields.
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'x_iflo_product_provider_id', 'tenant_id', 'accept', 'x_iflo_planmatch_includeportalreference', 'x_iflo_planmatch_normalised']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enqueue_valuation_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_iflo_product_provider_id' is set
        if ('x_iflo_product_provider_id' not in params or
                params['x_iflo_product_provider_id'] is None):
            raise ValueError("Missing the required parameter `x_iflo_product_provider_id` when calling `enqueue_valuation_batch`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `enqueue_valuation_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_planmatch_includeportalreference' in params:
            header_params['x-iflo-planmatch-includeportalreference'] = params['x_iflo_planmatch_includeportalreference']  # noqa: E501
        if 'x_iflo_planmatch_normalised' in params:
            header_params['x-iflo-planmatch-normalised'] = params['x_iflo_planmatch_normalised']  # noqa: E501
        if 'x_iflo_product_provider_id' in params:
            header_params['x-iflo-productProviderId'] = params['x_iflo_product_provider_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/tab-separated-values', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_valuation_batch(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single valuationbatch  # noqa: E501

        Use this endpoint to view the status of a batch.                Batch can have one of the following status  * Queued  * InProgress  * Failed  * Completed  * DeleteInProgress  * DeleteFailed  * Expired (When a batch is older than 3 months batch data will be removed and the batch state will be set to `Expired` by system)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_valuation_batch(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_valuation_batch_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_valuation_batch_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_valuation_batch_with_http_info(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a single valuationbatch  # noqa: E501

        Use this endpoint to view the status of a batch.                Batch can have one of the following status  * Queued  * InProgress  * Failed  * Completed  * DeleteInProgress  * DeleteFailed  * Expired (When a batch is older than 3 months batch data will be removed and the batch state will be set to `Expired` by system)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_valuation_batch_with_http_info(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: ValuationBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'batch_id', 'tenant_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_valuation_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_valuation_batch`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `get_valuation_batch`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `get_valuation_batch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_valuation_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchId'] = params['batch_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches/{batchId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_valuation_batch_results(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the results for a single valuationbatch.  # noqa: E501

        Use this endpoint to view the results of a valuationbatch  * Results will not be available after the valuationbatch is `expired`  * It will have items grouped in `holdings` by `policyNumber` and `portalReference`  * It will have a `matched_plan` indicating if the item has matched to a plan or not  * when `matched_plan = true`      * It will have a `matched_plan_href` to navigate to the plan  * when `matched_plan = true and is_imported = true`      * Holdings will have a `matched_holding_href` to navigate to the holding  * Note that if no fund price is supplied and the fund cannot be matched to a feed fund or equity    then the valuation for plan will not be imported  Use GET valuations/batches to get the batch id and to see the status of the batch.  You can use the optional header x-iflo-exclude-holdings=true to exclude the holdings detail from the response.  This is advisable when fetching the results of large batches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batch_results(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `PolicyNumber` ( `in`, `eq`, `ne`, `startswith` ),              `PortalReference` ( `in`, `eq`, `ne`, `startswith` ),              `Matched_Plan` ( `eq`, `ne` )              `Is_Imported` ( `eq`, `ne` )              Usage example: `filter=matched_plan eq false`
        :param str orderby: By default the results will be ordered asc by PolicyNumber.              However it can be changed using one or more supported fields below.              `PolicyNumber`, `PortalReference`, `matched_plan`              Usage example: `orderby=PortalReference desc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :param bool x_iflo_exclude_holdings:
        :return: ValuationBatchResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_valuation_batch_results_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_valuation_batch_results_with_http_info(authorization, batch_id, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_valuation_batch_results_with_http_info(self, authorization, batch_id, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the results for a single valuationbatch.  # noqa: E501

        Use this endpoint to view the results of a valuationbatch  * Results will not be available after the valuationbatch is `expired`  * It will have items grouped in `holdings` by `policyNumber` and `portalReference`  * It will have a `matched_plan` indicating if the item has matched to a plan or not  * when `matched_plan = true`      * It will have a `matched_plan_href` to navigate to the plan  * when `matched_plan = true and is_imported = true`      * Holdings will have a `matched_holding_href` to navigate to the holding  * Note that if no fund price is supplied and the fund cannot be matched to a feed fund or equity    then the valuation for plan will not be imported  Use GET valuations/batches to get the batch id and to see the status of the batch.  You can use the optional header x-iflo-exclude-holdings=true to exclude the holdings detail from the response.  This is advisable when fetching the results of large batches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batch_results_with_http_info(authorization, batch_id, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int batch_id: batch id (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Results can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `PolicyNumber` ( `in`, `eq`, `ne`, `startswith` ),              `PortalReference` ( `in`, `eq`, `ne`, `startswith` ),              `Matched_Plan` ( `eq`, `ne` )              `Is_Imported` ( `eq`, `ne` )              Usage example: `filter=matched_plan eq false`
        :param str orderby: By default the results will be ordered asc by PolicyNumber.              However it can be changed using one or more supported fields below.              `PolicyNumber`, `PortalReference`, `matched_plan`              Usage example: `orderby=PortalReference desc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :param bool x_iflo_exclude_holdings:
        :return: ValuationBatchResultCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'batch_id', 'tenant_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top', 'x_iflo_exclude_holdings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_valuation_batch_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_valuation_batch_results`")  # noqa: E501
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `list_valuation_batch_results`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_valuation_batch_results`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_valuation_batch_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchId'] = params['batch_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_iflo_exclude_holdings' in params:
            header_params['x-iflo-exclude-holdings'] = params['x_iflo_exclude_holdings']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches/{batchId}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatchResultCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_valuation_batches(self, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of valuationbatch  # noqa: E501

        Use this endpoint to view the statuses of multiple valuationbatches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batches(authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: List can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `State` (`in`,`eq`,`ne`),              `CreatedAt` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `ProductProvider.Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `CreatedBy.Name` (`in`,`eq`,`ne`,`startswith`)              Usage example: `filter=state eq 'failed' `
        :param str orderby: By default the list will be ordered desc by Id.              However it can be changed using one or more supported fields below.              `Id`, `CreatedAt`, `ProductProvider.Id`, `CreatedBy.Name`              Usage example: `orderby=CreatedAt asc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :return: ValuationBatchCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_valuation_batches_with_http_info(authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_valuation_batches_with_http_info(authorization, tenant_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_valuation_batches_with_http_info(self, authorization, tenant_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of valuationbatch  # noqa: E501

        Use this endpoint to view the statuses of multiple valuationbatches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_valuation_batches_with_http_info(authorization, tenant_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int tenant_id: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: List can be filtered using one or more supported fields and operators below.              For details on how to use the query language please see [QueryLang](docs/ApiQueryLang).              Supported fields (operators) are              `Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `State` (`in`,`eq`,`ne`),              `CreatedAt` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `ProductProvider.Id` (`in`,`eq`,`ne`,`gt`,`ge`,`lt`,`le`),              `CreatedBy.Name` (`in`,`eq`,`ne`,`startswith`)              Usage example: `filter=state eq 'failed' `
        :param str orderby: By default the list will be ordered desc by Id.              However it can be changed using one or more supported fields below.              `Id`, `CreatedAt`, `ProductProvider.Id`, `CreatedBy.Name`              Usage example: `orderby=CreatedAt asc`
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int top: Number of records to retrieve (default 100, max 500)
        :return: ValuationBatchCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'tenant_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_valuation_batches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_valuation_batches`")  # noqa: E501
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `list_valuation_batches`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_valuation_batches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/valuations/batches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ValuationBatchCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
