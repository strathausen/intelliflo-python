# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LifecyclesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_lifecycle(self, authorization, lifecycle_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lifecycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lifecycle(authorization, lifecycle_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lifecycle_id: Lifecycle identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Lifecycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lifecycle_with_http_info(authorization, lifecycle_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lifecycle_with_http_info(authorization, lifecycle_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_lifecycle_with_http_info(self, authorization, lifecycle_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a lifecycle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lifecycle_with_http_info(authorization, lifecycle_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lifecycle_id: Lifecycle identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Lifecycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lifecycle_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lifecycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_lifecycle`")  # noqa: E501
        # verify the required parameter 'lifecycle_id' is set
        if ('lifecycle_id' not in params or
                params['lifecycle_id'] is None):
            raise ValueError("Missing the required parameter `lifecycle_id` when calling `get_lifecycle`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_lifecycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lifecycle_id' in params:
            path_params['lifecycleId'] = params['lifecycle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/lifecycles/{lifecycleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lifecycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_lifecycle_statuses(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of available lifecycle statuses  # noqa: E501

        This endpoint allows an API user to identify the plan statuses used by a tenant.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycle_statuses(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: QueryLang filter.                             Properties and operators supported:                             * `Name` ( in, eq, ne, startsWith )               * `SystemName` ( in, eq, ne, startsWith )                             See [QueryLang](docs/ApiQueryLang) for further usage details
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant identifier
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: LifecycleStatusCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_lifecycle_statuses_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_lifecycle_statuses_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_lifecycle_statuses_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of available lifecycle statuses  # noqa: E501

        This endpoint allows an API user to identify the plan statuses used by a tenant.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycle_statuses_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: QueryLang filter.                             Properties and operators supported:                             * `Name` ( in, eq, ne, startsWith )               * `SystemName` ( in, eq, ne, startsWith )                             See [QueryLang](docs/ApiQueryLang) for further usage details
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant identifier
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: LifecycleStatusCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_lifecycle_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_lifecycle_statuses`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_lifecycle_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/lifecycles/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LifecycleStatusCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_lifecycle_transitions(self, authorization, lifecycle_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of transitions for a given lifecycle.  # noqa: E501

        This endpoint provides the ability to identify the valid transitions of a plan from one state to another.  These state transition rules are set per tenant.  Calling this API is a necessary pre-requisite before attempting to set the status of a plan.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycle_transitions(authorization, lifecycle_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lifecycle_id: Lifecycle identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Used to filter transitions.                             Properties and operators supported:                             * `state` (`eq`, `in`, `ne`)                             Examples:                             * `filter=state eq 'In force'`               * `filter=state in ('Submitted to Provider', 'In force')`               * `filter=state ne 'Submitted to Provider'`
        :return: LifecycleTransitionValueCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_lifecycle_transitions_with_http_info(authorization, lifecycle_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_lifecycle_transitions_with_http_info(authorization, lifecycle_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_lifecycle_transitions_with_http_info(self, authorization, lifecycle_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of transitions for a given lifecycle.  # noqa: E501

        This endpoint provides the ability to identify the valid transitions of a plan from one state to another.  These state transition rules are set per tenant.  Calling this API is a necessary pre-requisite before attempting to set the status of a plan.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycle_transitions_with_http_info(authorization, lifecycle_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lifecycle_id: Lifecycle identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Used to filter transitions.                             Properties and operators supported:                             * `state` (`eq`, `in`, `ne`)                             Examples:                             * `filter=state eq 'In force'`               * `filter=state in ('Submitted to Provider', 'In force')`               * `filter=state ne 'Submitted to Provider'`
        :return: LifecycleTransitionValueCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lifecycle_id', 'x_api_key', 'accept', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_lifecycle_transitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_lifecycle_transitions`")  # noqa: E501
        # verify the required parameter 'lifecycle_id' is set
        if ('lifecycle_id' not in params or
                params['lifecycle_id'] is None):
            raise ValueError("Missing the required parameter `lifecycle_id` when calling `list_lifecycle_transitions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_lifecycle_transitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lifecycle_id' in params:
            path_params['lifecycleId'] = params['lifecycle_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/lifecycles/{lifecycleId}/transitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LifecycleTransitionValueCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_lifecycles(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of lifecycles.  # noqa: E501

        This endpoint provides the ability to identify the plan lifecycles that have been set for a tenant.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycles(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3),              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre%'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_lifecycles_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_lifecycles_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_lifecycles_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of lifecycles.  # noqa: E501

        This endpoint provides the ability to identify the plan lifecycles that have been set for a tenant.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lifecycles_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3),              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre%'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_lifecycles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_lifecycles`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_lifecycles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/lifecycles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LifecycleDocumentCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_plantype_lifecycles(self, authorization, name, x_api_key, **kwargs):  # noqa: E501
        """Retrieves a list of lifecycles associated with the specified planType  # noqa: E501

        A lifecycle represents the many stages that a plan can pass through.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plantype_lifecycles(authorization, name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str name: Plan type name (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3)              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_plantype_lifecycles_with_http_info(authorization, name, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_plantype_lifecycles_with_http_info(authorization, name, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_plantype_lifecycles_with_http_info(self, authorization, name, x_api_key, **kwargs):  # noqa: E501
        """Retrieves a list of lifecycles associated with the specified planType  # noqa: E501

        A lifecycle represents the many stages that a plan can pass through.  The `filter` parameter allows the results to be filtered.  Please see the parameters for more details.  Be aware that this API will only allow a maximum resulting page size of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_plantype_lifecycles_with_http_info(authorization, name, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str name: Plan type name (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported fields and operators:              id (in): e.g. filter=id in (1, 3)              name (eq, startswith): e.g. filter=name eq 'Pre-Existing' and name startswith 'Pre'
        :param str order_by: Supported fields: id, name. Supported directions: asc, desc: orderBy=name desc
        :param int skip: Number of records to skip: skip=1
        :param int top: Number of records to get: top=11
        :return: LifecycleDocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'name', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_plantype_lifecycles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_plantype_lifecycles`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `list_plantype_lifecycles`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_plantype_lifecycles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/plantypes/{name}/lifecycles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LifecycleDocumentCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
