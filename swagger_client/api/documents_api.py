# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DocumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_client_document(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a document for a given client.   # noqa: E501

        Use this endpoint to create a client document metadata record. A successful response (201), will return a `x-iflo-object-location` response header that will contain a pre-authenticated and signed hyperlink value. Use this hyperlink to PUT the associated object content.  *Note:*    * No other headers are required for the object upload, a simple PUT on the hyperlink is all that is required. * The object hyperlink is signed with an expiry of 15 minutes, so you have 15 minutes to initiate the upload before the link will expire.     #### **Properties**  The following reserved fields are supported for properties object, they provide additional functionality:  * `_category.name`               *   Sets document category * `_subCategory.name`            *   Sets document sub category * `_fileType.name`      *   Sets file Type * `_status.name`      *   Sets document status  Custom properties are supported.   #### **Tags**  Tags are useful for categorizing and filtering documents.  * Maximum 5 tags per document * Maximum 65 characters per tag * Tags must not contain spaces * Tags must not contain any special characters   #### **Example**   ~~~~javascript {     \"title\":\"A new document\",     \"description\":\"A shiny new document\",     \"properties\":{         \"_fileType.name\": \"Bank Statement\",         \"_subCategory.name\": \"Third Party\",         \"_category.name\": \"Financials\"         \"_status.name\": \"Production\"         \"CustomProperty1\": \"Some Value\"         \"CustomProperty2\": \"Some Value\"     },     \"object\":{         \"original_filename\":\"foo.txt\"     } ,     \"tags\" : {         \"tag1\", \"tag2\"     }     \"linked_entities\":[         {              \"id\" : 123,              \"type\" : \"Plan\"         }   ] } ~~~~   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_document(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Document body: Client document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_document_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_document_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_document_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a document for a given client.   # noqa: E501

        Use this endpoint to create a client document metadata record. A successful response (201), will return a `x-iflo-object-location` response header that will contain a pre-authenticated and signed hyperlink value. Use this hyperlink to PUT the associated object content.  *Note:*    * No other headers are required for the object upload, a simple PUT on the hyperlink is all that is required. * The object hyperlink is signed with an expiry of 15 minutes, so you have 15 minutes to initiate the upload before the link will expire.     #### **Properties**  The following reserved fields are supported for properties object, they provide additional functionality:  * `_category.name`               *   Sets document category * `_subCategory.name`            *   Sets document sub category * `_fileType.name`      *   Sets file Type * `_status.name`      *   Sets document status  Custom properties are supported.   #### **Tags**  Tags are useful for categorizing and filtering documents.  * Maximum 5 tags per document * Maximum 65 characters per tag * Tags must not contain spaces * Tags must not contain any special characters   #### **Example**   ~~~~javascript {     \"title\":\"A new document\",     \"description\":\"A shiny new document\",     \"properties\":{         \"_fileType.name\": \"Bank Statement\",         \"_subCategory.name\": \"Third Party\",         \"_category.name\": \"Financials\"         \"_status.name\": \"Production\"         \"CustomProperty1\": \"Some Value\"         \"CustomProperty2\": \"Some Value\"     },     \"object\":{         \"original_filename\":\"foo.txt\"     } ,     \"tags\" : {         \"tag1\", \"tag2\"     }     \"linked_entities\":[         {              \"id\" : 123,              \"type\" : \"Plan\"         }   ] } ~~~~   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_document_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Document body: Client document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_document`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_document`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_document`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_document(self, authorization, client_id, document_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a document for a given client and document.   # noqa: E501

        Use this endpoint to retrieve a client's document metadata. A successful response (200), will also return a `x-iflo-object-location` response header that will contain a pre-authenticated and signed hyperlink value. Use this hyperlink to download (GET) the associated object content. *Note:*   * No other headers are required for the object download, a simple GET on the hyperlink is all that is required. * The object hyperlink is signed with an expiry of 15 minutes, so you have 15 minutes to initiate the download before the link will expire. * This link will also work directly in a browser by pasting the link into the location bar.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_document(authorization, client_id, document_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int document_id: Document identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_document_with_http_info(authorization, client_id, document_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_document_with_http_info(authorization, client_id, document_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_document_with_http_info(self, authorization, client_id, document_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a document for a given client and document.   # noqa: E501

        Use this endpoint to retrieve a client's document metadata. A successful response (200), will also return a `x-iflo-object-location` response header that will contain a pre-authenticated and signed hyperlink value. Use this hyperlink to download (GET) the associated object content. *Note:*   * No other headers are required for the object download, a simple GET on the hyperlink is all that is required. * The object hyperlink is signed with an expiry of 15 minutes, so you have 15 minutes to initiate the download before the link will expire. * This link will also work directly in a browser by pasting the link into the location bar.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_document_with_http_info(authorization, client_id, document_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int document_id: Document identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'document_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_document`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_document`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params or
                params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `get_client_document`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/documents/{documentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_documents(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of documents for a given client.   # noqa: E501

         To filter by tags, append the following to the query string.  `..?filter=tag in ('tag1','tag2' )`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_documents(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Used to filter documents. Supported fields: id(in, eq, gt, lt), createdat(gt, lt), tag(in), linked_entities.type(in),              linked_entities.id(in, eq), properties._status.name(eq), properties._clientDocumentId(eq), properties._isEsignatureDocument(eq),              properties._category.name(eq), properties._subCategory.name(eq), properties._fileType.name(eq)...              Sample: filter=tag in ('private22', 'tag1')
        :param str order_by: Supported fields: id, createdat, title. Supported directions: asc, desc. Sample: orderBy=name desc
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: DocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_documents_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_documents_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_documents_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of documents for a given client.   # noqa: E501

         To filter by tags, append the following to the query string.  `..?filter=tag in ('tag1','tag2' )`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_documents_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Used to filter documents. Supported fields: id(in, eq, gt, lt), createdat(gt, lt), tag(in), linked_entities.type(in),              linked_entities.id(in, eq), properties._status.name(eq), properties._clientDocumentId(eq), properties._isEsignatureDocument(eq),              properties._category.name(eq), properties._subCategory.name(eq), properties._fileType.name(eq)...              Sample: filter=tag in ('private22', 'tag1')
        :param str order_by: Supported fields: id, createdat, title. Supported directions: asc, desc. Sample: orderBy=name desc
        :param int skip: Number of records to skip. Must be greater than or equal to zero
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :param int top: The number of records to retrieve (default 25, max 100)
        :return: DocumentCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'tenant_id', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_documents`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_documents`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_document(self, body, authorization, x_api_key, client_id, document_id, **kwargs):  # noqa: E501
        """Updates a document for a given client and document.   # noqa: E501

        Use this endpoint to update a client's document metadata. A successful response (200), will return a `x-iflo-object-location` response header that will contain a pre-authenticated and signed hyperlink value. Use this hyperlink to PUT the associated object content. *Note:*   * No other headers are required for the object upload, a simple PUT on the hyperlink is all that is required. Form data is not supported for this request. * The object hyperlink is signed with an expiry of 15 minutes, so you have 15 minutes to initiate the upload before the link will expire.    #### **Tags**  When updating tags:  * Only tags listed will be saved. Any tags not listed will be removed. * Specifying an empty body will remove all existing tags * Omitting the \"tags\" property will be preserve existing tags.  To delete a tag, perform update, removing the unwanted tag from the list.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_document(body, authorization, x_api_key, client_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Document body: Client document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int document_id: Document identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_document_with_http_info(body, authorization, x_api_key, client_id, document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_document_with_http_info(body, authorization, x_api_key, client_id, document_id, **kwargs)  # noqa: E501
            return data

    def update_client_document_with_http_info(self, body, authorization, x_api_key, client_id, document_id, **kwargs):  # noqa: E501
        """Updates a document for a given client and document.   # noqa: E501

        Use this endpoint to update a client's document metadata. A successful response (200), will return a `x-iflo-object-location` response header that will contain a pre-authenticated and signed hyperlink value. Use this hyperlink to PUT the associated object content. *Note:*   * No other headers are required for the object upload, a simple PUT on the hyperlink is all that is required. Form data is not supported for this request. * The object hyperlink is signed with an expiry of 15 minutes, so you have 15 minutes to initiate the upload before the link will expire.    #### **Tags**  When updating tags:  * Only tags listed will be saved. Any tags not listed will be removed. * Specifying an empty body will remove all existing tags * Omitting the \"tags\" property will be preserve existing tags.  To delete a tag, perform update, removing the unwanted tag from the list.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_document_with_http_info(body, authorization, x_api_key, client_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Document body: Client document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier. The special value \"me\" can be used to indicate the authenticated user. (required)
        :param int document_id: Document identifier. (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'document_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_document`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_document`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_document`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_document`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params or
                params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `update_client_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'document_id' in params:
            path_params['documentId'] = params['document_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/documents/{documentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
