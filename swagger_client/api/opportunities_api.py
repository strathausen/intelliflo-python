# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OpportunitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_campaign_channel(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Campaign Channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_channel(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignChannel body: Campaign Channel document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_campaign_channel_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_campaign_channel_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_campaign_channel_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Campaign Channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_channel_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignChannel body: Campaign Channel document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaign_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_campaign_channel`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_campaign_channel`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_campaign_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaignchannels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_campaign_type(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Campaign Type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_type(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignType body: Campaign Type document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_campaign_type_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_campaign_type_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_campaign_type_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Campaign Type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_campaign_type_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignType body: Campaign Type document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaign_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_campaign_type`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_campaign_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_campaign_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigntypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_opportunity(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new Opportunity for the given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_opportunity(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_opportunity_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_opportunity_with_http_info(body, authorization, x_api_key, client_id, **kwargs)  # noqa: E501
            return data

    def create_client_opportunity_with_http_info(self, body, authorization, x_api_key, client_id, **kwargs):  # noqa: E501
        """Creates a new Opportunity for the given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_opportunity_with_http_info(body, authorization, x_api_key, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_opportunity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_client_opportunity`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_client_opportunity`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_client_opportunity`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create_client_opportunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/opportunities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Opportunity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_lead_opportunity(self, body, authorization, x_api_key, lead_id, **kwargs):  # noqa: E501
        """Creates a new Opportunity for the given Lead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lead_opportunity(body, authorization, x_api_key, lead_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_lead_opportunity_with_http_info(body, authorization, x_api_key, lead_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_lead_opportunity_with_http_info(body, authorization, x_api_key, lead_id, **kwargs)  # noqa: E501
            return data

    def create_lead_opportunity_with_http_info(self, body, authorization, x_api_key, lead_id, **kwargs):  # noqa: E501
        """Creates a new Opportunity for the given Lead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_lead_opportunity_with_http_info(body, authorization, x_api_key, lead_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'lead_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lead_opportunity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_lead_opportunity`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_lead_opportunity`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_lead_opportunity`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `create_lead_opportunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/opportunities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Opportunity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_opportunity_campaign(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity campaign for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_campaign(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityCampaign body: Opportunity campaign document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityCampaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_opportunity_campaign_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_opportunity_campaign_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_opportunity_campaign_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity campaign for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_campaign_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityCampaign body: Opportunity campaign document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityCampaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_opportunity_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_opportunity_campaign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityCampaign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_opportunity_proposition(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity proposition for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_proposition(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityProposition body: Opportunity proposition document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityProposition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_opportunity_proposition_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_opportunity_proposition_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_opportunity_proposition_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity proposition for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_proposition_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityProposition body: Opportunity proposition document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityProposition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_opportunity_proposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_opportunity_proposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/propositions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityProposition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_opportunity_status(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity Status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_status(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityStatus body: Opportunity Status document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: OpportunityStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_opportunity_status_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_opportunity_status_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_opportunity_status_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity Status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_status_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityStatus body: Opportunity Status document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: OpportunityStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_opportunity_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_opportunity_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_opportunity_status`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_opportunity_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/statuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_opportunity_type(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity Type for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_type(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityType body: Opportunity type document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_opportunity_type_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_opportunity_type_with_http_info(body, authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def create_opportunity_type_with_http_info(self, body, authorization, x_api_key, **kwargs):  # noqa: E501
        """Creates a new Opportunity Type for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_opportunity_type_with_http_info(body, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityType body: Opportunity type document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_opportunity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_opportunity_type`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_opportunity_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `create_opportunity_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_campaign_channel(self, authorization, campaign_channel_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes Campaign Channel for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_channel(authorization, campaign_channel_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int campaign_channel_id: Campaign Channel identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_campaign_channel_with_http_info(authorization, campaign_channel_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_campaign_channel_with_http_info(authorization, campaign_channel_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_campaign_channel_with_http_info(self, authorization, campaign_channel_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes Campaign Channel for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_channel_with_http_info(authorization, campaign_channel_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int campaign_channel_id: Campaign Channel identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'campaign_channel_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaign_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_campaign_channel`")  # noqa: E501
        # verify the required parameter 'campaign_channel_id' is set
        if ('campaign_channel_id' not in params or
                params['campaign_channel_id'] is None):
            raise ValueError("Missing the required parameter `campaign_channel_id` when calling `delete_campaign_channel`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_campaign_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_channel_id' in params:
            path_params['campaignChannelId'] = params['campaign_channel_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaignchannels/{campaignChannelId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_campaign_type(self, authorization, campaign_type_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes Campaign Type for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_type(authorization, campaign_type_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int campaign_type_id: Campaign Type identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_campaign_type_with_http_info(authorization, campaign_type_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_campaign_type_with_http_info(authorization, campaign_type_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_campaign_type_with_http_info(self, authorization, campaign_type_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes Campaign Type for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_campaign_type_with_http_info(authorization, campaign_type_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int campaign_type_id: Campaign Type identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'campaign_type_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaign_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_campaign_type`")  # noqa: E501
        # verify the required parameter 'campaign_type_id' is set
        if ('campaign_type_id' not in params or
                params['campaign_type_id'] is None):
            raise ValueError("Missing the required parameter `campaign_type_id` when calling `delete_campaign_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_campaign_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_type_id' in params:
            path_params['campaignTypeId'] = params['campaign_type_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigntypes/{campaignTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_opportunity_campaign(self, authorization, opportunity_campaign_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an Opportunity campaign. Only Opportunity campaigns that are not in use can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_campaign(authorization, opportunity_campaign_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_campaign_id: The identifier for the Opportunity campaign. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_opportunity_campaign_with_http_info(authorization, opportunity_campaign_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_opportunity_campaign_with_http_info(authorization, opportunity_campaign_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_opportunity_campaign_with_http_info(self, authorization, opportunity_campaign_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an Opportunity campaign. Only Opportunity campaigns that are not in use can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_campaign_with_http_info(authorization, opportunity_campaign_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_campaign_id: The identifier for the Opportunity campaign. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'opportunity_campaign_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_opportunity_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'opportunity_campaign_id' is set
        if ('opportunity_campaign_id' not in params or
                params['opportunity_campaign_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_campaign_id` when calling `delete_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_opportunity_campaign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_campaign_id' in params:
            path_params['opportunityCampaignId'] = params['opportunity_campaign_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigns/{opportunityCampaignId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_opportunity_proposition(self, authorization, proposition_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing Opportunity proposition for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_proposition(authorization, proposition_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int proposition_id: Opportunity proposition identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_opportunity_proposition_with_http_info(authorization, proposition_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_opportunity_proposition_with_http_info(authorization, proposition_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_opportunity_proposition_with_http_info(self, authorization, proposition_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an existing Opportunity proposition for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_proposition_with_http_info(authorization, proposition_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int proposition_id: Opportunity proposition identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'proposition_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_opportunity_proposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'proposition_id' is set
        if ('proposition_id' not in params or
                params['proposition_id'] is None):
            raise ValueError("Missing the required parameter `proposition_id` when calling `delete_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_opportunity_proposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposition_id' in params:
            path_params['propositionId'] = params['proposition_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/propositions/{propositionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_opportunity_status(self, authorization, opportunity_status_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an opportunity status for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_status(authorization, opportunity_status_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_status_id: Opportunity Status identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_opportunity_status_with_http_info(authorization, opportunity_status_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_opportunity_status_with_http_info(authorization, opportunity_status_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_opportunity_status_with_http_info(self, authorization, opportunity_status_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an opportunity status for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_status_with_http_info(authorization, opportunity_status_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_status_id: Opportunity Status identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'opportunity_status_id', 'x_api_key', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_opportunity_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_opportunity_status`")  # noqa: E501
        # verify the required parameter 'opportunity_status_id' is set
        if ('opportunity_status_id' not in params or
                params['opportunity_status_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_status_id` when calling `delete_opportunity_status`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_opportunity_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_status_id' in params:
            path_params['opportunityStatusId'] = params['opportunity_status_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/statuses/{opportunityStatusId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_opportunity_type(self, authorization, opportunity_type_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an Opportunity type. Only opportunity types that are not in use can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_type(authorization, opportunity_type_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_type_id: The identifier for the Opportunity type. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_opportunity_type_with_http_info(authorization, opportunity_type_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_opportunity_type_with_http_info(authorization, opportunity_type_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def delete_opportunity_type_with_http_info(self, authorization, opportunity_type_id, x_api_key, **kwargs):  # noqa: E501
        """Deletes an Opportunity type. Only opportunity types that are not in use can be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_opportunity_type_with_http_info(authorization, opportunity_type_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_type_id: The identifier for the Opportunity type. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'opportunity_type_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_opportunity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_opportunity_type`")  # noqa: E501
        # verify the required parameter 'opportunity_type_id' is set
        if ('opportunity_type_id' not in params or
                params['opportunity_type_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_type_id` when calling `delete_opportunity_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_opportunity_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_type_id' in params:
            path_params['opportunityTypeId'] = params['opportunity_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/types/{opportunityTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_opportunity(self, authorization, client_id, opportunity_id, x_api_key, **kwargs):  # noqa: E501
        """Returns opportunity documents for a given client and document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_opportunity(authorization, client_id, opportunity_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_opportunity_with_http_info(authorization, client_id, opportunity_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_opportunity_with_http_info(authorization, client_id, opportunity_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_client_opportunity_with_http_info(self, authorization, client_id, opportunity_id, x_api_key, **kwargs):  # noqa: E501
        """Returns opportunity documents for a given client and document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_opportunity_with_http_info(authorization, client_id, opportunity_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'opportunity_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_opportunity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_client_opportunity`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `get_client_opportunity`")  # noqa: E501
        # verify the required parameter 'opportunity_id' is set
        if ('opportunity_id' not in params or
                params['opportunity_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_id` when calling `get_client_opportunity`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_client_opportunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'opportunity_id' in params:
            path_params['opportunityId'] = params['opportunity_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/opportunities/{opportunityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Opportunity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lead_opportunity(self, authorization, lead_id, opportunity_id, x_api_key, **kwargs):  # noqa: E501
        """Returns an opportunity document for a given lead.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lead_opportunity(authorization, lead_id, opportunity_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lead_opportunity_with_http_info(authorization, lead_id, opportunity_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lead_opportunity_with_http_info(authorization, lead_id, opportunity_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_lead_opportunity_with_http_info(self, authorization, lead_id, opportunity_id, x_api_key, **kwargs):  # noqa: E501
        """Returns an opportunity document for a given lead.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lead_opportunity_with_http_info(authorization, lead_id, opportunity_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lead_id', 'opportunity_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lead_opportunity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_lead_opportunity`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `get_lead_opportunity`")  # noqa: E501
        # verify the required parameter 'opportunity_id' is set
        if ('opportunity_id' not in params or
                params['opportunity_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_id` when calling `get_lead_opportunity`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_lead_opportunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501
        if 'opportunity_id' in params:
            path_params['opportunityId'] = params['opportunity_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/opportunities/{opportunityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Opportunity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_opportunity_type(self, authorization, opportunity_type_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the requested Opportunity type for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opportunity_type(authorization, opportunity_type_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_type_id: The identifier for the Opportunity type. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_opportunity_type_with_http_info(authorization, opportunity_type_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_opportunity_type_with_http_info(authorization, opportunity_type_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def get_opportunity_type_with_http_info(self, authorization, opportunity_type_id, x_api_key, **kwargs):  # noqa: E501
        """Returns the requested Opportunity type for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opportunity_type_with_http_info(authorization, opportunity_type_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int opportunity_type_id: The identifier for the Opportunity type. (required)
        :param str x_api_key: (required)
        :param str accept:
        :return: OpportunityType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'opportunity_type_id', 'x_api_key', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opportunity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_opportunity_type`")  # noqa: E501
        # verify the required parameter 'opportunity_type_id' is set
        if ('opportunity_type_id' not in params or
                params['opportunity_type_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_type_id` when calling `get_opportunity_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_opportunity_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_type_id' in params:
            path_params['opportunityTypeId'] = params['opportunity_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/types/{opportunityTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_campaign_channels(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of campaign channel for a given tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_campaign_channels(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. The list can be filtered using one or more of the following supported fields and operators:                * `isArchived` (`eq`)                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :return: CampaignChannelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_campaign_channels_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_campaign_channels_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_campaign_channels_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of campaign channel for a given tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_campaign_channels_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. The list can be filtered using one or more of the following supported fields and operators:                * `isArchived` (`eq`)                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :return: CampaignChannelCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_campaign_channels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_campaign_channels`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_campaign_channels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('Filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaignchannels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignChannelCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_campaign_types(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of campaign types for a given tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_campaign_types(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. The list can be filtered using one or more of the following supported fields and operators:                * `isArchived` (`eq`)                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :return: CampaignTypeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_campaign_types_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_campaign_types_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_campaign_types_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of campaign types for a given tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_campaign_types_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Optional. The list can be filtered using one or more of the following supported fields and operators:                * `isArchived` (`eq`)                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :return: CampaignTypeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_campaign_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_campaign_types`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_campaign_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('Filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigntypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignTypeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_opportunities(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns list of opportunities for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_opportunities(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The list of client opportunities returned can be filtered using one or more of the supported fields and operators.  The supported fields and operators are:    * `isClosed (`eq`)                Example filters:      filter= isClosed eq true        For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str orderby: The list of client opportunities returned can be sorted on the following fields:    * `createdOn` (`asc` or `desc`)  * `id` (`asc` or `desc`)  * `isClosed` (`asc` or `desc`)  * `opportunityType.Name` (`asc` or `desc`)  * `reference` (`asc` or `desc`)  * `status.Name` (`asc` or `desc`)        Example orderBy:      orderBy=opportunityType.Name desc        By default the list of client opportunities are ordered by Id in ascending order.
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: OpportunityCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_opportunities_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_opportunities_with_http_info(authorization, client_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_client_opportunities_with_http_info(self, authorization, client_id, x_api_key, **kwargs):  # noqa: E501
        """Returns list of opportunities for a given client.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_opportunities_with_http_info(authorization, client_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int client_id: Client identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The list of client opportunities returned can be filtered using one or more of the supported fields and operators.  The supported fields and operators are:    * `isClosed (`eq`)                Example filters:      filter= isClosed eq true        For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str orderby: The list of client opportunities returned can be sorted on the following fields:    * `createdOn` (`asc` or `desc`)  * `id` (`asc` or `desc`)  * `isClosed` (`asc` or `desc`)  * `opportunityType.Name` (`asc` or `desc`)  * `reference` (`asc` or `desc`)  * `status.Name` (`asc` or `desc`)        Example orderBy:      orderBy=opportunityType.Name desc        By default the list of client opportunities are ordered by Id in ascending order.
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: OpportunityCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'client_id', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_opportunities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_client_opportunities`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `list_client_opportunities`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_client_opportunities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/opportunities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_lead_opportunities(self, authorization, lead_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of opportunity documents for a given lead.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lead_opportunities(authorization, lead_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The list of Lead opportunities returned can be filtered using one or more of the supported fields and operators.  The supported fields and operators are:    * `isClosed (`eq`)                        For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str order_by:
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: OpportunityCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_lead_opportunities_with_http_info(authorization, lead_id, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_lead_opportunities_with_http_info(authorization, lead_id, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_lead_opportunities_with_http_info(self, authorization, lead_id, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of opportunity documents for a given lead.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_lead_opportunities_with_http_info(authorization, lead_id, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param int lead_id: Lead identifier. (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: The list of Lead opportunities returned can be filtered using one or more of the supported fields and operators.  The supported fields and operators are:    * `isClosed (`eq`)                        For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str order_by:
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: OpportunityCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'lead_id', 'x_api_key', 'accept', 'filter', 'order_by', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_lead_opportunities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_lead_opportunities`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `list_lead_opportunities`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_lead_opportunities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/opportunities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_opportunity_campaigns(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of the Opportunity campaigns for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_campaigns(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:               * `isArchived (eq)`               * `isOrganisational (eq)`                             See [QueryLang](docs/ApiQueryLang) for further details of how to use the filtering and sorting parameters.
        :return: OpportunityCampaignCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_opportunity_campaigns_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_opportunity_campaigns_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_opportunity_campaigns_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of the Opportunity campaigns for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_campaigns_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:               * `isArchived (eq)`               * `isOrganisational (eq)`                             See [QueryLang](docs/ApiQueryLang) for further details of how to use the filtering and sorting parameters.
        :return: OpportunityCampaignCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_opportunity_campaigns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_opportunity_campaigns`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_opportunity_campaigns`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityCampaignCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_opportunity_propositions(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of the opportunity propositions for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_propositions(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `isArchived` (`eq`)
        :return: OpportunityPropositionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_opportunity_propositions_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_opportunity_propositions_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_opportunity_propositions_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of the opportunity propositions for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_propositions_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `isArchived` (`eq`)
        :return: OpportunityPropositionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_opportunity_propositions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_opportunity_propositions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_opportunity_propositions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/propositions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityPropositionCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_opportunity_statuses(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of opportunity statuses for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_statuses(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `isArchived` (`eq`)
        :param int tenant_id: Tenant identifier
        :return: OpportunityStatusCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_opportunity_statuses_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_opportunity_statuses_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_opportunity_statuses_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of opportunity statuses for a given tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_statuses_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported Filters:  * `isArchived` (`eq`)
        :param int tenant_id: Tenant identifier
        :return: OpportunityStatusCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_opportunity_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_opportunity_statuses`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_opportunity_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityStatusCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_opportunity_types(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of the opportunity types for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_types(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:  * `isArchived (eq)`  * `objectiveType (eq, in)`                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str orderby: The list of Opportunity types returned can be sorted on the following fields:    * `id` (`asc` or `desc`)  * `name` (`asc` or `desc`)  * `objectiveType` (`asc` or `desc`)  * `isArchived` (`asc` or `desc`)                By default the list of Opportunity types are ordered by Id in ascending order.
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: OpportunityTypeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_opportunity_types_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_opportunity_types_with_http_info(authorization, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_opportunity_types_with_http_info(self, authorization, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of the opportunity types for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opportunity_types_with_http_info(authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param str accept:
        :param str filter: Supported filters options:  * `isArchived (eq)`  * `objectiveType (eq, in)`                For further details of how to use the filter parameter see [QueryLang](docs/ApiQueryLang).
        :param str orderby: The list of Opportunity types returned can be sorted on the following fields:    * `id` (`asc` or `desc`)  * `name` (`asc` or `desc`)  * `objectiveType` (`asc` or `desc`)  * `isArchived` (`asc` or `desc`)                By default the list of Opportunity types are ordered by Id in ascending order.
        :param int skip: Optional. The number of records to skip. If not specified it defaults to 0.
        :param int top: Optional. The number of records to retrieve (the maximum is 500). If not specified it defaults to 100.
        :return: OpportunityTypeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'x_api_key', 'accept', 'filter', 'orderby', 'skip', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_opportunity_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_opportunity_types`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_opportunity_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityTypeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_campaign_channel(self, body, authorization, x_api_key, campaign_channel_id, **kwargs):  # noqa: E501
        """Updates an existing Campaign Channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_channel(body, authorization, x_api_key, campaign_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignChannel body: Campaign Channel document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int campaign_channel_id: Campaign Channel identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_campaign_channel_with_http_info(body, authorization, x_api_key, campaign_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_campaign_channel_with_http_info(body, authorization, x_api_key, campaign_channel_id, **kwargs)  # noqa: E501
            return data

    def update_campaign_channel_with_http_info(self, body, authorization, x_api_key, campaign_channel_id, **kwargs):  # noqa: E501
        """Updates an existing Campaign Channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_channel_with_http_info(body, authorization, x_api_key, campaign_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignChannel body: Campaign Channel document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int campaign_channel_id: Campaign Channel identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'campaign_channel_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_campaign_channel`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_campaign_channel`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_campaign_channel`")  # noqa: E501
        # verify the required parameter 'campaign_channel_id' is set
        if ('campaign_channel_id' not in params or
                params['campaign_channel_id'] is None):
            raise ValueError("Missing the required parameter `campaign_channel_id` when calling `update_campaign_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_channel_id' in params:
            path_params['campaignChannelId'] = params['campaign_channel_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaignchannels/{campaignChannelId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_campaign_type(self, body, authorization, x_api_key, campaign_type_id, **kwargs):  # noqa: E501
        """Updates an existing Campaign Type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_type(body, authorization, x_api_key, campaign_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignType body: Campaign Type document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int campaign_type_id: Campaign Type identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_campaign_type_with_http_info(body, authorization, x_api_key, campaign_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_campaign_type_with_http_info(body, authorization, x_api_key, campaign_type_id, **kwargs)  # noqa: E501
            return data

    def update_campaign_type_with_http_info(self, body, authorization, x_api_key, campaign_type_id, **kwargs):  # noqa: E501
        """Updates an existing Campaign Type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_campaign_type_with_http_info(body, authorization, x_api_key, campaign_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignType body: Campaign Type document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int campaign_type_id: Campaign Type identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: CampaignType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'campaign_type_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_campaign_type`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_campaign_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_campaign_type`")  # noqa: E501
        # verify the required parameter 'campaign_type_id' is set
        if ('campaign_type_id' not in params or
                params['campaign_type_id'] is None):
            raise ValueError("Missing the required parameter `campaign_type_id` when calling `update_campaign_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'campaign_type_id' in params:
            path_params['campaignTypeId'] = params['campaign_type_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigntypes/{campaignTypeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_opportunity(self, body, authorization, x_api_key, client_id, opportunity_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity for the given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_opportunity(body, authorization, x_api_key, client_id, opportunity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_opportunity_with_http_info(body, authorization, x_api_key, client_id, opportunity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_opportunity_with_http_info(body, authorization, x_api_key, client_id, opportunity_id, **kwargs)  # noqa: E501
            return data

    def update_client_opportunity_with_http_info(self, body, authorization, x_api_key, client_id, opportunity_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity for the given client.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_opportunity_with_http_info(body, authorization, x_api_key, client_id, opportunity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int client_id: Client identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'client_id', 'opportunity_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_opportunity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client_opportunity`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_client_opportunity`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_client_opportunity`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client_opportunity`")  # noqa: E501
        # verify the required parameter 'opportunity_id' is set
        if ('opportunity_id' not in params or
                params['opportunity_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_id` when calling `update_client_opportunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['clientId'] = params['client_id']  # noqa: E501
        if 'opportunity_id' in params:
            path_params['opportunityId'] = params['opportunity_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{clientId}/opportunities/{opportunityId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Opportunity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_lead_opporunity(self, body, authorization, x_api_key, lead_id, opportunity_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity for the given Lead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lead_opporunity(body, authorization, x_api_key, lead_id, opportunity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_lead_opporunity_with_http_info(body, authorization, x_api_key, lead_id, opportunity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_lead_opporunity_with_http_info(body, authorization, x_api_key, lead_id, opportunity_id, **kwargs)  # noqa: E501
            return data

    def update_lead_opporunity_with_http_info(self, body, authorization, x_api_key, lead_id, opportunity_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity for the given Lead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lead_opporunity_with_http_info(body, authorization, x_api_key, lead_id, opportunity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Opportunity body: Opportunity document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int lead_id: Lead identifier (required)
        :param int opportunity_id: Opportunity identifier (required)
        :param str accept:
        :param int tenant_id: Tenant identifier, used to filter by tenant. Only use under system reach
        :return: Opportunity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'lead_id', 'opportunity_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lead_opporunity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_lead_opporunity`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_lead_opporunity`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_lead_opporunity`")  # noqa: E501
        # verify the required parameter 'lead_id' is set
        if ('lead_id' not in params or
                params['lead_id'] is None):
            raise ValueError("Missing the required parameter `lead_id` when calling `update_lead_opporunity`")  # noqa: E501
        # verify the required parameter 'opportunity_id' is set
        if ('opportunity_id' not in params or
                params['opportunity_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_id` when calling `update_lead_opporunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lead_id' in params:
            path_params['leadId'] = params['lead_id']  # noqa: E501
        if 'opportunity_id' in params:
            path_params['opportunityId'] = params['opportunity_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/leads/{leadId}/opportunities/{opportunityId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Opportunity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_opportunity_campaign(self, body, authorization, x_api_key, opportunity_campaign_id, **kwargs):  # noqa: E501
        """Updates an Opportunity campaign for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_campaign(body, authorization, x_api_key, opportunity_campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityCampaign body: The details to update the Opportunity campaign. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int opportunity_campaign_id: The identifier for the Opportunity campaign. (required)
        :param str accept:
        :return: OpportunityCampaign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_opportunity_campaign_with_http_info(body, authorization, x_api_key, opportunity_campaign_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_opportunity_campaign_with_http_info(body, authorization, x_api_key, opportunity_campaign_id, **kwargs)  # noqa: E501
            return data

    def update_opportunity_campaign_with_http_info(self, body, authorization, x_api_key, opportunity_campaign_id, **kwargs):  # noqa: E501
        """Updates an Opportunity campaign for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_campaign_with_http_info(body, authorization, x_api_key, opportunity_campaign_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityCampaign body: The details to update the Opportunity campaign. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int opportunity_campaign_id: The identifier for the Opportunity campaign. (required)
        :param str accept:
        :return: OpportunityCampaign
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'opportunity_campaign_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opportunity_campaign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_opportunity_campaign`")  # noqa: E501
        # verify the required parameter 'opportunity_campaign_id' is set
        if ('opportunity_campaign_id' not in params or
                params['opportunity_campaign_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_campaign_id` when calling `update_opportunity_campaign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_campaign_id' in params:
            path_params['opportunityCampaignId'] = params['opportunity_campaign_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/campaigns/{opportunityCampaignId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityCampaign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_opportunity_proposition(self, body, authorization, x_api_key, proposition_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity proposition for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_proposition(body, authorization, x_api_key, proposition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityProposition body: Opportunity proposition document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int proposition_id: Opportunity proposition identifier. (required)
        :param str accept:
        :return: OpportunityProposition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_opportunity_proposition_with_http_info(body, authorization, x_api_key, proposition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_opportunity_proposition_with_http_info(body, authorization, x_api_key, proposition_id, **kwargs)  # noqa: E501
            return data

    def update_opportunity_proposition_with_http_info(self, body, authorization, x_api_key, proposition_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity proposition for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_proposition_with_http_info(body, authorization, x_api_key, proposition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityProposition body: Opportunity proposition document. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int proposition_id: Opportunity proposition identifier. (required)
        :param str accept:
        :return: OpportunityProposition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'proposition_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opportunity_proposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_opportunity_proposition`")  # noqa: E501
        # verify the required parameter 'proposition_id' is set
        if ('proposition_id' not in params or
                params['proposition_id'] is None):
            raise ValueError("Missing the required parameter `proposition_id` when calling `update_opportunity_proposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'proposition_id' in params:
            path_params['propositionId'] = params['proposition_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/propositions/{propositionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityProposition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_opportunity_status(self, body, authorization, x_api_key, opportunity_status_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity Status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_status(body, authorization, x_api_key, opportunity_status_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityStatus body: Opportunity Status document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int opportunity_status_id: Opportunity Status identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: OpportunityStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_opportunity_status_with_http_info(body, authorization, x_api_key, opportunity_status_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_opportunity_status_with_http_info(body, authorization, x_api_key, opportunity_status_id, **kwargs)  # noqa: E501
            return data

    def update_opportunity_status_with_http_info(self, body, authorization, x_api_key, opportunity_status_id, **kwargs):  # noqa: E501
        """Updates an existing Opportunity Status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_status_with_http_info(body, authorization, x_api_key, opportunity_status_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityStatus body: Opportunity Status document (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int opportunity_status_id: Opportunity Status identifier (required)
        :param str accept:
        :param int tenant_id: Tenant Identifier, used to filter by tenant. Only use under system reach
        :return: OpportunityStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'opportunity_status_id', 'accept', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opportunity_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_opportunity_status`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_opportunity_status`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_opportunity_status`")  # noqa: E501
        # verify the required parameter 'opportunity_status_id' is set
        if ('opportunity_status_id' not in params or
                params['opportunity_status_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_status_id` when calling `update_opportunity_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_status_id' in params:
            path_params['opportunityStatusId'] = params['opportunity_status_id']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/statuses/{opportunityStatusId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_opportunity_type(self, body, authorization, x_api_key, opportunity_type_id, **kwargs):  # noqa: E501
        """Updates an Opportunity Type for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_type(body, authorization, x_api_key, opportunity_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityType body: The details to update the opportunity type. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int opportunity_type_id: The identifier for the Opportunity type. (required)
        :param str accept:
        :return: OpportunityType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_opportunity_type_with_http_info(body, authorization, x_api_key, opportunity_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_opportunity_type_with_http_info(body, authorization, x_api_key, opportunity_type_id, **kwargs)  # noqa: E501
            return data

    def update_opportunity_type_with_http_info(self, body, authorization, x_api_key, opportunity_type_id, **kwargs):  # noqa: E501
        """Updates an Opportunity Type for a tenant.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opportunity_type_with_http_info(body, authorization, x_api_key, opportunity_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OpportunityType body: The details to update the opportunity type. (required)
        :param str authorization: (required)
        :param str x_api_key: (required)
        :param int opportunity_type_id: The identifier for the Opportunity type. (required)
        :param str accept:
        :return: OpportunityType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'x_api_key', 'opportunity_type_id', 'accept']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opportunity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_opportunity_type`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_opportunity_type`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `update_opportunity_type`")  # noqa: E501
        # verify the required parameter 'opportunity_type_id' is set
        if ('opportunity_type_id' not in params or
                params['opportunity_type_id'] is None):
            raise ValueError("Missing the required parameter `opportunity_type_id` when calling `update_opportunity_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'opportunity_type_id' in params:
            path_params['opportunityTypeId'] = params['opportunity_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'oauth2-authorization-code', 'oauth2-implicit', 'oauth2-password']  # noqa: E501

        return self.api_client.call_api(
            '/opportunities/types/{opportunityTypeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
