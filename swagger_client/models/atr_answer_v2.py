# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtrAnswerV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'clients': 'list[ClientRef]',
        'context': 'str',
        'status': 'str',
        'template': 'ATRTemplateReference',
        'asset_model': 'AssetModel',
        'questions': 'list[AtrQuestion]',
        'inconsistent_answers': 'list[AtrAnswerContradictions]',
        'result': 'AtrResult',
        'completed_at': 'datetime',
        'completed_by': 'UserReference'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'clients': 'clients',
        'context': 'context',
        'status': 'status',
        'template': 'template',
        'asset_model': 'assetModel',
        'questions': 'questions',
        'inconsistent_answers': 'inconsistentAnswers',
        'result': 'result',
        'completed_at': 'completedAt',
        'completed_by': 'completedBy'
    }

    def __init__(self, id=None, href=None, clients=None, context=None, status='Draft', template=None, asset_model=None, questions=None, inconsistent_answers=None, result=None, completed_at=None, completed_by=None):  # noqa: E501
        """AtrAnswerV2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._clients = None
        self._context = None
        self._status = None
        self._template = None
        self._asset_model = None
        self._questions = None
        self._inconsistent_answers = None
        self._result = None
        self._completed_at = None
        self._completed_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if clients is not None:
            self.clients = clients
        self.context = context
        if status is not None:
            self.status = status
        self.template = template
        if asset_model is not None:
            self.asset_model = asset_model
        self.questions = questions
        if inconsistent_answers is not None:
            self.inconsistent_answers = inconsistent_answers
        if result is not None:
            self.result = result
        if completed_at is not None:
            self.completed_at = completed_at
        if completed_by is not None:
            self.completed_by = completed_by

    @property
    def id(self):
        """Gets the id of this AtrAnswerV2.  # noqa: E501

        ATR answer unique identifier.  # noqa: E501

        :return: The id of this AtrAnswerV2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtrAnswerV2.

        ATR answer unique identifier.  # noqa: E501

        :param id: The id of this AtrAnswerV2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AtrAnswerV2.  # noqa: E501

        ATR answer hypermedia link.  # noqa: E501

        :return: The href of this AtrAnswerV2.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AtrAnswerV2.

        ATR answer hypermedia link.  # noqa: E501

        :param href: The href of this AtrAnswerV2.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def clients(self):
        """Gets the clients of this AtrAnswerV2.  # noqa: E501

        Atr answer client references.  # noqa: E501

        :return: The clients of this AtrAnswerV2.  # noqa: E501
        :rtype: list[ClientRef]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this AtrAnswerV2.

        Atr answer client references.  # noqa: E501

        :param clients: The clients of this AtrAnswerV2.  # noqa: E501
        :type: list[ClientRef]
        """

        self._clients = clients

    @property
    def context(self):
        """Gets the context of this AtrAnswerV2.  # noqa: E501

        Context under which the answers were provided.  # noqa: E501

        :return: The context of this AtrAnswerV2.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AtrAnswerV2.

        Context under which the answers were provided.  # noqa: E501

        :param context: The context of this AtrAnswerV2.  # noqa: E501
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def status(self):
        """Gets the status of this AtrAnswerV2.  # noqa: E501

        Status of the ATR. When status is set to \"Completed\", results are generated and question answers cannot be modified.  # noqa: E501

        :return: The status of this AtrAnswerV2.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AtrAnswerV2.

        Status of the ATR. When status is set to \"Completed\", results are generated and question answers cannot be modified.  # noqa: E501

        :param status: The status of this AtrAnswerV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["Draft", "Completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def template(self):
        """Gets the template of this AtrAnswerV2.  # noqa: E501


        :return: The template of this AtrAnswerV2.  # noqa: E501
        :rtype: ATRTemplateReference
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this AtrAnswerV2.


        :param template: The template of this AtrAnswerV2.  # noqa: E501
        :type: ATRTemplateReference
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    @property
    def asset_model(self):
        """Gets the asset_model of this AtrAnswerV2.  # noqa: E501


        :return: The asset_model of this AtrAnswerV2.  # noqa: E501
        :rtype: AssetModel
        """
        return self._asset_model

    @asset_model.setter
    def asset_model(self, asset_model):
        """Sets the asset_model of this AtrAnswerV2.


        :param asset_model: The asset_model of this AtrAnswerV2.  # noqa: E501
        :type: AssetModel
        """

        self._asset_model = asset_model

    @property
    def questions(self):
        """Gets the questions of this AtrAnswerV2.  # noqa: E501

        ATR questions and associated answers.  # noqa: E501

        :return: The questions of this AtrAnswerV2.  # noqa: E501
        :rtype: list[AtrQuestion]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this AtrAnswerV2.

        ATR questions and associated answers.  # noqa: E501

        :param questions: The questions of this AtrAnswerV2.  # noqa: E501
        :type: list[AtrQuestion]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions

    @property
    def inconsistent_answers(self):
        """Gets the inconsistent_answers of this AtrAnswerV2.  # noqa: E501

        A list of questions and any associated contradictory questions and answers.  This can be used to determine if a client's answers contain contradictory statements by comparing answers to individual questions.  # noqa: E501

        :return: The inconsistent_answers of this AtrAnswerV2.  # noqa: E501
        :rtype: list[AtrAnswerContradictions]
        """
        return self._inconsistent_answers

    @inconsistent_answers.setter
    def inconsistent_answers(self, inconsistent_answers):
        """Sets the inconsistent_answers of this AtrAnswerV2.

        A list of questions and any associated contradictory questions and answers.  This can be used to determine if a client's answers contain contradictory statements by comparing answers to individual questions.  # noqa: E501

        :param inconsistent_answers: The inconsistent_answers of this AtrAnswerV2.  # noqa: E501
        :type: list[AtrAnswerContradictions]
        """

        self._inconsistent_answers = inconsistent_answers

    @property
    def result(self):
        """Gets the result of this AtrAnswerV2.  # noqa: E501


        :return: The result of this AtrAnswerV2.  # noqa: E501
        :rtype: AtrResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AtrAnswerV2.


        :param result: The result of this AtrAnswerV2.  # noqa: E501
        :type: AtrResult
        """

        self._result = result

    @property
    def completed_at(self):
        """Gets the completed_at of this AtrAnswerV2.  # noqa: E501

        ATR answer completed date.  # noqa: E501

        :return: The completed_at of this AtrAnswerV2.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this AtrAnswerV2.

        ATR answer completed date.  # noqa: E501

        :param completed_at: The completed_at of this AtrAnswerV2.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def completed_by(self):
        """Gets the completed_by of this AtrAnswerV2.  # noqa: E501


        :return: The completed_by of this AtrAnswerV2.  # noqa: E501
        :rtype: UserReference
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this AtrAnswerV2.


        :param completed_by: The completed_by of this AtrAnswerV2.  # noqa: E501
        :type: UserReference
        """

        self._completed_by = completed_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtrAnswerV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtrAnswerV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
