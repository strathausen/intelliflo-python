# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_recommendation2_proposal import BaseRecommendation2Proposal  # noqa: F401,E501

class NewBusinessMortgageProposal(BaseRecommendation2Proposal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initial_monthly_cost': 'CurrencyValue',
        'true_cost': 'CurrencyValue',
        'repayment_method': 'str',
        'proc_fee': 'CurrencyValue',
        'value': 'CurrencyValue',
        'interest': 'InterestSchemeValue',
        'term': 'MortgageTermValue',
        'feature_expiry_date': 'datetime',
        'property_valuation': 'MortgagedPropertyValuationValue2',
        'deposit': 'CurrencyValue',
        'mortgage_number': 'str',
        'loan_to_value': 'float',
        'redemption_penalty': 'MortgageRedemptionValue3',
        'is_portable': 'bool',
        'is_first_time_buyer': 'bool',
        'is_consolidated_debt': 'bool',
        '_property': 'PropertyValue2',
        'additional_owners': 'list[NamedClientReference]',
        'property_type': 'str',
        'capital_repayment': 'CurrencyValue',
        'rate_period_from_completion_months': 'int',
        'interest_only_repayment': 'CurrencyValue',
        'interest_only_repayment_vehicle': 'str',
        'has_guarantor': 'bool',
        'rate_period_years': 'int',
        'reversionary_rate': 'float',
        'property_address': 'PropertyAddressRef',
        'total_fees': 'list[LenderFeeValue2]',
        'shared_equity': 'SharedEquityValue',
        'new_business_plan': 'NewBusinessPlanValue',
        'currency': 'str'
    }
    if hasattr(BaseRecommendation2Proposal, "swagger_types"):
        swagger_types.update(BaseRecommendation2Proposal.swagger_types)

    attribute_map = {
        'initial_monthly_cost': 'initialMonthlyCost',
        'true_cost': 'trueCost',
        'repayment_method': 'repaymentMethod',
        'proc_fee': 'procFee',
        'value': 'value',
        'interest': 'interest',
        'term': 'term',
        'feature_expiry_date': 'featureExpiryDate',
        'property_valuation': 'propertyValuation',
        'deposit': 'deposit',
        'mortgage_number': 'mortgageNumber',
        'loan_to_value': 'loanToValue',
        'redemption_penalty': 'redemptionPenalty',
        'is_portable': 'isPortable',
        'is_first_time_buyer': 'isFirstTimeBuyer',
        'is_consolidated_debt': 'isConsolidatedDebt',
        '_property': 'property',
        'additional_owners': 'additionalOwners',
        'property_type': 'propertyType',
        'capital_repayment': 'capitalRepayment',
        'rate_period_from_completion_months': 'ratePeriodFromCompletionMonths',
        'interest_only_repayment': 'interestOnlyRepayment',
        'interest_only_repayment_vehicle': 'interestOnlyRepaymentVehicle',
        'has_guarantor': 'hasGuarantor',
        'rate_period_years': 'ratePeriodYears',
        'reversionary_rate': 'reversionaryRate',
        'property_address': 'propertyAddress',
        'total_fees': 'totalFees',
        'shared_equity': 'sharedEquity',
        'new_business_plan': 'newBusinessPlan',
        'currency': 'currency'
    }
    if hasattr(BaseRecommendation2Proposal, "attribute_map"):
        attribute_map.update(BaseRecommendation2Proposal.attribute_map)

    def __init__(self, initial_monthly_cost=None, true_cost=None, repayment_method=None, proc_fee=None, value=None, interest=None, term=None, feature_expiry_date=None, property_valuation=None, deposit=None, mortgage_number=None, loan_to_value=None, redemption_penalty=None, is_portable=None, is_first_time_buyer=None, is_consolidated_debt=None, _property=None, additional_owners=None, property_type=None, capital_repayment=None, rate_period_from_completion_months=None, interest_only_repayment=None, interest_only_repayment_vehicle=None, has_guarantor=None, rate_period_years=None, reversionary_rate=None, property_address=None, total_fees=None, shared_equity=None, new_business_plan=None, currency=None, *args, **kwargs):  # noqa: E501
        """NewBusinessMortgageProposal - a model defined in Swagger"""  # noqa: E501
        self._initial_monthly_cost = None
        self._true_cost = None
        self._repayment_method = None
        self._proc_fee = None
        self._value = None
        self._interest = None
        self._term = None
        self._feature_expiry_date = None
        self._property_valuation = None
        self._deposit = None
        self._mortgage_number = None
        self._loan_to_value = None
        self._redemption_penalty = None
        self._is_portable = None
        self._is_first_time_buyer = None
        self._is_consolidated_debt = None
        self.__property = None
        self._additional_owners = None
        self._property_type = None
        self._capital_repayment = None
        self._rate_period_from_completion_months = None
        self._interest_only_repayment = None
        self._interest_only_repayment_vehicle = None
        self._has_guarantor = None
        self._rate_period_years = None
        self._reversionary_rate = None
        self._property_address = None
        self._total_fees = None
        self._shared_equity = None
        self._new_business_plan = None
        self._currency = None
        self.discriminator = None
        if initial_monthly_cost is not None:
            self.initial_monthly_cost = initial_monthly_cost
        if true_cost is not None:
            self.true_cost = true_cost
        if repayment_method is not None:
            self.repayment_method = repayment_method
        if proc_fee is not None:
            self.proc_fee = proc_fee
        if value is not None:
            self.value = value
        if interest is not None:
            self.interest = interest
        if term is not None:
            self.term = term
        if feature_expiry_date is not None:
            self.feature_expiry_date = feature_expiry_date
        if property_valuation is not None:
            self.property_valuation = property_valuation
        if deposit is not None:
            self.deposit = deposit
        if mortgage_number is not None:
            self.mortgage_number = mortgage_number
        if loan_to_value is not None:
            self.loan_to_value = loan_to_value
        if redemption_penalty is not None:
            self.redemption_penalty = redemption_penalty
        if is_portable is not None:
            self.is_portable = is_portable
        if is_first_time_buyer is not None:
            self.is_first_time_buyer = is_first_time_buyer
        if is_consolidated_debt is not None:
            self.is_consolidated_debt = is_consolidated_debt
        if _property is not None:
            self._property = _property
        if additional_owners is not None:
            self.additional_owners = additional_owners
        if property_type is not None:
            self.property_type = property_type
        if capital_repayment is not None:
            self.capital_repayment = capital_repayment
        if rate_period_from_completion_months is not None:
            self.rate_period_from_completion_months = rate_period_from_completion_months
        if interest_only_repayment is not None:
            self.interest_only_repayment = interest_only_repayment
        if interest_only_repayment_vehicle is not None:
            self.interest_only_repayment_vehicle = interest_only_repayment_vehicle
        if has_guarantor is not None:
            self.has_guarantor = has_guarantor
        if rate_period_years is not None:
            self.rate_period_years = rate_period_years
        if reversionary_rate is not None:
            self.reversionary_rate = reversionary_rate
        if property_address is not None:
            self.property_address = property_address
        if total_fees is not None:
            self.total_fees = total_fees
        if shared_equity is not None:
            self.shared_equity = shared_equity
        if new_business_plan is not None:
            self.new_business_plan = new_business_plan
        if currency is not None:
            self.currency = currency
        BaseRecommendation2Proposal.__init__(self, *args, **kwargs)

    @property
    def initial_monthly_cost(self):
        """Gets the initial_monthly_cost of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The initial_monthly_cost of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._initial_monthly_cost

    @initial_monthly_cost.setter
    def initial_monthly_cost(self, initial_monthly_cost):
        """Sets the initial_monthly_cost of this NewBusinessMortgageProposal.


        :param initial_monthly_cost: The initial_monthly_cost of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._initial_monthly_cost = initial_monthly_cost

    @property
    def true_cost(self):
        """Gets the true_cost of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The true_cost of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._true_cost

    @true_cost.setter
    def true_cost(self, true_cost):
        """Sets the true_cost of this NewBusinessMortgageProposal.


        :param true_cost: The true_cost of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._true_cost = true_cost

    @property
    def repayment_method(self):
        """Gets the repayment_method of this NewBusinessMortgageProposal.  # noqa: E501

        Repayment method type.  # noqa: E501

        :return: The repayment_method of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: str
        """
        return self._repayment_method

    @repayment_method.setter
    def repayment_method(self, repayment_method):
        """Sets the repayment_method of this NewBusinessMortgageProposal.

        Repayment method type.  # noqa: E501

        :param repayment_method: The repayment_method of this NewBusinessMortgageProposal.  # noqa: E501
        :type: str
        """

        self._repayment_method = repayment_method

    @property
    def proc_fee(self):
        """Gets the proc_fee of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The proc_fee of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._proc_fee

    @proc_fee.setter
    def proc_fee(self, proc_fee):
        """Sets the proc_fee of this NewBusinessMortgageProposal.


        :param proc_fee: The proc_fee of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._proc_fee = proc_fee

    @property
    def value(self):
        """Gets the value of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The value of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NewBusinessMortgageProposal.


        :param value: The value of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    @property
    def interest(self):
        """Gets the interest of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The interest of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: InterestSchemeValue
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this NewBusinessMortgageProposal.


        :param interest: The interest of this NewBusinessMortgageProposal.  # noqa: E501
        :type: InterestSchemeValue
        """

        self._interest = interest

    @property
    def term(self):
        """Gets the term of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The term of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: MortgageTermValue
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this NewBusinessMortgageProposal.


        :param term: The term of this NewBusinessMortgageProposal.  # noqa: E501
        :type: MortgageTermValue
        """

        self._term = term

    @property
    def feature_expiry_date(self):
        """Gets the feature_expiry_date of this NewBusinessMortgageProposal.  # noqa: E501

        Scheme expiry date (e.g. fixed term end date).  # noqa: E501

        :return: The feature_expiry_date of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: datetime
        """
        return self._feature_expiry_date

    @feature_expiry_date.setter
    def feature_expiry_date(self, feature_expiry_date):
        """Sets the feature_expiry_date of this NewBusinessMortgageProposal.

        Scheme expiry date (e.g. fixed term end date).  # noqa: E501

        :param feature_expiry_date: The feature_expiry_date of this NewBusinessMortgageProposal.  # noqa: E501
        :type: datetime
        """

        self._feature_expiry_date = feature_expiry_date

    @property
    def property_valuation(self):
        """Gets the property_valuation of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The property_valuation of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: MortgagedPropertyValuationValue2
        """
        return self._property_valuation

    @property_valuation.setter
    def property_valuation(self, property_valuation):
        """Sets the property_valuation of this NewBusinessMortgageProposal.


        :param property_valuation: The property_valuation of this NewBusinessMortgageProposal.  # noqa: E501
        :type: MortgagedPropertyValuationValue2
        """

        self._property_valuation = property_valuation

    @property
    def deposit(self):
        """Gets the deposit of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The deposit of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this NewBusinessMortgageProposal.


        :param deposit: The deposit of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._deposit = deposit

    @property
    def mortgage_number(self):
        """Gets the mortgage_number of this NewBusinessMortgageProposal.  # noqa: E501

        A Provider assigned reference for the purposes of tracking a Mortgage Application until such time as that Application is approved or rejected.  # noqa: E501

        :return: The mortgage_number of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: str
        """
        return self._mortgage_number

    @mortgage_number.setter
    def mortgage_number(self, mortgage_number):
        """Sets the mortgage_number of this NewBusinessMortgageProposal.

        A Provider assigned reference for the purposes of tracking a Mortgage Application until such time as that Application is approved or rejected.  # noqa: E501

        :param mortgage_number: The mortgage_number of this NewBusinessMortgageProposal.  # noqa: E501
        :type: str
        """

        self._mortgage_number = mortgage_number

    @property
    def loan_to_value(self):
        """Gets the loan_to_value of this NewBusinessMortgageProposal.  # noqa: E501

        Loan to value percentage.  Calculated as: (loanAmount / propertyValuation.value) * 100.  # noqa: E501

        :return: The loan_to_value of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: float
        """
        return self._loan_to_value

    @loan_to_value.setter
    def loan_to_value(self, loan_to_value):
        """Sets the loan_to_value of this NewBusinessMortgageProposal.

        Loan to value percentage.  Calculated as: (loanAmount / propertyValuation.value) * 100.  # noqa: E501

        :param loan_to_value: The loan_to_value of this NewBusinessMortgageProposal.  # noqa: E501
        :type: float
        """

        self._loan_to_value = loan_to_value

    @property
    def redemption_penalty(self):
        """Gets the redemption_penalty of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The redemption_penalty of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: MortgageRedemptionValue3
        """
        return self._redemption_penalty

    @redemption_penalty.setter
    def redemption_penalty(self, redemption_penalty):
        """Sets the redemption_penalty of this NewBusinessMortgageProposal.


        :param redemption_penalty: The redemption_penalty of this NewBusinessMortgageProposal.  # noqa: E501
        :type: MortgageRedemptionValue3
        """

        self._redemption_penalty = redemption_penalty

    @property
    def is_portable(self):
        """Gets the is_portable of this NewBusinessMortgageProposal.  # noqa: E501

        Is the mortgage portable?  # noqa: E501

        :return: The is_portable of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: bool
        """
        return self._is_portable

    @is_portable.setter
    def is_portable(self, is_portable):
        """Sets the is_portable of this NewBusinessMortgageProposal.

        Is the mortgage portable?  # noqa: E501

        :param is_portable: The is_portable of this NewBusinessMortgageProposal.  # noqa: E501
        :type: bool
        """

        self._is_portable = is_portable

    @property
    def is_first_time_buyer(self):
        """Gets the is_first_time_buyer of this NewBusinessMortgageProposal.  # noqa: E501

        Is client a first-time buyer?  # noqa: E501

        :return: The is_first_time_buyer of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_time_buyer

    @is_first_time_buyer.setter
    def is_first_time_buyer(self, is_first_time_buyer):
        """Sets the is_first_time_buyer of this NewBusinessMortgageProposal.

        Is client a first-time buyer?  # noqa: E501

        :param is_first_time_buyer: The is_first_time_buyer of this NewBusinessMortgageProposal.  # noqa: E501
        :type: bool
        """

        self._is_first_time_buyer = is_first_time_buyer

    @property
    def is_consolidated_debt(self):
        """Gets the is_consolidated_debt of this NewBusinessMortgageProposal.  # noqa: E501

        Is mortgage equity to be used to consolidate debt?  # noqa: E501

        :return: The is_consolidated_debt of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: bool
        """
        return self._is_consolidated_debt

    @is_consolidated_debt.setter
    def is_consolidated_debt(self, is_consolidated_debt):
        """Sets the is_consolidated_debt of this NewBusinessMortgageProposal.

        Is mortgage equity to be used to consolidate debt?  # noqa: E501

        :param is_consolidated_debt: The is_consolidated_debt of this NewBusinessMortgageProposal.  # noqa: E501
        :type: bool
        """

        self._is_consolidated_debt = is_consolidated_debt

    @property
    def _property(self):
        """Gets the _property of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The _property of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: PropertyValue2
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this NewBusinessMortgageProposal.


        :param _property: The _property of this NewBusinessMortgageProposal.  # noqa: E501
        :type: PropertyValue2
        """

        self.__property = _property

    @property
    def additional_owners(self):
        """Gets the additional_owners of this NewBusinessMortgageProposal.  # noqa: E501

        Additional owners (Maximum 2).  # noqa: E501

        :return: The additional_owners of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: list[NamedClientReference]
        """
        return self._additional_owners

    @additional_owners.setter
    def additional_owners(self, additional_owners):
        """Sets the additional_owners of this NewBusinessMortgageProposal.

        Additional owners (Maximum 2).  # noqa: E501

        :param additional_owners: The additional_owners of this NewBusinessMortgageProposal.  # noqa: E501
        :type: list[NamedClientReference]
        """

        self._additional_owners = additional_owners

    @property
    def property_type(self):
        """Gets the property_type of this NewBusinessMortgageProposal.  # noqa: E501

        Property type.  # noqa: E501

        :return: The property_type of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this NewBusinessMortgageProposal.

        Property type.  # noqa: E501

        :param property_type: The property_type of this NewBusinessMortgageProposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["Detached", "SemiDetached", "Terraced", "DetachedBungalow", "SemiDetachedBungalow", "TerracedBungalow", "PurposeBuiltFlat", "ConvertedFlat", "PurposeBuiltMaisonette", "ConvertedMaisonette", "OverAShop", "StudioFlat", "FlatOverFourStoreys", "ListedBuilding", "House", "DuplexSemiDetached", "UnitApartment", "Villa", "Townhouse", "Terrace", "Over55s", "GrannyFlat", "Other"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"  # noqa: E501
                .format(property_type, allowed_values)
            )

        self._property_type = property_type

    @property
    def capital_repayment(self):
        """Gets the capital_repayment of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The capital_repayment of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._capital_repayment

    @capital_repayment.setter
    def capital_repayment(self, capital_repayment):
        """Sets the capital_repayment of this NewBusinessMortgageProposal.


        :param capital_repayment: The capital_repayment of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._capital_repayment = capital_repayment

    @property
    def rate_period_from_completion_months(self):
        """Gets the rate_period_from_completion_months of this NewBusinessMortgageProposal.  # noqa: E501

        Number of months remaining before the current rate period ends.  # noqa: E501

        :return: The rate_period_from_completion_months of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: int
        """
        return self._rate_period_from_completion_months

    @rate_period_from_completion_months.setter
    def rate_period_from_completion_months(self, rate_period_from_completion_months):
        """Sets the rate_period_from_completion_months of this NewBusinessMortgageProposal.

        Number of months remaining before the current rate period ends.  # noqa: E501

        :param rate_period_from_completion_months: The rate_period_from_completion_months of this NewBusinessMortgageProposal.  # noqa: E501
        :type: int
        """

        self._rate_period_from_completion_months = rate_period_from_completion_months

    @property
    def interest_only_repayment(self):
        """Gets the interest_only_repayment of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The interest_only_repayment of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._interest_only_repayment

    @interest_only_repayment.setter
    def interest_only_repayment(self, interest_only_repayment):
        """Sets the interest_only_repayment of this NewBusinessMortgageProposal.


        :param interest_only_repayment: The interest_only_repayment of this NewBusinessMortgageProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._interest_only_repayment = interest_only_repayment

    @property
    def interest_only_repayment_vehicle(self):
        """Gets the interest_only_repayment_vehicle of this NewBusinessMortgageProposal.  # noqa: E501

        Interest only repayment vehicle.  # noqa: E501

        :return: The interest_only_repayment_vehicle of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: str
        """
        return self._interest_only_repayment_vehicle

    @interest_only_repayment_vehicle.setter
    def interest_only_repayment_vehicle(self, interest_only_repayment_vehicle):
        """Sets the interest_only_repayment_vehicle of this NewBusinessMortgageProposal.

        Interest only repayment vehicle.  # noqa: E501

        :param interest_only_repayment_vehicle: The interest_only_repayment_vehicle of this NewBusinessMortgageProposal.  # noqa: E501
        :type: str
        """

        self._interest_only_repayment_vehicle = interest_only_repayment_vehicle

    @property
    def has_guarantor(self):
        """Gets the has_guarantor of this NewBusinessMortgageProposal.  # noqa: E501

        Is there a mortgage guarantor?  # noqa: E501

        :return: The has_guarantor of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: bool
        """
        return self._has_guarantor

    @has_guarantor.setter
    def has_guarantor(self, has_guarantor):
        """Sets the has_guarantor of this NewBusinessMortgageProposal.

        Is there a mortgage guarantor?  # noqa: E501

        :param has_guarantor: The has_guarantor of this NewBusinessMortgageProposal.  # noqa: E501
        :type: bool
        """

        self._has_guarantor = has_guarantor

    @property
    def rate_period_years(self):
        """Gets the rate_period_years of this NewBusinessMortgageProposal.  # noqa: E501

        Rate period (in years).  # noqa: E501

        :return: The rate_period_years of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: int
        """
        return self._rate_period_years

    @rate_period_years.setter
    def rate_period_years(self, rate_period_years):
        """Sets the rate_period_years of this NewBusinessMortgageProposal.

        Rate period (in years).  # noqa: E501

        :param rate_period_years: The rate_period_years of this NewBusinessMortgageProposal.  # noqa: E501
        :type: int
        """

        self._rate_period_years = rate_period_years

    @property
    def reversionary_rate(self):
        """Gets the reversionary_rate of this NewBusinessMortgageProposal.  # noqa: E501

        Standard Variable Rate.  # noqa: E501

        :return: The reversionary_rate of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: float
        """
        return self._reversionary_rate

    @reversionary_rate.setter
    def reversionary_rate(self, reversionary_rate):
        """Sets the reversionary_rate of this NewBusinessMortgageProposal.

        Standard Variable Rate.  # noqa: E501

        :param reversionary_rate: The reversionary_rate of this NewBusinessMortgageProposal.  # noqa: E501
        :type: float
        """

        self._reversionary_rate = reversionary_rate

    @property
    def property_address(self):
        """Gets the property_address of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The property_address of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: PropertyAddressRef
        """
        return self._property_address

    @property_address.setter
    def property_address(self, property_address):
        """Sets the property_address of this NewBusinessMortgageProposal.


        :param property_address: The property_address of this NewBusinessMortgageProposal.  # noqa: E501
        :type: PropertyAddressRef
        """

        self._property_address = property_address

    @property
    def total_fees(self):
        """Gets the total_fees of this NewBusinessMortgageProposal.  # noqa: E501

        Collection of lender specific fees.  # noqa: E501

        :return: The total_fees of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: list[LenderFeeValue2]
        """
        return self._total_fees

    @total_fees.setter
    def total_fees(self, total_fees):
        """Sets the total_fees of this NewBusinessMortgageProposal.

        Collection of lender specific fees.  # noqa: E501

        :param total_fees: The total_fees of this NewBusinessMortgageProposal.  # noqa: E501
        :type: list[LenderFeeValue2]
        """

        self._total_fees = total_fees

    @property
    def shared_equity(self):
        """Gets the shared_equity of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The shared_equity of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: SharedEquityValue
        """
        return self._shared_equity

    @shared_equity.setter
    def shared_equity(self, shared_equity):
        """Sets the shared_equity of this NewBusinessMortgageProposal.


        :param shared_equity: The shared_equity of this NewBusinessMortgageProposal.  # noqa: E501
        :type: SharedEquityValue
        """

        self._shared_equity = shared_equity

    @property
    def new_business_plan(self):
        """Gets the new_business_plan of this NewBusinessMortgageProposal.  # noqa: E501


        :return: The new_business_plan of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: NewBusinessPlanValue
        """
        return self._new_business_plan

    @new_business_plan.setter
    def new_business_plan(self, new_business_plan):
        """Sets the new_business_plan of this NewBusinessMortgageProposal.


        :param new_business_plan: The new_business_plan of this NewBusinessMortgageProposal.  # noqa: E501
        :type: NewBusinessPlanValue
        """

        self._new_business_plan = new_business_plan

    @property
    def currency(self):
        """Gets the currency of this NewBusinessMortgageProposal.  # noqa: E501

        ISO 4217 Currency code for the proposal.  # noqa: E501

        :return: The currency of this NewBusinessMortgageProposal.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewBusinessMortgageProposal.

        ISO 4217 Currency code for the proposal.  # noqa: E501

        :param currency: The currency of this NewBusinessMortgageProposal.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewBusinessMortgageProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewBusinessMortgageProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
