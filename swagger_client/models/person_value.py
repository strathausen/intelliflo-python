# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'salutation': 'str',
        'title': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'date_of_birth': 'date',
        'gender': 'str',
        'maiden_name': 'str',
        'ni_number': 'str',
        'marital_status': 'str',
        'marital_status_since': 'datetime',
        'nationality': 'str',
        'nationality_country': 'NationalityCountryValue',
        'is_deceased': 'bool',
        'deceased_on': 'datetime',
        'territorial_profile': 'TerritorialProfileValue',
        'health_profile': 'HealthProfileValue',
        'has_will': 'bool',
        'is_will_upto_date': 'bool',
        'is_power_of_attorney_granted': 'bool',
        'national_client_identifier': 'str'
    }

    attribute_map = {
        'salutation': 'salutation',
        'title': 'title',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'date_of_birth': 'dateOfBirth',
        'gender': 'gender',
        'maiden_name': 'maidenName',
        'ni_number': 'niNumber',
        'marital_status': 'maritalStatus',
        'marital_status_since': 'maritalStatusSince',
        'nationality': 'nationality',
        'nationality_country': 'nationalityCountry',
        'is_deceased': 'isDeceased',
        'deceased_on': 'deceasedOn',
        'territorial_profile': 'territorialProfile',
        'health_profile': 'healthProfile',
        'has_will': 'hasWill',
        'is_will_upto_date': 'isWillUptoDate',
        'is_power_of_attorney_granted': 'isPowerOfAttorneyGranted',
        'national_client_identifier': 'nationalClientIdentifier'
    }

    def __init__(self, salutation=None, title=None, first_name=None, middle_name=None, last_name=None, date_of_birth=None, gender=None, maiden_name=None, ni_number=None, marital_status=None, marital_status_since=None, nationality=None, nationality_country=None, is_deceased=None, deceased_on=None, territorial_profile=None, health_profile=None, has_will=None, is_will_upto_date=None, is_power_of_attorney_granted=None, national_client_identifier=None):  # noqa: E501
        """PersonValue - a model defined in Swagger"""  # noqa: E501
        self._salutation = None
        self._title = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._date_of_birth = None
        self._gender = None
        self._maiden_name = None
        self._ni_number = None
        self._marital_status = None
        self._marital_status_since = None
        self._nationality = None
        self._nationality_country = None
        self._is_deceased = None
        self._deceased_on = None
        self._territorial_profile = None
        self._health_profile = None
        self._has_will = None
        self._is_will_upto_date = None
        self._is_power_of_attorney_granted = None
        self._national_client_identifier = None
        self.discriminator = None
        if salutation is not None:
            self.salutation = salutation
        if title is not None:
            self.title = title
        self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        self.last_name = last_name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if gender is not None:
            self.gender = gender
        if maiden_name is not None:
            self.maiden_name = maiden_name
        if ni_number is not None:
            self.ni_number = ni_number
        if marital_status is not None:
            self.marital_status = marital_status
        if marital_status_since is not None:
            self.marital_status_since = marital_status_since
        if nationality is not None:
            self.nationality = nationality
        if nationality_country is not None:
            self.nationality_country = nationality_country
        if is_deceased is not None:
            self.is_deceased = is_deceased
        if deceased_on is not None:
            self.deceased_on = deceased_on
        if territorial_profile is not None:
            self.territorial_profile = territorial_profile
        if health_profile is not None:
            self.health_profile = health_profile
        if has_will is not None:
            self.has_will = has_will
        if is_will_upto_date is not None:
            self.is_will_upto_date = is_will_upto_date
        if is_power_of_attorney_granted is not None:
            self.is_power_of_attorney_granted = is_power_of_attorney_granted
        if national_client_identifier is not None:
            self.national_client_identifier = national_client_identifier

    @property
    def salutation(self):
        """Gets the salutation of this PersonValue.  # noqa: E501

        The Person's preferred salutation if known.  # noqa: E501

        :return: The salutation of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this PersonValue.

        The Person's preferred salutation if known.  # noqa: E501

        :param salutation: The salutation of this PersonValue.  # noqa: E501
        :type: str
        """

        self._salutation = salutation

    @property
    def title(self):
        """Gets the title of this PersonValue.  # noqa: E501

        The Person's title.  # noqa: E501

        :return: The title of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PersonValue.

        The Person's title.  # noqa: E501

        :param title: The title of this PersonValue.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this PersonValue.  # noqa: E501

        The Person's first name.  # noqa: E501

        :return: The first_name of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PersonValue.

        The Person's first name.  # noqa: E501

        :param first_name: The first_name of this PersonValue.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this PersonValue.  # noqa: E501

        The Person's middle name if they have one.  # noqa: E501

        :return: The middle_name of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this PersonValue.

        The Person's middle name if they have one.  # noqa: E501

        :param middle_name: The middle_name of this PersonValue.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this PersonValue.  # noqa: E501

        The Person's last name.  # noqa: E501

        :return: The last_name of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PersonValue.

        The Person's last name.  # noqa: E501

        :param last_name: The last_name of this PersonValue.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PersonValue.  # noqa: E501

        The Person's date of birth.  # noqa: E501

        :return: The date_of_birth of this PersonValue.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PersonValue.

        The Person's date of birth.  # noqa: E501

        :param date_of_birth: The date_of_birth of this PersonValue.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """Gets the gender of this PersonValue.  # noqa: E501

        The Person's gender.  # noqa: E501

        :return: The gender of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PersonValue.

        The Person's gender.  # noqa: E501

        :param gender: The gender of this PersonValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unspecified", "Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def maiden_name(self):
        """Gets the maiden_name of this PersonValue.  # noqa: E501

        The Person's maiden name.  # noqa: E501

        :return: The maiden_name of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this PersonValue.

        The Person's maiden name.  # noqa: E501

        :param maiden_name: The maiden_name of this PersonValue.  # noqa: E501
        :type: str
        """

        self._maiden_name = maiden_name

    @property
    def ni_number(self):
        """Gets the ni_number of this PersonValue.  # noqa: E501

        The Person's National Insurance number (in UK), Social Security Number (in US) or local equivalent.  # noqa: E501

        :return: The ni_number of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._ni_number

    @ni_number.setter
    def ni_number(self, ni_number):
        """Sets the ni_number of this PersonValue.

        The Person's National Insurance number (in UK), Social Security Number (in US) or local equivalent.  # noqa: E501

        :param ni_number: The ni_number of this PersonValue.  # noqa: E501
        :type: str
        """

        self._ni_number = ni_number

    @property
    def marital_status(self):
        """Gets the marital_status of this PersonValue.  # noqa: E501

        The Person's marital status.  # noqa: E501

        :return: The marital_status of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this PersonValue.

        The Person's marital status.  # noqa: E501

        :param marital_status: The marital_status of this PersonValue.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def marital_status_since(self):
        """Gets the marital_status_since of this PersonValue.  # noqa: E501

        The date the Person was married if appropriate.  # noqa: E501

        :return: The marital_status_since of this PersonValue.  # noqa: E501
        :rtype: datetime
        """
        return self._marital_status_since

    @marital_status_since.setter
    def marital_status_since(self, marital_status_since):
        """Sets the marital_status_since of this PersonValue.

        The date the Person was married if appropriate.  # noqa: E501

        :param marital_status_since: The marital_status_since of this PersonValue.  # noqa: E501
        :type: datetime
        """

        self._marital_status_since = marital_status_since

    @property
    def nationality(self):
        """Gets the nationality of this PersonValue.  # noqa: E501

        This property has been depricated and will be removed in future. Please use NationalityCountry instead.  # noqa: E501

        :return: The nationality of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this PersonValue.

        This property has been depricated and will be removed in future. Please use NationalityCountry instead.  # noqa: E501

        :param nationality: The nationality of this PersonValue.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def nationality_country(self):
        """Gets the nationality_country of this PersonValue.  # noqa: E501


        :return: The nationality_country of this PersonValue.  # noqa: E501
        :rtype: NationalityCountryValue
        """
        return self._nationality_country

    @nationality_country.setter
    def nationality_country(self, nationality_country):
        """Sets the nationality_country of this PersonValue.


        :param nationality_country: The nationality_country of this PersonValue.  # noqa: E501
        :type: NationalityCountryValue
        """

        self._nationality_country = nationality_country

    @property
    def is_deceased(self):
        """Gets the is_deceased of this PersonValue.  # noqa: E501

        Flag indicating whether the Person has died. If set to true the deceasedOn date must also be set.  # noqa: E501

        :return: The is_deceased of this PersonValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_deceased

    @is_deceased.setter
    def is_deceased(self, is_deceased):
        """Sets the is_deceased of this PersonValue.

        Flag indicating whether the Person has died. If set to true the deceasedOn date must also be set.  # noqa: E501

        :param is_deceased: The is_deceased of this PersonValue.  # noqa: E501
        :type: bool
        """

        self._is_deceased = is_deceased

    @property
    def deceased_on(self):
        """Gets the deceased_on of this PersonValue.  # noqa: E501

        The date of the Person's death. This must be set if isDeceased is true.  # noqa: E501

        :return: The deceased_on of this PersonValue.  # noqa: E501
        :rtype: datetime
        """
        return self._deceased_on

    @deceased_on.setter
    def deceased_on(self, deceased_on):
        """Sets the deceased_on of this PersonValue.

        The date of the Person's death. This must be set if isDeceased is true.  # noqa: E501

        :param deceased_on: The deceased_on of this PersonValue.  # noqa: E501
        :type: datetime
        """

        self._deceased_on = deceased_on

    @property
    def territorial_profile(self):
        """Gets the territorial_profile of this PersonValue.  # noqa: E501


        :return: The territorial_profile of this PersonValue.  # noqa: E501
        :rtype: TerritorialProfileValue
        """
        return self._territorial_profile

    @territorial_profile.setter
    def territorial_profile(self, territorial_profile):
        """Sets the territorial_profile of this PersonValue.


        :param territorial_profile: The territorial_profile of this PersonValue.  # noqa: E501
        :type: TerritorialProfileValue
        """

        self._territorial_profile = territorial_profile

    @property
    def health_profile(self):
        """Gets the health_profile of this PersonValue.  # noqa: E501


        :return: The health_profile of this PersonValue.  # noqa: E501
        :rtype: HealthProfileValue
        """
        return self._health_profile

    @health_profile.setter
    def health_profile(self, health_profile):
        """Sets the health_profile of this PersonValue.


        :param health_profile: The health_profile of this PersonValue.  # noqa: E501
        :type: HealthProfileValue
        """

        self._health_profile = health_profile

    @property
    def has_will(self):
        """Gets the has_will of this PersonValue.  # noqa: E501

        Flag indicatiing whether the Person has a will or not.  # noqa: E501

        :return: The has_will of this PersonValue.  # noqa: E501
        :rtype: bool
        """
        return self._has_will

    @has_will.setter
    def has_will(self, has_will):
        """Sets the has_will of this PersonValue.

        Flag indicatiing whether the Person has a will or not.  # noqa: E501

        :param has_will: The has_will of this PersonValue.  # noqa: E501
        :type: bool
        """

        self._has_will = has_will

    @property
    def is_will_upto_date(self):
        """Gets the is_will_upto_date of this PersonValue.  # noqa: E501

        Flag indicatiing whether the Person's will is upto date or not.  # noqa: E501

        :return: The is_will_upto_date of this PersonValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_will_upto_date

    @is_will_upto_date.setter
    def is_will_upto_date(self, is_will_upto_date):
        """Sets the is_will_upto_date of this PersonValue.

        Flag indicatiing whether the Person's will is upto date or not.  # noqa: E501

        :param is_will_upto_date: The is_will_upto_date of this PersonValue.  # noqa: E501
        :type: bool
        """

        self._is_will_upto_date = is_will_upto_date

    @property
    def is_power_of_attorney_granted(self):
        """Gets the is_power_of_attorney_granted of this PersonValue.  # noqa: E501

        Flag indicating if the Person has assigned someone to act on their behalf in legal or financial matters.  # noqa: E501

        :return: The is_power_of_attorney_granted of this PersonValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_power_of_attorney_granted

    @is_power_of_attorney_granted.setter
    def is_power_of_attorney_granted(self, is_power_of_attorney_granted):
        """Sets the is_power_of_attorney_granted of this PersonValue.

        Flag indicating if the Person has assigned someone to act on their behalf in legal or financial matters.  # noqa: E501

        :param is_power_of_attorney_granted: The is_power_of_attorney_granted of this PersonValue.  # noqa: E501
        :type: bool
        """

        self._is_power_of_attorney_granted = is_power_of_attorney_granted

    @property
    def national_client_identifier(self):
        """Gets the national_client_identifier of this PersonValue.  # noqa: E501

        The National Client Identifier associated with the Person. This is a unique country specific client identifier eg. National Insurance number for UK.  # noqa: E501

        :return: The national_client_identifier of this PersonValue.  # noqa: E501
        :rtype: str
        """
        return self._national_client_identifier

    @national_client_identifier.setter
    def national_client_identifier(self, national_client_identifier):
        """Sets the national_client_identifier of this PersonValue.

        The National Client Identifier associated with the Person. This is a unique country specific client identifier eg. National Insurance number for UK.  # noqa: E501

        :param national_client_identifier: The national_client_identifier of this PersonValue.  # noqa: E501
        :type: str
        """

        self._national_client_identifier = national_client_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
