# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.asset_plan import AssetPlan  # noqa: F401,E501

class AnnuityPlan(AssetPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_notes': 'str',
        'annuity_payment_type': 'str',
        'capital_or_value_protected': 'CurrencyValue',
        'guarantee_period': 'str',
        'pcls': 'CurrencyValue',
        'pcls_paid_by': 'str',
        'spouses_or_dependants_benefit': 'SpousesOrDependantsBenefitValue',
        'is_with_proportion': 'bool',
        'employment': 'EmploymentRef',
        'centrelink_deductible_amount': 'CurrencyValue',
        'tax_free_percentage_of_income': 'float'
    }
    if hasattr(AssetPlan, "swagger_types"):
        swagger_types.update(AssetPlan.swagger_types)

    attribute_map = {
        'additional_notes': 'additionalNotes',
        'annuity_payment_type': 'annuityPaymentType',
        'capital_or_value_protected': 'capitalOrValueProtected',
        'guarantee_period': 'guaranteePeriod',
        'pcls': 'pcls',
        'pcls_paid_by': 'pclsPaidBy',
        'spouses_or_dependants_benefit': 'spousesOrDependantsBenefit',
        'is_with_proportion': 'isWithProportion',
        'employment': 'employment',
        'centrelink_deductible_amount': 'centrelinkDeductibleAmount',
        'tax_free_percentage_of_income': 'taxFreePercentageOfIncome'
    }
    if hasattr(AssetPlan, "attribute_map"):
        attribute_map.update(AssetPlan.attribute_map)

    def __init__(self, additional_notes='null', annuity_payment_type='null', capital_or_value_protected=None, guarantee_period='null', pcls=None, pcls_paid_by='null', spouses_or_dependants_benefit=None, is_with_proportion=False, employment=None, centrelink_deductible_amount=None, tax_free_percentage_of_income=None, *args, **kwargs):  # noqa: E501
        """AnnuityPlan - a model defined in Swagger"""  # noqa: E501
        self._additional_notes = None
        self._annuity_payment_type = None
        self._capital_or_value_protected = None
        self._guarantee_period = None
        self._pcls = None
        self._pcls_paid_by = None
        self._spouses_or_dependants_benefit = None
        self._is_with_proportion = None
        self._employment = None
        self._centrelink_deductible_amount = None
        self._tax_free_percentage_of_income = None
        self.discriminator = None
        if additional_notes is not None:
            self.additional_notes = additional_notes
        if annuity_payment_type is not None:
            self.annuity_payment_type = annuity_payment_type
        if capital_or_value_protected is not None:
            self.capital_or_value_protected = capital_or_value_protected
        if guarantee_period is not None:
            self.guarantee_period = guarantee_period
        if pcls is not None:
            self.pcls = pcls
        if pcls_paid_by is not None:
            self.pcls_paid_by = pcls_paid_by
        if spouses_or_dependants_benefit is not None:
            self.spouses_or_dependants_benefit = spouses_or_dependants_benefit
        if is_with_proportion is not None:
            self.is_with_proportion = is_with_proportion
        if employment is not None:
            self.employment = employment
        if centrelink_deductible_amount is not None:
            self.centrelink_deductible_amount = centrelink_deductible_amount
        if tax_free_percentage_of_income is not None:
            self.tax_free_percentage_of_income = tax_free_percentage_of_income
        AssetPlan.__init__(self, *args, **kwargs)

    @property
    def additional_notes(self):
        """Gets the additional_notes of this AnnuityPlan.  # noqa: E501


        :return: The additional_notes of this AnnuityPlan.  # noqa: E501
        :rtype: str
        """
        return self._additional_notes

    @additional_notes.setter
    def additional_notes(self, additional_notes):
        """Sets the additional_notes of this AnnuityPlan.


        :param additional_notes: The additional_notes of this AnnuityPlan.  # noqa: E501
        :type: str
        """

        self._additional_notes = additional_notes

    @property
    def annuity_payment_type(self):
        """Gets the annuity_payment_type of this AnnuityPlan.  # noqa: E501


        :return: The annuity_payment_type of this AnnuityPlan.  # noqa: E501
        :rtype: str
        """
        return self._annuity_payment_type

    @annuity_payment_type.setter
    def annuity_payment_type(self, annuity_payment_type):
        """Sets the annuity_payment_type of this AnnuityPlan.


        :param annuity_payment_type: The annuity_payment_type of this AnnuityPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Advance", "Arrears"]  # noqa: E501
        if annuity_payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `annuity_payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(annuity_payment_type, allowed_values)
            )

        self._annuity_payment_type = annuity_payment_type

    @property
    def capital_or_value_protected(self):
        """Gets the capital_or_value_protected of this AnnuityPlan.  # noqa: E501


        :return: The capital_or_value_protected of this AnnuityPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._capital_or_value_protected

    @capital_or_value_protected.setter
    def capital_or_value_protected(self, capital_or_value_protected):
        """Sets the capital_or_value_protected of this AnnuityPlan.


        :param capital_or_value_protected: The capital_or_value_protected of this AnnuityPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._capital_or_value_protected = capital_or_value_protected

    @property
    def guarantee_period(self):
        """Gets the guarantee_period of this AnnuityPlan.  # noqa: E501

        Guarantee period in ISO-8601 and restricted to years  # noqa: E501

        :return: The guarantee_period of this AnnuityPlan.  # noqa: E501
        :rtype: str
        """
        return self._guarantee_period

    @guarantee_period.setter
    def guarantee_period(self, guarantee_period):
        """Sets the guarantee_period of this AnnuityPlan.

        Guarantee period in ISO-8601 and restricted to years  # noqa: E501

        :param guarantee_period: The guarantee_period of this AnnuityPlan.  # noqa: E501
        :type: str
        """

        self._guarantee_period = guarantee_period

    @property
    def pcls(self):
        """Gets the pcls of this AnnuityPlan.  # noqa: E501


        :return: The pcls of this AnnuityPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._pcls

    @pcls.setter
    def pcls(self, pcls):
        """Sets the pcls of this AnnuityPlan.


        :param pcls: The pcls of this AnnuityPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._pcls = pcls

    @property
    def pcls_paid_by(self):
        """Gets the pcls_paid_by of this AnnuityPlan.  # noqa: E501


        :return: The pcls_paid_by of this AnnuityPlan.  # noqa: E501
        :rtype: str
        """
        return self._pcls_paid_by

    @pcls_paid_by.setter
    def pcls_paid_by(self, pcls_paid_by):
        """Sets the pcls_paid_by of this AnnuityPlan.


        :param pcls_paid_by: The pcls_paid_by of this AnnuityPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["OriginatingScheme", "ReceivingScheme"]  # noqa: E501
        if pcls_paid_by not in allowed_values:
            raise ValueError(
                "Invalid value for `pcls_paid_by` ({0}), must be one of {1}"  # noqa: E501
                .format(pcls_paid_by, allowed_values)
            )

        self._pcls_paid_by = pcls_paid_by

    @property
    def spouses_or_dependants_benefit(self):
        """Gets the spouses_or_dependants_benefit of this AnnuityPlan.  # noqa: E501


        :return: The spouses_or_dependants_benefit of this AnnuityPlan.  # noqa: E501
        :rtype: SpousesOrDependantsBenefitValue
        """
        return self._spouses_or_dependants_benefit

    @spouses_or_dependants_benefit.setter
    def spouses_or_dependants_benefit(self, spouses_or_dependants_benefit):
        """Sets the spouses_or_dependants_benefit of this AnnuityPlan.


        :param spouses_or_dependants_benefit: The spouses_or_dependants_benefit of this AnnuityPlan.  # noqa: E501
        :type: SpousesOrDependantsBenefitValue
        """

        self._spouses_or_dependants_benefit = spouses_or_dependants_benefit

    @property
    def is_with_proportion(self):
        """Gets the is_with_proportion of this AnnuityPlan.  # noqa: E501


        :return: The is_with_proportion of this AnnuityPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_with_proportion

    @is_with_proportion.setter
    def is_with_proportion(self, is_with_proportion):
        """Sets the is_with_proportion of this AnnuityPlan.


        :param is_with_proportion: The is_with_proportion of this AnnuityPlan.  # noqa: E501
        :type: bool
        """

        self._is_with_proportion = is_with_proportion

    @property
    def employment(self):
        """Gets the employment of this AnnuityPlan.  # noqa: E501


        :return: The employment of this AnnuityPlan.  # noqa: E501
        :rtype: EmploymentRef
        """
        return self._employment

    @employment.setter
    def employment(self, employment):
        """Sets the employment of this AnnuityPlan.


        :param employment: The employment of this AnnuityPlan.  # noqa: E501
        :type: EmploymentRef
        """

        self._employment = employment

    @property
    def centrelink_deductible_amount(self):
        """Gets the centrelink_deductible_amount of this AnnuityPlan.  # noqa: E501


        :return: The centrelink_deductible_amount of this AnnuityPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._centrelink_deductible_amount

    @centrelink_deductible_amount.setter
    def centrelink_deductible_amount(self, centrelink_deductible_amount):
        """Sets the centrelink_deductible_amount of this AnnuityPlan.


        :param centrelink_deductible_amount: The centrelink_deductible_amount of this AnnuityPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._centrelink_deductible_amount = centrelink_deductible_amount

    @property
    def tax_free_percentage_of_income(self):
        """Gets the tax_free_percentage_of_income of this AnnuityPlan.  # noqa: E501

        The percentage of the annuity that is not taxed.  # noqa: E501

        :return: The tax_free_percentage_of_income of this AnnuityPlan.  # noqa: E501
        :rtype: float
        """
        return self._tax_free_percentage_of_income

    @tax_free_percentage_of_income.setter
    def tax_free_percentage_of_income(self, tax_free_percentage_of_income):
        """Sets the tax_free_percentage_of_income of this AnnuityPlan.

        The percentage of the annuity that is not taxed.  # noqa: E501

        :param tax_free_percentage_of_income: The tax_free_percentage_of_income of this AnnuityPlan.  # noqa: E501
        :type: float
        """

        self._tax_free_percentage_of_income = tax_free_percentage_of_income

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnuityPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnuityPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
