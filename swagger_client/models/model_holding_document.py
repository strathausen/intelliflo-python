# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelHoldingDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fund': 'NamedFundRef',
        'equity': 'NamedEquityRef',
        'actual_percentage': 'float',
        'current_percentage': 'float',
        'target_percentage': 'float',
        'current_charge': 'CurrencyValue',
        'target_charge': 'CurrencyValue',
        'fund_charge_percentage': 'float',
        'kiid_href': 'str'
    }

    attribute_map = {
        'fund': 'fund',
        'equity': 'equity',
        'actual_percentage': 'actualPercentage',
        'current_percentage': 'currentPercentage',
        'target_percentage': 'targetPercentage',
        'current_charge': 'currentCharge',
        'target_charge': 'targetCharge',
        'fund_charge_percentage': 'fundChargePercentage',
        'kiid_href': 'kiid_href'
    }

    def __init__(self, fund=None, equity=None, actual_percentage=0.0, current_percentage=0.0, target_percentage=0.0, current_charge=None, target_charge=None, fund_charge_percentage=0.0, kiid_href=None):  # noqa: E501
        """ModelHoldingDocument - a model defined in Swagger"""  # noqa: E501
        self._fund = None
        self._equity = None
        self._actual_percentage = None
        self._current_percentage = None
        self._target_percentage = None
        self._current_charge = None
        self._target_charge = None
        self._fund_charge_percentage = None
        self._kiid_href = None
        self.discriminator = None
        if fund is not None:
            self.fund = fund
        if equity is not None:
            self.equity = equity
        if actual_percentage is not None:
            self.actual_percentage = actual_percentage
        if current_percentage is not None:
            self.current_percentage = current_percentage
        if target_percentage is not None:
            self.target_percentage = target_percentage
        if current_charge is not None:
            self.current_charge = current_charge
        if target_charge is not None:
            self.target_charge = target_charge
        if fund_charge_percentage is not None:
            self.fund_charge_percentage = fund_charge_percentage
        if kiid_href is not None:
            self.kiid_href = kiid_href

    @property
    def fund(self):
        """Gets the fund of this ModelHoldingDocument.  # noqa: E501


        :return: The fund of this ModelHoldingDocument.  # noqa: E501
        :rtype: NamedFundRef
        """
        return self._fund

    @fund.setter
    def fund(self, fund):
        """Sets the fund of this ModelHoldingDocument.


        :param fund: The fund of this ModelHoldingDocument.  # noqa: E501
        :type: NamedFundRef
        """

        self._fund = fund

    @property
    def equity(self):
        """Gets the equity of this ModelHoldingDocument.  # noqa: E501


        :return: The equity of this ModelHoldingDocument.  # noqa: E501
        :rtype: NamedEquityRef
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this ModelHoldingDocument.


        :param equity: The equity of this ModelHoldingDocument.  # noqa: E501
        :type: NamedEquityRef
        """

        self._equity = equity

    @property
    def actual_percentage(self):
        """Gets the actual_percentage of this ModelHoldingDocument.  # noqa: E501

        Actual percentage of the holding.  # noqa: E501

        :return: The actual_percentage of this ModelHoldingDocument.  # noqa: E501
        :rtype: float
        """
        return self._actual_percentage

    @actual_percentage.setter
    def actual_percentage(self, actual_percentage):
        """Sets the actual_percentage of this ModelHoldingDocument.

        Actual percentage of the holding.  # noqa: E501

        :param actual_percentage: The actual_percentage of this ModelHoldingDocument.  # noqa: E501
        :type: float
        """

        self._actual_percentage = actual_percentage

    @property
    def current_percentage(self):
        """Gets the current_percentage of this ModelHoldingDocument.  # noqa: E501

        Current percentage of the holding.  # noqa: E501

        :return: The current_percentage of this ModelHoldingDocument.  # noqa: E501
        :rtype: float
        """
        return self._current_percentage

    @current_percentage.setter
    def current_percentage(self, current_percentage):
        """Sets the current_percentage of this ModelHoldingDocument.

        Current percentage of the holding.  # noqa: E501

        :param current_percentage: The current_percentage of this ModelHoldingDocument.  # noqa: E501
        :type: float
        """

        self._current_percentage = current_percentage

    @property
    def target_percentage(self):
        """Gets the target_percentage of this ModelHoldingDocument.  # noqa: E501

        Target percentage of the holding.  # noqa: E501

        :return: The target_percentage of this ModelHoldingDocument.  # noqa: E501
        :rtype: float
        """
        return self._target_percentage

    @target_percentage.setter
    def target_percentage(self, target_percentage):
        """Sets the target_percentage of this ModelHoldingDocument.

        Target percentage of the holding.  # noqa: E501

        :param target_percentage: The target_percentage of this ModelHoldingDocument.  # noqa: E501
        :type: float
        """

        self._target_percentage = target_percentage

    @property
    def current_charge(self):
        """Gets the current_charge of this ModelHoldingDocument.  # noqa: E501


        :return: The current_charge of this ModelHoldingDocument.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._current_charge

    @current_charge.setter
    def current_charge(self, current_charge):
        """Sets the current_charge of this ModelHoldingDocument.


        :param current_charge: The current_charge of this ModelHoldingDocument.  # noqa: E501
        :type: CurrencyValue
        """

        self._current_charge = current_charge

    @property
    def target_charge(self):
        """Gets the target_charge of this ModelHoldingDocument.  # noqa: E501


        :return: The target_charge of this ModelHoldingDocument.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._target_charge

    @target_charge.setter
    def target_charge(self, target_charge):
        """Sets the target_charge of this ModelHoldingDocument.


        :param target_charge: The target_charge of this ModelHoldingDocument.  # noqa: E501
        :type: CurrencyValue
        """

        self._target_charge = target_charge

    @property
    def fund_charge_percentage(self):
        """Gets the fund_charge_percentage of this ModelHoldingDocument.  # noqa: E501

        Fund charge percentage for the holding.  # noqa: E501

        :return: The fund_charge_percentage of this ModelHoldingDocument.  # noqa: E501
        :rtype: float
        """
        return self._fund_charge_percentage

    @fund_charge_percentage.setter
    def fund_charge_percentage(self, fund_charge_percentage):
        """Sets the fund_charge_percentage of this ModelHoldingDocument.

        Fund charge percentage for the holding.  # noqa: E501

        :param fund_charge_percentage: The fund_charge_percentage of this ModelHoldingDocument.  # noqa: E501
        :type: float
        """

        self._fund_charge_percentage = fund_charge_percentage

    @property
    def kiid_href(self):
        """Gets the kiid_href of this ModelHoldingDocument.  # noqa: E501

        Hypermedia link to the KIID Document.  # noqa: E501

        :return: The kiid_href of this ModelHoldingDocument.  # noqa: E501
        :rtype: str
        """
        return self._kiid_href

    @kiid_href.setter
    def kiid_href(self, kiid_href):
        """Sets the kiid_href of this ModelHoldingDocument.

        Hypermedia link to the KIID Document.  # noqa: E501

        :param kiid_href: The kiid_href of this ModelHoldingDocument.  # noqa: E501
        :type: str
        """

        self._kiid_href = kiid_href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelHoldingDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelHoldingDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
