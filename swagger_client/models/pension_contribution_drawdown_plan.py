# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.asset_plan import AssetPlan  # noqa: F401,E501

class PensionContributionDrawdownPlan(AssetPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment': 'EmploymentRef',
        'additional_notes': 'str',
        'applicable_penalties': 'str',
        'crystallisation_status': 'str',
        'efi_bonus': 'str',
        'enhanced_tax_free_cash': 'str',
        'expected_years_of_service': 'str',
        'gad_max_income_limit': 'CurrencyValue',
        'gad_calculation_on': 'datetime',
        'guaranteed_growth_rate': 'str',
        'is_contracted_out': 'bool',
        'next_review_on': 'datetime',
        'pension_sharing_percentage': 'float',
        'pension_attachment_order': 'str',
        'options_available_at_retirement_notes': 'str',
        'other_benefits_and_material_features_notes': 'str',
        'pcls': 'CurrencyValue',
        'pcls_paid_by': 'str',
        'has_protected_pcls': 'bool',
        'has_protected_rights_only': 'bool',
        'return_on_death_percentage': 'float',
        'return_on_death_type': 'str',
        'is_running_concurrently': 'bool',
        'is_scheme_in_conjunction_with_fund': 'bool',
        'employee_nic_saving': 'int',
        'employer_nic_saving': 'int',
        'salary_exchange': 'SalaryExchangeValue',
        'life_cover_sum_assured': 'CurrencyValue',
        'life_cover_payment_basis': 'str',
        'term': 'str',
        'critical_illness_sum_assured': 'CurrencyValue',
        'critical_illness_term': 'str',
        'is_rated': 'bool',
        'is_premium_waiver_woc': 'bool',
        'affinity_contribution_availability_notes': 'str',
        'life_style_strategy_notes': 'str',
        'employer_contribution_notes': 'str',
        'death_in_service_spousal_benefits': 'CurrencyValue',
        'guaranteed_annuity_rate': 'str',
        'untaxed_pension_amount': 'CurrencyValue',
        'intended_retirement_age': 'int',
        'selected_retirement_age': 'int'
    }
    if hasattr(AssetPlan, "swagger_types"):
        swagger_types.update(AssetPlan.swagger_types)

    attribute_map = {
        'employment': 'employment',
        'additional_notes': 'additionalNotes',
        'applicable_penalties': 'applicablePenalties',
        'crystallisation_status': 'crystallisationStatus',
        'efi_bonus': 'efiBonus',
        'enhanced_tax_free_cash': 'enhancedTaxFreeCash',
        'expected_years_of_service': 'expectedYearsOfService',
        'gad_max_income_limit': 'gadMaxIncomeLimit',
        'gad_calculation_on': 'gadCalculationOn',
        'guaranteed_growth_rate': 'guaranteedGrowthRate',
        'is_contracted_out': 'isContractedOut',
        'next_review_on': 'nextReviewOn',
        'pension_sharing_percentage': 'pensionSharingPercentage',
        'pension_attachment_order': 'pensionAttachmentOrder',
        'options_available_at_retirement_notes': 'optionsAvailableAtRetirementNotes',
        'other_benefits_and_material_features_notes': 'otherBenefitsAndMaterialFeaturesNotes',
        'pcls': 'pcls',
        'pcls_paid_by': 'pclsPaidBy',
        'has_protected_pcls': 'hasProtectedPcls',
        'has_protected_rights_only': 'hasProtectedRightsOnly',
        'return_on_death_percentage': 'returnOnDeathPercentage',
        'return_on_death_type': 'returnOnDeathType',
        'is_running_concurrently': 'isRunningConcurrently',
        'is_scheme_in_conjunction_with_fund': 'isSchemeInConjunctionWithFund',
        'employee_nic_saving': 'employeeNICSaving',
        'employer_nic_saving': 'employerNICSaving',
        'salary_exchange': 'salaryExchange',
        'life_cover_sum_assured': 'lifeCoverSumAssured',
        'life_cover_payment_basis': 'lifeCoverPaymentBasis',
        'term': 'term',
        'critical_illness_sum_assured': 'criticalIllnessSumAssured',
        'critical_illness_term': 'criticalIllnessTerm',
        'is_rated': 'isRated',
        'is_premium_waiver_woc': 'isPremiumWaiverWoc',
        'affinity_contribution_availability_notes': 'affinityContributionAvailabilityNotes',
        'life_style_strategy_notes': 'lifeStyleStrategyNotes',
        'employer_contribution_notes': 'employerContributionNotes',
        'death_in_service_spousal_benefits': 'deathInServiceSpousalBenefits',
        'guaranteed_annuity_rate': 'guaranteedAnnuityRate',
        'untaxed_pension_amount': 'untaxedPensionAmount',
        'intended_retirement_age': 'intendedRetirementAge',
        'selected_retirement_age': 'selectedRetirementAge'
    }
    if hasattr(AssetPlan, "attribute_map"):
        attribute_map.update(AssetPlan.attribute_map)

    def __init__(self, employment=None, additional_notes='null', applicable_penalties='null', crystallisation_status='null', efi_bonus='null', enhanced_tax_free_cash='null', expected_years_of_service='null', gad_max_income_limit=None, gad_calculation_on=None, guaranteed_growth_rate='null', is_contracted_out=False, next_review_on=None, pension_sharing_percentage=None, pension_attachment_order='null', options_available_at_retirement_notes='null', other_benefits_and_material_features_notes='null', pcls=None, pcls_paid_by='null', has_protected_pcls=False, has_protected_rights_only=False, return_on_death_percentage=None, return_on_death_type='null', is_running_concurrently=False, is_scheme_in_conjunction_with_fund=False, employee_nic_saving=None, employer_nic_saving=None, salary_exchange=None, life_cover_sum_assured=None, life_cover_payment_basis='null', term='null', critical_illness_sum_assured=None, critical_illness_term='null', is_rated=False, is_premium_waiver_woc=False, affinity_contribution_availability_notes='null', life_style_strategy_notes='null', employer_contribution_notes='null', death_in_service_spousal_benefits=None, guaranteed_annuity_rate='null', untaxed_pension_amount=None, intended_retirement_age=None, selected_retirement_age=None, *args, **kwargs):  # noqa: E501
        """PensionContributionDrawdownPlan - a model defined in Swagger"""  # noqa: E501
        self._employment = None
        self._additional_notes = None
        self._applicable_penalties = None
        self._crystallisation_status = None
        self._efi_bonus = None
        self._enhanced_tax_free_cash = None
        self._expected_years_of_service = None
        self._gad_max_income_limit = None
        self._gad_calculation_on = None
        self._guaranteed_growth_rate = None
        self._is_contracted_out = None
        self._next_review_on = None
        self._pension_sharing_percentage = None
        self._pension_attachment_order = None
        self._options_available_at_retirement_notes = None
        self._other_benefits_and_material_features_notes = None
        self._pcls = None
        self._pcls_paid_by = None
        self._has_protected_pcls = None
        self._has_protected_rights_only = None
        self._return_on_death_percentage = None
        self._return_on_death_type = None
        self._is_running_concurrently = None
        self._is_scheme_in_conjunction_with_fund = None
        self._employee_nic_saving = None
        self._employer_nic_saving = None
        self._salary_exchange = None
        self._life_cover_sum_assured = None
        self._life_cover_payment_basis = None
        self._term = None
        self._critical_illness_sum_assured = None
        self._critical_illness_term = None
        self._is_rated = None
        self._is_premium_waiver_woc = None
        self._affinity_contribution_availability_notes = None
        self._life_style_strategy_notes = None
        self._employer_contribution_notes = None
        self._death_in_service_spousal_benefits = None
        self._guaranteed_annuity_rate = None
        self._untaxed_pension_amount = None
        self._intended_retirement_age = None
        self._selected_retirement_age = None
        self.discriminator = None
        if employment is not None:
            self.employment = employment
        if additional_notes is not None:
            self.additional_notes = additional_notes
        if applicable_penalties is not None:
            self.applicable_penalties = applicable_penalties
        if crystallisation_status is not None:
            self.crystallisation_status = crystallisation_status
        if efi_bonus is not None:
            self.efi_bonus = efi_bonus
        if enhanced_tax_free_cash is not None:
            self.enhanced_tax_free_cash = enhanced_tax_free_cash
        if expected_years_of_service is not None:
            self.expected_years_of_service = expected_years_of_service
        if gad_max_income_limit is not None:
            self.gad_max_income_limit = gad_max_income_limit
        if gad_calculation_on is not None:
            self.gad_calculation_on = gad_calculation_on
        if guaranteed_growth_rate is not None:
            self.guaranteed_growth_rate = guaranteed_growth_rate
        if is_contracted_out is not None:
            self.is_contracted_out = is_contracted_out
        if next_review_on is not None:
            self.next_review_on = next_review_on
        if pension_sharing_percentage is not None:
            self.pension_sharing_percentage = pension_sharing_percentage
        if pension_attachment_order is not None:
            self.pension_attachment_order = pension_attachment_order
        if options_available_at_retirement_notes is not None:
            self.options_available_at_retirement_notes = options_available_at_retirement_notes
        if other_benefits_and_material_features_notes is not None:
            self.other_benefits_and_material_features_notes = other_benefits_and_material_features_notes
        if pcls is not None:
            self.pcls = pcls
        if pcls_paid_by is not None:
            self.pcls_paid_by = pcls_paid_by
        if has_protected_pcls is not None:
            self.has_protected_pcls = has_protected_pcls
        if has_protected_rights_only is not None:
            self.has_protected_rights_only = has_protected_rights_only
        if return_on_death_percentage is not None:
            self.return_on_death_percentage = return_on_death_percentage
        if return_on_death_type is not None:
            self.return_on_death_type = return_on_death_type
        if is_running_concurrently is not None:
            self.is_running_concurrently = is_running_concurrently
        if is_scheme_in_conjunction_with_fund is not None:
            self.is_scheme_in_conjunction_with_fund = is_scheme_in_conjunction_with_fund
        if employee_nic_saving is not None:
            self.employee_nic_saving = employee_nic_saving
        if employer_nic_saving is not None:
            self.employer_nic_saving = employer_nic_saving
        if salary_exchange is not None:
            self.salary_exchange = salary_exchange
        if life_cover_sum_assured is not None:
            self.life_cover_sum_assured = life_cover_sum_assured
        if life_cover_payment_basis is not None:
            self.life_cover_payment_basis = life_cover_payment_basis
        if term is not None:
            self.term = term
        if critical_illness_sum_assured is not None:
            self.critical_illness_sum_assured = critical_illness_sum_assured
        if critical_illness_term is not None:
            self.critical_illness_term = critical_illness_term
        if is_rated is not None:
            self.is_rated = is_rated
        if is_premium_waiver_woc is not None:
            self.is_premium_waiver_woc = is_premium_waiver_woc
        if affinity_contribution_availability_notes is not None:
            self.affinity_contribution_availability_notes = affinity_contribution_availability_notes
        if life_style_strategy_notes is not None:
            self.life_style_strategy_notes = life_style_strategy_notes
        if employer_contribution_notes is not None:
            self.employer_contribution_notes = employer_contribution_notes
        if death_in_service_spousal_benefits is not None:
            self.death_in_service_spousal_benefits = death_in_service_spousal_benefits
        if guaranteed_annuity_rate is not None:
            self.guaranteed_annuity_rate = guaranteed_annuity_rate
        if untaxed_pension_amount is not None:
            self.untaxed_pension_amount = untaxed_pension_amount
        if intended_retirement_age is not None:
            self.intended_retirement_age = intended_retirement_age
        if selected_retirement_age is not None:
            self.selected_retirement_age = selected_retirement_age
        AssetPlan.__init__(self, *args, **kwargs)

    @property
    def employment(self):
        """Gets the employment of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The employment of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: EmploymentRef
        """
        return self._employment

    @employment.setter
    def employment(self, employment):
        """Sets the employment of this PensionContributionDrawdownPlan.


        :param employment: The employment of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: EmploymentRef
        """

        self._employment = employment

    @property
    def additional_notes(self):
        """Gets the additional_notes of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The additional_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._additional_notes

    @additional_notes.setter
    def additional_notes(self, additional_notes):
        """Sets the additional_notes of this PensionContributionDrawdownPlan.


        :param additional_notes: The additional_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._additional_notes = additional_notes

    @property
    def applicable_penalties(self):
        """Gets the applicable_penalties of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The applicable_penalties of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._applicable_penalties

    @applicable_penalties.setter
    def applicable_penalties(self, applicable_penalties):
        """Sets the applicable_penalties of this PensionContributionDrawdownPlan.


        :param applicable_penalties: The applicable_penalties of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._applicable_penalties = applicable_penalties

    @property
    def crystallisation_status(self):
        """Gets the crystallisation_status of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The crystallisation_status of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._crystallisation_status

    @crystallisation_status.setter
    def crystallisation_status(self, crystallisation_status):
        """Sets the crystallisation_status of this PensionContributionDrawdownPlan.


        :param crystallisation_status: The crystallisation_status of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Uncrystallised", "PartCrystallised", "Crystallised"]  # noqa: E501
        if crystallisation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `crystallisation_status` ({0}), must be one of {1}"  # noqa: E501
                .format(crystallisation_status, allowed_values)
            )

        self._crystallisation_status = crystallisation_status

    @property
    def efi_bonus(self):
        """Gets the efi_bonus of this PensionContributionDrawdownPlan.  # noqa: E501

        EFI/Loyalty Bonus/Terminal Bonus  # noqa: E501

        :return: The efi_bonus of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._efi_bonus

    @efi_bonus.setter
    def efi_bonus(self, efi_bonus):
        """Sets the efi_bonus of this PensionContributionDrawdownPlan.

        EFI/Loyalty Bonus/Terminal Bonus  # noqa: E501

        :param efi_bonus: The efi_bonus of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._efi_bonus = efi_bonus

    @property
    def enhanced_tax_free_cash(self):
        """Gets the enhanced_tax_free_cash of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The enhanced_tax_free_cash of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._enhanced_tax_free_cash

    @enhanced_tax_free_cash.setter
    def enhanced_tax_free_cash(self, enhanced_tax_free_cash):
        """Sets the enhanced_tax_free_cash of this PensionContributionDrawdownPlan.


        :param enhanced_tax_free_cash: The enhanced_tax_free_cash of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._enhanced_tax_free_cash = enhanced_tax_free_cash

    @property
    def expected_years_of_service(self):
        """Gets the expected_years_of_service of this PensionContributionDrawdownPlan.  # noqa: E501

        Expected years of service period in ISO-8601 and restricted to years  # noqa: E501

        :return: The expected_years_of_service of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._expected_years_of_service

    @expected_years_of_service.setter
    def expected_years_of_service(self, expected_years_of_service):
        """Sets the expected_years_of_service of this PensionContributionDrawdownPlan.

        Expected years of service period in ISO-8601 and restricted to years  # noqa: E501

        :param expected_years_of_service: The expected_years_of_service of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._expected_years_of_service = expected_years_of_service

    @property
    def gad_max_income_limit(self):
        """Gets the gad_max_income_limit of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The gad_max_income_limit of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._gad_max_income_limit

    @gad_max_income_limit.setter
    def gad_max_income_limit(self, gad_max_income_limit):
        """Sets the gad_max_income_limit of this PensionContributionDrawdownPlan.


        :param gad_max_income_limit: The gad_max_income_limit of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._gad_max_income_limit = gad_max_income_limit

    @property
    def gad_calculation_on(self):
        """Gets the gad_calculation_on of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The gad_calculation_on of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._gad_calculation_on

    @gad_calculation_on.setter
    def gad_calculation_on(self, gad_calculation_on):
        """Sets the gad_calculation_on of this PensionContributionDrawdownPlan.


        :param gad_calculation_on: The gad_calculation_on of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: datetime
        """

        self._gad_calculation_on = gad_calculation_on

    @property
    def guaranteed_growth_rate(self):
        """Gets the guaranteed_growth_rate of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The guaranteed_growth_rate of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_growth_rate

    @guaranteed_growth_rate.setter
    def guaranteed_growth_rate(self, guaranteed_growth_rate):
        """Sets the guaranteed_growth_rate of this PensionContributionDrawdownPlan.


        :param guaranteed_growth_rate: The guaranteed_growth_rate of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._guaranteed_growth_rate = guaranteed_growth_rate

    @property
    def is_contracted_out(self):
        """Gets the is_contracted_out of this PensionContributionDrawdownPlan.  # noqa: E501

        Is the scheme contracted out of State Second Pension (S2P)?  # noqa: E501

        :return: The is_contracted_out of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_contracted_out

    @is_contracted_out.setter
    def is_contracted_out(self, is_contracted_out):
        """Sets the is_contracted_out of this PensionContributionDrawdownPlan.

        Is the scheme contracted out of State Second Pension (S2P)?  # noqa: E501

        :param is_contracted_out: The is_contracted_out of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._is_contracted_out = is_contracted_out

    @property
    def next_review_on(self):
        """Gets the next_review_on of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The next_review_on of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._next_review_on

    @next_review_on.setter
    def next_review_on(self, next_review_on):
        """Sets the next_review_on of this PensionContributionDrawdownPlan.


        :param next_review_on: The next_review_on of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: datetime
        """

        self._next_review_on = next_review_on

    @property
    def pension_sharing_percentage(self):
        """Gets the pension_sharing_percentage of this PensionContributionDrawdownPlan.  # noqa: E501

        The percentage amount that one person will get from the total value of another person's pension  # noqa: E501

        :return: The pension_sharing_percentage of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: float
        """
        return self._pension_sharing_percentage

    @pension_sharing_percentage.setter
    def pension_sharing_percentage(self, pension_sharing_percentage):
        """Sets the pension_sharing_percentage of this PensionContributionDrawdownPlan.

        The percentage amount that one person will get from the total value of another person's pension  # noqa: E501

        :param pension_sharing_percentage: The pension_sharing_percentage of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: float
        """

        self._pension_sharing_percentage = pension_sharing_percentage

    @property
    def pension_attachment_order(self):
        """Gets the pension_attachment_order of this PensionContributionDrawdownPlan.  # noqa: E501

        Date of Order and the name of the other party  # noqa: E501

        :return: The pension_attachment_order of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._pension_attachment_order

    @pension_attachment_order.setter
    def pension_attachment_order(self, pension_attachment_order):
        """Sets the pension_attachment_order of this PensionContributionDrawdownPlan.

        Date of Order and the name of the other party  # noqa: E501

        :param pension_attachment_order: The pension_attachment_order of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._pension_attachment_order = pension_attachment_order

    @property
    def options_available_at_retirement_notes(self):
        """Gets the options_available_at_retirement_notes of this PensionContributionDrawdownPlan.  # noqa: E501

        Options Available At Retirement  # noqa: E501

        :return: The options_available_at_retirement_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._options_available_at_retirement_notes

    @options_available_at_retirement_notes.setter
    def options_available_at_retirement_notes(self, options_available_at_retirement_notes):
        """Sets the options_available_at_retirement_notes of this PensionContributionDrawdownPlan.

        Options Available At Retirement  # noqa: E501

        :param options_available_at_retirement_notes: The options_available_at_retirement_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._options_available_at_retirement_notes = options_available_at_retirement_notes

    @property
    def other_benefits_and_material_features_notes(self):
        """Gets the other_benefits_and_material_features_notes of this PensionContributionDrawdownPlan.  # noqa: E501

        Other Benefits and/or Material Features  # noqa: E501

        :return: The other_benefits_and_material_features_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._other_benefits_and_material_features_notes

    @other_benefits_and_material_features_notes.setter
    def other_benefits_and_material_features_notes(self, other_benefits_and_material_features_notes):
        """Sets the other_benefits_and_material_features_notes of this PensionContributionDrawdownPlan.

        Other Benefits and/or Material Features  # noqa: E501

        :param other_benefits_and_material_features_notes: The other_benefits_and_material_features_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._other_benefits_and_material_features_notes = other_benefits_and_material_features_notes

    @property
    def pcls(self):
        """Gets the pcls of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The pcls of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._pcls

    @pcls.setter
    def pcls(self, pcls):
        """Sets the pcls of this PensionContributionDrawdownPlan.


        :param pcls: The pcls of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._pcls = pcls

    @property
    def pcls_paid_by(self):
        """Gets the pcls_paid_by of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The pcls_paid_by of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._pcls_paid_by

    @pcls_paid_by.setter
    def pcls_paid_by(self, pcls_paid_by):
        """Sets the pcls_paid_by of this PensionContributionDrawdownPlan.


        :param pcls_paid_by: The pcls_paid_by of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["OriginatingScheme", "ReceivingScheme"]  # noqa: E501
        if pcls_paid_by not in allowed_values:
            raise ValueError(
                "Invalid value for `pcls_paid_by` ({0}), must be one of {1}"  # noqa: E501
                .format(pcls_paid_by, allowed_values)
            )

        self._pcls_paid_by = pcls_paid_by

    @property
    def has_protected_pcls(self):
        """Gets the has_protected_pcls of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The has_protected_pcls of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._has_protected_pcls

    @has_protected_pcls.setter
    def has_protected_pcls(self, has_protected_pcls):
        """Sets the has_protected_pcls of this PensionContributionDrawdownPlan.


        :param has_protected_pcls: The has_protected_pcls of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._has_protected_pcls = has_protected_pcls

    @property
    def has_protected_rights_only(self):
        """Gets the has_protected_rights_only of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The has_protected_rights_only of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._has_protected_rights_only

    @has_protected_rights_only.setter
    def has_protected_rights_only(self, has_protected_rights_only):
        """Sets the has_protected_rights_only of this PensionContributionDrawdownPlan.


        :param has_protected_rights_only: The has_protected_rights_only of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._has_protected_rights_only = has_protected_rights_only

    @property
    def return_on_death_percentage(self):
        """Gets the return_on_death_percentage of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The return_on_death_percentage of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: float
        """
        return self._return_on_death_percentage

    @return_on_death_percentage.setter
    def return_on_death_percentage(self, return_on_death_percentage):
        """Sets the return_on_death_percentage of this PensionContributionDrawdownPlan.


        :param return_on_death_percentage: The return_on_death_percentage of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: float
        """

        self._return_on_death_percentage = return_on_death_percentage

    @property
    def return_on_death_type(self):
        """Gets the return_on_death_type of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The return_on_death_type of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._return_on_death_type

    @return_on_death_type.setter
    def return_on_death_type(self, return_on_death_type):
        """Sets the return_on_death_type of this PensionContributionDrawdownPlan.


        :param return_on_death_type: The return_on_death_type of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Rof", "Rop"]  # noqa: E501
        if return_on_death_type not in allowed_values:
            raise ValueError(
                "Invalid value for `return_on_death_type` ({0}), must be one of {1}"  # noqa: E501
                .format(return_on_death_type, allowed_values)
            )

        self._return_on_death_type = return_on_death_type

    @property
    def is_running_concurrently(self):
        """Gets the is_running_concurrently of this PensionContributionDrawdownPlan.  # noqa: E501

        Is plan running concurrently with another pension  # noqa: E501

        :return: The is_running_concurrently of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_running_concurrently

    @is_running_concurrently.setter
    def is_running_concurrently(self, is_running_concurrently):
        """Sets the is_running_concurrently of this PensionContributionDrawdownPlan.

        Is plan running concurrently with another pension  # noqa: E501

        :param is_running_concurrently: The is_running_concurrently of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._is_running_concurrently = is_running_concurrently

    @property
    def is_scheme_in_conjunction_with_fund(self):
        """Gets the is_scheme_in_conjunction_with_fund of this PensionContributionDrawdownPlan.  # noqa: E501

        Is the scheme in conjunction with a pension fund withdrawal  # noqa: E501

        :return: The is_scheme_in_conjunction_with_fund of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_scheme_in_conjunction_with_fund

    @is_scheme_in_conjunction_with_fund.setter
    def is_scheme_in_conjunction_with_fund(self, is_scheme_in_conjunction_with_fund):
        """Sets the is_scheme_in_conjunction_with_fund of this PensionContributionDrawdownPlan.

        Is the scheme in conjunction with a pension fund withdrawal  # noqa: E501

        :param is_scheme_in_conjunction_with_fund: The is_scheme_in_conjunction_with_fund of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._is_scheme_in_conjunction_with_fund = is_scheme_in_conjunction_with_fund

    @property
    def employee_nic_saving(self):
        """Gets the employee_nic_saving of this PensionContributionDrawdownPlan.  # noqa: E501

        National Insurance contributions paid by employee  # noqa: E501

        :return: The employee_nic_saving of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: int
        """
        return self._employee_nic_saving

    @employee_nic_saving.setter
    def employee_nic_saving(self, employee_nic_saving):
        """Sets the employee_nic_saving of this PensionContributionDrawdownPlan.

        National Insurance contributions paid by employee  # noqa: E501

        :param employee_nic_saving: The employee_nic_saving of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: int
        """

        self._employee_nic_saving = employee_nic_saving

    @property
    def employer_nic_saving(self):
        """Gets the employer_nic_saving of this PensionContributionDrawdownPlan.  # noqa: E501

        National Insurance contributions paid by employer  # noqa: E501

        :return: The employer_nic_saving of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: int
        """
        return self._employer_nic_saving

    @employer_nic_saving.setter
    def employer_nic_saving(self, employer_nic_saving):
        """Sets the employer_nic_saving of this PensionContributionDrawdownPlan.

        National Insurance contributions paid by employer  # noqa: E501

        :param employer_nic_saving: The employer_nic_saving of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: int
        """

        self._employer_nic_saving = employer_nic_saving

    @property
    def salary_exchange(self):
        """Gets the salary_exchange of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The salary_exchange of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: SalaryExchangeValue
        """
        return self._salary_exchange

    @salary_exchange.setter
    def salary_exchange(self, salary_exchange):
        """Sets the salary_exchange of this PensionContributionDrawdownPlan.


        :param salary_exchange: The salary_exchange of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: SalaryExchangeValue
        """

        self._salary_exchange = salary_exchange

    @property
    def life_cover_sum_assured(self):
        """Gets the life_cover_sum_assured of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The life_cover_sum_assured of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._life_cover_sum_assured

    @life_cover_sum_assured.setter
    def life_cover_sum_assured(self, life_cover_sum_assured):
        """Sets the life_cover_sum_assured of this PensionContributionDrawdownPlan.


        :param life_cover_sum_assured: The life_cover_sum_assured of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._life_cover_sum_assured = life_cover_sum_assured

    @property
    def life_cover_payment_basis(self):
        """Gets the life_cover_payment_basis of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The life_cover_payment_basis of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._life_cover_payment_basis

    @life_cover_payment_basis.setter
    def life_cover_payment_basis(self, life_cover_payment_basis):
        """Sets the life_cover_payment_basis of this PensionContributionDrawdownPlan.


        :param life_cover_payment_basis: The life_cover_payment_basis of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["FirstDeath", "SecondDeath", "Both"]  # noqa: E501
        if life_cover_payment_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `life_cover_payment_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(life_cover_payment_basis, allowed_values)
            )

        self._life_cover_payment_basis = life_cover_payment_basis

    @property
    def term(self):
        """Gets the term of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The term of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this PensionContributionDrawdownPlan.


        :param term: The term of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def critical_illness_sum_assured(self):
        """Gets the critical_illness_sum_assured of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The critical_illness_sum_assured of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._critical_illness_sum_assured

    @critical_illness_sum_assured.setter
    def critical_illness_sum_assured(self, critical_illness_sum_assured):
        """Sets the critical_illness_sum_assured of this PensionContributionDrawdownPlan.


        :param critical_illness_sum_assured: The critical_illness_sum_assured of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._critical_illness_sum_assured = critical_illness_sum_assured

    @property
    def critical_illness_term(self):
        """Gets the critical_illness_term of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The critical_illness_term of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._critical_illness_term

    @critical_illness_term.setter
    def critical_illness_term(self, critical_illness_term):
        """Sets the critical_illness_term of this PensionContributionDrawdownPlan.


        :param critical_illness_term: The critical_illness_term of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._critical_illness_term = critical_illness_term

    @property
    def is_rated(self):
        """Gets the is_rated of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The is_rated of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_rated

    @is_rated.setter
    def is_rated(self, is_rated):
        """Sets the is_rated of this PensionContributionDrawdownPlan.


        :param is_rated: The is_rated of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._is_rated = is_rated

    @property
    def is_premium_waiver_woc(self):
        """Gets the is_premium_waiver_woc of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The is_premium_waiver_woc of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_premium_waiver_woc

    @is_premium_waiver_woc.setter
    def is_premium_waiver_woc(self, is_premium_waiver_woc):
        """Sets the is_premium_waiver_woc of this PensionContributionDrawdownPlan.


        :param is_premium_waiver_woc: The is_premium_waiver_woc of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: bool
        """

        self._is_premium_waiver_woc = is_premium_waiver_woc

    @property
    def affinity_contribution_availability_notes(self):
        """Gets the affinity_contribution_availability_notes of this PensionContributionDrawdownPlan.  # noqa: E501

        Affinity defined contribution scheme details  # noqa: E501

        :return: The affinity_contribution_availability_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._affinity_contribution_availability_notes

    @affinity_contribution_availability_notes.setter
    def affinity_contribution_availability_notes(self, affinity_contribution_availability_notes):
        """Sets the affinity_contribution_availability_notes of this PensionContributionDrawdownPlan.

        Affinity defined contribution scheme details  # noqa: E501

        :param affinity_contribution_availability_notes: The affinity_contribution_availability_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._affinity_contribution_availability_notes = affinity_contribution_availability_notes

    @property
    def life_style_strategy_notes(self):
        """Gets the life_style_strategy_notes of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The life_style_strategy_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._life_style_strategy_notes

    @life_style_strategy_notes.setter
    def life_style_strategy_notes(self, life_style_strategy_notes):
        """Sets the life_style_strategy_notes of this PensionContributionDrawdownPlan.


        :param life_style_strategy_notes: The life_style_strategy_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._life_style_strategy_notes = life_style_strategy_notes

    @property
    def employer_contribution_notes(self):
        """Gets the employer_contribution_notes of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The employer_contribution_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._employer_contribution_notes

    @employer_contribution_notes.setter
    def employer_contribution_notes(self, employer_contribution_notes):
        """Sets the employer_contribution_notes of this PensionContributionDrawdownPlan.


        :param employer_contribution_notes: The employer_contribution_notes of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._employer_contribution_notes = employer_contribution_notes

    @property
    def death_in_service_spousal_benefits(self):
        """Gets the death_in_service_spousal_benefits of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The death_in_service_spousal_benefits of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._death_in_service_spousal_benefits

    @death_in_service_spousal_benefits.setter
    def death_in_service_spousal_benefits(self, death_in_service_spousal_benefits):
        """Sets the death_in_service_spousal_benefits of this PensionContributionDrawdownPlan.


        :param death_in_service_spousal_benefits: The death_in_service_spousal_benefits of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._death_in_service_spousal_benefits = death_in_service_spousal_benefits

    @property
    def guaranteed_annuity_rate(self):
        """Gets the guaranteed_annuity_rate of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The guaranteed_annuity_rate of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_annuity_rate

    @guaranteed_annuity_rate.setter
    def guaranteed_annuity_rate(self, guaranteed_annuity_rate):
        """Sets the guaranteed_annuity_rate of this PensionContributionDrawdownPlan.


        :param guaranteed_annuity_rate: The guaranteed_annuity_rate of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: str
        """

        self._guaranteed_annuity_rate = guaranteed_annuity_rate

    @property
    def untaxed_pension_amount(self):
        """Gets the untaxed_pension_amount of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The untaxed_pension_amount of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._untaxed_pension_amount

    @untaxed_pension_amount.setter
    def untaxed_pension_amount(self, untaxed_pension_amount):
        """Sets the untaxed_pension_amount of this PensionContributionDrawdownPlan.


        :param untaxed_pension_amount: The untaxed_pension_amount of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._untaxed_pension_amount = untaxed_pension_amount

    @property
    def intended_retirement_age(self):
        """Gets the intended_retirement_age of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The intended_retirement_age of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: int
        """
        return self._intended_retirement_age

    @intended_retirement_age.setter
    def intended_retirement_age(self, intended_retirement_age):
        """Sets the intended_retirement_age of this PensionContributionDrawdownPlan.


        :param intended_retirement_age: The intended_retirement_age of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: int
        """

        self._intended_retirement_age = intended_retirement_age

    @property
    def selected_retirement_age(self):
        """Gets the selected_retirement_age of this PensionContributionDrawdownPlan.  # noqa: E501


        :return: The selected_retirement_age of this PensionContributionDrawdownPlan.  # noqa: E501
        :rtype: int
        """
        return self._selected_retirement_age

    @selected_retirement_age.setter
    def selected_retirement_age(self, selected_retirement_age):
        """Sets the selected_retirement_age of this PensionContributionDrawdownPlan.


        :param selected_retirement_age: The selected_retirement_age of this PensionContributionDrawdownPlan.  # noqa: E501
        :type: int
        """

        self._selected_retirement_age = selected_retirement_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PensionContributionDrawdownPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PensionContributionDrawdownPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
