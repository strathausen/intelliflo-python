# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtrResultDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'inconsistency_notes': 'str',
        'chosen_risk_profile': 'AtrResultChosenRiskProfile',
        'agreed_with_generated_risk_profile': 'bool',
        'completed_at': 'datetime'
    }

    attribute_map = {
        'notes': 'notes',
        'inconsistency_notes': 'inconsistencyNotes',
        'chosen_risk_profile': 'chosenRiskProfile',
        'agreed_with_generated_risk_profile': 'agreedWithGeneratedRiskProfile',
        'completed_at': 'completedAt'
    }

    def __init__(self, notes=None, inconsistency_notes=None, chosen_risk_profile=None, agreed_with_generated_risk_profile=None, completed_at=None):  # noqa: E501
        """AtrResultDocument - a model defined in Swagger"""  # noqa: E501
        self._notes = None
        self._inconsistency_notes = None
        self._chosen_risk_profile = None
        self._agreed_with_generated_risk_profile = None
        self._completed_at = None
        self.discriminator = None
        if notes is not None:
            self.notes = notes
        if inconsistency_notes is not None:
            self.inconsistency_notes = inconsistency_notes
        if chosen_risk_profile is not None:
            self.chosen_risk_profile = chosen_risk_profile
        if agreed_with_generated_risk_profile is not None:
            self.agreed_with_generated_risk_profile = agreed_with_generated_risk_profile
        if completed_at is not None:
            self.completed_at = completed_at

    @property
    def notes(self):
        """Gets the notes of this AtrResultDocument.  # noqa: E501

        Atr answer notes.  # noqa: E501

        :return: The notes of this AtrResultDocument.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AtrResultDocument.

        Atr answer notes.  # noqa: E501

        :param notes: The notes of this AtrResultDocument.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def inconsistency_notes(self):
        """Gets the inconsistency_notes of this AtrResultDocument.  # noqa: E501

        If HasInconsistencyInAnswers flag returns true, inconsistency notes can be provided.  # noqa: E501

        :return: The inconsistency_notes of this AtrResultDocument.  # noqa: E501
        :rtype: str
        """
        return self._inconsistency_notes

    @inconsistency_notes.setter
    def inconsistency_notes(self, inconsistency_notes):
        """Sets the inconsistency_notes of this AtrResultDocument.

        If HasInconsistencyInAnswers flag returns true, inconsistency notes can be provided.  # noqa: E501

        :param inconsistency_notes: The inconsistency_notes of this AtrResultDocument.  # noqa: E501
        :type: str
        """

        self._inconsistency_notes = inconsistency_notes

    @property
    def chosen_risk_profile(self):
        """Gets the chosen_risk_profile of this AtrResultDocument.  # noqa: E501


        :return: The chosen_risk_profile of this AtrResultDocument.  # noqa: E501
        :rtype: AtrResultChosenRiskProfile
        """
        return self._chosen_risk_profile

    @chosen_risk_profile.setter
    def chosen_risk_profile(self, chosen_risk_profile):
        """Sets the chosen_risk_profile of this AtrResultDocument.


        :param chosen_risk_profile: The chosen_risk_profile of this AtrResultDocument.  # noqa: E501
        :type: AtrResultChosenRiskProfile
        """

        self._chosen_risk_profile = chosen_risk_profile

    @property
    def agreed_with_generated_risk_profile(self):
        """Gets the agreed_with_generated_risk_profile of this AtrResultDocument.  # noqa: E501

        Flag indicating whether or not the client agreed with the generated ATR risk profile.  # noqa: E501

        :return: The agreed_with_generated_risk_profile of this AtrResultDocument.  # noqa: E501
        :rtype: bool
        """
        return self._agreed_with_generated_risk_profile

    @agreed_with_generated_risk_profile.setter
    def agreed_with_generated_risk_profile(self, agreed_with_generated_risk_profile):
        """Sets the agreed_with_generated_risk_profile of this AtrResultDocument.

        Flag indicating whether or not the client agreed with the generated ATR risk profile.  # noqa: E501

        :param agreed_with_generated_risk_profile: The agreed_with_generated_risk_profile of this AtrResultDocument.  # noqa: E501
        :type: bool
        """

        self._agreed_with_generated_risk_profile = agreed_with_generated_risk_profile

    @property
    def completed_at(self):
        """Gets the completed_at of this AtrResultDocument.  # noqa: E501

        ATR result completed date.  # noqa: E501

        :return: The completed_at of this AtrResultDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this AtrResultDocument.

        ATR result completed date.  # noqa: E501

        :param completed_at: The completed_at of this AtrResultDocument.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtrResultDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtrResultDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
