# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrustValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'established_or_incorporated_on': 'datetime',
        'registration_number': 'str',
        'registered_on': 'datetime',
        'legal_entity': 'LegalEntityValue',
        'instrument': 'str',
        'business_registration_number': 'str',
        'nature_of_trust': 'str',
        'vat_registration_number': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'established_or_incorporated_on': 'establishedOrIncorporatedOn',
        'registration_number': 'registrationNumber',
        'registered_on': 'registeredOn',
        'legal_entity': 'legalEntity',
        'instrument': 'instrument',
        'business_registration_number': 'businessRegistrationNumber',
        'nature_of_trust': 'natureOfTrust',
        'vat_registration_number': 'vatRegistrationNumber'
    }

    def __init__(self, name=None, type=None, established_or_incorporated_on=None, registration_number=None, registered_on=None, legal_entity=None, instrument=None, business_registration_number=None, nature_of_trust=None, vat_registration_number=None):  # noqa: E501
        """TrustValue - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._established_or_incorporated_on = None
        self._registration_number = None
        self._registered_on = None
        self._legal_entity = None
        self._instrument = None
        self._business_registration_number = None
        self._nature_of_trust = None
        self._vat_registration_number = None
        self.discriminator = None
        self.name = name
        self.type = type
        if established_or_incorporated_on is not None:
            self.established_or_incorporated_on = established_or_incorporated_on
        if registration_number is not None:
            self.registration_number = registration_number
        if registered_on is not None:
            self.registered_on = registered_on
        if legal_entity is not None:
            self.legal_entity = legal_entity
        if instrument is not None:
            self.instrument = instrument
        if business_registration_number is not None:
            self.business_registration_number = business_registration_number
        if nature_of_trust is not None:
            self.nature_of_trust = nature_of_trust
        if vat_registration_number is not None:
            self.vat_registration_number = vat_registration_number

    @property
    def name(self):
        """Gets the name of this TrustValue.  # noqa: E501

        The name of the Trust.  # noqa: E501

        :return: The name of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrustValue.

        The name of the Trust.  # noqa: E501

        :param name: The name of this TrustValue.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this TrustValue.  # noqa: E501


        :return: The type of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrustValue.


        :param type: The type of this TrustValue.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def established_or_incorporated_on(self):
        """Gets the established_or_incorporated_on of this TrustValue.  # noqa: E501

        The date of incorporation for the Trust.  # noqa: E501

        :return: The established_or_incorporated_on of this TrustValue.  # noqa: E501
        :rtype: datetime
        """
        return self._established_or_incorporated_on

    @established_or_incorporated_on.setter
    def established_or_incorporated_on(self, established_or_incorporated_on):
        """Sets the established_or_incorporated_on of this TrustValue.

        The date of incorporation for the Trust.  # noqa: E501

        :param established_or_incorporated_on: The established_or_incorporated_on of this TrustValue.  # noqa: E501
        :type: datetime
        """

        self._established_or_incorporated_on = established_or_incorporated_on

    @property
    def registration_number(self):
        """Gets the registration_number of this TrustValue.  # noqa: E501

        The Trust's registration number.  # noqa: E501

        :return: The registration_number of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this TrustValue.

        The Trust's registration number.  # noqa: E501

        :param registration_number: The registration_number of this TrustValue.  # noqa: E501
        :type: str
        """

        self._registration_number = registration_number

    @property
    def registered_on(self):
        """Gets the registered_on of this TrustValue.  # noqa: E501

        The date the trust was registered.  # noqa: E501

        :return: The registered_on of this TrustValue.  # noqa: E501
        :rtype: datetime
        """
        return self._registered_on

    @registered_on.setter
    def registered_on(self, registered_on):
        """Sets the registered_on of this TrustValue.

        The date the trust was registered.  # noqa: E501

        :param registered_on: The registered_on of this TrustValue.  # noqa: E501
        :type: datetime
        """

        self._registered_on = registered_on

    @property
    def legal_entity(self):
        """Gets the legal_entity of this TrustValue.  # noqa: E501


        :return: The legal_entity of this TrustValue.  # noqa: E501
        :rtype: LegalEntityValue
        """
        return self._legal_entity

    @legal_entity.setter
    def legal_entity(self, legal_entity):
        """Sets the legal_entity of this TrustValue.


        :param legal_entity: The legal_entity of this TrustValue.  # noqa: E501
        :type: LegalEntityValue
        """

        self._legal_entity = legal_entity

    @property
    def instrument(self):
        """Gets the instrument of this TrustValue.  # noqa: E501

        The instrument used for setting up the Trust. This may be one of TrustDeed, Will or Intestacy.  # noqa: E501

        :return: The instrument of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this TrustValue.

        The instrument used for setting up the Trust. This may be one of TrustDeed, Will or Intestacy.  # noqa: E501

        :param instrument: The instrument of this TrustValue.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def business_registration_number(self):
        """Gets the business_registration_number of this TrustValue.  # noqa: E501

        Business registration number.  # noqa: E501

        :return: The business_registration_number of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._business_registration_number

    @business_registration_number.setter
    def business_registration_number(self, business_registration_number):
        """Sets the business_registration_number of this TrustValue.

        Business registration number.  # noqa: E501

        :param business_registration_number: The business_registration_number of this TrustValue.  # noqa: E501
        :type: str
        """

        self._business_registration_number = business_registration_number

    @property
    def nature_of_trust(self):
        """Gets the nature_of_trust of this TrustValue.  # noqa: E501

        A short description of the Trust and its objectives.  # noqa: E501

        :return: The nature_of_trust of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._nature_of_trust

    @nature_of_trust.setter
    def nature_of_trust(self, nature_of_trust):
        """Sets the nature_of_trust of this TrustValue.

        A short description of the Trust and its objectives.  # noqa: E501

        :param nature_of_trust: The nature_of_trust of this TrustValue.  # noqa: E501
        :type: str
        """

        self._nature_of_trust = nature_of_trust

    @property
    def vat_registration_number(self):
        """Gets the vat_registration_number of this TrustValue.  # noqa: E501

        The Trust's VAT/GST registration number.  # noqa: E501

        :return: The vat_registration_number of this TrustValue.  # noqa: E501
        :rtype: str
        """
        return self._vat_registration_number

    @vat_registration_number.setter
    def vat_registration_number(self, vat_registration_number):
        """Sets the vat_registration_number of this TrustValue.

        The Trust's VAT/GST registration number.  # noqa: E501

        :param vat_registration_number: The vat_registration_number of this TrustValue.  # noqa: E501
        :type: str
        """

        self._vat_registration_number = vat_registration_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrustValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrustValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
