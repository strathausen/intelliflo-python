# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.asset_plan import AssetPlan  # noqa: F401,E501

class PensionDefinedBenefitPlan(AssetPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment': 'EmploymentRef',
        'accrual_rate': 'int',
        'additional_notes': 'str',
        'applicable_penalties': 'str',
        'cash_equivalent_transfer_value': 'CurrencyValue',
        'is_deferred': 'bool',
        'dependant_benefits': 'str',
        'has_widows_pension': 'bool',
        'early_retirement_considerations_notes': 'str',
        'enhanced_tax_free_cash': 'str',
        'expected_years_of_service': 'str',
        'gad_max_income_limit': 'CurrencyValue',
        'gad_calculation_on': 'datetime',
        'indexation_notes': 'str',
        'is_contracted_out': 'bool',
        'next_review_on': 'datetime',
        'number_of_years_completed': 'str',
        'pension_sharing_percentage': 'float',
        'pension_attachment_order': 'str',
        'options_available_at_retirement_notes': 'str',
        'other_benefits_and_material_features_notes': 'str',
        'prospective_pension_no_lump_sum_taken': 'CurrencyValue',
        'prospective_pension_lump_sum_taken': 'CurrencyValue',
        'prospective_lump_sum': 'CurrencyValue',
        'has_inflation_protection': 'bool',
        'return_on_death_percentage': 'float',
        'return_on_death_type': 'str',
        'transfer_value_expires_on': 'datetime',
        'employee_nic_saving': 'int',
        'employer_nic_saving': 'int',
        'salary_exchange': 'SalaryExchangeValue',
        'life_cover_sum_assured': 'CurrencyValue',
        'life_cover_payment_basis': 'str',
        'term': 'str',
        'critical_illness_sum_assured': 'CurrencyValue',
        'critical_illness_term': 'str',
        'is_rated': 'bool',
        'is_premium_waiver_woc': 'bool',
        'added_years_purchase_notes': 'str',
        'death_in_service_spousal_benefits': 'CurrencyValue',
        'standard_retirement_age': 'int',
        'guaranteed_annuity_rate': 'str'
    }
    if hasattr(AssetPlan, "swagger_types"):
        swagger_types.update(AssetPlan.swagger_types)

    attribute_map = {
        'employment': 'employment',
        'accrual_rate': 'accrualRate',
        'additional_notes': 'additionalNotes',
        'applicable_penalties': 'applicablePenalties',
        'cash_equivalent_transfer_value': 'cashEquivalentTransferValue',
        'is_deferred': 'isDeferred',
        'dependant_benefits': 'dependantBenefits',
        'has_widows_pension': 'hasWidowsPension',
        'early_retirement_considerations_notes': 'earlyRetirementConsiderationsNotes',
        'enhanced_tax_free_cash': 'enhancedTaxFreeCash',
        'expected_years_of_service': 'expectedYearsOfService',
        'gad_max_income_limit': 'gadMaxIncomeLimit',
        'gad_calculation_on': 'gadCalculationOn',
        'indexation_notes': 'indexationNotes',
        'is_contracted_out': 'isContractedOut',
        'next_review_on': 'nextReviewOn',
        'number_of_years_completed': 'numberOfYearsCompleted',
        'pension_sharing_percentage': 'pensionSharingPercentage',
        'pension_attachment_order': 'pensionAttachmentOrder',
        'options_available_at_retirement_notes': 'optionsAvailableAtRetirementNotes',
        'other_benefits_and_material_features_notes': 'otherBenefitsAndMaterialFeaturesNotes',
        'prospective_pension_no_lump_sum_taken': 'prospectivePensionNoLumpSumTaken',
        'prospective_pension_lump_sum_taken': 'prospectivePensionLumpSumTaken',
        'prospective_lump_sum': 'prospectiveLumpSum',
        'has_inflation_protection': 'hasInflationProtection',
        'return_on_death_percentage': 'returnOnDeathPercentage',
        'return_on_death_type': 'returnOnDeathType',
        'transfer_value_expires_on': 'transferValueExpiresOn',
        'employee_nic_saving': 'employeeNICSaving',
        'employer_nic_saving': 'employerNICSaving',
        'salary_exchange': 'salaryExchange',
        'life_cover_sum_assured': 'lifeCoverSumAssured',
        'life_cover_payment_basis': 'lifeCoverPaymentBasis',
        'term': 'term',
        'critical_illness_sum_assured': 'criticalIllnessSumAssured',
        'critical_illness_term': 'criticalIllnessTerm',
        'is_rated': 'isRated',
        'is_premium_waiver_woc': 'isPremiumWaiverWoc',
        'added_years_purchase_notes': 'addedYearsPurchaseNotes',
        'death_in_service_spousal_benefits': 'deathInServiceSpousalBenefits',
        'standard_retirement_age': 'standardRetirementAge',
        'guaranteed_annuity_rate': 'guaranteedAnnuityRate'
    }
    if hasattr(AssetPlan, "attribute_map"):
        attribute_map.update(AssetPlan.attribute_map)

    def __init__(self, employment=None, accrual_rate=None, additional_notes='null', applicable_penalties='null', cash_equivalent_transfer_value=None, is_deferred=False, dependant_benefits='null', has_widows_pension=False, early_retirement_considerations_notes='null', enhanced_tax_free_cash='null', expected_years_of_service='null', gad_max_income_limit=None, gad_calculation_on=None, indexation_notes='null', is_contracted_out=False, next_review_on=None, number_of_years_completed='null', pension_sharing_percentage=None, pension_attachment_order='null', options_available_at_retirement_notes='null', other_benefits_and_material_features_notes='null', prospective_pension_no_lump_sum_taken=None, prospective_pension_lump_sum_taken=None, prospective_lump_sum=None, has_inflation_protection=False, return_on_death_percentage=None, return_on_death_type='null', transfer_value_expires_on=None, employee_nic_saving=None, employer_nic_saving=None, salary_exchange=None, life_cover_sum_assured=None, life_cover_payment_basis='null', term='null', critical_illness_sum_assured=None, critical_illness_term='null', is_rated=False, is_premium_waiver_woc=False, added_years_purchase_notes='null', death_in_service_spousal_benefits=None, standard_retirement_age=None, guaranteed_annuity_rate='null', *args, **kwargs):  # noqa: E501
        """PensionDefinedBenefitPlan - a model defined in Swagger"""  # noqa: E501
        self._employment = None
        self._accrual_rate = None
        self._additional_notes = None
        self._applicable_penalties = None
        self._cash_equivalent_transfer_value = None
        self._is_deferred = None
        self._dependant_benefits = None
        self._has_widows_pension = None
        self._early_retirement_considerations_notes = None
        self._enhanced_tax_free_cash = None
        self._expected_years_of_service = None
        self._gad_max_income_limit = None
        self._gad_calculation_on = None
        self._indexation_notes = None
        self._is_contracted_out = None
        self._next_review_on = None
        self._number_of_years_completed = None
        self._pension_sharing_percentage = None
        self._pension_attachment_order = None
        self._options_available_at_retirement_notes = None
        self._other_benefits_and_material_features_notes = None
        self._prospective_pension_no_lump_sum_taken = None
        self._prospective_pension_lump_sum_taken = None
        self._prospective_lump_sum = None
        self._has_inflation_protection = None
        self._return_on_death_percentage = None
        self._return_on_death_type = None
        self._transfer_value_expires_on = None
        self._employee_nic_saving = None
        self._employer_nic_saving = None
        self._salary_exchange = None
        self._life_cover_sum_assured = None
        self._life_cover_payment_basis = None
        self._term = None
        self._critical_illness_sum_assured = None
        self._critical_illness_term = None
        self._is_rated = None
        self._is_premium_waiver_woc = None
        self._added_years_purchase_notes = None
        self._death_in_service_spousal_benefits = None
        self._standard_retirement_age = None
        self._guaranteed_annuity_rate = None
        self.discriminator = None
        if employment is not None:
            self.employment = employment
        if accrual_rate is not None:
            self.accrual_rate = accrual_rate
        if additional_notes is not None:
            self.additional_notes = additional_notes
        if applicable_penalties is not None:
            self.applicable_penalties = applicable_penalties
        if cash_equivalent_transfer_value is not None:
            self.cash_equivalent_transfer_value = cash_equivalent_transfer_value
        if is_deferred is not None:
            self.is_deferred = is_deferred
        if dependant_benefits is not None:
            self.dependant_benefits = dependant_benefits
        if has_widows_pension is not None:
            self.has_widows_pension = has_widows_pension
        if early_retirement_considerations_notes is not None:
            self.early_retirement_considerations_notes = early_retirement_considerations_notes
        if enhanced_tax_free_cash is not None:
            self.enhanced_tax_free_cash = enhanced_tax_free_cash
        if expected_years_of_service is not None:
            self.expected_years_of_service = expected_years_of_service
        if gad_max_income_limit is not None:
            self.gad_max_income_limit = gad_max_income_limit
        if gad_calculation_on is not None:
            self.gad_calculation_on = gad_calculation_on
        if indexation_notes is not None:
            self.indexation_notes = indexation_notes
        if is_contracted_out is not None:
            self.is_contracted_out = is_contracted_out
        if next_review_on is not None:
            self.next_review_on = next_review_on
        if number_of_years_completed is not None:
            self.number_of_years_completed = number_of_years_completed
        if pension_sharing_percentage is not None:
            self.pension_sharing_percentage = pension_sharing_percentage
        if pension_attachment_order is not None:
            self.pension_attachment_order = pension_attachment_order
        if options_available_at_retirement_notes is not None:
            self.options_available_at_retirement_notes = options_available_at_retirement_notes
        if other_benefits_and_material_features_notes is not None:
            self.other_benefits_and_material_features_notes = other_benefits_and_material_features_notes
        if prospective_pension_no_lump_sum_taken is not None:
            self.prospective_pension_no_lump_sum_taken = prospective_pension_no_lump_sum_taken
        if prospective_pension_lump_sum_taken is not None:
            self.prospective_pension_lump_sum_taken = prospective_pension_lump_sum_taken
        if prospective_lump_sum is not None:
            self.prospective_lump_sum = prospective_lump_sum
        if has_inflation_protection is not None:
            self.has_inflation_protection = has_inflation_protection
        if return_on_death_percentage is not None:
            self.return_on_death_percentage = return_on_death_percentage
        if return_on_death_type is not None:
            self.return_on_death_type = return_on_death_type
        if transfer_value_expires_on is not None:
            self.transfer_value_expires_on = transfer_value_expires_on
        if employee_nic_saving is not None:
            self.employee_nic_saving = employee_nic_saving
        if employer_nic_saving is not None:
            self.employer_nic_saving = employer_nic_saving
        if salary_exchange is not None:
            self.salary_exchange = salary_exchange
        if life_cover_sum_assured is not None:
            self.life_cover_sum_assured = life_cover_sum_assured
        if life_cover_payment_basis is not None:
            self.life_cover_payment_basis = life_cover_payment_basis
        if term is not None:
            self.term = term
        if critical_illness_sum_assured is not None:
            self.critical_illness_sum_assured = critical_illness_sum_assured
        if critical_illness_term is not None:
            self.critical_illness_term = critical_illness_term
        if is_rated is not None:
            self.is_rated = is_rated
        if is_premium_waiver_woc is not None:
            self.is_premium_waiver_woc = is_premium_waiver_woc
        if added_years_purchase_notes is not None:
            self.added_years_purchase_notes = added_years_purchase_notes
        if death_in_service_spousal_benefits is not None:
            self.death_in_service_spousal_benefits = death_in_service_spousal_benefits
        if standard_retirement_age is not None:
            self.standard_retirement_age = standard_retirement_age
        if guaranteed_annuity_rate is not None:
            self.guaranteed_annuity_rate = guaranteed_annuity_rate
        AssetPlan.__init__(self, *args, **kwargs)

    @property
    def employment(self):
        """Gets the employment of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The employment of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: EmploymentRef
        """
        return self._employment

    @employment.setter
    def employment(self, employment):
        """Sets the employment of this PensionDefinedBenefitPlan.


        :param employment: The employment of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: EmploymentRef
        """

        self._employment = employment

    @property
    def accrual_rate(self):
        """Gets the accrual_rate of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The accrual_rate of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: int
        """
        return self._accrual_rate

    @accrual_rate.setter
    def accrual_rate(self, accrual_rate):
        """Sets the accrual_rate of this PensionDefinedBenefitPlan.


        :param accrual_rate: The accrual_rate of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: int
        """

        self._accrual_rate = accrual_rate

    @property
    def additional_notes(self):
        """Gets the additional_notes of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The additional_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._additional_notes

    @additional_notes.setter
    def additional_notes(self, additional_notes):
        """Sets the additional_notes of this PensionDefinedBenefitPlan.


        :param additional_notes: The additional_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._additional_notes = additional_notes

    @property
    def applicable_penalties(self):
        """Gets the applicable_penalties of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The applicable_penalties of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._applicable_penalties

    @applicable_penalties.setter
    def applicable_penalties(self, applicable_penalties):
        """Sets the applicable_penalties of this PensionDefinedBenefitPlan.


        :param applicable_penalties: The applicable_penalties of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._applicable_penalties = applicable_penalties

    @property
    def cash_equivalent_transfer_value(self):
        """Gets the cash_equivalent_transfer_value of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The cash_equivalent_transfer_value of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._cash_equivalent_transfer_value

    @cash_equivalent_transfer_value.setter
    def cash_equivalent_transfer_value(self, cash_equivalent_transfer_value):
        """Sets the cash_equivalent_transfer_value of this PensionDefinedBenefitPlan.


        :param cash_equivalent_transfer_value: The cash_equivalent_transfer_value of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._cash_equivalent_transfer_value = cash_equivalent_transfer_value

    @property
    def is_deferred(self):
        """Gets the is_deferred of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The is_deferred of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_deferred

    @is_deferred.setter
    def is_deferred(self, is_deferred):
        """Sets the is_deferred of this PensionDefinedBenefitPlan.


        :param is_deferred: The is_deferred of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: bool
        """

        self._is_deferred = is_deferred

    @property
    def dependant_benefits(self):
        """Gets the dependant_benefits of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The dependant_benefits of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._dependant_benefits

    @dependant_benefits.setter
    def dependant_benefits(self, dependant_benefits):
        """Sets the dependant_benefits of this PensionDefinedBenefitPlan.


        :param dependant_benefits: The dependant_benefits of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._dependant_benefits = dependant_benefits

    @property
    def has_widows_pension(self):
        """Gets the has_widows_pension of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The has_widows_pension of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: bool
        """
        return self._has_widows_pension

    @has_widows_pension.setter
    def has_widows_pension(self, has_widows_pension):
        """Sets the has_widows_pension of this PensionDefinedBenefitPlan.


        :param has_widows_pension: The has_widows_pension of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: bool
        """

        self._has_widows_pension = has_widows_pension

    @property
    def early_retirement_considerations_notes(self):
        """Gets the early_retirement_considerations_notes of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The early_retirement_considerations_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._early_retirement_considerations_notes

    @early_retirement_considerations_notes.setter
    def early_retirement_considerations_notes(self, early_retirement_considerations_notes):
        """Sets the early_retirement_considerations_notes of this PensionDefinedBenefitPlan.


        :param early_retirement_considerations_notes: The early_retirement_considerations_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._early_retirement_considerations_notes = early_retirement_considerations_notes

    @property
    def enhanced_tax_free_cash(self):
        """Gets the enhanced_tax_free_cash of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The enhanced_tax_free_cash of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._enhanced_tax_free_cash

    @enhanced_tax_free_cash.setter
    def enhanced_tax_free_cash(self, enhanced_tax_free_cash):
        """Sets the enhanced_tax_free_cash of this PensionDefinedBenefitPlan.


        :param enhanced_tax_free_cash: The enhanced_tax_free_cash of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._enhanced_tax_free_cash = enhanced_tax_free_cash

    @property
    def expected_years_of_service(self):
        """Gets the expected_years_of_service of this PensionDefinedBenefitPlan.  # noqa: E501

        Expected years of service period in ISO-8601 and restricted to years  # noqa: E501

        :return: The expected_years_of_service of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._expected_years_of_service

    @expected_years_of_service.setter
    def expected_years_of_service(self, expected_years_of_service):
        """Sets the expected_years_of_service of this PensionDefinedBenefitPlan.

        Expected years of service period in ISO-8601 and restricted to years  # noqa: E501

        :param expected_years_of_service: The expected_years_of_service of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._expected_years_of_service = expected_years_of_service

    @property
    def gad_max_income_limit(self):
        """Gets the gad_max_income_limit of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The gad_max_income_limit of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._gad_max_income_limit

    @gad_max_income_limit.setter
    def gad_max_income_limit(self, gad_max_income_limit):
        """Sets the gad_max_income_limit of this PensionDefinedBenefitPlan.


        :param gad_max_income_limit: The gad_max_income_limit of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._gad_max_income_limit = gad_max_income_limit

    @property
    def gad_calculation_on(self):
        """Gets the gad_calculation_on of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The gad_calculation_on of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._gad_calculation_on

    @gad_calculation_on.setter
    def gad_calculation_on(self, gad_calculation_on):
        """Sets the gad_calculation_on of this PensionDefinedBenefitPlan.


        :param gad_calculation_on: The gad_calculation_on of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: datetime
        """

        self._gad_calculation_on = gad_calculation_on

    @property
    def indexation_notes(self):
        """Gets the indexation_notes of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The indexation_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._indexation_notes

    @indexation_notes.setter
    def indexation_notes(self, indexation_notes):
        """Sets the indexation_notes of this PensionDefinedBenefitPlan.


        :param indexation_notes: The indexation_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._indexation_notes = indexation_notes

    @property
    def is_contracted_out(self):
        """Gets the is_contracted_out of this PensionDefinedBenefitPlan.  # noqa: E501

        Is the scheme contracted out of State Second Pension (S2P)?  # noqa: E501

        :return: The is_contracted_out of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_contracted_out

    @is_contracted_out.setter
    def is_contracted_out(self, is_contracted_out):
        """Sets the is_contracted_out of this PensionDefinedBenefitPlan.

        Is the scheme contracted out of State Second Pension (S2P)?  # noqa: E501

        :param is_contracted_out: The is_contracted_out of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: bool
        """

        self._is_contracted_out = is_contracted_out

    @property
    def next_review_on(self):
        """Gets the next_review_on of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The next_review_on of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._next_review_on

    @next_review_on.setter
    def next_review_on(self, next_review_on):
        """Sets the next_review_on of this PensionDefinedBenefitPlan.


        :param next_review_on: The next_review_on of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: datetime
        """

        self._next_review_on = next_review_on

    @property
    def number_of_years_completed(self):
        """Gets the number_of_years_completed of this PensionDefinedBenefitPlan.  # noqa: E501

        Number of years completed period in ISO-8601 and restricted to years  # noqa: E501

        :return: The number_of_years_completed of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._number_of_years_completed

    @number_of_years_completed.setter
    def number_of_years_completed(self, number_of_years_completed):
        """Sets the number_of_years_completed of this PensionDefinedBenefitPlan.

        Number of years completed period in ISO-8601 and restricted to years  # noqa: E501

        :param number_of_years_completed: The number_of_years_completed of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._number_of_years_completed = number_of_years_completed

    @property
    def pension_sharing_percentage(self):
        """Gets the pension_sharing_percentage of this PensionDefinedBenefitPlan.  # noqa: E501

        The percentage amount that one person will get from the total value of another person's pension  # noqa: E501

        :return: The pension_sharing_percentage of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: float
        """
        return self._pension_sharing_percentage

    @pension_sharing_percentage.setter
    def pension_sharing_percentage(self, pension_sharing_percentage):
        """Sets the pension_sharing_percentage of this PensionDefinedBenefitPlan.

        The percentage amount that one person will get from the total value of another person's pension  # noqa: E501

        :param pension_sharing_percentage: The pension_sharing_percentage of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: float
        """

        self._pension_sharing_percentage = pension_sharing_percentage

    @property
    def pension_attachment_order(self):
        """Gets the pension_attachment_order of this PensionDefinedBenefitPlan.  # noqa: E501

        Date of Order and the name of the other party  # noqa: E501

        :return: The pension_attachment_order of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._pension_attachment_order

    @pension_attachment_order.setter
    def pension_attachment_order(self, pension_attachment_order):
        """Sets the pension_attachment_order of this PensionDefinedBenefitPlan.

        Date of Order and the name of the other party  # noqa: E501

        :param pension_attachment_order: The pension_attachment_order of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._pension_attachment_order = pension_attachment_order

    @property
    def options_available_at_retirement_notes(self):
        """Gets the options_available_at_retirement_notes of this PensionDefinedBenefitPlan.  # noqa: E501

        Options Available At Retirement  # noqa: E501

        :return: The options_available_at_retirement_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._options_available_at_retirement_notes

    @options_available_at_retirement_notes.setter
    def options_available_at_retirement_notes(self, options_available_at_retirement_notes):
        """Sets the options_available_at_retirement_notes of this PensionDefinedBenefitPlan.

        Options Available At Retirement  # noqa: E501

        :param options_available_at_retirement_notes: The options_available_at_retirement_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._options_available_at_retirement_notes = options_available_at_retirement_notes

    @property
    def other_benefits_and_material_features_notes(self):
        """Gets the other_benefits_and_material_features_notes of this PensionDefinedBenefitPlan.  # noqa: E501

        Other Benefits and/or Material Features  # noqa: E501

        :return: The other_benefits_and_material_features_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._other_benefits_and_material_features_notes

    @other_benefits_and_material_features_notes.setter
    def other_benefits_and_material_features_notes(self, other_benefits_and_material_features_notes):
        """Sets the other_benefits_and_material_features_notes of this PensionDefinedBenefitPlan.

        Other Benefits and/or Material Features  # noqa: E501

        :param other_benefits_and_material_features_notes: The other_benefits_and_material_features_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._other_benefits_and_material_features_notes = other_benefits_and_material_features_notes

    @property
    def prospective_pension_no_lump_sum_taken(self):
        """Gets the prospective_pension_no_lump_sum_taken of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The prospective_pension_no_lump_sum_taken of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._prospective_pension_no_lump_sum_taken

    @prospective_pension_no_lump_sum_taken.setter
    def prospective_pension_no_lump_sum_taken(self, prospective_pension_no_lump_sum_taken):
        """Sets the prospective_pension_no_lump_sum_taken of this PensionDefinedBenefitPlan.


        :param prospective_pension_no_lump_sum_taken: The prospective_pension_no_lump_sum_taken of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._prospective_pension_no_lump_sum_taken = prospective_pension_no_lump_sum_taken

    @property
    def prospective_pension_lump_sum_taken(self):
        """Gets the prospective_pension_lump_sum_taken of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The prospective_pension_lump_sum_taken of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._prospective_pension_lump_sum_taken

    @prospective_pension_lump_sum_taken.setter
    def prospective_pension_lump_sum_taken(self, prospective_pension_lump_sum_taken):
        """Sets the prospective_pension_lump_sum_taken of this PensionDefinedBenefitPlan.


        :param prospective_pension_lump_sum_taken: The prospective_pension_lump_sum_taken of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._prospective_pension_lump_sum_taken = prospective_pension_lump_sum_taken

    @property
    def prospective_lump_sum(self):
        """Gets the prospective_lump_sum of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The prospective_lump_sum of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._prospective_lump_sum

    @prospective_lump_sum.setter
    def prospective_lump_sum(self, prospective_lump_sum):
        """Sets the prospective_lump_sum of this PensionDefinedBenefitPlan.


        :param prospective_lump_sum: The prospective_lump_sum of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._prospective_lump_sum = prospective_lump_sum

    @property
    def has_inflation_protection(self):
        """Gets the has_inflation_protection of this PensionDefinedBenefitPlan.  # noqa: E501

        Provides retirement income protection against inflation?  # noqa: E501

        :return: The has_inflation_protection of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: bool
        """
        return self._has_inflation_protection

    @has_inflation_protection.setter
    def has_inflation_protection(self, has_inflation_protection):
        """Sets the has_inflation_protection of this PensionDefinedBenefitPlan.

        Provides retirement income protection against inflation?  # noqa: E501

        :param has_inflation_protection: The has_inflation_protection of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: bool
        """

        self._has_inflation_protection = has_inflation_protection

    @property
    def return_on_death_percentage(self):
        """Gets the return_on_death_percentage of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The return_on_death_percentage of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: float
        """
        return self._return_on_death_percentage

    @return_on_death_percentage.setter
    def return_on_death_percentage(self, return_on_death_percentage):
        """Sets the return_on_death_percentage of this PensionDefinedBenefitPlan.


        :param return_on_death_percentage: The return_on_death_percentage of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: float
        """

        self._return_on_death_percentage = return_on_death_percentage

    @property
    def return_on_death_type(self):
        """Gets the return_on_death_type of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The return_on_death_type of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._return_on_death_type

    @return_on_death_type.setter
    def return_on_death_type(self, return_on_death_type):
        """Sets the return_on_death_type of this PensionDefinedBenefitPlan.


        :param return_on_death_type: The return_on_death_type of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Rof", "Rop"]  # noqa: E501
        if return_on_death_type not in allowed_values:
            raise ValueError(
                "Invalid value for `return_on_death_type` ({0}), must be one of {1}"  # noqa: E501
                .format(return_on_death_type, allowed_values)
            )

        self._return_on_death_type = return_on_death_type

    @property
    def transfer_value_expires_on(self):
        """Gets the transfer_value_expires_on of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The transfer_value_expires_on of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._transfer_value_expires_on

    @transfer_value_expires_on.setter
    def transfer_value_expires_on(self, transfer_value_expires_on):
        """Sets the transfer_value_expires_on of this PensionDefinedBenefitPlan.


        :param transfer_value_expires_on: The transfer_value_expires_on of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: datetime
        """

        self._transfer_value_expires_on = transfer_value_expires_on

    @property
    def employee_nic_saving(self):
        """Gets the employee_nic_saving of this PensionDefinedBenefitPlan.  # noqa: E501

        National Insurance contributions paid by employee  # noqa: E501

        :return: The employee_nic_saving of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: int
        """
        return self._employee_nic_saving

    @employee_nic_saving.setter
    def employee_nic_saving(self, employee_nic_saving):
        """Sets the employee_nic_saving of this PensionDefinedBenefitPlan.

        National Insurance contributions paid by employee  # noqa: E501

        :param employee_nic_saving: The employee_nic_saving of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: int
        """

        self._employee_nic_saving = employee_nic_saving

    @property
    def employer_nic_saving(self):
        """Gets the employer_nic_saving of this PensionDefinedBenefitPlan.  # noqa: E501

        National Insurance contributions paid by employer  # noqa: E501

        :return: The employer_nic_saving of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: int
        """
        return self._employer_nic_saving

    @employer_nic_saving.setter
    def employer_nic_saving(self, employer_nic_saving):
        """Sets the employer_nic_saving of this PensionDefinedBenefitPlan.

        National Insurance contributions paid by employer  # noqa: E501

        :param employer_nic_saving: The employer_nic_saving of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: int
        """

        self._employer_nic_saving = employer_nic_saving

    @property
    def salary_exchange(self):
        """Gets the salary_exchange of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The salary_exchange of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: SalaryExchangeValue
        """
        return self._salary_exchange

    @salary_exchange.setter
    def salary_exchange(self, salary_exchange):
        """Sets the salary_exchange of this PensionDefinedBenefitPlan.


        :param salary_exchange: The salary_exchange of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: SalaryExchangeValue
        """

        self._salary_exchange = salary_exchange

    @property
    def life_cover_sum_assured(self):
        """Gets the life_cover_sum_assured of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The life_cover_sum_assured of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._life_cover_sum_assured

    @life_cover_sum_assured.setter
    def life_cover_sum_assured(self, life_cover_sum_assured):
        """Sets the life_cover_sum_assured of this PensionDefinedBenefitPlan.


        :param life_cover_sum_assured: The life_cover_sum_assured of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._life_cover_sum_assured = life_cover_sum_assured

    @property
    def life_cover_payment_basis(self):
        """Gets the life_cover_payment_basis of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The life_cover_payment_basis of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._life_cover_payment_basis

    @life_cover_payment_basis.setter
    def life_cover_payment_basis(self, life_cover_payment_basis):
        """Sets the life_cover_payment_basis of this PensionDefinedBenefitPlan.


        :param life_cover_payment_basis: The life_cover_payment_basis of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["FirstDeath", "SecondDeath", "Both"]  # noqa: E501
        if life_cover_payment_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `life_cover_payment_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(life_cover_payment_basis, allowed_values)
            )

        self._life_cover_payment_basis = life_cover_payment_basis

    @property
    def term(self):
        """Gets the term of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The term of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this PensionDefinedBenefitPlan.


        :param term: The term of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def critical_illness_sum_assured(self):
        """Gets the critical_illness_sum_assured of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The critical_illness_sum_assured of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._critical_illness_sum_assured

    @critical_illness_sum_assured.setter
    def critical_illness_sum_assured(self, critical_illness_sum_assured):
        """Sets the critical_illness_sum_assured of this PensionDefinedBenefitPlan.


        :param critical_illness_sum_assured: The critical_illness_sum_assured of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._critical_illness_sum_assured = critical_illness_sum_assured

    @property
    def critical_illness_term(self):
        """Gets the critical_illness_term of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The critical_illness_term of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._critical_illness_term

    @critical_illness_term.setter
    def critical_illness_term(self, critical_illness_term):
        """Sets the critical_illness_term of this PensionDefinedBenefitPlan.


        :param critical_illness_term: The critical_illness_term of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._critical_illness_term = critical_illness_term

    @property
    def is_rated(self):
        """Gets the is_rated of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The is_rated of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_rated

    @is_rated.setter
    def is_rated(self, is_rated):
        """Sets the is_rated of this PensionDefinedBenefitPlan.


        :param is_rated: The is_rated of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: bool
        """

        self._is_rated = is_rated

    @property
    def is_premium_waiver_woc(self):
        """Gets the is_premium_waiver_woc of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The is_premium_waiver_woc of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_premium_waiver_woc

    @is_premium_waiver_woc.setter
    def is_premium_waiver_woc(self, is_premium_waiver_woc):
        """Sets the is_premium_waiver_woc of this PensionDefinedBenefitPlan.


        :param is_premium_waiver_woc: The is_premium_waiver_woc of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: bool
        """

        self._is_premium_waiver_woc = is_premium_waiver_woc

    @property
    def added_years_purchase_notes(self):
        """Gets the added_years_purchase_notes of this PensionDefinedBenefitPlan.  # noqa: E501

        Ability to purchase added years details  # noqa: E501

        :return: The added_years_purchase_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._added_years_purchase_notes

    @added_years_purchase_notes.setter
    def added_years_purchase_notes(self, added_years_purchase_notes):
        """Sets the added_years_purchase_notes of this PensionDefinedBenefitPlan.

        Ability to purchase added years details  # noqa: E501

        :param added_years_purchase_notes: The added_years_purchase_notes of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._added_years_purchase_notes = added_years_purchase_notes

    @property
    def death_in_service_spousal_benefits(self):
        """Gets the death_in_service_spousal_benefits of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The death_in_service_spousal_benefits of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._death_in_service_spousal_benefits

    @death_in_service_spousal_benefits.setter
    def death_in_service_spousal_benefits(self, death_in_service_spousal_benefits):
        """Sets the death_in_service_spousal_benefits of this PensionDefinedBenefitPlan.


        :param death_in_service_spousal_benefits: The death_in_service_spousal_benefits of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._death_in_service_spousal_benefits = death_in_service_spousal_benefits

    @property
    def standard_retirement_age(self):
        """Gets the standard_retirement_age of this PensionDefinedBenefitPlan.  # noqa: E501

        SRA (Standard Retirement Age)  # noqa: E501

        :return: The standard_retirement_age of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: int
        """
        return self._standard_retirement_age

    @standard_retirement_age.setter
    def standard_retirement_age(self, standard_retirement_age):
        """Sets the standard_retirement_age of this PensionDefinedBenefitPlan.

        SRA (Standard Retirement Age)  # noqa: E501

        :param standard_retirement_age: The standard_retirement_age of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: int
        """

        self._standard_retirement_age = standard_retirement_age

    @property
    def guaranteed_annuity_rate(self):
        """Gets the guaranteed_annuity_rate of this PensionDefinedBenefitPlan.  # noqa: E501


        :return: The guaranteed_annuity_rate of this PensionDefinedBenefitPlan.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_annuity_rate

    @guaranteed_annuity_rate.setter
    def guaranteed_annuity_rate(self, guaranteed_annuity_rate):
        """Sets the guaranteed_annuity_rate of this PensionDefinedBenefitPlan.


        :param guaranteed_annuity_rate: The guaranteed_annuity_rate of this PensionDefinedBenefitPlan.  # noqa: E501
        :type: str
        """

        self._guaranteed_annuity_rate = guaranteed_annuity_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PensionDefinedBenefitPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PensionDefinedBenefitPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
