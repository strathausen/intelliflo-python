# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiskProfileReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'risk_code': 'str',
        'risk_category': 'str'
    }

    attribute_map = {
        'risk_code': 'riskCode',
        'risk_category': 'riskCategory'
    }

    def __init__(self, risk_code=None, risk_category=None):  # noqa: E501
        """RiskProfileReference - a model defined in Swagger"""  # noqa: E501
        self._risk_code = None
        self._risk_category = None
        self.discriminator = None
        if risk_code is not None:
            self.risk_code = risk_code
        if risk_category is not None:
            self.risk_category = risk_category

    @property
    def risk_code(self):
        """Gets the risk_code of this RiskProfileReference.  # noqa: E501

        Risk Code. Should be either the Chosen Risk Code or the Generated Risk Code from the Client ATR.  Will default to the chosen risk code if present otherwise will default to generated risk code.  # noqa: E501

        :return: The risk_code of this RiskProfileReference.  # noqa: E501
        :rtype: str
        """
        return self._risk_code

    @risk_code.setter
    def risk_code(self, risk_code):
        """Sets the risk_code of this RiskProfileReference.

        Risk Code. Should be either the Chosen Risk Code or the Generated Risk Code from the Client ATR.  Will default to the chosen risk code if present otherwise will default to generated risk code.  # noqa: E501

        :param risk_code: The risk_code of this RiskProfileReference.  # noqa: E501
        :type: str
        """

        self._risk_code = risk_code

    @property
    def risk_category(self):
        """Gets the risk_category of this RiskProfileReference.  # noqa: E501

        Risk Category.  # noqa: E501

        :return: The risk_category of this RiskProfileReference.  # noqa: E501
        :rtype: str
        """
        return self._risk_category

    @risk_category.setter
    def risk_category(self, risk_category):
        """Sets the risk_category of this RiskProfileReference.

        Risk Category.  # noqa: E501

        :param risk_category: The risk_category of this RiskProfileReference.  # noqa: E501
        :type: str
        """

        self._risk_category = risk_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskProfileReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskProfileReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
