# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_advice_template_step import BaseAdviceTemplateStep  # noqa: F401,E501

class ToolsAndAppsTemplateStep(BaseAdviceTemplateStep):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_quote_and_result': 'bool',
        'service_case': 'AdviceTemplateStepServiceCase'
    }
    if hasattr(BaseAdviceTemplateStep, "swagger_types"):
        swagger_types.update(BaseAdviceTemplateStep.swagger_types)

    attribute_map = {
        'include_quote_and_result': 'includeQuoteAndResult',
        'service_case': 'serviceCase'
    }
    if hasattr(BaseAdviceTemplateStep, "attribute_map"):
        attribute_map.update(BaseAdviceTemplateStep.attribute_map)

    def __init__(self, include_quote_and_result=None, service_case=None, *args, **kwargs):  # noqa: E501
        """ToolsAndAppsTemplateStep - a model defined in Swagger"""  # noqa: E501
        self._include_quote_and_result = None
        self._service_case = None
        self.discriminator = None
        if include_quote_and_result is not None:
            self.include_quote_and_result = include_quote_and_result
        if service_case is not None:
            self.service_case = service_case
        BaseAdviceTemplateStep.__init__(self, *args, **kwargs)

    @property
    def include_quote_and_result(self):
        """Gets the include_quote_and_result of this ToolsAndAppsTemplateStep.  # noqa: E501

        Include Quote and Result  # noqa: E501

        :return: The include_quote_and_result of this ToolsAndAppsTemplateStep.  # noqa: E501
        :rtype: bool
        """
        return self._include_quote_and_result

    @include_quote_and_result.setter
    def include_quote_and_result(self, include_quote_and_result):
        """Sets the include_quote_and_result of this ToolsAndAppsTemplateStep.

        Include Quote and Result  # noqa: E501

        :param include_quote_and_result: The include_quote_and_result of this ToolsAndAppsTemplateStep.  # noqa: E501
        :type: bool
        """

        self._include_quote_and_result = include_quote_and_result

    @property
    def service_case(self):
        """Gets the service_case of this ToolsAndAppsTemplateStep.  # noqa: E501


        :return: The service_case of this ToolsAndAppsTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateStepServiceCase
        """
        return self._service_case

    @service_case.setter
    def service_case(self, service_case):
        """Sets the service_case of this ToolsAndAppsTemplateStep.


        :param service_case: The service_case of this ToolsAndAppsTemplateStep.  # noqa: E501
        :type: AdviceTemplateStepServiceCase
        """

        self._service_case = service_case

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolsAndAppsTemplateStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolsAndAppsTemplateStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
