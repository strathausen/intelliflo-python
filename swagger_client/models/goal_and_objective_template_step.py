# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_advice_template_step import BaseAdviceTemplateStep  # noqa: F401,E501

class GoalAndObjectiveTemplateStep(BaseAdviceTemplateStep):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sections': 'list[str]',
        'goal_configurations': 'list[GoalConfigurationDocument]',
        'service_case': 'AdviceTemplateStepServiceCase',
        'allow_multiple_goals': 'bool',
        'show_goal_risk_profile_capture': 'bool',
        'goal_risk_profile_configuration': 'GoalRiskProfileConfiguration',
        'show_goal_investment_preference_capture': 'bool',
        'goal_investment_preference_configuration': 'GoalInvestmentPreferenceConfiguration'
    }
    if hasattr(BaseAdviceTemplateStep, "swagger_types"):
        swagger_types.update(BaseAdviceTemplateStep.swagger_types)

    attribute_map = {
        'sections': 'sections',
        'goal_configurations': 'goalConfigurations',
        'service_case': 'serviceCase',
        'allow_multiple_goals': 'allowMultipleGoals',
        'show_goal_risk_profile_capture': 'showGoalRiskProfileCapture',
        'goal_risk_profile_configuration': 'goalRiskProfileConfiguration',
        'show_goal_investment_preference_capture': 'showGoalInvestmentPreferenceCapture',
        'goal_investment_preference_configuration': 'goalInvestmentPreferenceConfiguration'
    }
    if hasattr(BaseAdviceTemplateStep, "attribute_map"):
        attribute_map.update(BaseAdviceTemplateStep.attribute_map)

    def __init__(self, sections=None, goal_configurations=None, service_case=None, allow_multiple_goals=None, show_goal_risk_profile_capture=None, goal_risk_profile_configuration=None, show_goal_investment_preference_capture=None, goal_investment_preference_configuration=None, *args, **kwargs):  # noqa: E501
        """GoalAndObjectiveTemplateStep - a model defined in Swagger"""  # noqa: E501
        self._sections = None
        self._goal_configurations = None
        self._service_case = None
        self._allow_multiple_goals = None
        self._show_goal_risk_profile_capture = None
        self._goal_risk_profile_configuration = None
        self._show_goal_investment_preference_capture = None
        self._goal_investment_preference_configuration = None
        self.discriminator = None
        if sections is not None:
            self.sections = sections
        if goal_configurations is not None:
            self.goal_configurations = goal_configurations
        if service_case is not None:
            self.service_case = service_case
        if allow_multiple_goals is not None:
            self.allow_multiple_goals = allow_multiple_goals
        if show_goal_risk_profile_capture is not None:
            self.show_goal_risk_profile_capture = show_goal_risk_profile_capture
        if goal_risk_profile_configuration is not None:
            self.goal_risk_profile_configuration = goal_risk_profile_configuration
        if show_goal_investment_preference_capture is not None:
            self.show_goal_investment_preference_capture = show_goal_investment_preference_capture
        if goal_investment_preference_configuration is not None:
            self.goal_investment_preference_configuration = goal_investment_preference_configuration
        BaseAdviceTemplateStep.__init__(self, *args, **kwargs)

    @property
    def sections(self):
        """Gets the sections of this GoalAndObjectiveTemplateStep.  # noqa: E501

        Goal and Objective sections  # noqa: E501

        :return: The sections of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: list[str]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this GoalAndObjectiveTemplateStep.

        Goal and Objective sections  # noqa: E501

        :param sections: The sections of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: list[str]
        """

        self._sections = sections

    @property
    def goal_configurations(self):
        """Gets the goal_configurations of this GoalAndObjectiveTemplateStep.  # noqa: E501

        Goal Configuration  # noqa: E501

        :return: The goal_configurations of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: list[GoalConfigurationDocument]
        """
        return self._goal_configurations

    @goal_configurations.setter
    def goal_configurations(self, goal_configurations):
        """Sets the goal_configurations of this GoalAndObjectiveTemplateStep.

        Goal Configuration  # noqa: E501

        :param goal_configurations: The goal_configurations of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: list[GoalConfigurationDocument]
        """

        self._goal_configurations = goal_configurations

    @property
    def service_case(self):
        """Gets the service_case of this GoalAndObjectiveTemplateStep.  # noqa: E501


        :return: The service_case of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateStepServiceCase
        """
        return self._service_case

    @service_case.setter
    def service_case(self, service_case):
        """Sets the service_case of this GoalAndObjectiveTemplateStep.


        :param service_case: The service_case of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: AdviceTemplateStepServiceCase
        """

        self._service_case = service_case

    @property
    def allow_multiple_goals(self):
        """Gets the allow_multiple_goals of this GoalAndObjectiveTemplateStep.  # noqa: E501

        Goal and Objective AllowMultipleGoals.  # noqa: E501

        :return: The allow_multiple_goals of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_goals

    @allow_multiple_goals.setter
    def allow_multiple_goals(self, allow_multiple_goals):
        """Sets the allow_multiple_goals of this GoalAndObjectiveTemplateStep.

        Goal and Objective AllowMultipleGoals.  # noqa: E501

        :param allow_multiple_goals: The allow_multiple_goals of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_goals = allow_multiple_goals

    @property
    def show_goal_risk_profile_capture(self):
        """Gets the show_goal_risk_profile_capture of this GoalAndObjectiveTemplateStep.  # noqa: E501

        Goal and Objective ShowGoalRiskProfileCapture.  # noqa: E501

        :return: The show_goal_risk_profile_capture of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: bool
        """
        return self._show_goal_risk_profile_capture

    @show_goal_risk_profile_capture.setter
    def show_goal_risk_profile_capture(self, show_goal_risk_profile_capture):
        """Sets the show_goal_risk_profile_capture of this GoalAndObjectiveTemplateStep.

        Goal and Objective ShowGoalRiskProfileCapture.  # noqa: E501

        :param show_goal_risk_profile_capture: The show_goal_risk_profile_capture of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: bool
        """

        self._show_goal_risk_profile_capture = show_goal_risk_profile_capture

    @property
    def goal_risk_profile_configuration(self):
        """Gets the goal_risk_profile_configuration of this GoalAndObjectiveTemplateStep.  # noqa: E501


        :return: The goal_risk_profile_configuration of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: GoalRiskProfileConfiguration
        """
        return self._goal_risk_profile_configuration

    @goal_risk_profile_configuration.setter
    def goal_risk_profile_configuration(self, goal_risk_profile_configuration):
        """Sets the goal_risk_profile_configuration of this GoalAndObjectiveTemplateStep.


        :param goal_risk_profile_configuration: The goal_risk_profile_configuration of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: GoalRiskProfileConfiguration
        """

        self._goal_risk_profile_configuration = goal_risk_profile_configuration

    @property
    def show_goal_investment_preference_capture(self):
        """Gets the show_goal_investment_preference_capture of this GoalAndObjectiveTemplateStep.  # noqa: E501

        Goal and Objective Show InvestmentPreference Capture  # noqa: E501

        :return: The show_goal_investment_preference_capture of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: bool
        """
        return self._show_goal_investment_preference_capture

    @show_goal_investment_preference_capture.setter
    def show_goal_investment_preference_capture(self, show_goal_investment_preference_capture):
        """Sets the show_goal_investment_preference_capture of this GoalAndObjectiveTemplateStep.

        Goal and Objective Show InvestmentPreference Capture  # noqa: E501

        :param show_goal_investment_preference_capture: The show_goal_investment_preference_capture of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: bool
        """

        self._show_goal_investment_preference_capture = show_goal_investment_preference_capture

    @property
    def goal_investment_preference_configuration(self):
        """Gets the goal_investment_preference_configuration of this GoalAndObjectiveTemplateStep.  # noqa: E501


        :return: The goal_investment_preference_configuration of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :rtype: GoalInvestmentPreferenceConfiguration
        """
        return self._goal_investment_preference_configuration

    @goal_investment_preference_configuration.setter
    def goal_investment_preference_configuration(self, goal_investment_preference_configuration):
        """Sets the goal_investment_preference_configuration of this GoalAndObjectiveTemplateStep.


        :param goal_investment_preference_configuration: The goal_investment_preference_configuration of this GoalAndObjectiveTemplateStep.  # noqa: E501
        :type: GoalInvestmentPreferenceConfiguration
        """

        self._goal_investment_preference_configuration = goal_investment_preference_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalAndObjectiveTemplateStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalAndObjectiveTemplateStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
