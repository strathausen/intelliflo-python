# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharedOwnershipValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentage_owned': 'float',
        'housing_body_name': 'str',
        'monthly_rent': 'CurrencyValue'
    }

    attribute_map = {
        'percentage_owned': 'percentageOwned',
        'housing_body_name': 'housingBodyName',
        'monthly_rent': 'monthlyRent'
    }

    def __init__(self, percentage_owned=None, housing_body_name='null', monthly_rent=None):  # noqa: E501
        """SharedOwnershipValue - a model defined in Swagger"""  # noqa: E501
        self._percentage_owned = None
        self._housing_body_name = None
        self._monthly_rent = None
        self.discriminator = None
        if percentage_owned is not None:
            self.percentage_owned = percentage_owned
        if housing_body_name is not None:
            self.housing_body_name = housing_body_name
        if monthly_rent is not None:
            self.monthly_rent = monthly_rent

    @property
    def percentage_owned(self):
        """Gets the percentage_owned of this SharedOwnershipValue.  # noqa: E501

        Shows the percentage of a share you are buying.  # noqa: E501

        :return: The percentage_owned of this SharedOwnershipValue.  # noqa: E501
        :rtype: float
        """
        return self._percentage_owned

    @percentage_owned.setter
    def percentage_owned(self, percentage_owned):
        """Sets the percentage_owned of this SharedOwnershipValue.

        Shows the percentage of a share you are buying.  # noqa: E501

        :param percentage_owned: The percentage_owned of this SharedOwnershipValue.  # noqa: E501
        :type: float
        """

        self._percentage_owned = percentage_owned

    @property
    def housing_body_name(self):
        """Gets the housing_body_name of this SharedOwnershipValue.  # noqa: E501

        The name of the Housing Association from whom a share of the property is being purchased.  # noqa: E501

        :return: The housing_body_name of this SharedOwnershipValue.  # noqa: E501
        :rtype: str
        """
        return self._housing_body_name

    @housing_body_name.setter
    def housing_body_name(self, housing_body_name):
        """Sets the housing_body_name of this SharedOwnershipValue.

        The name of the Housing Association from whom a share of the property is being purchased.  # noqa: E501

        :param housing_body_name: The housing_body_name of this SharedOwnershipValue.  # noqa: E501
        :type: str
        """

        self._housing_body_name = housing_body_name

    @property
    def monthly_rent(self):
        """Gets the monthly_rent of this SharedOwnershipValue.  # noqa: E501


        :return: The monthly_rent of this SharedOwnershipValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._monthly_rent

    @monthly_rent.setter
    def monthly_rent(self, monthly_rent):
        """Sets the monthly_rent of this SharedOwnershipValue.


        :param monthly_rent: The monthly_rent of this SharedOwnershipValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._monthly_rent = monthly_rent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharedOwnershipValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedOwnershipValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
