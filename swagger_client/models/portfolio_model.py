# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_portfolio_model import BasePortfolioModel  # noqa: F401,E501

class PortfolioModel(BasePortfolioModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'funds': 'list[PortfolioModelFundRef]',
        'created_at': 'datetime',
        'created_by_app': 'NamedAppRef',
        'created_by': 'NamedUserRef',
        'current_group_name': 'str',
        'allow_rebalance': 'bool',
        'is_invested': 'bool',
        'tags': 'list[str]',
        'expected_return': 'str',
        'expected_risk': 'str',
        'investment_amount_upper': 'float',
        'investment_amount_lower': 'float',
        'status': 'str',
        'version': 'int',
        'reference': 'str',
        'is_locked': 'bool',
        'asset_model': 'str',
        'benchmark': 'BenchmarkRef',
        'is_latest_version': 'bool',
        'description': 'str',
        'risk_reference': 'str',
        'investment_objective': 'list[str]',
        'investment_management_style': 'str',
        'tax_qualified': 'str',
        'esg': 'list[str]',
        'is_externally_managed': 'bool',
        'is_imps': 'bool',
        'model_risk_profile': 'ModelRiskProfile',
        'provider': 'str'
    }
    if hasattr(BasePortfolioModel, "swagger_types"):
        swagger_types.update(BasePortfolioModel.swagger_types)

    attribute_map = {
        'funds': 'funds',
        'created_at': 'createdAt',
        'created_by_app': 'createdByApp',
        'created_by': 'createdBy',
        'current_group_name': 'currentGroupName',
        'allow_rebalance': 'allowRebalance',
        'is_invested': 'isInvested',
        'tags': 'tags',
        'expected_return': 'expectedReturn',
        'expected_risk': 'expectedRisk',
        'investment_amount_upper': 'investmentAmountUpper',
        'investment_amount_lower': 'investmentAmountLower',
        'status': 'status',
        'version': 'version',
        'reference': 'reference',
        'is_locked': 'isLocked',
        'asset_model': 'assetModel',
        'benchmark': 'benchmark',
        'is_latest_version': 'isLatestVersion',
        'description': 'description',
        'risk_reference': 'riskReference',
        'investment_objective': 'investmentObjective',
        'investment_management_style': 'investmentManagementStyle',
        'tax_qualified': 'taxQualified',
        'esg': 'esg',
        'is_externally_managed': 'isExternallyManaged',
        'is_imps': 'isImps',
        'model_risk_profile': 'modelRiskProfile',
        'provider': 'provider'
    }
    if hasattr(BasePortfolioModel, "attribute_map"):
        attribute_map.update(BasePortfolioModel.attribute_map)

    def __init__(self, funds=None, created_at=None, created_by_app=None, created_by=None, current_group_name=None, allow_rebalance=None, is_invested=None, tags=None, expected_return=None, expected_risk=None, investment_amount_upper=None, investment_amount_lower=None, status=None, version=None, reference=None, is_locked=None, asset_model=None, benchmark=None, is_latest_version=None, description=None, risk_reference=None, investment_objective=None, investment_management_style=None, tax_qualified=None, esg=None, is_externally_managed=None, is_imps=None, model_risk_profile=None, provider=None, *args, **kwargs):  # noqa: E501
        """PortfolioModel - a model defined in Swagger"""  # noqa: E501
        self._funds = None
        self._created_at = None
        self._created_by_app = None
        self._created_by = None
        self._current_group_name = None
        self._allow_rebalance = None
        self._is_invested = None
        self._tags = None
        self._expected_return = None
        self._expected_risk = None
        self._investment_amount_upper = None
        self._investment_amount_lower = None
        self._status = None
        self._version = None
        self._reference = None
        self._is_locked = None
        self._asset_model = None
        self._benchmark = None
        self._is_latest_version = None
        self._description = None
        self._risk_reference = None
        self._investment_objective = None
        self._investment_management_style = None
        self._tax_qualified = None
        self._esg = None
        self._is_externally_managed = None
        self._is_imps = None
        self._model_risk_profile = None
        self._provider = None
        self.discriminator = None
        if funds is not None:
            self.funds = funds
        if created_at is not None:
            self.created_at = created_at
        if created_by_app is not None:
            self.created_by_app = created_by_app
        if created_by is not None:
            self.created_by = created_by
        if current_group_name is not None:
            self.current_group_name = current_group_name
        if allow_rebalance is not None:
            self.allow_rebalance = allow_rebalance
        if is_invested is not None:
            self.is_invested = is_invested
        if tags is not None:
            self.tags = tags
        if expected_return is not None:
            self.expected_return = expected_return
        if expected_risk is not None:
            self.expected_risk = expected_risk
        if investment_amount_upper is not None:
            self.investment_amount_upper = investment_amount_upper
        if investment_amount_lower is not None:
            self.investment_amount_lower = investment_amount_lower
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if reference is not None:
            self.reference = reference
        if is_locked is not None:
            self.is_locked = is_locked
        if asset_model is not None:
            self.asset_model = asset_model
        if benchmark is not None:
            self.benchmark = benchmark
        if is_latest_version is not None:
            self.is_latest_version = is_latest_version
        if description is not None:
            self.description = description
        if risk_reference is not None:
            self.risk_reference = risk_reference
        if investment_objective is not None:
            self.investment_objective = investment_objective
        if investment_management_style is not None:
            self.investment_management_style = investment_management_style
        if tax_qualified is not None:
            self.tax_qualified = tax_qualified
        if esg is not None:
            self.esg = esg
        if is_externally_managed is not None:
            self.is_externally_managed = is_externally_managed
        if is_imps is not None:
            self.is_imps = is_imps
        if model_risk_profile is not None:
            self.model_risk_profile = model_risk_profile
        if provider is not None:
            self.provider = provider
        BasePortfolioModel.__init__(self, *args, **kwargs)

    @property
    def funds(self):
        """Gets the funds of this PortfolioModel.  # noqa: E501

        A list of funds associated with the portfolio model.  # noqa: E501

        :return: The funds of this PortfolioModel.  # noqa: E501
        :rtype: list[PortfolioModelFundRef]
        """
        return self._funds

    @funds.setter
    def funds(self, funds):
        """Sets the funds of this PortfolioModel.

        A list of funds associated with the portfolio model.  # noqa: E501

        :param funds: The funds of this PortfolioModel.  # noqa: E501
        :type: list[PortfolioModelFundRef]
        """

        self._funds = funds

    @property
    def created_at(self):
        """Gets the created_at of this PortfolioModel.  # noqa: E501

        The date when the portfolio model was created.  # noqa: E501

        :return: The created_at of this PortfolioModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PortfolioModel.

        The date when the portfolio model was created.  # noqa: E501

        :param created_at: The created_at of this PortfolioModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by_app(self):
        """Gets the created_by_app of this PortfolioModel.  # noqa: E501


        :return: The created_by_app of this PortfolioModel.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_by_app

    @created_by_app.setter
    def created_by_app(self, created_by_app):
        """Sets the created_by_app of this PortfolioModel.


        :param created_by_app: The created_by_app of this PortfolioModel.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_by_app = created_by_app

    @property
    def created_by(self):
        """Gets the created_by of this PortfolioModel.  # noqa: E501


        :return: The created_by of this PortfolioModel.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PortfolioModel.


        :param created_by: The created_by of this PortfolioModel.  # noqa: E501
        :type: NamedUserRef
        """

        self._created_by = created_by

    @property
    def current_group_name(self):
        """Gets the current_group_name of this PortfolioModel.  # noqa: E501

        The group name if model applicable to group  # noqa: E501

        :return: The current_group_name of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._current_group_name

    @current_group_name.setter
    def current_group_name(self, current_group_name):
        """Sets the current_group_name of this PortfolioModel.

        The group name if model applicable to group  # noqa: E501

        :param current_group_name: The current_group_name of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._current_group_name = current_group_name

    @property
    def allow_rebalance(self):
        """Gets the allow_rebalance of this PortfolioModel.  # noqa: E501

        Is rebalance allowed for the portfolio model?  # noqa: E501

        :return: The allow_rebalance of this PortfolioModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_rebalance

    @allow_rebalance.setter
    def allow_rebalance(self, allow_rebalance):
        """Sets the allow_rebalance of this PortfolioModel.

        Is rebalance allowed for the portfolio model?  # noqa: E501

        :param allow_rebalance: The allow_rebalance of this PortfolioModel.  # noqa: E501
        :type: bool
        """

        self._allow_rebalance = allow_rebalance

    @property
    def is_invested(self):
        """Gets the is_invested of this PortfolioModel.  # noqa: E501


        :return: The is_invested of this PortfolioModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_invested

    @is_invested.setter
    def is_invested(self, is_invested):
        """Sets the is_invested of this PortfolioModel.


        :param is_invested: The is_invested of this PortfolioModel.  # noqa: E501
        :type: bool
        """

        self._is_invested = is_invested

    @property
    def tags(self):
        """Gets the tags of this PortfolioModel.  # noqa: E501

        Descriptive tags applied to a model which can be used for custom searches/filters  e.g. 'ReducedCost', 'Outperform', 'ESG'  # noqa: E501

        :return: The tags of this PortfolioModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PortfolioModel.

        Descriptive tags applied to a model which can be used for custom searches/filters  e.g. 'ReducedCost', 'Outperform', 'ESG'  # noqa: E501

        :param tags: The tags of this PortfolioModel.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def expected_return(self):
        """Gets the expected_return of this PortfolioModel.  # noqa: E501

        The expected return for the model  # noqa: E501

        :return: The expected_return of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._expected_return

    @expected_return.setter
    def expected_return(self, expected_return):
        """Sets the expected_return of this PortfolioModel.

        The expected return for the model  # noqa: E501

        :param expected_return: The expected_return of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._expected_return = expected_return

    @property
    def expected_risk(self):
        """Gets the expected_risk of this PortfolioModel.  # noqa: E501

        The expected risk for the model  # noqa: E501

        :return: The expected_risk of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._expected_risk

    @expected_risk.setter
    def expected_risk(self, expected_risk):
        """Sets the expected_risk of this PortfolioModel.

        The expected risk for the model  # noqa: E501

        :param expected_risk: The expected_risk of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._expected_risk = expected_risk

    @property
    def investment_amount_upper(self):
        """Gets the investment_amount_upper of this PortfolioModel.  # noqa: E501

        The maximum investment amount required/permitted for the model  # noqa: E501

        :return: The investment_amount_upper of this PortfolioModel.  # noqa: E501
        :rtype: float
        """
        return self._investment_amount_upper

    @investment_amount_upper.setter
    def investment_amount_upper(self, investment_amount_upper):
        """Sets the investment_amount_upper of this PortfolioModel.

        The maximum investment amount required/permitted for the model  # noqa: E501

        :param investment_amount_upper: The investment_amount_upper of this PortfolioModel.  # noqa: E501
        :type: float
        """

        self._investment_amount_upper = investment_amount_upper

    @property
    def investment_amount_lower(self):
        """Gets the investment_amount_lower of this PortfolioModel.  # noqa: E501

        The minimum investment amount required/permitted for the model  # noqa: E501

        :return: The investment_amount_lower of this PortfolioModel.  # noqa: E501
        :rtype: float
        """
        return self._investment_amount_lower

    @investment_amount_lower.setter
    def investment_amount_lower(self, investment_amount_lower):
        """Sets the investment_amount_lower of this PortfolioModel.

        The minimum investment amount required/permitted for the model  # noqa: E501

        :param investment_amount_lower: The investment_amount_lower of this PortfolioModel.  # noqa: E501
        :type: float
        """

        self._investment_amount_lower = investment_amount_lower

    @property
    def status(self):
        """Gets the status of this PortfolioModel.  # noqa: E501

        The status of model portfolio  # noqa: E501

        :return: The status of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PortfolioModel.

        The status of model portfolio  # noqa: E501

        :param status: The status of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this PortfolioModel.  # noqa: E501

        The version of portfolio  # noqa: E501

        :return: The version of this PortfolioModel.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PortfolioModel.

        The version of portfolio  # noqa: E501

        :param version: The version of this PortfolioModel.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def reference(self):
        """Gets the reference of this PortfolioModel.  # noqa: E501

        The additional reference the Adviser Pro tool uses for models alongside the model code  # noqa: E501

        :return: The reference of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PortfolioModel.

        The additional reference the Adviser Pro tool uses for models alongside the model code  # noqa: E501

        :param reference: The reference of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def is_locked(self):
        """Gets the is_locked of this PortfolioModel.  # noqa: E501

        Indicates either the model is editable or not for any user except of the owner  # noqa: E501

        :return: The is_locked of this PortfolioModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this PortfolioModel.

        Indicates either the model is editable or not for any user except of the owner  # noqa: E501

        :param is_locked: The is_locked of this PortfolioModel.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def asset_model(self):
        """Gets the asset_model of this PortfolioModel.  # noqa: E501

        The Asset Model associated with the portfolio model  # noqa: E501

        :return: The asset_model of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_model

    @asset_model.setter
    def asset_model(self, asset_model):
        """Sets the asset_model of this PortfolioModel.

        The Asset Model associated with the portfolio model  # noqa: E501

        :param asset_model: The asset_model of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._asset_model = asset_model

    @property
    def benchmark(self):
        """Gets the benchmark of this PortfolioModel.  # noqa: E501


        :return: The benchmark of this PortfolioModel.  # noqa: E501
        :rtype: BenchmarkRef
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this PortfolioModel.


        :param benchmark: The benchmark of this PortfolioModel.  # noqa: E501
        :type: BenchmarkRef
        """

        self._benchmark = benchmark

    @property
    def is_latest_version(self):
        """Gets the is_latest_version of this PortfolioModel.  # noqa: E501

        Indicates whether this version of the model is last or not  # noqa: E501

        :return: The is_latest_version of this PortfolioModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest_version

    @is_latest_version.setter
    def is_latest_version(self, is_latest_version):
        """Sets the is_latest_version of this PortfolioModel.

        Indicates whether this version of the model is last or not  # noqa: E501

        :param is_latest_version: The is_latest_version of this PortfolioModel.  # noqa: E501
        :type: bool
        """

        self._is_latest_version = is_latest_version

    @property
    def description(self):
        """Gets the description of this PortfolioModel.  # noqa: E501

        The description of the portfolio model.  # noqa: E501

        :return: The description of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PortfolioModel.

        The description of the portfolio model.  # noqa: E501

        :param description: The description of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def risk_reference(self):
        """Gets the risk_reference of this PortfolioModel.  # noqa: E501

        The RiskReference associated with the portfolio model  # noqa: E501

        :return: The risk_reference of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._risk_reference

    @risk_reference.setter
    def risk_reference(self, risk_reference):
        """Sets the risk_reference of this PortfolioModel.

        The RiskReference associated with the portfolio model  # noqa: E501

        :param risk_reference: The risk_reference of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._risk_reference = risk_reference

    @property
    def investment_objective(self):
        """Gets the investment_objective of this PortfolioModel.  # noqa: E501

        Investement Objective Attribute  # noqa: E501

        :return: The investment_objective of this PortfolioModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._investment_objective

    @investment_objective.setter
    def investment_objective(self, investment_objective):
        """Sets the investment_objective of this PortfolioModel.

        Investement Objective Attribute  # noqa: E501

        :param investment_objective: The investment_objective of this PortfolioModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Income", "Growth", "GrowthAndIncome"]  # noqa: E501
        if not set(investment_objective).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `investment_objective` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(investment_objective) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._investment_objective = investment_objective

    @property
    def investment_management_style(self):
        """Gets the investment_management_style of this PortfolioModel.  # noqa: E501

        Investment Management Style Attribute  # noqa: E501

        :return: The investment_management_style of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._investment_management_style

    @investment_management_style.setter
    def investment_management_style(self, investment_management_style):
        """Sets the investment_management_style of this PortfolioModel.

        Investment Management Style Attribute  # noqa: E501

        :param investment_management_style: The investment_management_style of this PortfolioModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Passive"]  # noqa: E501
        if investment_management_style not in allowed_values:
            raise ValueError(
                "Invalid value for `investment_management_style` ({0}), must be one of {1}"  # noqa: E501
                .format(investment_management_style, allowed_values)
            )

        self._investment_management_style = investment_management_style

    @property
    def tax_qualified(self):
        """Gets the tax_qualified of this PortfolioModel.  # noqa: E501

        Tax Qualified Attribute  # noqa: E501

        :return: The tax_qualified of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_qualified

    @tax_qualified.setter
    def tax_qualified(self, tax_qualified):
        """Sets the tax_qualified of this PortfolioModel.

        Tax Qualified Attribute  # noqa: E501

        :param tax_qualified: The tax_qualified of this PortfolioModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TaxQualified", "NonTaxQualified"]  # noqa: E501
        if tax_qualified not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_qualified` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_qualified, allowed_values)
            )

        self._tax_qualified = tax_qualified

    @property
    def esg(self):
        """Gets the esg of this PortfolioModel.  # noqa: E501

        Esg Attribute  # noqa: E501

        :return: The esg of this PortfolioModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._esg

    @esg.setter
    def esg(self, esg):
        """Sets the esg of this PortfolioModel.

        Esg Attribute  # noqa: E501

        :param esg: The esg of this PortfolioModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Environmental", "Social", "Governance"]  # noqa: E501
        if not set(esg).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `esg` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(esg) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._esg = esg

    @property
    def is_externally_managed(self):
        """Gets the is_externally_managed of this PortfolioModel.  # noqa: E501

        Indicating whether this instance is externally managed.  # noqa: E501

        :return: The is_externally_managed of this PortfolioModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_externally_managed

    @is_externally_managed.setter
    def is_externally_managed(self, is_externally_managed):
        """Sets the is_externally_managed of this PortfolioModel.

        Indicating whether this instance is externally managed.  # noqa: E501

        :param is_externally_managed: The is_externally_managed of this PortfolioModel.  # noqa: E501
        :type: bool
        """

        self._is_externally_managed = is_externally_managed

    @property
    def is_imps(self):
        """Gets the is_imps of this PortfolioModel.  # noqa: E501

        Indicating whether this instance is imps.  # noqa: E501

        :return: The is_imps of this PortfolioModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_imps

    @is_imps.setter
    def is_imps(self, is_imps):
        """Sets the is_imps of this PortfolioModel.

        Indicating whether this instance is imps.  # noqa: E501

        :param is_imps: The is_imps of this PortfolioModel.  # noqa: E501
        :type: bool
        """

        self._is_imps = is_imps

    @property
    def model_risk_profile(self):
        """Gets the model_risk_profile of this PortfolioModel.  # noqa: E501


        :return: The model_risk_profile of this PortfolioModel.  # noqa: E501
        :rtype: ModelRiskProfile
        """
        return self._model_risk_profile

    @model_risk_profile.setter
    def model_risk_profile(self, model_risk_profile):
        """Sets the model_risk_profile of this PortfolioModel.


        :param model_risk_profile: The model_risk_profile of this PortfolioModel.  # noqa: E501
        :type: ModelRiskProfile
        """

        self._model_risk_profile = model_risk_profile

    @property
    def provider(self):
        """Gets the provider of this PortfolioModel.  # noqa: E501

        The portfolio model provider.  # noqa: E501

        :return: The provider of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PortfolioModel.

        The portfolio model provider.  # noqa: E501

        :param provider: The provider of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
