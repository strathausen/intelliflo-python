# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyDetailsValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'type_detail': 'str',
        'tenure_type': 'str',
        'leasehold_ends_on': 'datetime',
        'status': 'str',
        'construction': 'str',
        'construction_notes': 'str',
        'roof_construction': 'str',
        'number_of_bedrooms': 'int',
        'year_built': 'int',
        'is_ex_local_authority': 'bool',
        'number_of_outbuildings': 'int',
        'new_build': 'PropertyDetailsNewBuildValue'
    }

    attribute_map = {
        'type': 'type',
        'type_detail': 'typeDetail',
        'tenure_type': 'tenureType',
        'leasehold_ends_on': 'leaseholdEndsOn',
        'status': 'status',
        'construction': 'construction',
        'construction_notes': 'constructionNotes',
        'roof_construction': 'roofConstruction',
        'number_of_bedrooms': 'numberOfBedrooms',
        'year_built': 'yearBuilt',
        'is_ex_local_authority': 'isExLocalAuthority',
        'number_of_outbuildings': 'numberOfOutbuildings',
        'new_build': 'newBuild'
    }

    def __init__(self, type='null', type_detail='null', tenure_type='null', leasehold_ends_on=None, status='null', construction='null', construction_notes='null', roof_construction='null', number_of_bedrooms=None, year_built=None, is_ex_local_authority=False, number_of_outbuildings=None, new_build=None):  # noqa: E501
        """PropertyDetailsValue - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._type_detail = None
        self._tenure_type = None
        self._leasehold_ends_on = None
        self._status = None
        self._construction = None
        self._construction_notes = None
        self._roof_construction = None
        self._number_of_bedrooms = None
        self._year_built = None
        self._is_ex_local_authority = None
        self._number_of_outbuildings = None
        self._new_build = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if type_detail is not None:
            self.type_detail = type_detail
        if tenure_type is not None:
            self.tenure_type = tenure_type
        if leasehold_ends_on is not None:
            self.leasehold_ends_on = leasehold_ends_on
        if status is not None:
            self.status = status
        if construction is not None:
            self.construction = construction
        if construction_notes is not None:
            self.construction_notes = construction_notes
        if roof_construction is not None:
            self.roof_construction = roof_construction
        if number_of_bedrooms is not None:
            self.number_of_bedrooms = number_of_bedrooms
        if year_built is not None:
            self.year_built = year_built
        if is_ex_local_authority is not None:
            self.is_ex_local_authority = is_ex_local_authority
        if number_of_outbuildings is not None:
            self.number_of_outbuildings = number_of_outbuildings
        if new_build is not None:
            self.new_build = new_build

    @property
    def type(self):
        """Gets the type of this PropertyDetailsValue.  # noqa: E501

        Description of property type  # noqa: E501

        :return: The type of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PropertyDetailsValue.

        Description of property type  # noqa: E501

        :param type: The type of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Detached", "SemiDetached", "Terraced", "DetachedBungalow", "SemiDetachedBungalow", "TerracedBungalow", "PurposeBuiltFlat", "ConvertedFlat", "PurposeBuiltMaisonette", "ConvertedMaisonette", "OverAShop", "StudioFlat", "FlatOverFourStoreys", "ListedBuilding", "House", "DuplexSemiDetached", "UnitApartment", "Villa", "Townhouse", "Terrace", "Over55s", "GrannyFlat", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def type_detail(self):
        """Gets the type_detail of this PropertyDetailsValue.  # noqa: E501

        Additional property details  # noqa: E501

        :return: The type_detail of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._type_detail

    @type_detail.setter
    def type_detail(self, type_detail):
        """Sets the type_detail of this PropertyDetailsValue.

        Additional property details  # noqa: E501

        :param type_detail: The type_detail of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Conversion", "EndTerrace", "FlatOverFourStoreys", "ListedBuilding", "MidTerrace", "OverAShop", "PurposeBuilt"]  # noqa: E501
        if type_detail not in allowed_values:
            raise ValueError(
                "Invalid value for `type_detail` ({0}), must be one of {1}"  # noqa: E501
                .format(type_detail, allowed_values)
            )

        self._type_detail = type_detail

    @property
    def tenure_type(self):
        """Gets the tenure_type of this PropertyDetailsValue.  # noqa: E501

        The conditions under which the property is held or occupied (ie rented or owned).  # noqa: E501

        :return: The tenure_type of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._tenure_type

    @tenure_type.setter
    def tenure_type(self, tenure_type):
        """Sets the tenure_type of this PropertyDetailsValue.

        The conditions under which the property is held or occupied (ie rented or owned).  # noqa: E501

        :param tenure_type: The tenure_type of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Freehold", "Commonhold", "Feuhold", "FlyingFreehold", "Leasehold"]  # noqa: E501
        if tenure_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tenure_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tenure_type, allowed_values)
            )

        self._tenure_type = tenure_type

    @property
    def leasehold_ends_on(self):
        """Gets the leasehold_ends_on of this PropertyDetailsValue.  # noqa: E501

        Leasehold End Date, not null if PropertyTenureTypeValue is Leasehold  # noqa: E501

        :return: The leasehold_ends_on of this PropertyDetailsValue.  # noqa: E501
        :rtype: datetime
        """
        return self._leasehold_ends_on

    @leasehold_ends_on.setter
    def leasehold_ends_on(self, leasehold_ends_on):
        """Sets the leasehold_ends_on of this PropertyDetailsValue.

        Leasehold End Date, not null if PropertyTenureTypeValue is Leasehold  # noqa: E501

        :param leasehold_ends_on: The leasehold_ends_on of this PropertyDetailsValue.  # noqa: E501
        :type: datetime
        """

        self._leasehold_ends_on = leasehold_ends_on

    @property
    def status(self):
        """Gets the status of this PropertyDetailsValue.  # noqa: E501

        Property status  # noqa: E501

        :return: The status of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PropertyDetailsValue.

        Property status  # noqa: E501

        :param status: The status of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Residential", "RightToBuy", "BuyToLet", "LetToBuy", "Lifetime", "HolidayHome", "DependantRelative", "Tenant", "InvestmentProperty", "Other"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def construction(self):
        """Gets the construction of this PropertyDetailsValue.  # noqa: E501

        Construction definition  # noqa: E501

        :return: The construction of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._construction

    @construction.setter
    def construction(self, construction):
        """Sets the construction of this PropertyDetailsValue.

        Construction definition  # noqa: E501

        :param construction: The construction of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["BrickOrTile", "TimberFrame", "Concrete", "Stone", "Other"]  # noqa: E501
        if construction not in allowed_values:
            raise ValueError(
                "Invalid value for `construction` ({0}), must be one of {1}"  # noqa: E501
                .format(construction, allowed_values)
            )

        self._construction = construction

    @property
    def construction_notes(self):
        """Gets the construction_notes of this PropertyDetailsValue.  # noqa: E501

        Construction notes  # noqa: E501

        :return: The construction_notes of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._construction_notes

    @construction_notes.setter
    def construction_notes(self, construction_notes):
        """Sets the construction_notes of this PropertyDetailsValue.

        Construction notes  # noqa: E501

        :param construction_notes: The construction_notes of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """

        self._construction_notes = construction_notes

    @property
    def roof_construction(self):
        """Gets the roof_construction of this PropertyDetailsValue.  # noqa: E501

        Roof construction definition  # noqa: E501

        :return: The roof_construction of this PropertyDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._roof_construction

    @roof_construction.setter
    def roof_construction(self, roof_construction):
        """Sets the roof_construction of this PropertyDetailsValue.

        Roof construction definition  # noqa: E501

        :param roof_construction: The roof_construction of this PropertyDetailsValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Slate", "Asphalt", "Concrete", "Flat", "Metal", "Thatched", "Tile", "Other"]  # noqa: E501
        if roof_construction not in allowed_values:
            raise ValueError(
                "Invalid value for `roof_construction` ({0}), must be one of {1}"  # noqa: E501
                .format(roof_construction, allowed_values)
            )

        self._roof_construction = roof_construction

    @property
    def number_of_bedrooms(self):
        """Gets the number_of_bedrooms of this PropertyDetailsValue.  # noqa: E501

        Number of bedrooms  # noqa: E501

        :return: The number_of_bedrooms of this PropertyDetailsValue.  # noqa: E501
        :rtype: int
        """
        return self._number_of_bedrooms

    @number_of_bedrooms.setter
    def number_of_bedrooms(self, number_of_bedrooms):
        """Sets the number_of_bedrooms of this PropertyDetailsValue.

        Number of bedrooms  # noqa: E501

        :param number_of_bedrooms: The number_of_bedrooms of this PropertyDetailsValue.  # noqa: E501
        :type: int
        """

        self._number_of_bedrooms = number_of_bedrooms

    @property
    def year_built(self):
        """Gets the year_built of this PropertyDetailsValue.  # noqa: E501

        The year was the property was built.  # noqa: E501

        :return: The year_built of this PropertyDetailsValue.  # noqa: E501
        :rtype: int
        """
        return self._year_built

    @year_built.setter
    def year_built(self, year_built):
        """Sets the year_built of this PropertyDetailsValue.

        The year was the property was built.  # noqa: E501

        :param year_built: The year_built of this PropertyDetailsValue.  # noqa: E501
        :type: int
        """

        self._year_built = year_built

    @property
    def is_ex_local_authority(self):
        """Gets the is_ex_local_authority of this PropertyDetailsValue.  # noqa: E501

        Indicates if a property was bought from a council at a discounted rate.  # noqa: E501

        :return: The is_ex_local_authority of this PropertyDetailsValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_ex_local_authority

    @is_ex_local_authority.setter
    def is_ex_local_authority(self, is_ex_local_authority):
        """Sets the is_ex_local_authority of this PropertyDetailsValue.

        Indicates if a property was bought from a council at a discounted rate.  # noqa: E501

        :param is_ex_local_authority: The is_ex_local_authority of this PropertyDetailsValue.  # noqa: E501
        :type: bool
        """

        self._is_ex_local_authority = is_ex_local_authority

    @property
    def number_of_outbuildings(self):
        """Gets the number_of_outbuildings of this PropertyDetailsValue.  # noqa: E501

        Number of outbuildings  # noqa: E501

        :return: The number_of_outbuildings of this PropertyDetailsValue.  # noqa: E501
        :rtype: int
        """
        return self._number_of_outbuildings

    @number_of_outbuildings.setter
    def number_of_outbuildings(self, number_of_outbuildings):
        """Sets the number_of_outbuildings of this PropertyDetailsValue.

        Number of outbuildings  # noqa: E501

        :param number_of_outbuildings: The number_of_outbuildings of this PropertyDetailsValue.  # noqa: E501
        :type: int
        """

        self._number_of_outbuildings = number_of_outbuildings

    @property
    def new_build(self):
        """Gets the new_build of this PropertyDetailsValue.  # noqa: E501


        :return: The new_build of this PropertyDetailsValue.  # noqa: E501
        :rtype: PropertyDetailsNewBuildValue
        """
        return self._new_build

    @new_build.setter
    def new_build(self, new_build):
        """Sets the new_build of this PropertyDetailsValue.


        :param new_build: The new_build of this PropertyDetailsValue.  # noqa: E501
        :type: PropertyDetailsNewBuildValue
        """

        self._new_build = new_build

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyDetailsValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyDetailsValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
