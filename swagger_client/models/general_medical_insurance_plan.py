# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.protection_plan import ProtectionPlan  # noqa: F401,E501

class GeneralMedicalInsurancePlan(ProtectionPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'str',
        'cover_type': 'str',
        'cover_options': 'list[str]',
        'cover_area': 'str',
        'is_cover_note_issued': 'bool',
        'excess': 'CurrencyValue',
        'sum_insured': 'CurrencyValue',
        'buildings': 'BuildingContentsInsuranceValue',
        'contents': 'BuildingContentsInsuranceValue'
    }
    if hasattr(ProtectionPlan, "swagger_types"):
        swagger_types.update(ProtectionPlan.swagger_types)

    attribute_map = {
        'term': 'term',
        'cover_type': 'coverType',
        'cover_options': 'coverOptions',
        'cover_area': 'coverArea',
        'is_cover_note_issued': 'isCoverNoteIssued',
        'excess': 'excess',
        'sum_insured': 'sumInsured',
        'buildings': 'buildings',
        'contents': 'contents'
    }
    if hasattr(ProtectionPlan, "attribute_map"):
        attribute_map.update(ProtectionPlan.attribute_map)

    def __init__(self, term='null', cover_type='null', cover_options=None, cover_area='null', is_cover_note_issued=False, excess=None, sum_insured=None, buildings=None, contents=None, *args, **kwargs):  # noqa: E501
        """GeneralMedicalInsurancePlan - a model defined in Swagger"""  # noqa: E501
        self._term = None
        self._cover_type = None
        self._cover_options = None
        self._cover_area = None
        self._is_cover_note_issued = None
        self._excess = None
        self._sum_insured = None
        self._buildings = None
        self._contents = None
        self.discriminator = None
        if term is not None:
            self.term = term
        if cover_type is not None:
            self.cover_type = cover_type
        if cover_options is not None:
            self.cover_options = cover_options
        if cover_area is not None:
            self.cover_area = cover_area
        if is_cover_note_issued is not None:
            self.is_cover_note_issued = is_cover_note_issued
        if excess is not None:
            self.excess = excess
        if sum_insured is not None:
            self.sum_insured = sum_insured
        if buildings is not None:
            self.buildings = buildings
        if contents is not None:
            self.contents = contents
        ProtectionPlan.__init__(self, *args, **kwargs)

    @property
    def term(self):
        """Gets the term of this GeneralMedicalInsurancePlan.  # noqa: E501

        Policy duration in years (ISO-8601: P[n][Y])  # noqa: E501

        :return: The term of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this GeneralMedicalInsurancePlan.

        Policy duration in years (ISO-8601: P[n][Y])  # noqa: E501

        :param term: The term of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def cover_type(self):
        """Gets the cover_type of this GeneralMedicalInsurancePlan.  # noqa: E501

        Insurance cover type.  # noqa: E501

        :return: The cover_type of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: str
        """
        return self._cover_type

    @cover_type.setter
    def cover_type(self, cover_type):
        """Sets the cover_type of this GeneralMedicalInsurancePlan.

        Insurance cover type.  # noqa: E501

        :param cover_type: The cover_type of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotApplicable", "Comprehensive", "ThirdPartyFireTheft", "ThirdParty"]  # noqa: E501
        if cover_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cover_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cover_type, allowed_values)
            )

        self._cover_type = cover_type

    @property
    def cover_options(self):
        """Gets the cover_options of this GeneralMedicalInsurancePlan.  # noqa: E501

        List of cover options.  Valid options are: None, AccidentalDamage, HomeEmergency, LegalFees,  PersonalPossessions, Family, WaterDangerousSports.  # noqa: E501

        :return: The cover_options of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._cover_options

    @cover_options.setter
    def cover_options(self, cover_options):
        """Sets the cover_options of this GeneralMedicalInsurancePlan.

        List of cover options.  Valid options are: None, AccidentalDamage, HomeEmergency, LegalFees,  PersonalPossessions, Family, WaterDangerousSports.  # noqa: E501

        :param cover_options: The cover_options of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["None", "AccidentalDamage", "HomeEmergency", "LegalFees", "PersonalPossessions", "Family", "WaterDangerousSports"]  # noqa: E501
        if not set(cover_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `cover_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(cover_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._cover_options = cover_options

    @property
    def cover_area(self):
        """Gets the cover_area of this GeneralMedicalInsurancePlan.  # noqa: E501

        Geographic area over which the policy is valid.  # noqa: E501

        :return: The cover_area of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: str
        """
        return self._cover_area

    @cover_area.setter
    def cover_area(self, cover_area):
        """Sets the cover_area of this GeneralMedicalInsurancePlan.

        Geographic area over which the policy is valid.  # noqa: E501

        :param cover_area: The cover_area of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotApplicable", "UkIrelandChannelIslands", "Europe", "AustraliaAndNewZealand", "WorldwideExcludingUsAndCaribbean", "Worldwide"]  # noqa: E501
        if cover_area not in allowed_values:
            raise ValueError(
                "Invalid value for `cover_area` ({0}), must be one of {1}"  # noqa: E501
                .format(cover_area, allowed_values)
            )

        self._cover_area = cover_area

    @property
    def is_cover_note_issued(self):
        """Gets the is_cover_note_issued of this GeneralMedicalInsurancePlan.  # noqa: E501

        Policy cover notes issued flag.  # noqa: E501

        :return: The is_cover_note_issued of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_cover_note_issued

    @is_cover_note_issued.setter
    def is_cover_note_issued(self, is_cover_note_issued):
        """Sets the is_cover_note_issued of this GeneralMedicalInsurancePlan.

        Policy cover notes issued flag.  # noqa: E501

        :param is_cover_note_issued: The is_cover_note_issued of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: bool
        """

        self._is_cover_note_issued = is_cover_note_issued

    @property
    def excess(self):
        """Gets the excess of this GeneralMedicalInsurancePlan.  # noqa: E501


        :return: The excess of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._excess

    @excess.setter
    def excess(self, excess):
        """Sets the excess of this GeneralMedicalInsurancePlan.


        :param excess: The excess of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._excess = excess

    @property
    def sum_insured(self):
        """Gets the sum_insured of this GeneralMedicalInsurancePlan.  # noqa: E501


        :return: The sum_insured of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._sum_insured

    @sum_insured.setter
    def sum_insured(self, sum_insured):
        """Sets the sum_insured of this GeneralMedicalInsurancePlan.


        :param sum_insured: The sum_insured of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._sum_insured = sum_insured

    @property
    def buildings(self):
        """Gets the buildings of this GeneralMedicalInsurancePlan.  # noqa: E501


        :return: The buildings of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: BuildingContentsInsuranceValue
        """
        return self._buildings

    @buildings.setter
    def buildings(self, buildings):
        """Sets the buildings of this GeneralMedicalInsurancePlan.


        :param buildings: The buildings of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: BuildingContentsInsuranceValue
        """

        self._buildings = buildings

    @property
    def contents(self):
        """Gets the contents of this GeneralMedicalInsurancePlan.  # noqa: E501


        :return: The contents of this GeneralMedicalInsurancePlan.  # noqa: E501
        :rtype: BuildingContentsInsuranceValue
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this GeneralMedicalInsurancePlan.


        :param contents: The contents of this GeneralMedicalInsurancePlan.  # noqa: E501
        :type: BuildingContentsInsuranceValue
        """

        self._contents = contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralMedicalInsurancePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralMedicalInsurancePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
