# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dependant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'date_of_birth': 'datetime',
        'is_living_with': 'bool',
        'is_financially_dependant': 'bool',
        'financial_dependency_ends_on': 'datetime',
        'relationship_type': 'str',
        'notes': 'str',
        'clients': 'list[ClientRef]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'date_of_birth': 'dateOfBirth',
        'is_living_with': 'isLivingWith',
        'is_financially_dependant': 'isFinanciallyDependant',
        'financial_dependency_ends_on': 'financialDependencyEndsOn',
        'relationship_type': 'relationshipType',
        'notes': 'notes',
        'clients': 'clients'
    }

    def __init__(self, id=None, href=None, name=None, date_of_birth=None, is_living_with=False, is_financially_dependant=None, financial_dependency_ends_on=None, relationship_type=None, notes='null', clients=None):  # noqa: E501
        """Dependant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._date_of_birth = None
        self._is_living_with = None
        self._is_financially_dependant = None
        self._financial_dependency_ends_on = None
        self._relationship_type = None
        self._notes = None
        self._clients = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if is_living_with is not None:
            self.is_living_with = is_living_with
        if is_financially_dependant is not None:
            self.is_financially_dependant = is_financially_dependant
        if financial_dependency_ends_on is not None:
            self.financial_dependency_ends_on = financial_dependency_ends_on
        self.relationship_type = relationship_type
        if notes is not None:
            self.notes = notes
        if clients is not None:
            self.clients = clients

    @property
    def id(self):
        """Gets the id of this Dependant.  # noqa: E501

        Dependant identifier  # noqa: E501

        :return: The id of this Dependant.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dependant.

        Dependant identifier  # noqa: E501

        :param id: The id of this Dependant.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Dependant.  # noqa: E501

        Hypermedia link  # noqa: E501

        :return: The href of this Dependant.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Dependant.

        Hypermedia link  # noqa: E501

        :param href: The href of this Dependant.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this Dependant.  # noqa: E501

        Dependant name  # noqa: E501

        :return: The name of this Dependant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dependant.

        Dependant name  # noqa: E501

        :param name: The name of this Dependant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Dependant.  # noqa: E501

        Date of birth - min value: 01/01/1900 - max value: Current Date  # noqa: E501

        :return: The date_of_birth of this Dependant.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Dependant.

        Date of birth - min value: 01/01/1900 - max value: Current Date  # noqa: E501

        :param date_of_birth: The date_of_birth of this Dependant.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def is_living_with(self):
        """Gets the is_living_with of this Dependant.  # noqa: E501

        Specifies whether dependant is living with client(s)  # noqa: E501

        :return: The is_living_with of this Dependant.  # noqa: E501
        :rtype: bool
        """
        return self._is_living_with

    @is_living_with.setter
    def is_living_with(self, is_living_with):
        """Sets the is_living_with of this Dependant.

        Specifies whether dependant is living with client(s)  # noqa: E501

        :param is_living_with: The is_living_with of this Dependant.  # noqa: E501
        :type: bool
        """

        self._is_living_with = is_living_with

    @property
    def is_financially_dependant(self):
        """Gets the is_financially_dependant of this Dependant.  # noqa: E501

        Specifies whether dependant is financially dependant  # noqa: E501

        :return: The is_financially_dependant of this Dependant.  # noqa: E501
        :rtype: bool
        """
        return self._is_financially_dependant

    @is_financially_dependant.setter
    def is_financially_dependant(self, is_financially_dependant):
        """Sets the is_financially_dependant of this Dependant.

        Specifies whether dependant is financially dependant  # noqa: E501

        :param is_financially_dependant: The is_financially_dependant of this Dependant.  # noqa: E501
        :type: bool
        """

        self._is_financially_dependant = is_financially_dependant

    @property
    def financial_dependency_ends_on(self):
        """Gets the financial_dependency_ends_on of this Dependant.  # noqa: E501

        Financial dependency end date - min value: 01/01/1900 - max value: 31/12/2150  # noqa: E501

        :return: The financial_dependency_ends_on of this Dependant.  # noqa: E501
        :rtype: datetime
        """
        return self._financial_dependency_ends_on

    @financial_dependency_ends_on.setter
    def financial_dependency_ends_on(self, financial_dependency_ends_on):
        """Sets the financial_dependency_ends_on of this Dependant.

        Financial dependency end date - min value: 01/01/1900 - max value: 31/12/2150  # noqa: E501

        :param financial_dependency_ends_on: The financial_dependency_ends_on of this Dependant.  # noqa: E501
        :type: datetime
        """

        self._financial_dependency_ends_on = financial_dependency_ends_on

    @property
    def relationship_type(self):
        """Gets the relationship_type of this Dependant.  # noqa: E501

        Relationship type with client(s)  # noqa: E501

        :return: The relationship_type of this Dependant.  # noqa: E501
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this Dependant.

        Relationship type with client(s)  # noqa: E501

        :param relationship_type: The relationship_type of this Dependant.  # noqa: E501
        :type: str
        """
        if relationship_type is None:
            raise ValueError("Invalid value for `relationship_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Child", "Daughter", "Grandchild", "Grandparent", "Parent", "Son", "Spouse", "StepChild", "Partner", "CivilPartner", "StepParent", "Other"]  # noqa: E501
        if relationship_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_type` ({0}), must be one of {1}"  # noqa: E501
                .format(relationship_type, allowed_values)
            )

        self._relationship_type = relationship_type

    @property
    def notes(self):
        """Gets the notes of this Dependant.  # noqa: E501

        Notes  # noqa: E501

        :return: The notes of this Dependant.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Dependant.

        Notes  # noqa: E501

        :param notes: The notes of this Dependant.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def clients(self):
        """Gets the clients of this Dependant.  # noqa: E501

        List of related clients  # noqa: E501

        :return: The clients of this Dependant.  # noqa: E501
        :rtype: list[ClientRef]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this Dependant.

        List of related clients  # noqa: E501

        :param clients: The clients of this Dependant.  # noqa: E501
        :type: list[ClientRef]
        """

        self._clients = clients

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dependant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dependant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
