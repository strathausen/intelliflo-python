# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'fca_number': 'str',
        'contacts': 'TenantContactsValue',
        'address': 'AddressDetailsValue',
        'max_users_with_login_access': 'int'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'fca_number': 'fcaNumber',
        'contacts': 'contacts',
        'address': 'address',
        'max_users_with_login_access': 'maxUsersWithLoginAccess'
    }

    def __init__(self, id=None, href=None, name=None, fca_number=None, contacts=None, address=None, max_users_with_login_access=None):  # noqa: E501
        """Tenant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._fca_number = None
        self._contacts = None
        self._address = None
        self._max_users_with_login_access = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        self.fca_number = fca_number
        self.contacts = contacts
        self.address = address
        self.max_users_with_login_access = max_users_with_login_access

    @property
    def id(self):
        """Gets the id of this Tenant.  # noqa: E501


        :return: The id of this Tenant.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tenant.


        :param id: The id of this Tenant.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Tenant.  # noqa: E501

        Href  # noqa: E501

        :return: The href of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Tenant.

        Href  # noqa: E501

        :param href: The href of this Tenant.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this Tenant.  # noqa: E501

        Tenant name  # noqa: E501

        :return: The name of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenant.

        Tenant name  # noqa: E501

        :param name: The name of this Tenant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def fca_number(self):
        """Gets the fca_number of this Tenant.  # noqa: E501

        Authorisation number from the local Financial Regulatory Body.  # noqa: E501

        :return: The fca_number of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._fca_number

    @fca_number.setter
    def fca_number(self, fca_number):
        """Sets the fca_number of this Tenant.

        Authorisation number from the local Financial Regulatory Body.  # noqa: E501

        :param fca_number: The fca_number of this Tenant.  # noqa: E501
        :type: str
        """
        if fca_number is None:
            raise ValueError("Invalid value for `fca_number`, must not be `None`")  # noqa: E501

        self._fca_number = fca_number

    @property
    def contacts(self):
        """Gets the contacts of this Tenant.  # noqa: E501


        :return: The contacts of this Tenant.  # noqa: E501
        :rtype: TenantContactsValue
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Tenant.


        :param contacts: The contacts of this Tenant.  # noqa: E501
        :type: TenantContactsValue
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")  # noqa: E501

        self._contacts = contacts

    @property
    def address(self):
        """Gets the address of this Tenant.  # noqa: E501


        :return: The address of this Tenant.  # noqa: E501
        :rtype: AddressDetailsValue
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Tenant.


        :param address: The address of this Tenant.  # noqa: E501
        :type: AddressDetailsValue
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def max_users_with_login_access(self):
        """Gets the max_users_with_login_access of this Tenant.  # noqa: E501

        Max users with login access.  # noqa: E501

        :return: The max_users_with_login_access of this Tenant.  # noqa: E501
        :rtype: int
        """
        return self._max_users_with_login_access

    @max_users_with_login_access.setter
    def max_users_with_login_access(self, max_users_with_login_access):
        """Sets the max_users_with_login_access of this Tenant.

        Max users with login access.  # noqa: E501

        :param max_users_with_login_access: The max_users_with_login_access of this Tenant.  # noqa: E501
        :type: int
        """
        if max_users_with_login_access is None:
            raise ValueError("Invalid value for `max_users_with_login_access`, must not be `None`")  # noqa: E501

        self._max_users_with_login_access = max_users_with_login_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
