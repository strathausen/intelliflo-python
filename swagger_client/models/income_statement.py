# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncomeStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'reference': 'str',
        'statement_date': 'datetime',
        'is_matched': 'bool',
        'amount': 'CurrencyValue',
        'provider': 'MatchProviderRef',
        'group': 'GroupRef',
        'created_at': 'datetime',
        'created_app': 'NamedAppRef',
        'created_by': 'NamedUserRef',
        'requires_approval': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'reference': 'reference',
        'statement_date': 'statementDate',
        'is_matched': 'isMatched',
        'amount': 'amount',
        'provider': 'provider',
        'group': 'group',
        'created_at': 'createdAt',
        'created_app': 'createdApp',
        'created_by': 'createdBy',
        'requires_approval': 'requiresApproval'
    }

    def __init__(self, id=None, href=None, reference=None, statement_date=None, is_matched=None, amount=None, provider=None, group=None, created_at=None, created_app=None, created_by=None, requires_approval=False):  # noqa: E501
        """IncomeStatement - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._reference = None
        self._statement_date = None
        self._is_matched = None
        self._amount = None
        self._provider = None
        self._group = None
        self._created_at = None
        self._created_app = None
        self._created_by = None
        self._requires_approval = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if reference is not None:
            self.reference = reference
        self.statement_date = statement_date
        if is_matched is not None:
            self.is_matched = is_matched
        if amount is not None:
            self.amount = amount
        self.provider = provider
        self.group = group
        if created_at is not None:
            self.created_at = created_at
        if created_app is not None:
            self.created_app = created_app
        if created_by is not None:
            self.created_by = created_by
        if requires_approval is not None:
            self.requires_approval = requires_approval

    @property
    def id(self):
        """Gets the id of this IncomeStatement.  # noqa: E501

        Income statement identifier.  # noqa: E501

        :return: The id of this IncomeStatement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncomeStatement.

        Income statement identifier.  # noqa: E501

        :param id: The id of this IncomeStatement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this IncomeStatement.  # noqa: E501

        Income statement reference.  # noqa: E501

        :return: The href of this IncomeStatement.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IncomeStatement.

        Income statement reference.  # noqa: E501

        :param href: The href of this IncomeStatement.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def reference(self):
        """Gets the reference of this IncomeStatement.  # noqa: E501

        Income statement reference. EDI Number  # noqa: E501

        :return: The reference of this IncomeStatement.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this IncomeStatement.

        Income statement reference. EDI Number  # noqa: E501

        :param reference: The reference of this IncomeStatement.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def statement_date(self):
        """Gets the statement_date of this IncomeStatement.  # noqa: E501

        The statement date.  # noqa: E501

        :return: The statement_date of this IncomeStatement.  # noqa: E501
        :rtype: datetime
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this IncomeStatement.

        The statement date.  # noqa: E501

        :param statement_date: The statement_date of this IncomeStatement.  # noqa: E501
        :type: datetime
        """
        if statement_date is None:
            raise ValueError("Invalid value for `statement_date`, must not be `None`")  # noqa: E501

        self._statement_date = statement_date

    @property
    def is_matched(self):
        """Gets the is_matched of this IncomeStatement.  # noqa: E501

        Indicates that the statement amount equals the sum of the statement item amounts.  # noqa: E501

        :return: The is_matched of this IncomeStatement.  # noqa: E501
        :rtype: bool
        """
        return self._is_matched

    @is_matched.setter
    def is_matched(self, is_matched):
        """Sets the is_matched of this IncomeStatement.

        Indicates that the statement amount equals the sum of the statement item amounts.  # noqa: E501

        :param is_matched: The is_matched of this IncomeStatement.  # noqa: E501
        :type: bool
        """

        self._is_matched = is_matched

    @property
    def amount(self):
        """Gets the amount of this IncomeStatement.  # noqa: E501


        :return: The amount of this IncomeStatement.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this IncomeStatement.


        :param amount: The amount of this IncomeStatement.  # noqa: E501
        :type: CurrencyValue
        """

        self._amount = amount

    @property
    def provider(self):
        """Gets the provider of this IncomeStatement.  # noqa: E501


        :return: The provider of this IncomeStatement.  # noqa: E501
        :rtype: MatchProviderRef
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this IncomeStatement.


        :param provider: The provider of this IncomeStatement.  # noqa: E501
        :type: MatchProviderRef
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def group(self):
        """Gets the group of this IncomeStatement.  # noqa: E501


        :return: The group of this IncomeStatement.  # noqa: E501
        :rtype: GroupRef
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this IncomeStatement.


        :param group: The group of this IncomeStatement.  # noqa: E501
        :type: GroupRef
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501

        self._group = group

    @property
    def created_at(self):
        """Gets the created_at of this IncomeStatement.  # noqa: E501

        UTC datetime for when the statement was created.  # noqa: E501

        :return: The created_at of this IncomeStatement.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IncomeStatement.

        UTC datetime for when the statement was created.  # noqa: E501

        :param created_at: The created_at of this IncomeStatement.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_app(self):
        """Gets the created_app of this IncomeStatement.  # noqa: E501


        :return: The created_app of this IncomeStatement.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_app

    @created_app.setter
    def created_app(self, created_app):
        """Sets the created_app of this IncomeStatement.


        :param created_app: The created_app of this IncomeStatement.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_app = created_app

    @property
    def created_by(self):
        """Gets the created_by of this IncomeStatement.  # noqa: E501


        :return: The created_by of this IncomeStatement.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this IncomeStatement.


        :param created_by: The created_by of this IncomeStatement.  # noqa: E501
        :type: NamedUserRef
        """

        self._created_by = created_by

    @property
    def requires_approval(self):
        """Gets the requires_approval of this IncomeStatement.  # noqa: E501

        Indicates if the statement will go into an import queue and needs explicit approval before being processed, defaults to false.  # noqa: E501

        :return: The requires_approval of this IncomeStatement.  # noqa: E501
        :rtype: bool
        """
        return self._requires_approval

    @requires_approval.setter
    def requires_approval(self, requires_approval):
        """Sets the requires_approval of this IncomeStatement.

        Indicates if the statement will go into an import queue and needs explicit approval before being processed, defaults to false.  # noqa: E501

        :param requires_approval: The requires_approval of this IncomeStatement.  # noqa: E501
        :type: bool
        """

        self._requires_approval = requires_approval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomeStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomeStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
