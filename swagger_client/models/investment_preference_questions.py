# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentPreferenceQuestions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ordinal': 'int',
        'is_included': 'bool',
        'name': 'str',
        'system_value': 'str',
        'allowed_answers': 'list[InvestmentPreferenceAllowedAnswers]',
        'objective_categories': 'list[NamedGoalCategoryRef]'
    }

    attribute_map = {
        'ordinal': 'ordinal',
        'is_included': 'isIncluded',
        'name': 'name',
        'system_value': 'systemValue',
        'allowed_answers': 'allowedAnswers',
        'objective_categories': 'objectiveCategories'
    }

    def __init__(self, ordinal=None, is_included=None, name=None, system_value=None, allowed_answers=None, objective_categories=None):  # noqa: E501
        """InvestmentPreferenceQuestions - a model defined in Swagger"""  # noqa: E501
        self._ordinal = None
        self._is_included = None
        self._name = None
        self._system_value = None
        self._allowed_answers = None
        self._objective_categories = None
        self.discriminator = None
        if ordinal is not None:
            self.ordinal = ordinal
        if is_included is not None:
            self.is_included = is_included
        self.name = name
        if system_value is not None:
            self.system_value = system_value
        if allowed_answers is not None:
            self.allowed_answers = allowed_answers
        if objective_categories is not None:
            self.objective_categories = objective_categories

    @property
    def ordinal(self):
        """Gets the ordinal of this InvestmentPreferenceQuestions.  # noqa: E501

        The position of a question in template's steps.  # noqa: E501

        :return: The ordinal of this InvestmentPreferenceQuestions.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this InvestmentPreferenceQuestions.

        The position of a question in template's steps.  # noqa: E501

        :param ordinal: The ordinal of this InvestmentPreferenceQuestions.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    @property
    def is_included(self):
        """Gets the is_included of this InvestmentPreferenceQuestions.  # noqa: E501

        isIncluded.  # noqa: E501

        :return: The is_included of this InvestmentPreferenceQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """Sets the is_included of this InvestmentPreferenceQuestions.

        isIncluded.  # noqa: E501

        :param is_included: The is_included of this InvestmentPreferenceQuestions.  # noqa: E501
        :type: bool
        """

        self._is_included = is_included

    @property
    def name(self):
        """Gets the name of this InvestmentPreferenceQuestions.  # noqa: E501

        Name for the Investment Preference Questions.  # noqa: E501

        :return: The name of this InvestmentPreferenceQuestions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvestmentPreferenceQuestions.

        Name for the Investment Preference Questions.  # noqa: E501

        :param name: The name of this InvestmentPreferenceQuestions.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def system_value(self):
        """Gets the system_value of this InvestmentPreferenceQuestions.  # noqa: E501

        SystemValue for Invesment Preference Questions.  # noqa: E501

        :return: The system_value of this InvestmentPreferenceQuestions.  # noqa: E501
        :rtype: str
        """
        return self._system_value

    @system_value.setter
    def system_value(self, system_value):
        """Sets the system_value of this InvestmentPreferenceQuestions.

        SystemValue for Invesment Preference Questions.  # noqa: E501

        :param system_value: The system_value of this InvestmentPreferenceQuestions.  # noqa: E501
        :type: str
        """

        self._system_value = system_value

    @property
    def allowed_answers(self):
        """Gets the allowed_answers of this InvestmentPreferenceQuestions.  # noqa: E501

        Investment Preference Allowed Answers.  # noqa: E501

        :return: The allowed_answers of this InvestmentPreferenceQuestions.  # noqa: E501
        :rtype: list[InvestmentPreferenceAllowedAnswers]
        """
        return self._allowed_answers

    @allowed_answers.setter
    def allowed_answers(self, allowed_answers):
        """Sets the allowed_answers of this InvestmentPreferenceQuestions.

        Investment Preference Allowed Answers.  # noqa: E501

        :param allowed_answers: The allowed_answers of this InvestmentPreferenceQuestions.  # noqa: E501
        :type: list[InvestmentPreferenceAllowedAnswers]
        """

        self._allowed_answers = allowed_answers

    @property
    def objective_categories(self):
        """Gets the objective_categories of this InvestmentPreferenceQuestions.  # noqa: E501

        Objective Categories  # noqa: E501

        :return: The objective_categories of this InvestmentPreferenceQuestions.  # noqa: E501
        :rtype: list[NamedGoalCategoryRef]
        """
        return self._objective_categories

    @objective_categories.setter
    def objective_categories(self, objective_categories):
        """Sets the objective_categories of this InvestmentPreferenceQuestions.

        Objective Categories  # noqa: E501

        :param objective_categories: The objective_categories of this InvestmentPreferenceQuestions.  # noqa: E501
        :type: list[NamedGoalCategoryRef]
        """

        self._objective_categories = objective_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentPreferenceQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentPreferenceQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
