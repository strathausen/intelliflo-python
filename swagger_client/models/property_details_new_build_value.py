# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyDetailsNewBuildValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_covered_by_nhbc_certificate': 'bool',
        'is_covered_by_other_certificates': 'bool',
        'other_certificate_notes': 'str',
        'name_of_builder': 'str'
    }

    attribute_map = {
        'is_covered_by_nhbc_certificate': 'isCoveredByNHBCCertificate',
        'is_covered_by_other_certificates': 'isCoveredByOtherCertificates',
        'other_certificate_notes': 'otherCertificateNotes',
        'name_of_builder': 'nameOfBuilder'
    }

    def __init__(self, is_covered_by_nhbc_certificate=False, is_covered_by_other_certificates=False, other_certificate_notes='null', name_of_builder='null'):  # noqa: E501
        """PropertyDetailsNewBuildValue - a model defined in Swagger"""  # noqa: E501
        self._is_covered_by_nhbc_certificate = None
        self._is_covered_by_other_certificates = None
        self._other_certificate_notes = None
        self._name_of_builder = None
        self.discriminator = None
        if is_covered_by_nhbc_certificate is not None:
            self.is_covered_by_nhbc_certificate = is_covered_by_nhbc_certificate
        if is_covered_by_other_certificates is not None:
            self.is_covered_by_other_certificates = is_covered_by_other_certificates
        if other_certificate_notes is not None:
            self.other_certificate_notes = other_certificate_notes
        if name_of_builder is not None:
            self.name_of_builder = name_of_builder

    @property
    def is_covered_by_nhbc_certificate(self):
        """Gets the is_covered_by_nhbc_certificate of this PropertyDetailsNewBuildValue.  # noqa: E501

        Indicates if a property is covered by a UK specific Insurance policy covering new builds.  # noqa: E501

        :return: The is_covered_by_nhbc_certificate of this PropertyDetailsNewBuildValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_covered_by_nhbc_certificate

    @is_covered_by_nhbc_certificate.setter
    def is_covered_by_nhbc_certificate(self, is_covered_by_nhbc_certificate):
        """Sets the is_covered_by_nhbc_certificate of this PropertyDetailsNewBuildValue.

        Indicates if a property is covered by a UK specific Insurance policy covering new builds.  # noqa: E501

        :param is_covered_by_nhbc_certificate: The is_covered_by_nhbc_certificate of this PropertyDetailsNewBuildValue.  # noqa: E501
        :type: bool
        """

        self._is_covered_by_nhbc_certificate = is_covered_by_nhbc_certificate

    @property
    def is_covered_by_other_certificates(self):
        """Gets the is_covered_by_other_certificates of this PropertyDetailsNewBuildValue.  # noqa: E501

        Is covered by other certificates  # noqa: E501

        :return: The is_covered_by_other_certificates of this PropertyDetailsNewBuildValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_covered_by_other_certificates

    @is_covered_by_other_certificates.setter
    def is_covered_by_other_certificates(self, is_covered_by_other_certificates):
        """Sets the is_covered_by_other_certificates of this PropertyDetailsNewBuildValue.

        Is covered by other certificates  # noqa: E501

        :param is_covered_by_other_certificates: The is_covered_by_other_certificates of this PropertyDetailsNewBuildValue.  # noqa: E501
        :type: bool
        """

        self._is_covered_by_other_certificates = is_covered_by_other_certificates

    @property
    def other_certificate_notes(self):
        """Gets the other_certificate_notes of this PropertyDetailsNewBuildValue.  # noqa: E501

        Other certificate notes. Only available if \"isCoveredByOtherCertificates\" is true  # noqa: E501

        :return: The other_certificate_notes of this PropertyDetailsNewBuildValue.  # noqa: E501
        :rtype: str
        """
        return self._other_certificate_notes

    @other_certificate_notes.setter
    def other_certificate_notes(self, other_certificate_notes):
        """Sets the other_certificate_notes of this PropertyDetailsNewBuildValue.

        Other certificate notes. Only available if \"isCoveredByOtherCertificates\" is true  # noqa: E501

        :param other_certificate_notes: The other_certificate_notes of this PropertyDetailsNewBuildValue.  # noqa: E501
        :type: str
        """

        self._other_certificate_notes = other_certificate_notes

    @property
    def name_of_builder(self):
        """Gets the name_of_builder of this PropertyDetailsNewBuildValue.  # noqa: E501

        Name of builder  # noqa: E501

        :return: The name_of_builder of this PropertyDetailsNewBuildValue.  # noqa: E501
        :rtype: str
        """
        return self._name_of_builder

    @name_of_builder.setter
    def name_of_builder(self, name_of_builder):
        """Sets the name_of_builder of this PropertyDetailsNewBuildValue.

        Name of builder  # noqa: E501

        :param name_of_builder: The name_of_builder of this PropertyDetailsNewBuildValue.  # noqa: E501
        :type: str
        """

        self._name_of_builder = name_of_builder

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyDetailsNewBuildValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyDetailsNewBuildValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
