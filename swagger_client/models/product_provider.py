# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'region_code': 'str',
        'dtcc_identifier': 'str',
        'is_archived': 'bool',
        'linkedproductprovider_href': 'str',
        'attributes': 'ProductProviderAttributes'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'region_code': 'regionCode',
        'dtcc_identifier': 'dtccIdentifier',
        'is_archived': 'isArchived',
        'linkedproductprovider_href': 'linkedproductprovider_href',
        'attributes': 'attributes'
    }

    def __init__(self, id=None, href=None, name=None, region_code=None, dtcc_identifier=None, is_archived=None, linkedproductprovider_href=None, attributes=None):  # noqa: E501
        """ProductProvider - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._region_code = None
        self._dtcc_identifier = None
        self._is_archived = None
        self._linkedproductprovider_href = None
        self._attributes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        self.region_code = region_code
        if dtcc_identifier is not None:
            self.dtcc_identifier = dtcc_identifier
        if is_archived is not None:
            self.is_archived = is_archived
        if linkedproductprovider_href is not None:
            self.linkedproductprovider_href = linkedproductprovider_href
        self.attributes = attributes

    @property
    def id(self):
        """Gets the id of this ProductProvider.  # noqa: E501

        Product provider identifier.  # noqa: E501

        :return: The id of this ProductProvider.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductProvider.

        Product provider identifier.  # noqa: E501

        :param id: The id of this ProductProvider.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ProductProvider.  # noqa: E501

        Resource identifier for this product provider.  # noqa: E501

        :return: The href of this ProductProvider.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProductProvider.

        Resource identifier for this product provider.  # noqa: E501

        :param href: The href of this ProductProvider.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this ProductProvider.  # noqa: E501

        The product provider name.  # noqa: E501

        :return: The name of this ProductProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductProvider.

        The product provider name.  # noqa: E501

        :param name: The name of this ProductProvider.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def region_code(self):
        """Gets the region_code of this ProductProvider.  # noqa: E501

        The product providers region code. Must be a valid ISO country code.  # noqa: E501

        :return: The region_code of this ProductProvider.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ProductProvider.

        The product providers region code. Must be a valid ISO country code.  # noqa: E501

        :param region_code: The region_code of this ProductProvider.  # noqa: E501
        :type: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")  # noqa: E501

        self._region_code = region_code

    @property
    def dtcc_identifier(self):
        """Gets the dtcc_identifier of this ProductProvider.  # noqa: E501

        DTCC's unique identifier for the product provider.  # noqa: E501

        :return: The dtcc_identifier of this ProductProvider.  # noqa: E501
        :rtype: str
        """
        return self._dtcc_identifier

    @dtcc_identifier.setter
    def dtcc_identifier(self, dtcc_identifier):
        """Sets the dtcc_identifier of this ProductProvider.

        DTCC's unique identifier for the product provider.  # noqa: E501

        :param dtcc_identifier: The dtcc_identifier of this ProductProvider.  # noqa: E501
        :type: str
        """

        self._dtcc_identifier = dtcc_identifier

    @property
    def is_archived(self):
        """Gets the is_archived of this ProductProvider.  # noqa: E501

        Indicates if the product provider is in active use.  # noqa: E501

        :return: The is_archived of this ProductProvider.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this ProductProvider.

        Indicates if the product provider is in active use.  # noqa: E501

        :param is_archived: The is_archived of this ProductProvider.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def linkedproductprovider_href(self):
        """Gets the linkedproductprovider_href of this ProductProvider.  # noqa: E501

        Href for a linked product provider.  # noqa: E501

        :return: The linkedproductprovider_href of this ProductProvider.  # noqa: E501
        :rtype: str
        """
        return self._linkedproductprovider_href

    @linkedproductprovider_href.setter
    def linkedproductprovider_href(self, linkedproductprovider_href):
        """Sets the linkedproductprovider_href of this ProductProvider.

        Href for a linked product provider.  # noqa: E501

        :param linkedproductprovider_href: The linkedproductprovider_href of this ProductProvider.  # noqa: E501
        :type: str
        """

        self._linkedproductprovider_href = linkedproductprovider_href

    @property
    def attributes(self):
        """Gets the attributes of this ProductProvider.  # noqa: E501


        :return: The attributes of this ProductProvider.  # noqa: E501
        :rtype: ProductProviderAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProductProvider.


        :param attributes: The attributes of this ProductProvider.  # noqa: E501
        :type: ProductProviderAttributes
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
