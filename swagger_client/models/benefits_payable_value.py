# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BenefitsPayableValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'benefit_frequency': 'str',
        'benefit_period': 'BenefitPeriodValue',
        'benefit_amount': 'CurrencyValue',
        'deferred_period': 'str',
        'qualification_period': 'QualificationPeriodValue',
        'split_benefit_frequency': 'str',
        'split_benefit_value': 'CurrencyValue',
        'split_deferred_period': 'str'
    }

    attribute_map = {
        'benefit_frequency': 'benefitFrequency',
        'benefit_period': 'benefitPeriod',
        'benefit_amount': 'benefitAmount',
        'deferred_period': 'deferredPeriod',
        'qualification_period': 'qualificationPeriod',
        'split_benefit_frequency': 'splitBenefitFrequency',
        'split_benefit_value': 'splitBenefitValue',
        'split_deferred_period': 'splitDeferredPeriod'
    }

    def __init__(self, benefit_frequency='Single', benefit_period=None, benefit_amount=None, deferred_period=None, qualification_period=None, split_benefit_frequency=None, split_benefit_value=None, split_deferred_period=None):  # noqa: E501
        """BenefitsPayableValue - a model defined in Swagger"""  # noqa: E501
        self._benefit_frequency = None
        self._benefit_period = None
        self._benefit_amount = None
        self._deferred_period = None
        self._qualification_period = None
        self._split_benefit_frequency = None
        self._split_benefit_value = None
        self._split_deferred_period = None
        self.discriminator = None
        if benefit_frequency is not None:
            self.benefit_frequency = benefit_frequency
        if benefit_period is not None:
            self.benefit_period = benefit_period
        if benefit_amount is not None:
            self.benefit_amount = benefit_amount
        if deferred_period is not None:
            self.deferred_period = deferred_period
        if qualification_period is not None:
            self.qualification_period = qualification_period
        if split_benefit_frequency is not None:
            self.split_benefit_frequency = split_benefit_frequency
        if split_benefit_value is not None:
            self.split_benefit_value = split_benefit_value
        if split_deferred_period is not None:
            self.split_deferred_period = split_deferred_period

    @property
    def benefit_frequency(self):
        """Gets the benefit_frequency of this BenefitsPayableValue.  # noqa: E501

        How often Benefit payments are made.  # noqa: E501

        :return: The benefit_frequency of this BenefitsPayableValue.  # noqa: E501
        :rtype: str
        """
        return self._benefit_frequency

    @benefit_frequency.setter
    def benefit_frequency(self, benefit_frequency):
        """Sets the benefit_frequency of this BenefitsPayableValue.

        How often Benefit payments are made.  # noqa: E501

        :param benefit_frequency: The benefit_frequency of this BenefitsPayableValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if benefit_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `benefit_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(benefit_frequency, allowed_values)
            )

        self._benefit_frequency = benefit_frequency

    @property
    def benefit_period(self):
        """Gets the benefit_period of this BenefitsPayableValue.  # noqa: E501


        :return: The benefit_period of this BenefitsPayableValue.  # noqa: E501
        :rtype: BenefitPeriodValue
        """
        return self._benefit_period

    @benefit_period.setter
    def benefit_period(self, benefit_period):
        """Sets the benefit_period of this BenefitsPayableValue.


        :param benefit_period: The benefit_period of this BenefitsPayableValue.  # noqa: E501
        :type: BenefitPeriodValue
        """

        self._benefit_period = benefit_period

    @property
    def benefit_amount(self):
        """Gets the benefit_amount of this BenefitsPayableValue.  # noqa: E501


        :return: The benefit_amount of this BenefitsPayableValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._benefit_amount

    @benefit_amount.setter
    def benefit_amount(self, benefit_amount):
        """Sets the benefit_amount of this BenefitsPayableValue.


        :param benefit_amount: The benefit_amount of this BenefitsPayableValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._benefit_amount = benefit_amount

    @property
    def deferred_period(self):
        """Gets the deferred_period of this BenefitsPayableValue.  # noqa: E501

        Period between going off work and your income payments commencing.The Period should be specified in ISO-8601 format.  # noqa: E501

        :return: The deferred_period of this BenefitsPayableValue.  # noqa: E501
        :rtype: str
        """
        return self._deferred_period

    @deferred_period.setter
    def deferred_period(self, deferred_period):
        """Sets the deferred_period of this BenefitsPayableValue.

        Period between going off work and your income payments commencing.The Period should be specified in ISO-8601 format.  # noqa: E501

        :param deferred_period: The deferred_period of this BenefitsPayableValue.  # noqa: E501
        :type: str
        """

        self._deferred_period = deferred_period

    @property
    def qualification_period(self):
        """Gets the qualification_period of this BenefitsPayableValue.  # noqa: E501


        :return: The qualification_period of this BenefitsPayableValue.  # noqa: E501
        :rtype: QualificationPeriodValue
        """
        return self._qualification_period

    @qualification_period.setter
    def qualification_period(self, qualification_period):
        """Sets the qualification_period of this BenefitsPayableValue.


        :param qualification_period: The qualification_period of this BenefitsPayableValue.  # noqa: E501
        :type: QualificationPeriodValue
        """

        self._qualification_period = qualification_period

    @property
    def split_benefit_frequency(self):
        """Gets the split_benefit_frequency of this BenefitsPayableValue.  # noqa: E501

        How often Split Benefit payments are made.  # noqa: E501

        :return: The split_benefit_frequency of this BenefitsPayableValue.  # noqa: E501
        :rtype: str
        """
        return self._split_benefit_frequency

    @split_benefit_frequency.setter
    def split_benefit_frequency(self, split_benefit_frequency):
        """Sets the split_benefit_frequency of this BenefitsPayableValue.

        How often Split Benefit payments are made.  # noqa: E501

        :param split_benefit_frequency: The split_benefit_frequency of this BenefitsPayableValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if split_benefit_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `split_benefit_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(split_benefit_frequency, allowed_values)
            )

        self._split_benefit_frequency = split_benefit_frequency

    @property
    def split_benefit_value(self):
        """Gets the split_benefit_value of this BenefitsPayableValue.  # noqa: E501


        :return: The split_benefit_value of this BenefitsPayableValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._split_benefit_value

    @split_benefit_value.setter
    def split_benefit_value(self, split_benefit_value):
        """Sets the split_benefit_value of this BenefitsPayableValue.


        :param split_benefit_value: The split_benefit_value of this BenefitsPayableValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._split_benefit_value = split_benefit_value

    @property
    def split_deferred_period(self):
        """Gets the split_deferred_period of this BenefitsPayableValue.  # noqa: E501

        The split deferred period specifies the time between when the Deferred period payments commence and the subsequent Split Deferred payments commence.Duration in ISO-8601 format (P[n][YMD]).  # noqa: E501

        :return: The split_deferred_period of this BenefitsPayableValue.  # noqa: E501
        :rtype: str
        """
        return self._split_deferred_period

    @split_deferred_period.setter
    def split_deferred_period(self, split_deferred_period):
        """Sets the split_deferred_period of this BenefitsPayableValue.

        The split deferred period specifies the time between when the Deferred period payments commence and the subsequent Split Deferred payments commence.Duration in ISO-8601 format (P[n][YMD]).  # noqa: E501

        :param split_deferred_period: The split_deferred_period of this BenefitsPayableValue.  # noqa: E501
        :type: str
        """

        self._split_deferred_period = split_deferred_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BenefitsPayableValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BenefitsPayableValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
