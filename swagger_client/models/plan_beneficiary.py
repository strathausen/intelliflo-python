# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanBeneficiary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'last_updated_on': 'datetime',
        'percentage': 'float',
        'discriminator': 'str',
        'type': 'str',
        'is_per_stirpes': 'bool',
        'beneficiary_of': 'BeneficiaryOfRef',
        'subject': 'BeneficiarySubject'
    }

    attribute_map = {
        'id': 'id',
        'last_updated_on': 'lastUpdatedOn',
        'percentage': 'percentage',
        'discriminator': 'discriminator',
        'type': 'type',
        'is_per_stirpes': 'isPerStirpes',
        'beneficiary_of': 'beneficiaryOf',
        'subject': 'subject'
    }

    def __init__(self, id=None, last_updated_on=None, percentage=None, discriminator=None, type=None, is_per_stirpes=None, beneficiary_of=None, subject=None):  # noqa: E501
        """PlanBeneficiary - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._last_updated_on = None
        self._percentage = None
        self._discriminator = None
        self._type = None
        self._is_per_stirpes = None
        self._beneficiary_of = None
        self._subject = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if last_updated_on is not None:
            self.last_updated_on = last_updated_on
        if percentage is not None:
            self.percentage = percentage
        if discriminator is not None:
            self.discriminator = discriminator
        if type is not None:
            self.type = type
        if is_per_stirpes is not None:
            self.is_per_stirpes = is_per_stirpes
        if beneficiary_of is not None:
            self.beneficiary_of = beneficiary_of
        if subject is not None:
            self.subject = subject

    @property
    def id(self):
        """Gets the id of this PlanBeneficiary.  # noqa: E501

        Beneficiary unique identifier.  # noqa: E501

        :return: The id of this PlanBeneficiary.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanBeneficiary.

        Beneficiary unique identifier.  # noqa: E501

        :param id: The id of this PlanBeneficiary.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this PlanBeneficiary.  # noqa: E501

        Updated date  # noqa: E501

        :return: The last_updated_on of this PlanBeneficiary.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this PlanBeneficiary.

        Updated date  # noqa: E501

        :param last_updated_on: The last_updated_on of this PlanBeneficiary.  # noqa: E501
        :type: datetime
        """

        self._last_updated_on = last_updated_on

    @property
    def percentage(self):
        """Gets the percentage of this PlanBeneficiary.  # noqa: E501

        Optional, range: 0-100  # noqa: E501

        :return: The percentage of this PlanBeneficiary.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this PlanBeneficiary.

        Optional, range: 0-100  # noqa: E501

        :param percentage: The percentage of this PlanBeneficiary.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def discriminator(self):
        """Gets the discriminator of this PlanBeneficiary.  # noqa: E501

        Beneficiary discriminator  Readonly, returns according to the endpoint  # noqa: E501

        :return: The discriminator of this PlanBeneficiary.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this PlanBeneficiary.

        Beneficiary discriminator  Readonly, returns according to the endpoint  # noqa: E501

        :param discriminator: The discriminator of this PlanBeneficiary.  # noqa: E501
        :type: str
        """
        allowed_values = ["PlanBeneficiary", "TrustBeneficiary"]  # noqa: E501
        if discriminator not in allowed_values:
            raise ValueError(
                "Invalid value for `discriminator` ({0}), must be one of {1}"  # noqa: E501
                .format(discriminator, allowed_values)
            )

        self._discriminator = discriminator

    @property
    def type(self):
        """Gets the type of this PlanBeneficiary.  # noqa: E501

        Beneficiary type  Optional, defaults to 'Primary'  # noqa: E501

        :return: The type of this PlanBeneficiary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlanBeneficiary.

        Beneficiary type  Optional, defaults to 'Primary'  # noqa: E501

        :param type: The type of this PlanBeneficiary.  # noqa: E501
        :type: str
        """
        allowed_values = ["Primary", "Remainderman", "Absolute", "Discretionary", "LifeTenant", "BindingNomination", "NonBindingNomination", "ReversionaryNominations", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_per_stirpes(self):
        """Gets the is_per_stirpes of this PlanBeneficiary.  # noqa: E501

        Optional  # noqa: E501

        :return: The is_per_stirpes of this PlanBeneficiary.  # noqa: E501
        :rtype: bool
        """
        return self._is_per_stirpes

    @is_per_stirpes.setter
    def is_per_stirpes(self, is_per_stirpes):
        """Sets the is_per_stirpes of this PlanBeneficiary.

        Optional  # noqa: E501

        :param is_per_stirpes: The is_per_stirpes of this PlanBeneficiary.  # noqa: E501
        :type: bool
        """

        self._is_per_stirpes = is_per_stirpes

    @property
    def beneficiary_of(self):
        """Gets the beneficiary_of of this PlanBeneficiary.  # noqa: E501


        :return: The beneficiary_of of this PlanBeneficiary.  # noqa: E501
        :rtype: BeneficiaryOfRef
        """
        return self._beneficiary_of

    @beneficiary_of.setter
    def beneficiary_of(self, beneficiary_of):
        """Sets the beneficiary_of of this PlanBeneficiary.


        :param beneficiary_of: The beneficiary_of of this PlanBeneficiary.  # noqa: E501
        :type: BeneficiaryOfRef
        """

        self._beneficiary_of = beneficiary_of

    @property
    def subject(self):
        """Gets the subject of this PlanBeneficiary.  # noqa: E501


        :return: The subject of this PlanBeneficiary.  # noqa: E501
        :rtype: BeneficiarySubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PlanBeneficiary.


        :param subject: The subject of this PlanBeneficiary.  # noqa: E501
        :type: BeneficiarySubject
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanBeneficiary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanBeneficiary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
