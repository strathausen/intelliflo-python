# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityOutcomeDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'activity_type': 'NamedActivityTypeReference',
        'group': 'NamedGroupReference',
        'is_deletable': 'bool',
        'is_archived': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'activity_type': 'activityType',
        'group': 'group',
        'is_deletable': 'isDeletable',
        'is_archived': 'isArchived'
    }

    def __init__(self, id=None, href=None, name=None, activity_type=None, group=None, is_deletable=False, is_archived=None):  # noqa: E501
        """ActivityOutcomeDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._activity_type = None
        self._group = None
        self._is_deletable = None
        self._is_archived = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if activity_type is not None:
            self.activity_type = activity_type
        if group is not None:
            self.group = group
        if is_deletable is not None:
            self.is_deletable = is_deletable
        self.is_archived = is_archived

    @property
    def id(self):
        """Gets the id of this ActivityOutcomeDocument.  # noqa: E501

        The unique identifier for the activity outcome.  # noqa: E501

        :return: The id of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityOutcomeDocument.

        The unique identifier for the activity outcome.  # noqa: E501

        :param id: The id of this ActivityOutcomeDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ActivityOutcomeDocument.  # noqa: E501

        The hypertext reference to the activity outcome.  # noqa: E501

        :return: The href of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ActivityOutcomeDocument.

        The hypertext reference to the activity outcome.  # noqa: E501

        :param href: The href of this ActivityOutcomeDocument.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this ActivityOutcomeDocument.  # noqa: E501

        The name of the activity outcome.  # noqa: E501

        :return: The name of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityOutcomeDocument.

        The name of the activity outcome.  # noqa: E501

        :param name: The name of this ActivityOutcomeDocument.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def activity_type(self):
        """Gets the activity_type of this ActivityOutcomeDocument.  # noqa: E501


        :return: The activity_type of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: NamedActivityTypeReference
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this ActivityOutcomeDocument.


        :param activity_type: The activity_type of this ActivityOutcomeDocument.  # noqa: E501
        :type: NamedActivityTypeReference
        """

        self._activity_type = activity_type

    @property
    def group(self):
        """Gets the group of this ActivityOutcomeDocument.  # noqa: E501


        :return: The group of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: NamedGroupReference
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ActivityOutcomeDocument.


        :param group: The group of this ActivityOutcomeDocument.  # noqa: E501
        :type: NamedGroupReference
        """

        self._group = group

    @property
    def is_deletable(self):
        """Gets the is_deletable of this ActivityOutcomeDocument.  # noqa: E501

        Flag indicating if the activity outcome can be deleted or not. if activity outcome is used in any of the tasks or appointments then we cannot delete the activity outcome.  # noqa: E501

        :return: The is_deletable of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_deletable

    @is_deletable.setter
    def is_deletable(self, is_deletable):
        """Sets the is_deletable of this ActivityOutcomeDocument.

        Flag indicating if the activity outcome can be deleted or not. if activity outcome is used in any of the tasks or appointments then we cannot delete the activity outcome.  # noqa: E501

        :param is_deletable: The is_deletable of this ActivityOutcomeDocument.  # noqa: E501
        :type: bool
        """

        self._is_deletable = is_deletable

    @property
    def is_archived(self):
        """Gets the is_archived of this ActivityOutcomeDocument.  # noqa: E501

        Flag indicating if the activity outcome is archived or not.  # noqa: E501

        :return: The is_archived of this ActivityOutcomeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this ActivityOutcomeDocument.

        Flag indicating if the activity outcome is archived or not.  # noqa: E501

        :param is_archived: The is_archived of this ActivityOutcomeDocument.  # noqa: E501
        :type: bool
        """
        if is_archived is None:
            raise ValueError("Invalid value for `is_archived`, must not be `None`")  # noqa: E501

        self._is_archived = is_archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityOutcomeDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityOutcomeDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
