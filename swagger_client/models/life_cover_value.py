# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LifeCoverValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'str',
        'sum_assured': 'CurrencyValue',
        'premium_structure': 'str',
        'additional_cover': 'CurrencyValue',
        'payment_basis': 'str',
        'until_age': 'int'
    }

    attribute_map = {
        'term': 'term',
        'sum_assured': 'sumAssured',
        'premium_structure': 'premiumStructure',
        'additional_cover': 'additionalCover',
        'payment_basis': 'paymentBasis',
        'until_age': 'untilAge'
    }

    def __init__(self, term=None, sum_assured=None, premium_structure=None, additional_cover=None, payment_basis='null', until_age=None):  # noqa: E501
        """LifeCoverValue - a model defined in Swagger"""  # noqa: E501
        self._term = None
        self._sum_assured = None
        self._premium_structure = None
        self._additional_cover = None
        self._payment_basis = None
        self._until_age = None
        self.discriminator = None
        if term is not None:
            self.term = term
        if sum_assured is not None:
            self.sum_assured = sum_assured
        if premium_structure is not None:
            self.premium_structure = premium_structure
        if additional_cover is not None:
            self.additional_cover = additional_cover
        if payment_basis is not None:
            self.payment_basis = payment_basis
        if until_age is not None:
            self.until_age = until_age

    @property
    def term(self):
        """Gets the term of this LifeCoverValue.  # noqa: E501

        Policy duration in years (format(ISO-8601): \"P[n][Y]\").  # noqa: E501

        :return: The term of this LifeCoverValue.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this LifeCoverValue.

        Policy duration in years (format(ISO-8601): \"P[n][Y]\").  # noqa: E501

        :param term: The term of this LifeCoverValue.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def sum_assured(self):
        """Gets the sum_assured of this LifeCoverValue.  # noqa: E501


        :return: The sum_assured of this LifeCoverValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._sum_assured

    @sum_assured.setter
    def sum_assured(self, sum_assured):
        """Sets the sum_assured of this LifeCoverValue.


        :param sum_assured: The sum_assured of this LifeCoverValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._sum_assured = sum_assured

    @property
    def premium_structure(self):
        """Gets the premium_structure of this LifeCoverValue.  # noqa: E501

        The premium structure for the life cover.  # noqa: E501

        :return: The premium_structure of this LifeCoverValue.  # noqa: E501
        :rtype: str
        """
        return self._premium_structure

    @premium_structure.setter
    def premium_structure(self, premium_structure):
        """Sets the premium_structure of this LifeCoverValue.

        The premium structure for the life cover.  # noqa: E501

        :param premium_structure: The premium_structure of this LifeCoverValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stepped", "Level", "Hybrid"]  # noqa: E501
        if premium_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `premium_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(premium_structure, allowed_values)
            )

        self._premium_structure = premium_structure

    @property
    def additional_cover(self):
        """Gets the additional_cover of this LifeCoverValue.  # noqa: E501


        :return: The additional_cover of this LifeCoverValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._additional_cover

    @additional_cover.setter
    def additional_cover(self, additional_cover):
        """Sets the additional_cover of this LifeCoverValue.


        :param additional_cover: The additional_cover of this LifeCoverValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._additional_cover = additional_cover

    @property
    def payment_basis(self):
        """Gets the payment_basis of this LifeCoverValue.  # noqa: E501

        Conditions Life Cover will be paid under.  # noqa: E501

        :return: The payment_basis of this LifeCoverValue.  # noqa: E501
        :rtype: str
        """
        return self._payment_basis

    @payment_basis.setter
    def payment_basis(self, payment_basis):
        """Sets the payment_basis of this LifeCoverValue.

        Conditions Life Cover will be paid under.  # noqa: E501

        :param payment_basis: The payment_basis of this LifeCoverValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["FirstDeath", "SecondDeath", "Both"]  # noqa: E501
        if payment_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_basis, allowed_values)
            )

        self._payment_basis = payment_basis

    @property
    def until_age(self):
        """Gets the until_age of this LifeCoverValue.  # noqa: E501

        Income is protected until client reaches age (years).  # noqa: E501

        :return: The until_age of this LifeCoverValue.  # noqa: E501
        :rtype: int
        """
        return self._until_age

    @until_age.setter
    def until_age(self, until_age):
        """Sets the until_age of this LifeCoverValue.

        Income is protected until client reaches age (years).  # noqa: E501

        :param until_age: The until_age of this LifeCoverValue.  # noqa: E501
        :type: int
        """

        self._until_age = until_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LifeCoverValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LifeCoverValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
