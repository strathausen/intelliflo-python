# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiskProfileValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'risk_id': 'str',
        'risk_title': 'str',
        'atr_template': 'ATRTemplateRef',
        'atr': 'ATRRef'
    }

    attribute_map = {
        'risk_id': 'riskId',
        'risk_title': 'riskTitle',
        'atr_template': 'atrTemplate',
        'atr': 'atr'
    }

    def __init__(self, risk_id=None, risk_title=None, atr_template=None, atr=None):  # noqa: E501
        """RiskProfileValue - a model defined in Swagger"""  # noqa: E501
        self._risk_id = None
        self._risk_title = None
        self._atr_template = None
        self._atr = None
        self.discriminator = None
        if risk_id is not None:
            self.risk_id = risk_id
        if risk_title is not None:
            self.risk_title = risk_title
        if atr_template is not None:
            self.atr_template = atr_template
        if atr is not None:
            self.atr = atr

    @property
    def risk_id(self):
        """Gets the risk_id of this RiskProfileValue.  # noqa: E501

        Associated Risk Id.  # noqa: E501

        :return: The risk_id of this RiskProfileValue.  # noqa: E501
        :rtype: str
        """
        return self._risk_id

    @risk_id.setter
    def risk_id(self, risk_id):
        """Sets the risk_id of this RiskProfileValue.

        Associated Risk Id.  # noqa: E501

        :param risk_id: The risk_id of this RiskProfileValue.  # noqa: E501
        :type: str
        """

        self._risk_id = risk_id

    @property
    def risk_title(self):
        """Gets the risk_title of this RiskProfileValue.  # noqa: E501

        Associated Risk Title.  # noqa: E501

        :return: The risk_title of this RiskProfileValue.  # noqa: E501
        :rtype: str
        """
        return self._risk_title

    @risk_title.setter
    def risk_title(self, risk_title):
        """Sets the risk_title of this RiskProfileValue.

        Associated Risk Title.  # noqa: E501

        :param risk_title: The risk_title of this RiskProfileValue.  # noqa: E501
        :type: str
        """

        self._risk_title = risk_title

    @property
    def atr_template(self):
        """Gets the atr_template of this RiskProfileValue.  # noqa: E501


        :return: The atr_template of this RiskProfileValue.  # noqa: E501
        :rtype: ATRTemplateRef
        """
        return self._atr_template

    @atr_template.setter
    def atr_template(self, atr_template):
        """Sets the atr_template of this RiskProfileValue.


        :param atr_template: The atr_template of this RiskProfileValue.  # noqa: E501
        :type: ATRTemplateRef
        """

        self._atr_template = atr_template

    @property
    def atr(self):
        """Gets the atr of this RiskProfileValue.  # noqa: E501


        :return: The atr of this RiskProfileValue.  # noqa: E501
        :rtype: ATRRef
        """
        return self._atr

    @atr.setter
    def atr(self, atr):
        """Sets the atr of this RiskProfileValue.


        :param atr: The atr of this RiskProfileValue.  # noqa: E501
        :type: ATRRef
        """

        self._atr = atr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskProfileValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskProfileValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
