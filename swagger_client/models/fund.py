# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_fund import BaseFund  # noqa: F401,E501

class Fund(BaseFund):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objective': 'str',
        'launched_on': 'date',
        'size': 'CurrencyValue',
        'sized_on': 'date',
        'benchmark': 'FundBenchmarkRef',
        'expense_ratio': 'float',
        'crown_rating': 'int',
        'unit_price': 'FundUnitPriceValue',
        'manager': 'FundManagerValue',
        'provider': 'FundProviderRef',
        'sector': 'FundSectorRef',
        'sector_breakdown': 'SectorBreakdownRef',
        'regional_breakdown': 'RegionalBreakdownRef',
        'asset_breakdown': 'AssetBreakdownRef',
        'holding_breakdown': 'HoldingBreakdownRef'
    }
    if hasattr(BaseFund, "swagger_types"):
        swagger_types.update(BaseFund.swagger_types)

    attribute_map = {
        'objective': 'objective',
        'launched_on': 'launchedOn',
        'size': 'size',
        'sized_on': 'sizedOn',
        'benchmark': 'benchmark',
        'expense_ratio': 'expenseRatio',
        'crown_rating': 'crownRating',
        'unit_price': 'unitPrice',
        'manager': 'manager',
        'provider': 'provider',
        'sector': 'sector',
        'sector_breakdown': 'sector_breakdown',
        'regional_breakdown': 'regional_breakdown',
        'asset_breakdown': 'asset_breakdown',
        'holding_breakdown': 'holding_breakdown'
    }
    if hasattr(BaseFund, "attribute_map"):
        attribute_map.update(BaseFund.attribute_map)

    def __init__(self, objective=None, launched_on=None, size=None, sized_on=None, benchmark=None, expense_ratio=None, crown_rating=None, unit_price=None, manager=None, provider=None, sector=None, sector_breakdown=None, regional_breakdown=None, asset_breakdown=None, holding_breakdown=None, *args, **kwargs):  # noqa: E501
        """Fund - a model defined in Swagger"""  # noqa: E501
        self._objective = None
        self._launched_on = None
        self._size = None
        self._sized_on = None
        self._benchmark = None
        self._expense_ratio = None
        self._crown_rating = None
        self._unit_price = None
        self._manager = None
        self._provider = None
        self._sector = None
        self._sector_breakdown = None
        self._regional_breakdown = None
        self._asset_breakdown = None
        self._holding_breakdown = None
        self.discriminator = None
        if objective is not None:
            self.objective = objective
        if launched_on is not None:
            self.launched_on = launched_on
        if size is not None:
            self.size = size
        if sized_on is not None:
            self.sized_on = sized_on
        if benchmark is not None:
            self.benchmark = benchmark
        if expense_ratio is not None:
            self.expense_ratio = expense_ratio
        if crown_rating is not None:
            self.crown_rating = crown_rating
        if unit_price is not None:
            self.unit_price = unit_price
        if manager is not None:
            self.manager = manager
        if provider is not None:
            self.provider = provider
        if sector is not None:
            self.sector = sector
        if sector_breakdown is not None:
            self.sector_breakdown = sector_breakdown
        if regional_breakdown is not None:
            self.regional_breakdown = regional_breakdown
        if asset_breakdown is not None:
            self.asset_breakdown = asset_breakdown
        if holding_breakdown is not None:
            self.holding_breakdown = holding_breakdown
        BaseFund.__init__(self, *args, **kwargs)

    @property
    def objective(self):
        """Gets the objective of this Fund.  # noqa: E501

        A fund objective.  # noqa: E501

        :return: The objective of this Fund.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this Fund.

        A fund objective.  # noqa: E501

        :param objective: The objective of this Fund.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def launched_on(self):
        """Gets the launched_on of this Fund.  # noqa: E501

        A date when the fund was launched.  # noqa: E501

        :return: The launched_on of this Fund.  # noqa: E501
        :rtype: date
        """
        return self._launched_on

    @launched_on.setter
    def launched_on(self, launched_on):
        """Sets the launched_on of this Fund.

        A date when the fund was launched.  # noqa: E501

        :param launched_on: The launched_on of this Fund.  # noqa: E501
        :type: date
        """

        self._launched_on = launched_on

    @property
    def size(self):
        """Gets the size of this Fund.  # noqa: E501


        :return: The size of this Fund.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Fund.


        :param size: The size of this Fund.  # noqa: E501
        :type: CurrencyValue
        """

        self._size = size

    @property
    def sized_on(self):
        """Gets the sized_on of this Fund.  # noqa: E501

        The date when the fund size was last updated.  # noqa: E501

        :return: The sized_on of this Fund.  # noqa: E501
        :rtype: date
        """
        return self._sized_on

    @sized_on.setter
    def sized_on(self, sized_on):
        """Sets the sized_on of this Fund.

        The date when the fund size was last updated.  # noqa: E501

        :param sized_on: The sized_on of this Fund.  # noqa: E501
        :type: date
        """

        self._sized_on = sized_on

    @property
    def benchmark(self):
        """Gets the benchmark of this Fund.  # noqa: E501


        :return: The benchmark of this Fund.  # noqa: E501
        :rtype: FundBenchmarkRef
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this Fund.


        :param benchmark: The benchmark of this Fund.  # noqa: E501
        :type: FundBenchmarkRef
        """

        self._benchmark = benchmark

    @property
    def expense_ratio(self):
        """Gets the expense_ratio of this Fund.  # noqa: E501

        The expense ratio of a stock or asset fund is the total percentage of fund assets used for administrative, management, advertising (12b-1), and all other expenses.  # noqa: E501

        :return: The expense_ratio of this Fund.  # noqa: E501
        :rtype: float
        """
        return self._expense_ratio

    @expense_ratio.setter
    def expense_ratio(self, expense_ratio):
        """Sets the expense_ratio of this Fund.

        The expense ratio of a stock or asset fund is the total percentage of fund assets used for administrative, management, advertising (12b-1), and all other expenses.  # noqa: E501

        :param expense_ratio: The expense_ratio of this Fund.  # noqa: E501
        :type: float
        """

        self._expense_ratio = expense_ratio

    @property
    def crown_rating(self):
        """Gets the crown_rating of this Fund.  # noqa: E501

        The Crown Fund Rating is a global quantitative rating that is based on a fund’s historical performance relative to an appropriate benchmark.  # noqa: E501

        :return: The crown_rating of this Fund.  # noqa: E501
        :rtype: int
        """
        return self._crown_rating

    @crown_rating.setter
    def crown_rating(self, crown_rating):
        """Sets the crown_rating of this Fund.

        The Crown Fund Rating is a global quantitative rating that is based on a fund’s historical performance relative to an appropriate benchmark.  # noqa: E501

        :param crown_rating: The crown_rating of this Fund.  # noqa: E501
        :type: int
        """

        self._crown_rating = crown_rating

    @property
    def unit_price(self):
        """Gets the unit_price of this Fund.  # noqa: E501


        :return: The unit_price of this Fund.  # noqa: E501
        :rtype: FundUnitPriceValue
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this Fund.


        :param unit_price: The unit_price of this Fund.  # noqa: E501
        :type: FundUnitPriceValue
        """

        self._unit_price = unit_price

    @property
    def manager(self):
        """Gets the manager of this Fund.  # noqa: E501


        :return: The manager of this Fund.  # noqa: E501
        :rtype: FundManagerValue
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this Fund.


        :param manager: The manager of this Fund.  # noqa: E501
        :type: FundManagerValue
        """

        self._manager = manager

    @property
    def provider(self):
        """Gets the provider of this Fund.  # noqa: E501


        :return: The provider of this Fund.  # noqa: E501
        :rtype: FundProviderRef
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Fund.


        :param provider: The provider of this Fund.  # noqa: E501
        :type: FundProviderRef
        """

        self._provider = provider

    @property
    def sector(self):
        """Gets the sector of this Fund.  # noqa: E501


        :return: The sector of this Fund.  # noqa: E501
        :rtype: FundSectorRef
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Fund.


        :param sector: The sector of this Fund.  # noqa: E501
        :type: FundSectorRef
        """

        self._sector = sector

    @property
    def sector_breakdown(self):
        """Gets the sector_breakdown of this Fund.  # noqa: E501


        :return: The sector_breakdown of this Fund.  # noqa: E501
        :rtype: SectorBreakdownRef
        """
        return self._sector_breakdown

    @sector_breakdown.setter
    def sector_breakdown(self, sector_breakdown):
        """Sets the sector_breakdown of this Fund.


        :param sector_breakdown: The sector_breakdown of this Fund.  # noqa: E501
        :type: SectorBreakdownRef
        """

        self._sector_breakdown = sector_breakdown

    @property
    def regional_breakdown(self):
        """Gets the regional_breakdown of this Fund.  # noqa: E501


        :return: The regional_breakdown of this Fund.  # noqa: E501
        :rtype: RegionalBreakdownRef
        """
        return self._regional_breakdown

    @regional_breakdown.setter
    def regional_breakdown(self, regional_breakdown):
        """Sets the regional_breakdown of this Fund.


        :param regional_breakdown: The regional_breakdown of this Fund.  # noqa: E501
        :type: RegionalBreakdownRef
        """

        self._regional_breakdown = regional_breakdown

    @property
    def asset_breakdown(self):
        """Gets the asset_breakdown of this Fund.  # noqa: E501


        :return: The asset_breakdown of this Fund.  # noqa: E501
        :rtype: AssetBreakdownRef
        """
        return self._asset_breakdown

    @asset_breakdown.setter
    def asset_breakdown(self, asset_breakdown):
        """Sets the asset_breakdown of this Fund.


        :param asset_breakdown: The asset_breakdown of this Fund.  # noqa: E501
        :type: AssetBreakdownRef
        """

        self._asset_breakdown = asset_breakdown

    @property
    def holding_breakdown(self):
        """Gets the holding_breakdown of this Fund.  # noqa: E501


        :return: The holding_breakdown of this Fund.  # noqa: E501
        :rtype: HoldingBreakdownRef
        """
        return self._holding_breakdown

    @holding_breakdown.setter
    def holding_breakdown(self, holding_breakdown):
        """Sets the holding_breakdown of this Fund.


        :param holding_breakdown: The holding_breakdown of this Fund.  # noqa: E501
        :type: HoldingBreakdownRef
        """

        self._holding_breakdown = holding_breakdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Fund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
