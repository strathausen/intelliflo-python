# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundUnitPriceValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bid_price': 'CurrencyValue',
        'mid_price': 'CurrencyValue',
        'offer_price': 'CurrencyValue',
        'daily_change': 'CurrencyValue',
        'year_high_price': 'CurrencyValue',
        'year_low_price': 'CurrencyValue'
    }

    attribute_map = {
        'bid_price': 'bidPrice',
        'mid_price': 'midPrice',
        'offer_price': 'offerPrice',
        'daily_change': 'dailyChange',
        'year_high_price': 'yearHighPrice',
        'year_low_price': 'yearLowPrice'
    }

    def __init__(self, bid_price=None, mid_price=None, offer_price=None, daily_change=None, year_high_price=None, year_low_price=None):  # noqa: E501
        """FundUnitPriceValue - a model defined in Swagger"""  # noqa: E501
        self._bid_price = None
        self._mid_price = None
        self._offer_price = None
        self._daily_change = None
        self._year_high_price = None
        self._year_low_price = None
        self.discriminator = None
        if bid_price is not None:
            self.bid_price = bid_price
        if mid_price is not None:
            self.mid_price = mid_price
        if offer_price is not None:
            self.offer_price = offer_price
        if daily_change is not None:
            self.daily_change = daily_change
        if year_high_price is not None:
            self.year_high_price = year_high_price
        if year_low_price is not None:
            self.year_low_price = year_low_price

    @property
    def bid_price(self):
        """Gets the bid_price of this FundUnitPriceValue.  # noqa: E501


        :return: The bid_price of this FundUnitPriceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """Sets the bid_price of this FundUnitPriceValue.


        :param bid_price: The bid_price of this FundUnitPriceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._bid_price = bid_price

    @property
    def mid_price(self):
        """Gets the mid_price of this FundUnitPriceValue.  # noqa: E501


        :return: The mid_price of this FundUnitPriceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._mid_price

    @mid_price.setter
    def mid_price(self, mid_price):
        """Sets the mid_price of this FundUnitPriceValue.


        :param mid_price: The mid_price of this FundUnitPriceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._mid_price = mid_price

    @property
    def offer_price(self):
        """Gets the offer_price of this FundUnitPriceValue.  # noqa: E501


        :return: The offer_price of this FundUnitPriceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._offer_price

    @offer_price.setter
    def offer_price(self, offer_price):
        """Sets the offer_price of this FundUnitPriceValue.


        :param offer_price: The offer_price of this FundUnitPriceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._offer_price = offer_price

    @property
    def daily_change(self):
        """Gets the daily_change of this FundUnitPriceValue.  # noqa: E501


        :return: The daily_change of this FundUnitPriceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._daily_change

    @daily_change.setter
    def daily_change(self, daily_change):
        """Sets the daily_change of this FundUnitPriceValue.


        :param daily_change: The daily_change of this FundUnitPriceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._daily_change = daily_change

    @property
    def year_high_price(self):
        """Gets the year_high_price of this FundUnitPriceValue.  # noqa: E501


        :return: The year_high_price of this FundUnitPriceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._year_high_price

    @year_high_price.setter
    def year_high_price(self, year_high_price):
        """Sets the year_high_price of this FundUnitPriceValue.


        :param year_high_price: The year_high_price of this FundUnitPriceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._year_high_price = year_high_price

    @property
    def year_low_price(self):
        """Gets the year_low_price of this FundUnitPriceValue.  # noqa: E501


        :return: The year_low_price of this FundUnitPriceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._year_low_price

    @year_low_price.setter
    def year_low_price(self, year_low_price):
        """Sets the year_low_price of this FundUnitPriceValue.


        :param year_low_price: The year_low_price of this FundUnitPriceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._year_low_price = year_low_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundUnitPriceValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundUnitPriceValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
