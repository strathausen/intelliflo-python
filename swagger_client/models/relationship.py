# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Relationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'relationship_type': 'RelationshipTypeRef',
        'subject': 'SubjectRef',
        'relation': 'RelationRef',
        'is_financial_partnership': 'bool',
        'is_family_group': 'bool',
        'include_in_relations_family_wealth': 'bool',
        'is_point_of_contact': 'bool',
        'started_on': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'relationship_type': 'relationshipType',
        'subject': 'subject',
        'relation': 'relation',
        'is_financial_partnership': 'isFinancialPartnership',
        'is_family_group': 'isFamilyGroup',
        'include_in_relations_family_wealth': 'includeInRelationsFamilyWealth',
        'is_point_of_contact': 'isPointOfContact',
        'started_on': 'startedOn'
    }

    def __init__(self, id=None, href=None, relationship_type=None, subject=None, relation=None, is_financial_partnership=None, is_family_group=None, include_in_relations_family_wealth=None, is_point_of_contact=None, started_on=None):  # noqa: E501
        """Relationship - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._relationship_type = None
        self._subject = None
        self._relation = None
        self._is_financial_partnership = None
        self._is_family_group = None
        self._include_in_relations_family_wealth = None
        self._is_point_of_contact = None
        self._started_on = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.relationship_type = relationship_type
        if subject is not None:
            self.subject = subject
        if relation is not None:
            self.relation = relation
        if is_financial_partnership is not None:
            self.is_financial_partnership = is_financial_partnership
        if is_family_group is not None:
            self.is_family_group = is_family_group
        if include_in_relations_family_wealth is not None:
            self.include_in_relations_family_wealth = include_in_relations_family_wealth
        if is_point_of_contact is not None:
            self.is_point_of_contact = is_point_of_contact
        if started_on is not None:
            self.started_on = started_on

    @property
    def id(self):
        """Gets the id of this Relationship.  # noqa: E501


        :return: The id of this Relationship.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relationship.


        :param id: The id of this Relationship.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Relationship.  # noqa: E501


        :return: The href of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Relationship.


        :param href: The href of this Relationship.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def relationship_type(self):
        """Gets the relationship_type of this Relationship.  # noqa: E501


        :return: The relationship_type of this Relationship.  # noqa: E501
        :rtype: RelationshipTypeRef
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this Relationship.


        :param relationship_type: The relationship_type of this Relationship.  # noqa: E501
        :type: RelationshipTypeRef
        """
        if relationship_type is None:
            raise ValueError("Invalid value for `relationship_type`, must not be `None`")  # noqa: E501

        self._relationship_type = relationship_type

    @property
    def subject(self):
        """Gets the subject of this Relationship.  # noqa: E501


        :return: The subject of this Relationship.  # noqa: E501
        :rtype: SubjectRef
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Relationship.


        :param subject: The subject of this Relationship.  # noqa: E501
        :type: SubjectRef
        """

        self._subject = subject

    @property
    def relation(self):
        """Gets the relation of this Relationship.  # noqa: E501


        :return: The relation of this Relationship.  # noqa: E501
        :rtype: RelationRef
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Relationship.


        :param relation: The relation of this Relationship.  # noqa: E501
        :type: RelationRef
        """

        self._relation = relation

    @property
    def is_financial_partnership(self):
        """Gets the is_financial_partnership of this Relationship.  # noqa: E501

        Flag indicating if the relationship is a financial partnership (between clients only).  # noqa: E501

        :return: The is_financial_partnership of this Relationship.  # noqa: E501
        :rtype: bool
        """
        return self._is_financial_partnership

    @is_financial_partnership.setter
    def is_financial_partnership(self, is_financial_partnership):
        """Sets the is_financial_partnership of this Relationship.

        Flag indicating if the relationship is a financial partnership (between clients only).  # noqa: E501

        :param is_financial_partnership: The is_financial_partnership of this Relationship.  # noqa: E501
        :type: bool
        """

        self._is_financial_partnership = is_financial_partnership

    @property
    def is_family_group(self):
        """Gets the is_family_group of this Relationship.  # noqa: E501

        Is family group flag  # noqa: E501

        :return: The is_family_group of this Relationship.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_group

    @is_family_group.setter
    def is_family_group(self, is_family_group):
        """Sets the is_family_group of this Relationship.

        Is family group flag  # noqa: E501

        :param is_family_group: The is_family_group of this Relationship.  # noqa: E501
        :type: bool
        """

        self._is_family_group = is_family_group

    @property
    def include_in_relations_family_wealth(self):
        """Gets the include_in_relations_family_wealth of this Relationship.  # noqa: E501

        Includes family wealth access for the relation (between clients only)  # noqa: E501

        :return: The include_in_relations_family_wealth of this Relationship.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_relations_family_wealth

    @include_in_relations_family_wealth.setter
    def include_in_relations_family_wealth(self, include_in_relations_family_wealth):
        """Sets the include_in_relations_family_wealth of this Relationship.

        Includes family wealth access for the relation (between clients only)  # noqa: E501

        :param include_in_relations_family_wealth: The include_in_relations_family_wealth of this Relationship.  # noqa: E501
        :type: bool
        """

        self._include_in_relations_family_wealth = include_in_relations_family_wealth

    @property
    def is_point_of_contact(self):
        """Gets the is_point_of_contact of this Relationship.  # noqa: E501

        Specifies if the relation is point of contact  # noqa: E501

        :return: The is_point_of_contact of this Relationship.  # noqa: E501
        :rtype: bool
        """
        return self._is_point_of_contact

    @is_point_of_contact.setter
    def is_point_of_contact(self, is_point_of_contact):
        """Sets the is_point_of_contact of this Relationship.

        Specifies if the relation is point of contact  # noqa: E501

        :param is_point_of_contact: The is_point_of_contact of this Relationship.  # noqa: E501
        :type: bool
        """

        self._is_point_of_contact = is_point_of_contact

    @property
    def started_on(self):
        """Gets the started_on of this Relationship.  # noqa: E501

        The date the relationship was established.  # noqa: E501

        :return: The started_on of this Relationship.  # noqa: E501
        :rtype: datetime
        """
        return self._started_on

    @started_on.setter
    def started_on(self, started_on):
        """Sets the started_on of this Relationship.

        The date the relationship was established.  # noqa: E501

        :param started_on: The started_on of this Relationship.  # noqa: E501
        :type: datetime
        """

        self._started_on = started_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Relationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relationship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
