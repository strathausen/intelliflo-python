# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtrTemplateQuestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'question_type': 'str',
        'question_group': 'str',
        'tool_tip': 'str',
        'sub_text1': 'str',
        'sub_text2': 'str',
        'category': 'str',
        'answers': 'list[AtrTemplateAnswer]'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'question_type': 'questionType',
        'question_group': 'questionGroup',
        'tool_tip': 'toolTip',
        'sub_text1': 'subText1',
        'sub_text2': 'subText2',
        'category': 'category',
        'answers': 'answers'
    }

    def __init__(self, id=None, text=None, question_type=None, question_group=None, tool_tip=None, sub_text1=None, sub_text2=None, category=None, answers=None):  # noqa: E501
        """AtrTemplateQuestion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._text = None
        self._question_type = None
        self._question_group = None
        self._tool_tip = None
        self._sub_text1 = None
        self._sub_text2 = None
        self._category = None
        self._answers = None
        self.discriminator = None
        self.id = id
        self.text = text
        self.question_type = question_type
        if question_group is not None:
            self.question_group = question_group
        if tool_tip is not None:
            self.tool_tip = tool_tip
        if sub_text1 is not None:
            self.sub_text1 = sub_text1
        if sub_text2 is not None:
            self.sub_text2 = sub_text2
        if category is not None:
            self.category = category
        if answers is not None:
            self.answers = answers

    @property
    def id(self):
        """Gets the id of this AtrTemplateQuestion.  # noqa: E501

        ATR question identifier.  # noqa: E501

        :return: The id of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtrTemplateQuestion.

        ATR question identifier.  # noqa: E501

        :param id: The id of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self):
        """Gets the text of this AtrTemplateQuestion.  # noqa: E501

        ATR question text.  # noqa: E501

        :return: The text of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AtrTemplateQuestion.

        ATR question text.  # noqa: E501

        :param text: The text of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def question_type(self):
        """Gets the question_type of this AtrTemplateQuestion.  # noqa: E501

        ATR question type (ex.: single choice, text).  # noqa: E501

        :return: The question_type of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this AtrTemplateQuestion.

        ATR question type (ex.: single choice, text).  # noqa: E501

        :param question_type: The question_type of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """
        if question_type is None:
            raise ValueError("Invalid value for `question_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SingleChoice", "Text"]  # noqa: E501
        if question_type not in allowed_values:
            raise ValueError(
                "Invalid value for `question_type` ({0}), must be one of {1}"  # noqa: E501
                .format(question_type, allowed_values)
            )

        self._question_type = question_type

    @property
    def question_group(self):
        """Gets the question_group of this AtrTemplateQuestion.  # noqa: E501

        ATR question's risk group. Only applicable if QuestionGroups are being used as a means to identify inconsistencies in a client's answers.  If InconsistentAnswers are used rather than QuestionGroups this should not be populated.  # noqa: E501

        :return: The question_group of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_group

    @question_group.setter
    def question_group(self, question_group):
        """Sets the question_group of this AtrTemplateQuestion.

        ATR question's risk group. Only applicable if QuestionGroups are being used as a means to identify inconsistencies in a client's answers.  If InconsistentAnswers are used rather than QuestionGroups this should not be populated.  # noqa: E501

        :param question_group: The question_group of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """

        self._question_group = question_group

    @property
    def tool_tip(self):
        """Gets the tool_tip of this AtrTemplateQuestion.  # noqa: E501

        Question help text. Available as tooltip in external applications such as PFP.  # noqa: E501

        :return: The tool_tip of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._tool_tip

    @tool_tip.setter
    def tool_tip(self, tool_tip):
        """Sets the tool_tip of this AtrTemplateQuestion.

        Question help text. Available as tooltip in external applications such as PFP.  # noqa: E501

        :param tool_tip: The tool_tip of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """

        self._tool_tip = tool_tip

    @property
    def sub_text1(self):
        """Gets the sub_text1 of this AtrTemplateQuestion.  # noqa: E501

        Help text placed underneath the question. Available in external applications such as PFP.  # noqa: E501

        :return: The sub_text1 of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._sub_text1

    @sub_text1.setter
    def sub_text1(self, sub_text1):
        """Sets the sub_text1 of this AtrTemplateQuestion.

        Help text placed underneath the question. Available in external applications such as PFP.  # noqa: E501

        :param sub_text1: The sub_text1 of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """

        self._sub_text1 = sub_text1

    @property
    def sub_text2(self):
        """Gets the sub_text2 of this AtrTemplateQuestion.  # noqa: E501

        Help text placed underneath the question. Available in external applications such as PFP.  # noqa: E501

        :return: The sub_text2 of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._sub_text2

    @sub_text2.setter
    def sub_text2(self, sub_text2):
        """Sets the sub_text2 of this AtrTemplateQuestion.

        Help text placed underneath the question. Available in external applications such as PFP.  # noqa: E501

        :param sub_text2: The sub_text2 of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """

        self._sub_text2 = sub_text2

    @property
    def category(self):
        """Gets the category of this AtrTemplateQuestion.  # noqa: E501

        ATR question category.  # noqa: E501

        :return: The category of this AtrTemplateQuestion.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AtrTemplateQuestion.

        ATR question category.  # noqa: E501

        :param category: The category of this AtrTemplateQuestion.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def answers(self):
        """Gets the answers of this AtrTemplateQuestion.  # noqa: E501

        ATR question's answers options, only required if the QuestionType is 'SingleChoice'.  # noqa: E501

        :return: The answers of this AtrTemplateQuestion.  # noqa: E501
        :rtype: list[AtrTemplateAnswer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this AtrTemplateQuestion.

        ATR question's answers options, only required if the QuestionType is 'SingleChoice'.  # noqa: E501

        :param answers: The answers of this AtrTemplateQuestion.  # noqa: E501
        :type: list[AtrTemplateAnswer]
        """

        self._answers = answers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtrTemplateQuestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtrTemplateQuestion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
