# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CorporateValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'business_type': 'str',
        'company_registration_number': 'str',
        'established_or_incorporated_on': 'datetime',
        'is_vat_registered': 'bool',
        'vat_registration_number': 'str',
        'legal_entity': 'LegalEntityValue',
        'business_registration_number': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'business_type': 'businessType',
        'company_registration_number': 'companyRegistrationNumber',
        'established_or_incorporated_on': 'establishedOrIncorporatedOn',
        'is_vat_registered': 'isVatRegistered',
        'vat_registration_number': 'vatRegistrationNumber',
        'legal_entity': 'legalEntity',
        'business_registration_number': 'businessRegistrationNumber'
    }

    def __init__(self, name=None, type=None, business_type=None, company_registration_number=None, established_or_incorporated_on=None, is_vat_registered=None, vat_registration_number=None, legal_entity=None, business_registration_number=None):  # noqa: E501
        """CorporateValue - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._business_type = None
        self._company_registration_number = None
        self._established_or_incorporated_on = None
        self._is_vat_registered = None
        self._vat_registration_number = None
        self._legal_entity = None
        self._business_registration_number = None
        self.discriminator = None
        self.name = name
        if type is not None:
            self.type = type
        if business_type is not None:
            self.business_type = business_type
        if company_registration_number is not None:
            self.company_registration_number = company_registration_number
        if established_or_incorporated_on is not None:
            self.established_or_incorporated_on = established_or_incorporated_on
        if is_vat_registered is not None:
            self.is_vat_registered = is_vat_registered
        if vat_registration_number is not None:
            self.vat_registration_number = vat_registration_number
        if legal_entity is not None:
            self.legal_entity = legal_entity
        if business_registration_number is not None:
            self.business_registration_number = business_registration_number

    @property
    def name(self):
        """Gets the name of this CorporateValue.  # noqa: E501

        The company's name.  # noqa: E501

        :return: The name of this CorporateValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CorporateValue.

        The company's name.  # noqa: E501

        :param name: The name of this CorporateValue.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this CorporateValue.  # noqa: E501

        The type of a company.  # noqa: E501

        :return: The type of this CorporateValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CorporateValue.

        The type of a company.  # noqa: E501

        :param type: The type of this CorporateValue.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def business_type(self):
        """Gets the business_type of this CorporateValue.  # noqa: E501

        The company's business type.  # noqa: E501

        :return: The business_type of this CorporateValue.  # noqa: E501
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this CorporateValue.

        The company's business type.  # noqa: E501

        :param business_type: The business_type of this CorporateValue.  # noqa: E501
        :type: str
        """

        self._business_type = business_type

    @property
    def company_registration_number(self):
        """Gets the company_registration_number of this CorporateValue.  # noqa: E501

        The company's registration number.  # noqa: E501

        :return: The company_registration_number of this CorporateValue.  # noqa: E501
        :rtype: str
        """
        return self._company_registration_number

    @company_registration_number.setter
    def company_registration_number(self, company_registration_number):
        """Sets the company_registration_number of this CorporateValue.

        The company's registration number.  # noqa: E501

        :param company_registration_number: The company_registration_number of this CorporateValue.  # noqa: E501
        :type: str
        """

        self._company_registration_number = company_registration_number

    @property
    def established_or_incorporated_on(self):
        """Gets the established_or_incorporated_on of this CorporateValue.  # noqa: E501

        The date the company was established.  # noqa: E501

        :return: The established_or_incorporated_on of this CorporateValue.  # noqa: E501
        :rtype: datetime
        """
        return self._established_or_incorporated_on

    @established_or_incorporated_on.setter
    def established_or_incorporated_on(self, established_or_incorporated_on):
        """Sets the established_or_incorporated_on of this CorporateValue.

        The date the company was established.  # noqa: E501

        :param established_or_incorporated_on: The established_or_incorporated_on of this CorporateValue.  # noqa: E501
        :type: datetime
        """

        self._established_or_incorporated_on = established_or_incorporated_on

    @property
    def is_vat_registered(self):
        """Gets the is_vat_registered of this CorporateValue.  # noqa: E501

        Flag Indicating if the company is registered for VAT/GST.  # noqa: E501

        :return: The is_vat_registered of this CorporateValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_vat_registered

    @is_vat_registered.setter
    def is_vat_registered(self, is_vat_registered):
        """Sets the is_vat_registered of this CorporateValue.

        Flag Indicating if the company is registered for VAT/GST.  # noqa: E501

        :param is_vat_registered: The is_vat_registered of this CorporateValue.  # noqa: E501
        :type: bool
        """

        self._is_vat_registered = is_vat_registered

    @property
    def vat_registration_number(self):
        """Gets the vat_registration_number of this CorporateValue.  # noqa: E501

        The Company's VAT/GST registration number.  # noqa: E501

        :return: The vat_registration_number of this CorporateValue.  # noqa: E501
        :rtype: str
        """
        return self._vat_registration_number

    @vat_registration_number.setter
    def vat_registration_number(self, vat_registration_number):
        """Sets the vat_registration_number of this CorporateValue.

        The Company's VAT/GST registration number.  # noqa: E501

        :param vat_registration_number: The vat_registration_number of this CorporateValue.  # noqa: E501
        :type: str
        """

        self._vat_registration_number = vat_registration_number

    @property
    def legal_entity(self):
        """Gets the legal_entity of this CorporateValue.  # noqa: E501


        :return: The legal_entity of this CorporateValue.  # noqa: E501
        :rtype: LegalEntityValue
        """
        return self._legal_entity

    @legal_entity.setter
    def legal_entity(self, legal_entity):
        """Sets the legal_entity of this CorporateValue.


        :param legal_entity: The legal_entity of this CorporateValue.  # noqa: E501
        :type: LegalEntityValue
        """

        self._legal_entity = legal_entity

    @property
    def business_registration_number(self):
        """Gets the business_registration_number of this CorporateValue.  # noqa: E501

        Business registration number.  # noqa: E501

        :return: The business_registration_number of this CorporateValue.  # noqa: E501
        :rtype: str
        """
        return self._business_registration_number

    @business_registration_number.setter
    def business_registration_number(self, business_registration_number):
        """Sets the business_registration_number of this CorporateValue.

        Business registration number.  # noqa: E501

        :param business_registration_number: The business_registration_number of this CorporateValue.  # noqa: E501
        :type: str
        """

        self._business_registration_number = business_registration_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorporateValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorporateValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
