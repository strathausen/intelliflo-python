# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProposedFundValue2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentage': 'float',
        'percentage_of_regular_contribution': 'float',
        'name': 'str',
        'currency': 'str',
        'fund_type': 'str',
        'codes': 'RecommendFundCodesValue',
        'risk_score': 'RiskScoreValue'
    }

    attribute_map = {
        'percentage': 'percentage',
        'percentage_of_regular_contribution': 'percentageOfRegularContribution',
        'name': 'name',
        'currency': 'currency',
        'fund_type': 'fundType',
        'codes': 'codes',
        'risk_score': 'riskScore'
    }

    def __init__(self, percentage=0.0, percentage_of_regular_contribution=None, name=None, currency=None, fund_type=None, codes=None, risk_score=None):  # noqa: E501
        """ProposedFundValue2 - a model defined in Swagger"""  # noqa: E501
        self._percentage = None
        self._percentage_of_regular_contribution = None
        self._name = None
        self._currency = None
        self._fund_type = None
        self._codes = None
        self._risk_score = None
        self.discriminator = None
        if percentage is not None:
            self.percentage = percentage
        if percentage_of_regular_contribution is not None:
            self.percentage_of_regular_contribution = percentage_of_regular_contribution
        self.name = name
        if currency is not None:
            self.currency = currency
        if fund_type is not None:
            self.fund_type = fund_type
        if codes is not None:
            self.codes = codes
        if risk_score is not None:
            self.risk_score = risk_score

    @property
    def percentage(self):
        """Gets the percentage of this ProposedFundValue2.  # noqa: E501

        The proportion to invest in the fund, ie. Percentage of Holding.  # noqa: E501

        :return: The percentage of this ProposedFundValue2.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ProposedFundValue2.

        The proportion to invest in the fund, ie. Percentage of Holding.  # noqa: E501

        :param percentage: The percentage of this ProposedFundValue2.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def percentage_of_regular_contribution(self):
        """Gets the percentage_of_regular_contribution of this ProposedFundValue2.  # noqa: E501

        The proportion of regular contribution.  # noqa: E501

        :return: The percentage_of_regular_contribution of this ProposedFundValue2.  # noqa: E501
        :rtype: float
        """
        return self._percentage_of_regular_contribution

    @percentage_of_regular_contribution.setter
    def percentage_of_regular_contribution(self, percentage_of_regular_contribution):
        """Sets the percentage_of_regular_contribution of this ProposedFundValue2.

        The proportion of regular contribution.  # noqa: E501

        :param percentage_of_regular_contribution: The percentage_of_regular_contribution of this ProposedFundValue2.  # noqa: E501
        :type: float
        """

        self._percentage_of_regular_contribution = percentage_of_regular_contribution

    @property
    def name(self):
        """Gets the name of this ProposedFundValue2.  # noqa: E501

        The name of the fund.  # noqa: E501

        :return: The name of this ProposedFundValue2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProposedFundValue2.

        The name of the fund.  # noqa: E501

        :param name: The name of this ProposedFundValue2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def currency(self):
        """Gets the currency of this ProposedFundValue2.  # noqa: E501

        The currency of the fund. If this is not supplied then we will assume regional currency  if we find multiple matches for the Fund codes.  # noqa: E501

        :return: The currency of this ProposedFundValue2.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProposedFundValue2.

        The currency of the fund. If this is not supplied then we will assume regional currency  if we find multiple matches for the Fund codes.  # noqa: E501

        :param currency: The currency of this ProposedFundValue2.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def fund_type(self):
        """Gets the fund_type of this ProposedFundValue2.  # noqa: E501

        Indicates whether the validated funds relates to a FeedFund, Equity or Manual Fund.  # noqa: E501

        :return: The fund_type of this ProposedFundValue2.  # noqa: E501
        :rtype: str
        """
        return self._fund_type

    @fund_type.setter
    def fund_type(self, fund_type):
        """Sets the fund_type of this ProposedFundValue2.

        Indicates whether the validated funds relates to a FeedFund, Equity or Manual Fund.  # noqa: E501

        :param fund_type: The fund_type of this ProposedFundValue2.  # noqa: E501
        :type: str
        """
        allowed_values = ["FeedFund", "Equity", "ManualFund"]  # noqa: E501
        if fund_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fund_type` ({0}), must be one of {1}"  # noqa: E501
                .format(fund_type, allowed_values)
            )

        self._fund_type = fund_type

    @property
    def codes(self):
        """Gets the codes of this ProposedFundValue2.  # noqa: E501


        :return: The codes of this ProposedFundValue2.  # noqa: E501
        :rtype: RecommendFundCodesValue
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this ProposedFundValue2.


        :param codes: The codes of this ProposedFundValue2.  # noqa: E501
        :type: RecommendFundCodesValue
        """

        self._codes = codes

    @property
    def risk_score(self):
        """Gets the risk_score of this ProposedFundValue2.  # noqa: E501


        :return: The risk_score of this ProposedFundValue2.  # noqa: E501
        :rtype: RiskScoreValue
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this ProposedFundValue2.


        :param risk_score: The risk_score of this ProposedFundValue2.  # noqa: E501
        :type: RiskScoreValue
        """

        self._risk_score = risk_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProposedFundValue2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProposedFundValue2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
