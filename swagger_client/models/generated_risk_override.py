# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneratedRiskOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_based_on_template': 'bool',
        'restricted_ability': 'RestrictedAbility'
    }

    attribute_map = {
        'allow_based_on_template': 'allowBasedOnTemplate',
        'restricted_ability': 'restrictedAbility'
    }

    def __init__(self, allow_based_on_template=None, restricted_ability=None):  # noqa: E501
        """GeneratedRiskOverride - a model defined in Swagger"""  # noqa: E501
        self._allow_based_on_template = None
        self._restricted_ability = None
        self.discriminator = None
        self.allow_based_on_template = allow_based_on_template
        if restricted_ability is not None:
            self.restricted_ability = restricted_ability

    @property
    def allow_based_on_template(self):
        """Gets the allow_based_on_template of this GeneratedRiskOverride.  # noqa: E501

        Allow generated risk override based on ATR template.  # noqa: E501

        :return: The allow_based_on_template of this GeneratedRiskOverride.  # noqa: E501
        :rtype: bool
        """
        return self._allow_based_on_template

    @allow_based_on_template.setter
    def allow_based_on_template(self, allow_based_on_template):
        """Sets the allow_based_on_template of this GeneratedRiskOverride.

        Allow generated risk override based on ATR template.  # noqa: E501

        :param allow_based_on_template: The allow_based_on_template of this GeneratedRiskOverride.  # noqa: E501
        :type: bool
        """
        if allow_based_on_template is None:
            raise ValueError("Invalid value for `allow_based_on_template`, must not be `None`")  # noqa: E501

        self._allow_based_on_template = allow_based_on_template

    @property
    def restricted_ability(self):
        """Gets the restricted_ability of this GeneratedRiskOverride.  # noqa: E501


        :return: The restricted_ability of this GeneratedRiskOverride.  # noqa: E501
        :rtype: RestrictedAbility
        """
        return self._restricted_ability

    @restricted_ability.setter
    def restricted_ability(self, restricted_ability):
        """Sets the restricted_ability of this GeneratedRiskOverride.


        :param restricted_ability: The restricted_ability of this GeneratedRiskOverride.  # noqa: E501
        :type: RestrictedAbility
        """

        self._restricted_ability = restricted_ability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneratedRiskOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneratedRiskOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
