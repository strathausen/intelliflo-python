# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuoteResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applicants': 'list[PartyRef]',
        'attributes': 'object',
        'bundled_reference': 'str',
        'created_app': 'NamedAppRef',
        'created_at': 'datetime',
        'expires_on': 'datetime',
        'created_user': 'NamedUserRef',
        'discriminator': 'str',
        'documents_href': 'str',
        'external_reference': 'str',
        'href': 'str',
        'id': 'int',
        'product_name': 'str',
        'quote': 'QuoteRef',
        'recommendation': 'RecommendationRef',
        'currency': 'str'
    }

    attribute_map = {
        'applicants': 'applicants',
        'attributes': 'attributes',
        'bundled_reference': 'bundled_Reference',
        'created_app': 'createdApp',
        'created_at': 'createdAt',
        'expires_on': 'expiresOn',
        'created_user': 'createdUser',
        'discriminator': 'discriminator',
        'documents_href': 'documents_href',
        'external_reference': 'externalReference',
        'href': 'href',
        'id': 'id',
        'product_name': 'productName',
        'quote': 'quote',
        'recommendation': 'recommendation',
        'currency': 'currency'
    }

    discriminator_value_class_map = {
          'NewBusinessMortgageQuoteResult': 'NewBusinessMortgageQuoteResult',
'TopUpQuoteResult': 'TopUpQuoteResult',
'NewBusinessInvestmentQuoteResult': 'NewBusinessInvestmentQuoteResult',
'NewBusinessRetirementQuoteResult': 'NewBusinessRetirementQuoteResult',
'NewBusinessEquityReleaseQuoteResult': 'NewBusinessEquityReleaseQuoteResult',
'NewBusinessProtectionQuoteResult': 'NewBusinessProtectionQuoteResult'    }

    def __init__(self, applicants=None, attributes=None, bundled_reference=None, created_app=None, created_at=None, expires_on=None, created_user=None, discriminator=None, documents_href=None, external_reference=None, href=None, id=None, product_name=None, quote=None, recommendation=None, currency=None):  # noqa: E501
        """QuoteResult - a model defined in Swagger"""  # noqa: E501
        self._applicants = None
        self._attributes = None
        self._bundled_reference = None
        self._created_app = None
        self._created_at = None
        self._expires_on = None
        self._created_user = None
        self._discriminator = None
        self._documents_href = None
        self._external_reference = None
        self._href = None
        self._id = None
        self._product_name = None
        self._quote = None
        self._recommendation = None
        self._currency = None
        self.discriminator = 'discriminator'
        self.applicants = applicants
        if attributes is not None:
            self.attributes = attributes
        if bundled_reference is not None:
            self.bundled_reference = bundled_reference
        if created_app is not None:
            self.created_app = created_app
        self.created_at = created_at
        if expires_on is not None:
            self.expires_on = expires_on
        if created_user is not None:
            self.created_user = created_user
        self.discriminator = discriminator
        if documents_href is not None:
            self.documents_href = documents_href
        if external_reference is not None:
            self.external_reference = external_reference
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if product_name is not None:
            self.product_name = product_name
        if quote is not None:
            self.quote = quote
        if recommendation is not None:
            self.recommendation = recommendation
        if currency is not None:
            self.currency = currency

    @property
    def applicants(self):
        """Gets the applicants of this QuoteResult.  # noqa: E501


        :return: The applicants of this QuoteResult.  # noqa: E501
        :rtype: list[PartyRef]
        """
        return self._applicants

    @applicants.setter
    def applicants(self, applicants):
        """Sets the applicants of this QuoteResult.


        :param applicants: The applicants of this QuoteResult.  # noqa: E501
        :type: list[PartyRef]
        """
        if applicants is None:
            raise ValueError("Invalid value for `applicants`, must not be `None`")  # noqa: E501

        self._applicants = applicants

    @property
    def attributes(self):
        """Gets the attributes of this QuoteResult.  # noqa: E501


        :return: The attributes of this QuoteResult.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this QuoteResult.


        :param attributes: The attributes of this QuoteResult.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def bundled_reference(self):
        """Gets the bundled_reference of this QuoteResult.  # noqa: E501


        :return: The bundled_reference of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._bundled_reference

    @bundled_reference.setter
    def bundled_reference(self, bundled_reference):
        """Sets the bundled_reference of this QuoteResult.


        :param bundled_reference: The bundled_reference of this QuoteResult.  # noqa: E501
        :type: str
        """

        self._bundled_reference = bundled_reference

    @property
    def created_app(self):
        """Gets the created_app of this QuoteResult.  # noqa: E501


        :return: The created_app of this QuoteResult.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_app

    @created_app.setter
    def created_app(self, created_app):
        """Sets the created_app of this QuoteResult.


        :param created_app: The created_app of this QuoteResult.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_app = created_app

    @property
    def created_at(self):
        """Gets the created_at of this QuoteResult.  # noqa: E501


        :return: The created_at of this QuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QuoteResult.


        :param created_at: The created_at of this QuoteResult.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def expires_on(self):
        """Gets the expires_on of this QuoteResult.  # noqa: E501


        :return: The expires_on of this QuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this QuoteResult.


        :param expires_on: The expires_on of this QuoteResult.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    @property
    def created_user(self):
        """Gets the created_user of this QuoteResult.  # noqa: E501


        :return: The created_user of this QuoteResult.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this QuoteResult.


        :param created_user: The created_user of this QuoteResult.  # noqa: E501
        :type: NamedUserRef
        """

        self._created_user = created_user

    @property
    def discriminator(self):
        """Gets the discriminator of this QuoteResult.  # noqa: E501


        :return: The discriminator of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this QuoteResult.


        :param discriminator: The discriminator of this QuoteResult.  # noqa: E501
        :type: str
        """
        if discriminator is None:
            raise ValueError("Invalid value for `discriminator`, must not be `None`")  # noqa: E501
        allowed_values = ["NewBusinessEquityReleaseQuoteResult", "NewBusinessInvestmentQuoteResult", "NewBusinessMortgageQuoteResult", "NewBusinessProtectionQuoteResult", "NewBusinessRetirementQuoteResult", "TopUpQuoteResult"]  # noqa: E501
        if discriminator not in allowed_values:
            raise ValueError(
                "Invalid value for `discriminator` ({0}), must be one of {1}"  # noqa: E501
                .format(discriminator, allowed_values)
            )

        self._discriminator = discriminator

    @property
    def documents_href(self):
        """Gets the documents_href of this QuoteResult.  # noqa: E501


        :return: The documents_href of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._documents_href

    @documents_href.setter
    def documents_href(self, documents_href):
        """Sets the documents_href of this QuoteResult.


        :param documents_href: The documents_href of this QuoteResult.  # noqa: E501
        :type: str
        """

        self._documents_href = documents_href

    @property
    def external_reference(self):
        """Gets the external_reference of this QuoteResult.  # noqa: E501


        :return: The external_reference of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this QuoteResult.


        :param external_reference: The external_reference of this QuoteResult.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def href(self):
        """Gets the href of this QuoteResult.  # noqa: E501


        :return: The href of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this QuoteResult.


        :param href: The href of this QuoteResult.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this QuoteResult.  # noqa: E501


        :return: The id of this QuoteResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuoteResult.


        :param id: The id of this QuoteResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product_name(self):
        """Gets the product_name of this QuoteResult.  # noqa: E501


        :return: The product_name of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this QuoteResult.


        :param product_name: The product_name of this QuoteResult.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def quote(self):
        """Gets the quote of this QuoteResult.  # noqa: E501


        :return: The quote of this QuoteResult.  # noqa: E501
        :rtype: QuoteRef
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this QuoteResult.


        :param quote: The quote of this QuoteResult.  # noqa: E501
        :type: QuoteRef
        """

        self._quote = quote

    @property
    def recommendation(self):
        """Gets the recommendation of this QuoteResult.  # noqa: E501


        :return: The recommendation of this QuoteResult.  # noqa: E501
        :rtype: RecommendationRef
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this QuoteResult.


        :param recommendation: The recommendation of this QuoteResult.  # noqa: E501
        :type: RecommendationRef
        """

        self._recommendation = recommendation

    @property
    def currency(self):
        """Gets the currency of this QuoteResult.  # noqa: E501

        ISO 4217 Currency code for the quote result.  # noqa: E501

        :return: The currency of this QuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this QuoteResult.

        ISO 4217 Currency code for the quote result.  # noqa: E501

        :param currency: The currency of this QuoteResult.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
