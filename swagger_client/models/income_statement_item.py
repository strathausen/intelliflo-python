# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncomeStatementItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'income_statement': 'IncomeStatementRef',
        'is_analysed': 'bool',
        'type': 'str',
        'gross': 'CurrencyValue',
        'net': 'CurrencyValue',
        'plan': 'MatchPlanRef',
        'client': 'MatchClientRef',
        'provider_agency_no': 'str',
        'created_at': 'datetime',
        'created_app': 'NamedAppRef',
        'created_by': 'NamedUserRef'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'income_statement': 'incomeStatement',
        'is_analysed': 'isAnalysed',
        'type': 'type',
        'gross': 'gross',
        'net': 'net',
        'plan': 'plan',
        'client': 'client',
        'provider_agency_no': 'providerAgencyNo',
        'created_at': 'createdAt',
        'created_app': 'createdApp',
        'created_by': 'createdBy'
    }

    def __init__(self, id=None, href=None, income_statement=None, is_analysed=None, type=None, gross=None, net=None, plan=None, client=None, provider_agency_no=None, created_at=None, created_app=None, created_by=None):  # noqa: E501
        """IncomeStatementItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._income_statement = None
        self._is_analysed = None
        self._type = None
        self._gross = None
        self._net = None
        self._plan = None
        self._client = None
        self._provider_agency_no = None
        self._created_at = None
        self._created_app = None
        self._created_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if income_statement is not None:
            self.income_statement = income_statement
        if is_analysed is not None:
            self.is_analysed = is_analysed
        self.type = type
        self.gross = gross
        if net is not None:
            self.net = net
        if plan is not None:
            self.plan = plan
        self.client = client
        if provider_agency_no is not None:
            self.provider_agency_no = provider_agency_no
        if created_at is not None:
            self.created_at = created_at
        if created_app is not None:
            self.created_app = created_app
        if created_by is not None:
            self.created_by = created_by

    @property
    def id(self):
        """Gets the id of this IncomeStatementItem.  # noqa: E501

        The Income statement item identifier.  # noqa: E501

        :return: The id of this IncomeStatementItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncomeStatementItem.

        The Income statement item identifier.  # noqa: E501

        :param id: The id of this IncomeStatementItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this IncomeStatementItem.  # noqa: E501

        The income statement item resource.  # noqa: E501

        :return: The href of this IncomeStatementItem.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this IncomeStatementItem.

        The income statement item resource.  # noqa: E501

        :param href: The href of this IncomeStatementItem.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def income_statement(self):
        """Gets the income_statement of this IncomeStatementItem.  # noqa: E501


        :return: The income_statement of this IncomeStatementItem.  # noqa: E501
        :rtype: IncomeStatementRef
        """
        return self._income_statement

    @income_statement.setter
    def income_statement(self, income_statement):
        """Sets the income_statement of this IncomeStatementItem.


        :param income_statement: The income_statement of this IncomeStatementItem.  # noqa: E501
        :type: IncomeStatementRef
        """

        self._income_statement = income_statement

    @property
    def is_analysed(self):
        """Gets the is_analysed of this IncomeStatementItem.  # noqa: E501

        Indicates whether the item has been analysed.  # noqa: E501

        :return: The is_analysed of this IncomeStatementItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_analysed

    @is_analysed.setter
    def is_analysed(self, is_analysed):
        """Sets the is_analysed of this IncomeStatementItem.

        Indicates whether the item has been analysed.  # noqa: E501

        :param is_analysed: The is_analysed of this IncomeStatementItem.  # noqa: E501
        :type: bool
        """

        self._is_analysed = is_analysed

    @property
    def type(self):
        """Gets the type of this IncomeStatementItem.  # noqa: E501

        The income type  # noqa: E501

        :return: The type of this IncomeStatementItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IncomeStatementItem.

        The income type  # noqa: E501

        :param type: The type of this IncomeStatementItem.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Non", "Adj", "Ind", "Lap", "Ren", "SPr", "Unk", "Lvl", "Fnd", "IntFee", "OngFee", "AdhFee"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def gross(self):
        """Gets the gross of this IncomeStatementItem.  # noqa: E501


        :return: The gross of this IncomeStatementItem.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this IncomeStatementItem.


        :param gross: The gross of this IncomeStatementItem.  # noqa: E501
        :type: CurrencyValue
        """
        if gross is None:
            raise ValueError("Invalid value for `gross`, must not be `None`")  # noqa: E501

        self._gross = gross

    @property
    def net(self):
        """Gets the net of this IncomeStatementItem.  # noqa: E501


        :return: The net of this IncomeStatementItem.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this IncomeStatementItem.


        :param net: The net of this IncomeStatementItem.  # noqa: E501
        :type: CurrencyValue
        """

        self._net = net

    @property
    def plan(self):
        """Gets the plan of this IncomeStatementItem.  # noqa: E501


        :return: The plan of this IncomeStatementItem.  # noqa: E501
        :rtype: MatchPlanRef
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this IncomeStatementItem.


        :param plan: The plan of this IncomeStatementItem.  # noqa: E501
        :type: MatchPlanRef
        """

        self._plan = plan

    @property
    def client(self):
        """Gets the client of this IncomeStatementItem.  # noqa: E501


        :return: The client of this IncomeStatementItem.  # noqa: E501
        :rtype: MatchClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this IncomeStatementItem.


        :param client: The client of this IncomeStatementItem.  # noqa: E501
        :type: MatchClientRef
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client

    @property
    def provider_agency_no(self):
        """Gets the provider_agency_no of this IncomeStatementItem.  # noqa: E501

        The provider agency number.  # noqa: E501

        :return: The provider_agency_no of this IncomeStatementItem.  # noqa: E501
        :rtype: str
        """
        return self._provider_agency_no

    @provider_agency_no.setter
    def provider_agency_no(self, provider_agency_no):
        """Sets the provider_agency_no of this IncomeStatementItem.

        The provider agency number.  # noqa: E501

        :param provider_agency_no: The provider_agency_no of this IncomeStatementItem.  # noqa: E501
        :type: str
        """

        self._provider_agency_no = provider_agency_no

    @property
    def created_at(self):
        """Gets the created_at of this IncomeStatementItem.  # noqa: E501

        UTC datetime for when the statement was created.  # noqa: E501

        :return: The created_at of this IncomeStatementItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IncomeStatementItem.

        UTC datetime for when the statement was created.  # noqa: E501

        :param created_at: The created_at of this IncomeStatementItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_app(self):
        """Gets the created_app of this IncomeStatementItem.  # noqa: E501


        :return: The created_app of this IncomeStatementItem.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_app

    @created_app.setter
    def created_app(self, created_app):
        """Sets the created_app of this IncomeStatementItem.


        :param created_app: The created_app of this IncomeStatementItem.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_app = created_app

    @property
    def created_by(self):
        """Gets the created_by of this IncomeStatementItem.  # noqa: E501


        :return: The created_by of this IncomeStatementItem.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this IncomeStatementItem.


        :param created_by: The created_by of this IncomeStatementItem.  # noqa: E501
        :type: NamedUserRef
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncomeStatementItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncomeStatementItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
