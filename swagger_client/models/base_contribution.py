# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseContribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'plan': 'PlanProviderRef',
        'value': 'CurrencyValue',
        'frequency': 'str',
        'contributor_type': 'str',
        'starts_on': 'datetime',
        'stops_on': 'datetime',
        'is_current': 'bool',
        'note': 'str',
        'escalation': 'EscalationValue',
        'withdrawal': 'WithdrawalRef',
        'percentage': 'float',
        'employment': 'EmploymentRef',
        'applies_to': 'str',
        'tax_basis': 'str',
        'transfer_type': 'str',
        'is_full_transfer': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'plan': 'plan',
        'value': 'value',
        'frequency': 'frequency',
        'contributor_type': 'contributorType',
        'starts_on': 'startsOn',
        'stops_on': 'stopsOn',
        'is_current': 'isCurrent',
        'note': 'note',
        'escalation': 'escalation',
        'withdrawal': 'withdrawal',
        'percentage': 'percentage',
        'employment': 'employment',
        'applies_to': 'appliesTo',
        'tax_basis': 'taxBasis',
        'transfer_type': 'transferType',
        'is_full_transfer': 'isFullTransfer'
    }

    def __init__(self, id=None, href=None, plan=None, value=None, frequency='Single', contributor_type=None, starts_on=None, stops_on=None, is_current=False, note='null', escalation=None, withdrawal=None, percentage=None, employment=None, applies_to='null', tax_basis='null', transfer_type='null', is_full_transfer=False):  # noqa: E501
        """BaseContribution - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._plan = None
        self._value = None
        self._frequency = None
        self._contributor_type = None
        self._starts_on = None
        self._stops_on = None
        self._is_current = None
        self._note = None
        self._escalation = None
        self._withdrawal = None
        self._percentage = None
        self._employment = None
        self._applies_to = None
        self._tax_basis = None
        self._transfer_type = None
        self._is_full_transfer = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if plan is not None:
            self.plan = plan
        if value is not None:
            self.value = value
        self.frequency = frequency
        self.contributor_type = contributor_type
        self.starts_on = starts_on
        if stops_on is not None:
            self.stops_on = stops_on
        if is_current is not None:
            self.is_current = is_current
        if note is not None:
            self.note = note
        if escalation is not None:
            self.escalation = escalation
        if withdrawal is not None:
            self.withdrawal = withdrawal
        if percentage is not None:
            self.percentage = percentage
        if employment is not None:
            self.employment = employment
        if applies_to is not None:
            self.applies_to = applies_to
        if tax_basis is not None:
            self.tax_basis = tax_basis
        if transfer_type is not None:
            self.transfer_type = transfer_type
        if is_full_transfer is not None:
            self.is_full_transfer = is_full_transfer

    @property
    def id(self):
        """Gets the id of this BaseContribution.  # noqa: E501

        Contribution identifier.  # noqa: E501

        :return: The id of this BaseContribution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseContribution.

        Contribution identifier.  # noqa: E501

        :param id: The id of this BaseContribution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BaseContribution.  # noqa: E501

        Reference to the actual contribution.  # noqa: E501

        :return: The href of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseContribution.

        Reference to the actual contribution.  # noqa: E501

        :param href: The href of this BaseContribution.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def plan(self):
        """Gets the plan of this BaseContribution.  # noqa: E501


        :return: The plan of this BaseContribution.  # noqa: E501
        :rtype: PlanProviderRef
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this BaseContribution.


        :param plan: The plan of this BaseContribution.  # noqa: E501
        :type: PlanProviderRef
        """

        self._plan = plan

    @property
    def value(self):
        """Gets the value of this BaseContribution.  # noqa: E501


        :return: The value of this BaseContribution.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BaseContribution.


        :param value: The value of this BaseContribution.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    @property
    def frequency(self):
        """Gets the frequency of this BaseContribution.  # noqa: E501

        Frequency type. When contribution is not of type Regular with frequency type None, then default value will be used instead.  # noqa: E501

        :return: The frequency of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this BaseContribution.

        Frequency type. When contribution is not of type Regular with frequency type None, then default value will be used instead.  # noqa: E501

        :param frequency: The frequency of this BaseContribution.  # noqa: E501
        :type: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def contributor_type(self):
        """Gets the contributor_type of this BaseContribution.  # noqa: E501

        Contributor type.  # noqa: E501

        :return: The contributor_type of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._contributor_type

    @contributor_type.setter
    def contributor_type(self, contributor_type):
        """Sets the contributor_type of this BaseContribution.

        Contributor type.  # noqa: E501

        :param contributor_type: The contributor_type of this BaseContribution.  # noqa: E501
        :type: str
        """
        if contributor_type is None:
            raise ValueError("Invalid value for `contributor_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Self", "Employer", "Other", "N_A", "Government", "Relative", "SalarySacrifice", "PartnerOrSpouse"]  # noqa: E501
        if contributor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contributor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(contributor_type, allowed_values)
            )

        self._contributor_type = contributor_type

    @property
    def starts_on(self):
        """Gets the starts_on of this BaseContribution.  # noqa: E501

        The date when the contribution started.  # noqa: E501

        :return: The starts_on of this BaseContribution.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this BaseContribution.

        The date when the contribution started.  # noqa: E501

        :param starts_on: The starts_on of this BaseContribution.  # noqa: E501
        :type: datetime
        """
        if starts_on is None:
            raise ValueError("Invalid value for `starts_on`, must not be `None`")  # noqa: E501

        self._starts_on = starts_on

    @property
    def stops_on(self):
        """Gets the stops_on of this BaseContribution.  # noqa: E501

        The date when the contribution will stop. Needed by contributions of type Regular.  # noqa: E501

        :return: The stops_on of this BaseContribution.  # noqa: E501
        :rtype: datetime
        """
        return self._stops_on

    @stops_on.setter
    def stops_on(self, stops_on):
        """Sets the stops_on of this BaseContribution.

        The date when the contribution will stop. Needed by contributions of type Regular.  # noqa: E501

        :param stops_on: The stops_on of this BaseContribution.  # noqa: E501
        :type: datetime
        """

        self._stops_on = stops_on

    @property
    def is_current(self):
        """Gets the is_current of this BaseContribution.  # noqa: E501

        Defines if the contribution is current or not.  # noqa: E501

        :return: The is_current of this BaseContribution.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this BaseContribution.

        Defines if the contribution is current or not.  # noqa: E501

        :param is_current: The is_current of this BaseContribution.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def note(self):
        """Gets the note of this BaseContribution.  # noqa: E501

        Represents additional details about this resource.  # noqa: E501

        :return: The note of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BaseContribution.

        Represents additional details about this resource.  # noqa: E501

        :param note: The note of this BaseContribution.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def escalation(self):
        """Gets the escalation of this BaseContribution.  # noqa: E501


        :return: The escalation of this BaseContribution.  # noqa: E501
        :rtype: EscalationValue
        """
        return self._escalation

    @escalation.setter
    def escalation(self, escalation):
        """Sets the escalation of this BaseContribution.


        :param escalation: The escalation of this BaseContribution.  # noqa: E501
        :type: EscalationValue
        """

        self._escalation = escalation

    @property
    def withdrawal(self):
        """Gets the withdrawal of this BaseContribution.  # noqa: E501


        :return: The withdrawal of this BaseContribution.  # noqa: E501
        :rtype: WithdrawalRef
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this BaseContribution.


        :param withdrawal: The withdrawal of this BaseContribution.  # noqa: E501
        :type: WithdrawalRef
        """

        self._withdrawal = withdrawal

    @property
    def percentage(self):
        """Gets the percentage of this BaseContribution.  # noqa: E501

        Contribution percentage.  # noqa: E501

        :return: The percentage of this BaseContribution.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this BaseContribution.

        Contribution percentage.  # noqa: E501

        :param percentage: The percentage of this BaseContribution.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def employment(self):
        """Gets the employment of this BaseContribution.  # noqa: E501


        :return: The employment of this BaseContribution.  # noqa: E501
        :rtype: EmploymentRef
        """
        return self._employment

    @employment.setter
    def employment(self, employment):
        """Sets the employment of this BaseContribution.


        :param employment: The employment of this BaseContribution.  # noqa: E501
        :type: EmploymentRef
        """

        self._employment = employment

    @property
    def applies_to(self):
        """Gets the applies_to of this BaseContribution.  # noqa: E501


        :return: The applies_to of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this BaseContribution.


        :param applies_to: The applies_to of this BaseContribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Initial", "Recurring", "Both"]  # noqa: E501
        if applies_to not in allowed_values:
            raise ValueError(
                "Invalid value for `applies_to` ({0}), must be one of {1}"  # noqa: E501
                .format(applies_to, allowed_values)
            )

        self._applies_to = applies_to

    @property
    def tax_basis(self):
        """Gets the tax_basis of this BaseContribution.  # noqa: E501

        Tax Basis on proposed contribution.  # noqa: E501

        :return: The tax_basis of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._tax_basis

    @tax_basis.setter
    def tax_basis(self, tax_basis):
        """Sets the tax_basis of this BaseContribution.

        Tax Basis on proposed contribution.  # noqa: E501

        :param tax_basis: The tax_basis of this BaseContribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["Net", "Gross", "NA"]  # noqa: E501
        if tax_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_basis, allowed_values)
            )

        self._tax_basis = tax_basis

    @property
    def transfer_type(self):
        """Gets the transfer_type of this BaseContribution.  # noqa: E501

        Transfer type applicable for the Contribution of type transfer.  # noqa: E501

        :return: The transfer_type of this BaseContribution.  # noqa: E501
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this BaseContribution.

        Transfer type applicable for the Contribution of type transfer.  # noqa: E501

        :param transfer_type: The transfer_type of this BaseContribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["Cash", "Inspecie"]  # noqa: E501
        if transfer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transfer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transfer_type, allowed_values)
            )

        self._transfer_type = transfer_type

    @property
    def is_full_transfer(self):
        """Gets the is_full_transfer of this BaseContribution.  # noqa: E501

        Determines whether transfer is full or partial.  # noqa: E501

        :return: The is_full_transfer of this BaseContribution.  # noqa: E501
        :rtype: bool
        """
        return self._is_full_transfer

    @is_full_transfer.setter
    def is_full_transfer(self, is_full_transfer):
        """Sets the is_full_transfer of this BaseContribution.

        Determines whether transfer is full or partial.  # noqa: E501

        :param is_full_transfer: The is_full_transfer of this BaseContribution.  # noqa: E501
        :type: bool
        """

        self._is_full_transfer = is_full_transfer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseContribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseContribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
