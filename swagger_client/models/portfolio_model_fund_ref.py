# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_portfolio_model_fund_ref import BasePortfolioModelFundRef  # noqa: F401,E501

class PortfolioModelFundRef(BasePortfolioModelFundRef):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'id': 'str',
        'preferred_code_type': 'str',
        'codes': 'FundEquityCodes',
        'is_locked': 'bool',
        'price': 'float',
        'currency': 'str',
        'fund_id': 'int'
    }
    if hasattr(BasePortfolioModelFundRef, "swagger_types"):
        swagger_types.update(BasePortfolioModelFundRef.swagger_types)

    attribute_map = {
        'href': 'href',
        'id': 'id',
        'preferred_code_type': 'preferredCodeType',
        'codes': 'codes',
        'is_locked': 'isLocked',
        'price': 'price',
        'currency': 'currency',
        'fund_id': 'fundId'
    }
    if hasattr(BasePortfolioModelFundRef, "attribute_map"):
        attribute_map.update(BasePortfolioModelFundRef.attribute_map)

    def __init__(self, href=None, id=None, preferred_code_type=None, codes=None, is_locked=None, price=None, currency=None, fund_id=None, *args, **kwargs):  # noqa: E501
        """PortfolioModelFundRef - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._id = None
        self._preferred_code_type = None
        self._codes = None
        self._is_locked = None
        self._price = None
        self._currency = None
        self._fund_id = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if preferred_code_type is not None:
            self.preferred_code_type = preferred_code_type
        if codes is not None:
            self.codes = codes
        if is_locked is not None:
            self.is_locked = is_locked
        if price is not None:
            self.price = price
        if currency is not None:
            self.currency = currency
        if fund_id is not None:
            self.fund_id = fund_id
        BasePortfolioModelFundRef.__init__(self, *args, **kwargs)

    @property
    def href(self):
        """Gets the href of this PortfolioModelFundRef.  # noqa: E501

        The fund reference.  # noqa: E501

        :return: The href of this PortfolioModelFundRef.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PortfolioModelFundRef.

        The fund reference.  # noqa: E501

        :param href: The href of this PortfolioModelFundRef.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this PortfolioModelFundRef.  # noqa: E501

        The fund identifier.  # noqa: E501

        :return: The id of this PortfolioModelFundRef.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortfolioModelFundRef.

        The fund identifier.  # noqa: E501

        :param id: The id of this PortfolioModelFundRef.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def preferred_code_type(self):
        """Gets the preferred_code_type of this PortfolioModelFundRef.  # noqa: E501


        :return: The preferred_code_type of this PortfolioModelFundRef.  # noqa: E501
        :rtype: str
        """
        return self._preferred_code_type

    @preferred_code_type.setter
    def preferred_code_type(self, preferred_code_type):
        """Sets the preferred_code_type of this PortfolioModelFundRef.


        :param preferred_code_type: The preferred_code_type of this PortfolioModelFundRef.  # noqa: E501
        :type: str
        """
        allowed_values = ["ISIN", "SEDOL", "CITI", "MEX", "EPIC", "PROVIDER"]  # noqa: E501
        if preferred_code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_code_type` ({0}), must be one of {1}"  # noqa: E501
                .format(preferred_code_type, allowed_values)
            )

        self._preferred_code_type = preferred_code_type

    @property
    def codes(self):
        """Gets the codes of this PortfolioModelFundRef.  # noqa: E501


        :return: The codes of this PortfolioModelFundRef.  # noqa: E501
        :rtype: FundEquityCodes
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this PortfolioModelFundRef.


        :param codes: The codes of this PortfolioModelFundRef.  # noqa: E501
        :type: FundEquityCodes
        """

        self._codes = codes

    @property
    def is_locked(self):
        """Gets the is_locked of this PortfolioModelFundRef.  # noqa: E501


        :return: The is_locked of this PortfolioModelFundRef.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this PortfolioModelFundRef.


        :param is_locked: The is_locked of this PortfolioModelFundRef.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def price(self):
        """Gets the price of this PortfolioModelFundRef.  # noqa: E501


        :return: The price of this PortfolioModelFundRef.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PortfolioModelFundRef.


        :param price: The price of this PortfolioModelFundRef.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def currency(self):
        """Gets the currency of this PortfolioModelFundRef.  # noqa: E501


        :return: The currency of this PortfolioModelFundRef.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PortfolioModelFundRef.


        :param currency: The currency of this PortfolioModelFundRef.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def fund_id(self):
        """Gets the fund_id of this PortfolioModelFundRef.  # noqa: E501


        :return: The fund_id of this PortfolioModelFundRef.  # noqa: E501
        :rtype: int
        """
        return self._fund_id

    @fund_id.setter
    def fund_id(self, fund_id):
        """Sets the fund_id of this PortfolioModelFundRef.


        :param fund_id: The fund_id of this PortfolioModelFundRef.  # noqa: E501
        :type: int
        """

        self._fund_id = fund_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioModelFundRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioModelFundRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
