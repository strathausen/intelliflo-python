# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanHoldingUnitValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'float',
        'number_updated_on': 'datetime',
        'price_updated_on': 'datetime',
        'price': 'CurrencyValue'
    }

    attribute_map = {
        'number': 'number',
        'number_updated_on': 'numberUpdatedOn',
        'price_updated_on': 'priceUpdatedOn',
        'price': 'price'
    }

    def __init__(self, number=None, number_updated_on=None, price_updated_on=None, price=None):  # noqa: E501
        """PlanHoldingUnitValue - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._number_updated_on = None
        self._price_updated_on = None
        self._price = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if number_updated_on is not None:
            self.number_updated_on = number_updated_on
        if price_updated_on is not None:
            self.price_updated_on = price_updated_on
        if price is not None:
            self.price = price

    @property
    def number(self):
        """Gets the number of this PlanHoldingUnitValue.  # noqa: E501

        Number of units  Editable on POST and PUT  # noqa: E501

        :return: The number of this PlanHoldingUnitValue.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PlanHoldingUnitValue.

        Number of units  Editable on POST and PUT  # noqa: E501

        :param number: The number of this PlanHoldingUnitValue.  # noqa: E501
        :type: float
        """

        self._number = number

    @property
    def number_updated_on(self):
        """Gets the number_updated_on of this PlanHoldingUnitValue.  # noqa: E501

        Date when mumber of units updated  Editable on POST and PUT  # noqa: E501

        :return: The number_updated_on of this PlanHoldingUnitValue.  # noqa: E501
        :rtype: datetime
        """
        return self._number_updated_on

    @number_updated_on.setter
    def number_updated_on(self, number_updated_on):
        """Sets the number_updated_on of this PlanHoldingUnitValue.

        Date when mumber of units updated  Editable on POST and PUT  # noqa: E501

        :param number_updated_on: The number_updated_on of this PlanHoldingUnitValue.  # noqa: E501
        :type: datetime
        """

        self._number_updated_on = number_updated_on

    @property
    def price_updated_on(self):
        """Gets the price_updated_on of this PlanHoldingUnitValue.  # noqa: E501

        Date when price was updated  Editable on POST and PUT  # noqa: E501

        :return: The price_updated_on of this PlanHoldingUnitValue.  # noqa: E501
        :rtype: datetime
        """
        return self._price_updated_on

    @price_updated_on.setter
    def price_updated_on(self, price_updated_on):
        """Sets the price_updated_on of this PlanHoldingUnitValue.

        Date when price was updated  Editable on POST and PUT  # noqa: E501

        :param price_updated_on: The price_updated_on of this PlanHoldingUnitValue.  # noqa: E501
        :type: datetime
        """

        self._price_updated_on = price_updated_on

    @property
    def price(self):
        """Gets the price of this PlanHoldingUnitValue.  # noqa: E501


        :return: The price of this PlanHoldingUnitValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PlanHoldingUnitValue.


        :param price: The price of this PlanHoldingUnitValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanHoldingUnitValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanHoldingUnitValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
