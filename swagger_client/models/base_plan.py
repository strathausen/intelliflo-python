# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasePlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'currency': 'str',
        'exchange_rate': 'CurrencyRef',
        'discriminator': 'str',
        'plan_type': 'PlanTypeRef',
        'policy_number': 'str',
        'starts_on': 'datetime',
        'ends_on': 'datetime',
        'product_name': 'str',
        'product_provider': 'NamedProductProviderRef',
        'selling_adviser': 'AdviserRef',
        'owners': 'list[PlanOwnerRef]',
        'is_visible_to_client': 'bool',
        'current_status': 'str',
        'system_status': 'str',
        'is_pre_existing': 'bool',
        'reference': 'str',
        'latest_valuation': 'PlanValuation',
        'plan_types_href': 'str',
        'valuations_href': 'str',
        'contributions_href': 'str',
        'topups_href': 'str',
        'plan_holdings_href': 'str',
        'lifecycle': 'NamedLifecycleRef',
        'is_topup': 'bool',
        'parent': 'PlanRef',
        'is_sub_plan': 'bool',
        'is_advice_off_panel': 'bool',
        'other_references': 'PlanReferences',
        'client_category': 'str',
        'available_plan_purposes_href': 'str',
        'plan_purposes_href': 'str',
        'withdrawals_href': 'str',
        'sub_plans_href': 'str',
        'is_client_suitable_for_target_market': 'bool',
        'quote_result': 'QuoteResultRef',
        'banding': 'PlanBandingRef',
        'forward_income_to': 'ForwardIncomeToRef',
        'administrator': 'UserRef2',
        'paraplanner': 'UserRef2',
        'advice_status': 'AdviceStatusValue',
        'tags': 'list[str]',
        'group': 'GroupRef',
        'created_by': 'UserRef2',
        'document_delivery': 'DocumentDeliveryValue',
        'is_provider_managed': 'bool',
        'performance_starts_on': 'datetime',
        'performance_ends_on': 'datetime',
        'provider_codes': 'ProviderCodesValue',
        'created_at': 'datetime',
        'program': 'ProgramNamedRef',
        'risk_profile': 'RiskProfileRef'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'currency': 'currency',
        'exchange_rate': 'exchangeRate',
        'discriminator': 'discriminator',
        'plan_type': 'planType',
        'policy_number': 'policyNumber',
        'starts_on': 'startsOn',
        'ends_on': 'endsOn',
        'product_name': 'productName',
        'product_provider': 'productProvider',
        'selling_adviser': 'sellingAdviser',
        'owners': 'owners',
        'is_visible_to_client': 'isVisibleToClient',
        'current_status': 'currentStatus',
        'system_status': 'systemStatus',
        'is_pre_existing': 'isPreExisting',
        'reference': 'reference',
        'latest_valuation': 'latestValuation',
        'plan_types_href': 'planTypes_href',
        'valuations_href': 'valuations_href',
        'contributions_href': 'contributions_href',
        'topups_href': 'topups_href',
        'plan_holdings_href': 'planHoldings_href',
        'lifecycle': 'lifecycle',
        'is_topup': 'isTopup',
        'parent': 'parent',
        'is_sub_plan': 'isSubPlan',
        'is_advice_off_panel': 'isAdviceOffPanel',
        'other_references': 'otherReferences',
        'client_category': 'clientCategory',
        'available_plan_purposes_href': 'available_plan_purposes_href',
        'plan_purposes_href': 'plan_purposes_href',
        'withdrawals_href': 'withdrawals_href',
        'sub_plans_href': 'subPlans_href',
        'is_client_suitable_for_target_market': 'isClientSuitableForTargetMarket',
        'quote_result': 'quoteResult',
        'banding': 'banding',
        'forward_income_to': 'forwardIncomeTo',
        'administrator': 'administrator',
        'paraplanner': 'paraplanner',
        'advice_status': 'adviceStatus',
        'tags': 'tags',
        'group': 'group',
        'created_by': 'createdBy',
        'document_delivery': 'documentDelivery',
        'is_provider_managed': 'isProviderManaged',
        'performance_starts_on': 'performanceStartsOn',
        'performance_ends_on': 'performanceEndsOn',
        'provider_codes': 'providerCodes',
        'created_at': 'createdAt',
        'program': 'program',
        'risk_profile': 'riskProfile'
    }

    discriminator_value_class_map = {
          'GeneralMedicalInsurancePlan': 'GeneralMedicalInsurancePlan',
'LoanCreditPlan': 'LoanCreditPlan',
'GroupProtectionPlan': 'GroupProtectionPlan',
'LifeAssuredInvestmentPlan': 'LifeAssuredInvestmentPlan',
'ProtectionPlan': 'ProtectionPlan',
'EquityReleasePlan': 'EquityReleasePlan',
'PersonalProtectionPlan': 'PersonalProtectionPlan',
'MortgagePlan': 'MortgagePlan',
'InvestmentPlan': 'InvestmentPlan',
'LiabilityPlan': 'LiabilityPlan',
'PensionDefinedBenefitPlan': 'PensionDefinedBenefitPlan',
'PensionContributionDrawdownPlan': 'PensionContributionDrawdownPlan',
'Plan': 'Plan',
'AnnuityPlan': 'AnnuityPlan',
'AssetPlan': 'AssetPlan',
'CashBankAccountPlan': 'CashBankAccountPlan'    }

    def __init__(self, id=None, href=None, currency='null', exchange_rate=None, discriminator=None, plan_type=None, policy_number='null', starts_on=None, ends_on=None, product_name='null', product_provider=None, selling_adviser=None, owners=None, is_visible_to_client=None, current_status='null', system_status=None, is_pre_existing=False, reference=None, latest_valuation=None, plan_types_href=None, valuations_href=None, contributions_href=None, topups_href=None, plan_holdings_href=None, lifecycle=None, is_topup=None, parent=None, is_sub_plan=None, is_advice_off_panel=False, other_references=None, client_category='null', available_plan_purposes_href=None, plan_purposes_href=None, withdrawals_href=None, sub_plans_href=None, is_client_suitable_for_target_market=False, quote_result=None, banding=None, forward_income_to=None, administrator=None, paraplanner=None, advice_status=None, tags=None, group=None, created_by=None, document_delivery=None, is_provider_managed=False, performance_starts_on=None, performance_ends_on=None, provider_codes=None, created_at=None, program=None, risk_profile=None):  # noqa: E501
        """BasePlan - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._currency = None
        self._exchange_rate = None
        self._discriminator = None
        self._plan_type = None
        self._policy_number = None
        self._starts_on = None
        self._ends_on = None
        self._product_name = None
        self._product_provider = None
        self._selling_adviser = None
        self._owners = None
        self._is_visible_to_client = None
        self._current_status = None
        self._system_status = None
        self._is_pre_existing = None
        self._reference = None
        self._latest_valuation = None
        self._plan_types_href = None
        self._valuations_href = None
        self._contributions_href = None
        self._topups_href = None
        self._plan_holdings_href = None
        self._lifecycle = None
        self._is_topup = None
        self._parent = None
        self._is_sub_plan = None
        self._is_advice_off_panel = None
        self._other_references = None
        self._client_category = None
        self._available_plan_purposes_href = None
        self._plan_purposes_href = None
        self._withdrawals_href = None
        self._sub_plans_href = None
        self._is_client_suitable_for_target_market = None
        self._quote_result = None
        self._banding = None
        self._forward_income_to = None
        self._administrator = None
        self._paraplanner = None
        self._advice_status = None
        self._tags = None
        self._group = None
        self._created_by = None
        self._document_delivery = None
        self._is_provider_managed = None
        self._performance_starts_on = None
        self._performance_ends_on = None
        self._provider_codes = None
        self._created_at = None
        self._program = None
        self._risk_profile = None
        self.discriminator = 'discriminator'
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if currency is not None:
            self.currency = currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        self.discriminator = discriminator
        self.plan_type = plan_type
        if policy_number is not None:
            self.policy_number = policy_number
        if starts_on is not None:
            self.starts_on = starts_on
        if ends_on is not None:
            self.ends_on = ends_on
        if product_name is not None:
            self.product_name = product_name
        self.product_provider = product_provider
        self.selling_adviser = selling_adviser
        self.owners = owners
        if is_visible_to_client is not None:
            self.is_visible_to_client = is_visible_to_client
        if current_status is not None:
            self.current_status = current_status
        if system_status is not None:
            self.system_status = system_status
        if is_pre_existing is not None:
            self.is_pre_existing = is_pre_existing
        if reference is not None:
            self.reference = reference
        if latest_valuation is not None:
            self.latest_valuation = latest_valuation
        if plan_types_href is not None:
            self.plan_types_href = plan_types_href
        if valuations_href is not None:
            self.valuations_href = valuations_href
        if contributions_href is not None:
            self.contributions_href = contributions_href
        if topups_href is not None:
            self.topups_href = topups_href
        if plan_holdings_href is not None:
            self.plan_holdings_href = plan_holdings_href
        self.lifecycle = lifecycle
        if is_topup is not None:
            self.is_topup = is_topup
        if parent is not None:
            self.parent = parent
        if is_sub_plan is not None:
            self.is_sub_plan = is_sub_plan
        if is_advice_off_panel is not None:
            self.is_advice_off_panel = is_advice_off_panel
        if other_references is not None:
            self.other_references = other_references
        if client_category is not None:
            self.client_category = client_category
        if available_plan_purposes_href is not None:
            self.available_plan_purposes_href = available_plan_purposes_href
        if plan_purposes_href is not None:
            self.plan_purposes_href = plan_purposes_href
        if withdrawals_href is not None:
            self.withdrawals_href = withdrawals_href
        if sub_plans_href is not None:
            self.sub_plans_href = sub_plans_href
        if is_client_suitable_for_target_market is not None:
            self.is_client_suitable_for_target_market = is_client_suitable_for_target_market
        if quote_result is not None:
            self.quote_result = quote_result
        if banding is not None:
            self.banding = banding
        if forward_income_to is not None:
            self.forward_income_to = forward_income_to
        if administrator is not None:
            self.administrator = administrator
        if paraplanner is not None:
            self.paraplanner = paraplanner
        if advice_status is not None:
            self.advice_status = advice_status
        if tags is not None:
            self.tags = tags
        if group is not None:
            self.group = group
        if created_by is not None:
            self.created_by = created_by
        if document_delivery is not None:
            self.document_delivery = document_delivery
        if is_provider_managed is not None:
            self.is_provider_managed = is_provider_managed
        if performance_starts_on is not None:
            self.performance_starts_on = performance_starts_on
        if performance_ends_on is not None:
            self.performance_ends_on = performance_ends_on
        if provider_codes is not None:
            self.provider_codes = provider_codes
        if created_at is not None:
            self.created_at = created_at
        if program is not None:
            self.program = program
        if risk_profile is not None:
            self.risk_profile = risk_profile

    @property
    def id(self):
        """Gets the id of this BasePlan.  # noqa: E501


        :return: The id of this BasePlan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasePlan.


        :param id: The id of this BasePlan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BasePlan.  # noqa: E501


        :return: The href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BasePlan.


        :param href: The href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def currency(self):
        """Gets the currency of this BasePlan.  # noqa: E501

        Optional three-letter ISO 4217 alphabetic currency code. If different from the default currency  # noqa: E501

        :return: The currency of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BasePlan.

        Optional three-letter ISO 4217 alphabetic currency code. If different from the default currency  # noqa: E501

        :param currency: The currency of this BasePlan.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this BasePlan.  # noqa: E501


        :return: The exchange_rate of this BasePlan.  # noqa: E501
        :rtype: CurrencyRef
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this BasePlan.


        :param exchange_rate: The exchange_rate of this BasePlan.  # noqa: E501
        :type: CurrencyRef
        """

        self._exchange_rate = exchange_rate

    @property
    def discriminator(self):
        """Gets the discriminator of this BasePlan.  # noqa: E501


        :return: The discriminator of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this BasePlan.


        :param discriminator: The discriminator of this BasePlan.  # noqa: E501
        :type: str
        """
        if discriminator is None:
            raise ValueError("Invalid value for `discriminator`, must not be `None`")  # noqa: E501
        allowed_values = ["AnnuityPlan", "CashBankAccountPlan", "EquityReleasePlan", "GeneralMedicalInsurancePlan", "GroupProtectionPlan", "InvestmentPlan", "LifeAssuredInvestmentPlan", "LoanCreditPlan", "MortgagePlan", "PensionContributionDrawdownPlan", "PensionDefinedBenefitPlan", "PersonalProtectionPlan", "Plan"]  # noqa: E501
        if discriminator not in allowed_values:
            raise ValueError(
                "Invalid value for `discriminator` ({0}), must be one of {1}"  # noqa: E501
                .format(discriminator, allowed_values)
            )

        self._discriminator = discriminator

    @property
    def plan_type(self):
        """Gets the plan_type of this BasePlan.  # noqa: E501


        :return: The plan_type of this BasePlan.  # noqa: E501
        :rtype: PlanTypeRef
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this BasePlan.


        :param plan_type: The plan_type of this BasePlan.  # noqa: E501
        :type: PlanTypeRef
        """
        if plan_type is None:
            raise ValueError("Invalid value for `plan_type`, must not be `None`")  # noqa: E501

        self._plan_type = plan_type

    @property
    def policy_number(self):
        """Gets the policy_number of this BasePlan.  # noqa: E501

        Unique reference number to the Client's Plan as issued by the Platform Provider.  # noqa: E501

        :return: The policy_number of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number):
        """Sets the policy_number of this BasePlan.

        Unique reference number to the Client's Plan as issued by the Platform Provider.  # noqa: E501

        :param policy_number: The policy_number of this BasePlan.  # noqa: E501
        :type: str
        """

        self._policy_number = policy_number

    @property
    def starts_on(self):
        """Gets the starts_on of this BasePlan.  # noqa: E501

        Policy Start Date of the plan (when it has been placed \"in force\").  # noqa: E501

        :return: The starts_on of this BasePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this BasePlan.

        Policy Start Date of the plan (when it has been placed \"in force\").  # noqa: E501

        :param starts_on: The starts_on of this BasePlan.  # noqa: E501
        :type: datetime
        """

        self._starts_on = starts_on

    @property
    def ends_on(self):
        """Gets the ends_on of this BasePlan.  # noqa: E501

        Policy End Date of the plan (if it has one).  # noqa: E501

        :return: The ends_on of this BasePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_on

    @ends_on.setter
    def ends_on(self, ends_on):
        """Sets the ends_on of this BasePlan.

        Policy End Date of the plan (if it has one).  # noqa: E501

        :param ends_on: The ends_on of this BasePlan.  # noqa: E501
        :type: datetime
        """

        self._ends_on = ends_on

    @property
    def product_name(self):
        """Gets the product_name of this BasePlan.  # noqa: E501

        Optional name which would usually be the market name of the product.  # noqa: E501

        :return: The product_name of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this BasePlan.

        Optional name which would usually be the market name of the product.  # noqa: E501

        :param product_name: The product_name of this BasePlan.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_provider(self):
        """Gets the product_provider of this BasePlan.  # noqa: E501


        :return: The product_provider of this BasePlan.  # noqa: E501
        :rtype: NamedProductProviderRef
        """
        return self._product_provider

    @product_provider.setter
    def product_provider(self, product_provider):
        """Sets the product_provider of this BasePlan.


        :param product_provider: The product_provider of this BasePlan.  # noqa: E501
        :type: NamedProductProviderRef
        """
        if product_provider is None:
            raise ValueError("Invalid value for `product_provider`, must not be `None`")  # noqa: E501

        self._product_provider = product_provider

    @property
    def selling_adviser(self):
        """Gets the selling_adviser of this BasePlan.  # noqa: E501


        :return: The selling_adviser of this BasePlan.  # noqa: E501
        :rtype: AdviserRef
        """
        return self._selling_adviser

    @selling_adviser.setter
    def selling_adviser(self, selling_adviser):
        """Sets the selling_adviser of this BasePlan.


        :param selling_adviser: The selling_adviser of this BasePlan.  # noqa: E501
        :type: AdviserRef
        """
        if selling_adviser is None:
            raise ValueError("Invalid value for `selling_adviser`, must not be `None`")  # noqa: E501

        self._selling_adviser = selling_adviser

    @property
    def owners(self):
        """Gets the owners of this BasePlan.  # noqa: E501

        Each plan can have one or more owners. The Client could be purchasing the product on behalf of someone else.  # noqa: E501

        :return: The owners of this BasePlan.  # noqa: E501
        :rtype: list[PlanOwnerRef]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this BasePlan.

        Each plan can have one or more owners. The Client could be purchasing the product on behalf of someone else.  # noqa: E501

        :param owners: The owners of this BasePlan.  # noqa: E501
        :type: list[PlanOwnerRef]
        """
        if owners is None:
            raise ValueError("Invalid value for `owners`, must not be `None`")  # noqa: E501

        self._owners = owners

    @property
    def is_visible_to_client(self):
        """Gets the is_visible_to_client of this BasePlan.  # noqa: E501

        Indicates whether or not the plan is visible to the client.  # noqa: E501

        :return: The is_visible_to_client of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_to_client

    @is_visible_to_client.setter
    def is_visible_to_client(self, is_visible_to_client):
        """Sets the is_visible_to_client of this BasePlan.

        Indicates whether or not the plan is visible to the client.  # noqa: E501

        :param is_visible_to_client: The is_visible_to_client of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_visible_to_client = is_visible_to_client

    @property
    def current_status(self):
        """Gets the current_status of this BasePlan.  # noqa: E501

        Indicates whether or not the plan is currently marked as \"In force\".  # noqa: E501

        :return: The current_status of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this BasePlan.

        Indicates whether or not the plan is currently marked as \"In force\".  # noqa: E501

        :param current_status: The current_status of this BasePlan.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    @property
    def system_status(self):
        """Gets the system_status of this BasePlan.  # noqa: E501

        System name of the plan status.  # noqa: E501

        :return: The system_status of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._system_status

    @system_status.setter
    def system_status(self, system_status):
        """Sets the system_status of this BasePlan.

        System name of the plan status.  # noqa: E501

        :param system_status: The system_status of this BasePlan.  # noqa: E501
        :type: str
        """

        self._system_status = system_status

    @property
    def is_pre_existing(self):
        """Gets the is_pre_existing of this BasePlan.  # noqa: E501

        The Client has an existing plan which pre-dates their association with this Adviser firm.  # noqa: E501

        :return: The is_pre_existing of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_pre_existing

    @is_pre_existing.setter
    def is_pre_existing(self, is_pre_existing):
        """Sets the is_pre_existing of this BasePlan.

        The Client has an existing plan which pre-dates their association with this Adviser firm.  # noqa: E501

        :param is_pre_existing: The is_pre_existing of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_pre_existing = is_pre_existing

    @property
    def reference(self):
        """Gets the reference of this BasePlan.  # noqa: E501

        Internally assigned IO plan reference - generated at plan creation.  # noqa: E501

        :return: The reference of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BasePlan.

        Internally assigned IO plan reference - generated at plan creation.  # noqa: E501

        :param reference: The reference of this BasePlan.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def latest_valuation(self):
        """Gets the latest_valuation of this BasePlan.  # noqa: E501


        :return: The latest_valuation of this BasePlan.  # noqa: E501
        :rtype: PlanValuation
        """
        return self._latest_valuation

    @latest_valuation.setter
    def latest_valuation(self, latest_valuation):
        """Sets the latest_valuation of this BasePlan.


        :param latest_valuation: The latest_valuation of this BasePlan.  # noqa: E501
        :type: PlanValuation
        """

        self._latest_valuation = latest_valuation

    @property
    def plan_types_href(self):
        """Gets the plan_types_href of this BasePlan.  # noqa: E501


        :return: The plan_types_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._plan_types_href

    @plan_types_href.setter
    def plan_types_href(self, plan_types_href):
        """Sets the plan_types_href of this BasePlan.


        :param plan_types_href: The plan_types_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._plan_types_href = plan_types_href

    @property
    def valuations_href(self):
        """Gets the valuations_href of this BasePlan.  # noqa: E501


        :return: The valuations_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._valuations_href

    @valuations_href.setter
    def valuations_href(self, valuations_href):
        """Sets the valuations_href of this BasePlan.


        :param valuations_href: The valuations_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._valuations_href = valuations_href

    @property
    def contributions_href(self):
        """Gets the contributions_href of this BasePlan.  # noqa: E501


        :return: The contributions_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._contributions_href

    @contributions_href.setter
    def contributions_href(self, contributions_href):
        """Sets the contributions_href of this BasePlan.


        :param contributions_href: The contributions_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._contributions_href = contributions_href

    @property
    def topups_href(self):
        """Gets the topups_href of this BasePlan.  # noqa: E501


        :return: The topups_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._topups_href

    @topups_href.setter
    def topups_href(self, topups_href):
        """Sets the topups_href of this BasePlan.


        :param topups_href: The topups_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._topups_href = topups_href

    @property
    def plan_holdings_href(self):
        """Gets the plan_holdings_href of this BasePlan.  # noqa: E501


        :return: The plan_holdings_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._plan_holdings_href

    @plan_holdings_href.setter
    def plan_holdings_href(self, plan_holdings_href):
        """Sets the plan_holdings_href of this BasePlan.


        :param plan_holdings_href: The plan_holdings_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._plan_holdings_href = plan_holdings_href

    @property
    def lifecycle(self):
        """Gets the lifecycle of this BasePlan.  # noqa: E501


        :return: The lifecycle of this BasePlan.  # noqa: E501
        :rtype: NamedLifecycleRef
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this BasePlan.


        :param lifecycle: The lifecycle of this BasePlan.  # noqa: E501
        :type: NamedLifecycleRef
        """
        if lifecycle is None:
            raise ValueError("Invalid value for `lifecycle`, must not be `None`")  # noqa: E501

        self._lifecycle = lifecycle

    @property
    def is_topup(self):
        """Gets the is_topup of this BasePlan.  # noqa: E501

        Does the plan represent a TopUp of a Parent/Master plan?  # noqa: E501

        :return: The is_topup of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_topup

    @is_topup.setter
    def is_topup(self, is_topup):
        """Sets the is_topup of this BasePlan.

        Does the plan represent a TopUp of a Parent/Master plan?  # noqa: E501

        :param is_topup: The is_topup of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_topup = is_topup

    @property
    def parent(self):
        """Gets the parent of this BasePlan.  # noqa: E501


        :return: The parent of this BasePlan.  # noqa: E501
        :rtype: PlanRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this BasePlan.


        :param parent: The parent of this BasePlan.  # noqa: E501
        :type: PlanRef
        """

        self._parent = parent

    @property
    def is_sub_plan(self):
        """Gets the is_sub_plan of this BasePlan.  # noqa: E501

        Returns true if the plan is part of a wrapper (has a parent plan).  # noqa: E501

        :return: The is_sub_plan of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_sub_plan

    @is_sub_plan.setter
    def is_sub_plan(self, is_sub_plan):
        """Sets the is_sub_plan of this BasePlan.

        Returns true if the plan is part of a wrapper (has a parent plan).  # noqa: E501

        :param is_sub_plan: The is_sub_plan of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_sub_plan = is_sub_plan

    @property
    def is_advice_off_panel(self):
        """Gets the is_advice_off_panel of this BasePlan.  # noqa: E501

        Is the Adviser recommending a product which is outside of their regulated sphere?  This would be considered \"Off-panel\" advice. Only assignable on POST.  # noqa: E501

        :return: The is_advice_off_panel of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_advice_off_panel

    @is_advice_off_panel.setter
    def is_advice_off_panel(self, is_advice_off_panel):
        """Sets the is_advice_off_panel of this BasePlan.

        Is the Adviser recommending a product which is outside of their regulated sphere?  This would be considered \"Off-panel\" advice. Only assignable on POST.  # noqa: E501

        :param is_advice_off_panel: The is_advice_off_panel of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_advice_off_panel = is_advice_off_panel

    @property
    def other_references(self):
        """Gets the other_references of this BasePlan.  # noqa: E501


        :return: The other_references of this BasePlan.  # noqa: E501
        :rtype: PlanReferences
        """
        return self._other_references

    @other_references.setter
    def other_references(self, other_references):
        """Sets the other_references of this BasePlan.


        :param other_references: The other_references of this BasePlan.  # noqa: E501
        :type: PlanReferences
        """

        self._other_references = other_references

    @property
    def client_category(self):
        """Gets the client_category of this BasePlan.  # noqa: E501

        The categorisation of a client defines the level of protection to which they are entitled based upon their experience, knowledge and expertise in making financial decisions.  There are three areas of business which these categories will cover: Retail, which contains the categories of Retail, Professional and Eligible Counterparty;  Mortgage, which will contain the categories of Customer and Large Business Customer; and Insurance, which will cover Client (Consumer) and Commercial Client (Commercial Customer).  # noqa: E501

        :return: The client_category of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._client_category

    @client_category.setter
    def client_category(self, client_category):
        """Sets the client_category of this BasePlan.

        The categorisation of a client defines the level of protection to which they are entitled based upon their experience, knowledge and expertise in making financial decisions.  There are three areas of business which these categories will cover: Retail, which contains the categories of Retail, Professional and Eligible Counterparty;  Mortgage, which will contain the categories of Customer and Large Business Customer; and Insurance, which will cover Client (Consumer) and Commercial Client (Commercial Customer).  # noqa: E501

        :param client_category: The client_category of this BasePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Retail", "Professional", "EligibleCounterparty", "Customer", "LargeBusinessCustomer", "Consumer", "CommercialCustomer"]  # noqa: E501
        if client_category not in allowed_values:
            raise ValueError(
                "Invalid value for `client_category` ({0}), must be one of {1}"  # noqa: E501
                .format(client_category, allowed_values)
            )

        self._client_category = client_category

    @property
    def available_plan_purposes_href(self):
        """Gets the available_plan_purposes_href of this BasePlan.  # noqa: E501


        :return: The available_plan_purposes_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._available_plan_purposes_href

    @available_plan_purposes_href.setter
    def available_plan_purposes_href(self, available_plan_purposes_href):
        """Sets the available_plan_purposes_href of this BasePlan.


        :param available_plan_purposes_href: The available_plan_purposes_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._available_plan_purposes_href = available_plan_purposes_href

    @property
    def plan_purposes_href(self):
        """Gets the plan_purposes_href of this BasePlan.  # noqa: E501


        :return: The plan_purposes_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._plan_purposes_href

    @plan_purposes_href.setter
    def plan_purposes_href(self, plan_purposes_href):
        """Sets the plan_purposes_href of this BasePlan.


        :param plan_purposes_href: The plan_purposes_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._plan_purposes_href = plan_purposes_href

    @property
    def withdrawals_href(self):
        """Gets the withdrawals_href of this BasePlan.  # noqa: E501


        :return: The withdrawals_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._withdrawals_href

    @withdrawals_href.setter
    def withdrawals_href(self, withdrawals_href):
        """Sets the withdrawals_href of this BasePlan.


        :param withdrawals_href: The withdrawals_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._withdrawals_href = withdrawals_href

    @property
    def sub_plans_href(self):
        """Gets the sub_plans_href of this BasePlan.  # noqa: E501


        :return: The sub_plans_href of this BasePlan.  # noqa: E501
        :rtype: str
        """
        return self._sub_plans_href

    @sub_plans_href.setter
    def sub_plans_href(self, sub_plans_href):
        """Sets the sub_plans_href of this BasePlan.


        :param sub_plans_href: The sub_plans_href of this BasePlan.  # noqa: E501
        :type: str
        """

        self._sub_plans_href = sub_plans_href

    @property
    def is_client_suitable_for_target_market(self):
        """Gets the is_client_suitable_for_target_market of this BasePlan.  # noqa: E501

        Is the Adviser happy that the Client, to whom this product is being sold, belongs to the target market as defined by the product provider?  # noqa: E501

        :return: The is_client_suitable_for_target_market of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_client_suitable_for_target_market

    @is_client_suitable_for_target_market.setter
    def is_client_suitable_for_target_market(self, is_client_suitable_for_target_market):
        """Sets the is_client_suitable_for_target_market of this BasePlan.

        Is the Adviser happy that the Client, to whom this product is being sold, belongs to the target market as defined by the product provider?  # noqa: E501

        :param is_client_suitable_for_target_market: The is_client_suitable_for_target_market of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_client_suitable_for_target_market = is_client_suitable_for_target_market

    @property
    def quote_result(self):
        """Gets the quote_result of this BasePlan.  # noqa: E501


        :return: The quote_result of this BasePlan.  # noqa: E501
        :rtype: QuoteResultRef
        """
        return self._quote_result

    @quote_result.setter
    def quote_result(self, quote_result):
        """Sets the quote_result of this BasePlan.


        :param quote_result: The quote_result of this BasePlan.  # noqa: E501
        :type: QuoteResultRef
        """

        self._quote_result = quote_result

    @property
    def banding(self):
        """Gets the banding of this BasePlan.  # noqa: E501


        :return: The banding of this BasePlan.  # noqa: E501
        :rtype: PlanBandingRef
        """
        return self._banding

    @banding.setter
    def banding(self, banding):
        """Sets the banding of this BasePlan.


        :param banding: The banding of this BasePlan.  # noqa: E501
        :type: PlanBandingRef
        """

        self._banding = banding

    @property
    def forward_income_to(self):
        """Gets the forward_income_to of this BasePlan.  # noqa: E501


        :return: The forward_income_to of this BasePlan.  # noqa: E501
        :rtype: ForwardIncomeToRef
        """
        return self._forward_income_to

    @forward_income_to.setter
    def forward_income_to(self, forward_income_to):
        """Sets the forward_income_to of this BasePlan.


        :param forward_income_to: The forward_income_to of this BasePlan.  # noqa: E501
        :type: ForwardIncomeToRef
        """

        self._forward_income_to = forward_income_to

    @property
    def administrator(self):
        """Gets the administrator of this BasePlan.  # noqa: E501


        :return: The administrator of this BasePlan.  # noqa: E501
        :rtype: UserRef2
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this BasePlan.


        :param administrator: The administrator of this BasePlan.  # noqa: E501
        :type: UserRef2
        """

        self._administrator = administrator

    @property
    def paraplanner(self):
        """Gets the paraplanner of this BasePlan.  # noqa: E501


        :return: The paraplanner of this BasePlan.  # noqa: E501
        :rtype: UserRef2
        """
        return self._paraplanner

    @paraplanner.setter
    def paraplanner(self, paraplanner):
        """Sets the paraplanner of this BasePlan.


        :param paraplanner: The paraplanner of this BasePlan.  # noqa: E501
        :type: UserRef2
        """

        self._paraplanner = paraplanner

    @property
    def advice_status(self):
        """Gets the advice_status of this BasePlan.  # noqa: E501


        :return: The advice_status of this BasePlan.  # noqa: E501
        :rtype: AdviceStatusValue
        """
        return self._advice_status

    @advice_status.setter
    def advice_status(self, advice_status):
        """Sets the advice_status of this BasePlan.


        :param advice_status: The advice_status of this BasePlan.  # noqa: E501
        :type: AdviceStatusValue
        """

        self._advice_status = advice_status

    @property
    def tags(self):
        """Gets the tags of this BasePlan.  # noqa: E501

        Client Tags.  # noqa: E501

        :return: The tags of this BasePlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BasePlan.

        Client Tags.  # noqa: E501

        :param tags: The tags of this BasePlan.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def group(self):
        """Gets the group of this BasePlan.  # noqa: E501


        :return: The group of this BasePlan.  # noqa: E501
        :rtype: GroupRef
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this BasePlan.


        :param group: The group of this BasePlan.  # noqa: E501
        :type: GroupRef
        """

        self._group = group

    @property
    def created_by(self):
        """Gets the created_by of this BasePlan.  # noqa: E501


        :return: The created_by of this BasePlan.  # noqa: E501
        :rtype: UserRef2
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BasePlan.


        :param created_by: The created_by of this BasePlan.  # noqa: E501
        :type: UserRef2
        """

        self._created_by = created_by

    @property
    def document_delivery(self):
        """Gets the document_delivery of this BasePlan.  # noqa: E501


        :return: The document_delivery of this BasePlan.  # noqa: E501
        :rtype: DocumentDeliveryValue
        """
        return self._document_delivery

    @document_delivery.setter
    def document_delivery(self, document_delivery):
        """Sets the document_delivery of this BasePlan.


        :param document_delivery: The document_delivery of this BasePlan.  # noqa: E501
        :type: DocumentDeliveryValue
        """

        self._document_delivery = document_delivery

    @property
    def is_provider_managed(self):
        """Gets the is_provider_managed of this BasePlan.  # noqa: E501

        Indicates if the plan is managed by the Provider.  Can only be set under tenant reach or system reach, and not set at all for topups operations.  # noqa: E501

        :return: The is_provider_managed of this BasePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_provider_managed

    @is_provider_managed.setter
    def is_provider_managed(self, is_provider_managed):
        """Sets the is_provider_managed of this BasePlan.

        Indicates if the plan is managed by the Provider.  Can only be set under tenant reach or system reach, and not set at all for topups operations.  # noqa: E501

        :param is_provider_managed: The is_provider_managed of this BasePlan.  # noqa: E501
        :type: bool
        """

        self._is_provider_managed = is_provider_managed

    @property
    def performance_starts_on(self):
        """Gets the performance_starts_on of this BasePlan.  # noqa: E501

        Portfolio analysis start date.  # noqa: E501

        :return: The performance_starts_on of this BasePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._performance_starts_on

    @performance_starts_on.setter
    def performance_starts_on(self, performance_starts_on):
        """Sets the performance_starts_on of this BasePlan.

        Portfolio analysis start date.  # noqa: E501

        :param performance_starts_on: The performance_starts_on of this BasePlan.  # noqa: E501
        :type: datetime
        """

        self._performance_starts_on = performance_starts_on

    @property
    def performance_ends_on(self):
        """Gets the performance_ends_on of this BasePlan.  # noqa: E501

        Portfolio analysis end date.  # noqa: E501

        :return: The performance_ends_on of this BasePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._performance_ends_on

    @performance_ends_on.setter
    def performance_ends_on(self, performance_ends_on):
        """Sets the performance_ends_on of this BasePlan.

        Portfolio analysis end date.  # noqa: E501

        :param performance_ends_on: The performance_ends_on of this BasePlan.  # noqa: E501
        :type: datetime
        """

        self._performance_ends_on = performance_ends_on

    @property
    def provider_codes(self):
        """Gets the provider_codes of this BasePlan.  # noqa: E501


        :return: The provider_codes of this BasePlan.  # noqa: E501
        :rtype: ProviderCodesValue
        """
        return self._provider_codes

    @provider_codes.setter
    def provider_codes(self, provider_codes):
        """Sets the provider_codes of this BasePlan.


        :param provider_codes: The provider_codes of this BasePlan.  # noqa: E501
        :type: ProviderCodesValue
        """

        self._provider_codes = provider_codes

    @property
    def created_at(self):
        """Gets the created_at of this BasePlan.  # noqa: E501

        CreatedAt date and time  # noqa: E501

        :return: The created_at of this BasePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BasePlan.

        CreatedAt date and time  # noqa: E501

        :param created_at: The created_at of this BasePlan.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def program(self):
        """Gets the program of this BasePlan.  # noqa: E501


        :return: The program of this BasePlan.  # noqa: E501
        :rtype: ProgramNamedRef
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this BasePlan.


        :param program: The program of this BasePlan.  # noqa: E501
        :type: ProgramNamedRef
        """

        self._program = program

    @property
    def risk_profile(self):
        """Gets the risk_profile of this BasePlan.  # noqa: E501


        :return: The risk_profile of this BasePlan.  # noqa: E501
        :rtype: RiskProfileRef
        """
        return self._risk_profile

    @risk_profile.setter
    def risk_profile(self, risk_profile):
        """Sets the risk_profile of this BasePlan.


        :param risk_profile: The risk_profile of this BasePlan.  # noqa: E501
        :type: RiskProfileRef
        """

        self._risk_profile = risk_profile

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
