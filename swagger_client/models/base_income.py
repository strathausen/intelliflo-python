# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseIncome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'category': 'str',
        'description': 'str',
        'frequency': 'str',
        'gross': 'CurrencyValue',
        'gross_description': 'str',
        'net': 'CurrencyValue',
        'client': 'ClientRef',
        'starts_on': 'datetime',
        'ends_on': 'datetime',
        'last_updated': 'datetime',
        'joint_client': 'ClientRef',
        'withdrawal': 'WithdrawalRef',
        'owners': 'list[ClientRef]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'category': 'category',
        'description': 'description',
        'frequency': 'frequency',
        'gross': 'gross',
        'gross_description': 'grossDescription',
        'net': 'net',
        'client': 'client',
        'starts_on': 'startsOn',
        'ends_on': 'endsOn',
        'last_updated': 'lastUpdated',
        'joint_client': 'jointClient',
        'withdrawal': 'withdrawal',
        'owners': 'owners'
    }

    def __init__(self, id=None, href=None, category=None, description='null', frequency=None, gross=None, gross_description='null', net=None, client=None, starts_on=None, ends_on=None, last_updated=None, joint_client=None, withdrawal=None, owners=None):  # noqa: E501
        """BaseIncome - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._category = None
        self._description = None
        self._frequency = None
        self._gross = None
        self._gross_description = None
        self._net = None
        self._client = None
        self._starts_on = None
        self._ends_on = None
        self._last_updated = None
        self._joint_client = None
        self._withdrawal = None
        self._owners = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.category = category
        if description is not None:
            self.description = description
        self.frequency = frequency
        if gross is not None:
            self.gross = gross
        if gross_description is not None:
            self.gross_description = gross_description
        if net is not None:
            self.net = net
        if client is not None:
            self.client = client
        if starts_on is not None:
            self.starts_on = starts_on
        if ends_on is not None:
            self.ends_on = ends_on
        if last_updated is not None:
            self.last_updated = last_updated
        if joint_client is not None:
            self.joint_client = joint_client
        if withdrawal is not None:
            self.withdrawal = withdrawal
        if owners is not None:
            self.owners = owners

    @property
    def id(self):
        """Gets the id of this BaseIncome.  # noqa: E501

        ID of Income.  # noqa: E501

        :return: The id of this BaseIncome.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseIncome.

        ID of Income.  # noqa: E501

        :param id: The id of this BaseIncome.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BaseIncome.  # noqa: E501

        Income Href.  # noqa: E501

        :return: The href of this BaseIncome.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseIncome.

        Income Href.  # noqa: E501

        :param href: The href of this BaseIncome.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def category(self):
        """Gets the category of this BaseIncome.  # noqa: E501

        Category of Income.  # noqa: E501

        :return: The category of this BaseIncome.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BaseIncome.

        Category of Income.  # noqa: E501

        :param category: The category of this BaseIncome.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def description(self):
        """Gets the description of this BaseIncome.  # noqa: E501

        Income Description.  # noqa: E501

        :return: The description of this BaseIncome.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseIncome.

        Income Description.  # noqa: E501

        :param description: The description of this BaseIncome.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def frequency(self):
        """Gets the frequency of this BaseIncome.  # noqa: E501

        Income Frequency.  # noqa: E501

        :return: The frequency of this BaseIncome.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this BaseIncome.

        Income Frequency.  # noqa: E501

        :param frequency: The frequency of this BaseIncome.  # noqa: E501
        :type: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501
        allowed_values = ["Monthly", "Weekly", "Fortnightly", "FourWeekly", "Quarterly", "HalfYearly", "Annually"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def gross(self):
        """Gets the gross of this BaseIncome.  # noqa: E501


        :return: The gross of this BaseIncome.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this BaseIncome.


        :param gross: The gross of this BaseIncome.  # noqa: E501
        :type: CurrencyValue
        """

        self._gross = gross

    @property
    def gross_description(self):
        """Gets the gross_description of this BaseIncome.  # noqa: E501

        Gross Income Amount Description.  # noqa: E501

        :return: The gross_description of this BaseIncome.  # noqa: E501
        :rtype: str
        """
        return self._gross_description

    @gross_description.setter
    def gross_description(self, gross_description):
        """Sets the gross_description of this BaseIncome.

        Gross Income Amount Description.  # noqa: E501

        :param gross_description: The gross_description of this BaseIncome.  # noqa: E501
        :type: str
        """

        self._gross_description = gross_description

    @property
    def net(self):
        """Gets the net of this BaseIncome.  # noqa: E501


        :return: The net of this BaseIncome.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this BaseIncome.


        :param net: The net of this BaseIncome.  # noqa: E501
        :type: CurrencyValue
        """

        self._net = net

    @property
    def client(self):
        """Gets the client of this BaseIncome.  # noqa: E501


        :return: The client of this BaseIncome.  # noqa: E501
        :rtype: ClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this BaseIncome.


        :param client: The client of this BaseIncome.  # noqa: E501
        :type: ClientRef
        """

        self._client = client

    @property
    def starts_on(self):
        """Gets the starts_on of this BaseIncome.  # noqa: E501

        Start Date of the income (not settable for employment income).  # noqa: E501

        :return: The starts_on of this BaseIncome.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this BaseIncome.

        Start Date of the income (not settable for employment income).  # noqa: E501

        :param starts_on: The starts_on of this BaseIncome.  # noqa: E501
        :type: datetime
        """

        self._starts_on = starts_on

    @property
    def ends_on(self):
        """Gets the ends_on of this BaseIncome.  # noqa: E501

        End Date of the income (not settable for employment income).  # noqa: E501

        :return: The ends_on of this BaseIncome.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_on

    @ends_on.setter
    def ends_on(self, ends_on):
        """Sets the ends_on of this BaseIncome.

        End Date of the income (not settable for employment income).  # noqa: E501

        :param ends_on: The ends_on of this BaseIncome.  # noqa: E501
        :type: datetime
        """

        self._ends_on = ends_on

    @property
    def last_updated(self):
        """Gets the last_updated of this BaseIncome.  # noqa: E501

        Last Updated date of income.  # noqa: E501

        :return: The last_updated of this BaseIncome.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this BaseIncome.

        Last Updated date of income.  # noqa: E501

        :param last_updated: The last_updated of this BaseIncome.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def joint_client(self):
        """Gets the joint_client of this BaseIncome.  # noqa: E501


        :return: The joint_client of this BaseIncome.  # noqa: E501
        :rtype: ClientRef
        """
        return self._joint_client

    @joint_client.setter
    def joint_client(self, joint_client):
        """Sets the joint_client of this BaseIncome.


        :param joint_client: The joint_client of this BaseIncome.  # noqa: E501
        :type: ClientRef
        """

        self._joint_client = joint_client

    @property
    def withdrawal(self):
        """Gets the withdrawal of this BaseIncome.  # noqa: E501


        :return: The withdrawal of this BaseIncome.  # noqa: E501
        :rtype: WithdrawalRef
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this BaseIncome.


        :param withdrawal: The withdrawal of this BaseIncome.  # noqa: E501
        :type: WithdrawalRef
        """

        self._withdrawal = withdrawal

    @property
    def owners(self):
        """Gets the owners of this BaseIncome.  # noqa: E501

        List Of Owners for income.  # noqa: E501

        :return: The owners of this BaseIncome.  # noqa: E501
        :rtype: list[ClientRef]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this BaseIncome.

        List Of Owners for income.  # noqa: E501

        :param owners: The owners of this BaseIncome.  # noqa: E501
        :type: list[ClientRef]
        """

        self._owners = owners

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseIncome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseIncome):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
