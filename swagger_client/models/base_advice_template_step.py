# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseAdviceTemplateStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'discriminator': 'str',
        'ordinal': 'int',
        'advice_template': 'AdviceTemplateReference'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'discriminator': 'discriminator',
        'ordinal': 'ordinal',
        'advice_template': 'adviceTemplate'
    }

    discriminator_value_class_map = {
          'RecommendationProposalTemplateStep': 'RecommendationProposalTemplateStep',
'InvestmentPreferenceTemplateStep': 'InvestmentPreferenceTemplateStep',
'GoalAndObjectiveTemplateStep': 'GoalAndObjectiveTemplateStep',
'FundingTemplateStep': 'FundingTemplateStep',
'SolutionDesignTemplateStep': 'SolutionDesignTemplateStep',
'RecommendationTemplateStep': 'RecommendationTemplateStep',
'ImplementationTemplateStep': 'ImplementationTemplateStep',
'ToolsAndAppsTemplateStep': 'ToolsAndAppsTemplateStep',
'SuitabilityQuestionnaireTemplateStep': 'SuitabilityQuestionnaireTemplateStep',
'ClientProfileTemplateStep': 'ClientProfileTemplateStep',
'DocumentTemplateStep': 'DocumentTemplateStep'    }

    def __init__(self, id=None, href=None, discriminator=None, ordinal=None, advice_template=None):  # noqa: E501
        """BaseAdviceTemplateStep - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._discriminator = None
        self._ordinal = None
        self._advice_template = None
        self.discriminator = 'discriminator'
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.discriminator = discriminator
        self.ordinal = ordinal
        if advice_template is not None:
            self.advice_template = advice_template

    @property
    def id(self):
        """Gets the id of this BaseAdviceTemplateStep.  # noqa: E501

        Advice template step unique identifier.  # noqa: E501

        :return: The id of this BaseAdviceTemplateStep.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseAdviceTemplateStep.

        Advice template step unique identifier.  # noqa: E501

        :param id: The id of this BaseAdviceTemplateStep.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BaseAdviceTemplateStep.  # noqa: E501

        Hypermedia link to advice template step.  # noqa: E501

        :return: The href of this BaseAdviceTemplateStep.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseAdviceTemplateStep.

        Hypermedia link to advice template step.  # noqa: E501

        :param href: The href of this BaseAdviceTemplateStep.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def discriminator(self):
        """Gets the discriminator of this BaseAdviceTemplateStep.  # noqa: E501

        Advice template step discriminator value.  # noqa: E501

        :return: The discriminator of this BaseAdviceTemplateStep.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this BaseAdviceTemplateStep.

        Advice template step discriminator value.  # noqa: E501

        :param discriminator: The discriminator of this BaseAdviceTemplateStep.  # noqa: E501
        :type: str
        """
        if discriminator is None:
            raise ValueError("Invalid value for `discriminator`, must not be `None`")  # noqa: E501
        allowed_values = ["ClientProfileTemplateStep", "DocumentTemplateStep", "FundingTemplateStep", "GoalAndObjectiveTemplateStep", "ImplementationTemplateStep", "InvestmentPreferenceTemplateStep", "RecommendationProposalTemplateStep", "RecommendationTemplateStep", "SolutionDesignTemplateStep", "SuitabilityQuestionnaireTemplateStep", "ToolsAndAppsTemplateStep"]  # noqa: E501
        if discriminator not in allowed_values:
            raise ValueError(
                "Invalid value for `discriminator` ({0}), must be one of {1}"  # noqa: E501
                .format(discriminator, allowed_values)
            )

        self._discriminator = discriminator

    @property
    def ordinal(self):
        """Gets the ordinal of this BaseAdviceTemplateStep.  # noqa: E501

        The position of a step in template's steps.  # noqa: E501

        :return: The ordinal of this BaseAdviceTemplateStep.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this BaseAdviceTemplateStep.

        The position of a step in template's steps.  # noqa: E501

        :param ordinal: The ordinal of this BaseAdviceTemplateStep.  # noqa: E501
        :type: int
        """
        if ordinal is None:
            raise ValueError("Invalid value for `ordinal`, must not be `None`")  # noqa: E501

        self._ordinal = ordinal

    @property
    def advice_template(self):
        """Gets the advice_template of this BaseAdviceTemplateStep.  # noqa: E501


        :return: The advice_template of this BaseAdviceTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateReference
        """
        return self._advice_template

    @advice_template.setter
    def advice_template(self, advice_template):
        """Sets the advice_template of this BaseAdviceTemplateStep.


        :param advice_template: The advice_template of this BaseAdviceTemplateStep.  # noqa: E501
        :type: AdviceTemplateReference
        """

        self._advice_template = advice_template

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseAdviceTemplateStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseAdviceTemplateStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
