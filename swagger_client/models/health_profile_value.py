# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthProfileValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_smoker': 'str',
        'smoked_in_last12_months': 'bool',
        'in_good_health': 'bool'
    }

    attribute_map = {
        'is_smoker': 'isSmoker',
        'smoked_in_last12_months': 'smokedInLast12Months',
        'in_good_health': 'inGoodHealth'
    }

    def __init__(self, is_smoker=None, smoked_in_last12_months=None, in_good_health=None):  # noqa: E501
        """HealthProfileValue - a model defined in Swagger"""  # noqa: E501
        self._is_smoker = None
        self._smoked_in_last12_months = None
        self._in_good_health = None
        self.discriminator = None
        if is_smoker is not None:
            self.is_smoker = is_smoker
        if smoked_in_last12_months is not None:
            self.smoked_in_last12_months = smoked_in_last12_months
        if in_good_health is not None:
            self.in_good_health = in_good_health

    @property
    def is_smoker(self):
        """Gets the is_smoker of this HealthProfileValue.  # noqa: E501

        Flag indicating if the person is a smoker or not?  # noqa: E501

        :return: The is_smoker of this HealthProfileValue.  # noqa: E501
        :rtype: str
        """
        return self._is_smoker

    @is_smoker.setter
    def is_smoker(self, is_smoker):
        """Sets the is_smoker of this HealthProfileValue.

        Flag indicating if the person is a smoker or not?  # noqa: E501

        :param is_smoker: The is_smoker of this HealthProfileValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Yes", "No"]  # noqa: E501
        if is_smoker not in allowed_values:
            raise ValueError(
                "Invalid value for `is_smoker` ({0}), must be one of {1}"  # noqa: E501
                .format(is_smoker, allowed_values)
            )

        self._is_smoker = is_smoker

    @property
    def smoked_in_last12_months(self):
        """Gets the smoked_in_last12_months of this HealthProfileValue.  # noqa: E501

        Flag indicating if the person has smoked in last 12 months ot not?  # noqa: E501

        :return: The smoked_in_last12_months of this HealthProfileValue.  # noqa: E501
        :rtype: bool
        """
        return self._smoked_in_last12_months

    @smoked_in_last12_months.setter
    def smoked_in_last12_months(self, smoked_in_last12_months):
        """Sets the smoked_in_last12_months of this HealthProfileValue.

        Flag indicating if the person has smoked in last 12 months ot not?  # noqa: E501

        :param smoked_in_last12_months: The smoked_in_last12_months of this HealthProfileValue.  # noqa: E501
        :type: bool
        """

        self._smoked_in_last12_months = smoked_in_last12_months

    @property
    def in_good_health(self):
        """Gets the in_good_health of this HealthProfileValue.  # noqa: E501

        Flag indicating if the person is considered to be in good health or not?  # noqa: E501

        :return: The in_good_health of this HealthProfileValue.  # noqa: E501
        :rtype: bool
        """
        return self._in_good_health

    @in_good_health.setter
    def in_good_health(self, in_good_health):
        """Sets the in_good_health of this HealthProfileValue.

        Flag indicating if the person is considered to be in good health or not?  # noqa: E501

        :param in_good_health: The in_good_health of this HealthProfileValue.  # noqa: E501
        :type: bool
        """

        self._in_good_health = in_good_health

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthProfileValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthProfileValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
