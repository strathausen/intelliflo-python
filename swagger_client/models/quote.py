# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Quote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'reference': 'str',
        'created_user': 'NamedUserRef',
        'created_app': 'NamedAppRef',
        'created_at': 'datetime',
        'custom_reference': 'str',
        'contains_bundle': 'bool',
        'status': 'str',
        'product_group': 'str',
        'applicants': 'list[PartyRef]',
        'quote_results_href': 'str',
        'documents_href': 'str',
        'originating_quote': 'OriginatingQuoteRef',
        'attributes': 'object',
        'service_case': 'QuotationServiceCaseReference'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'reference': 'reference',
        'created_user': 'createdUser',
        'created_app': 'createdApp',
        'created_at': 'createdAt',
        'custom_reference': 'customReference',
        'contains_bundle': 'containsBundle',
        'status': 'status',
        'product_group': 'productGroup',
        'applicants': 'applicants',
        'quote_results_href': 'quoteResults_href',
        'documents_href': 'documents_href',
        'originating_quote': 'originatingQuote',
        'attributes': 'attributes',
        'service_case': 'serviceCase'
    }

    def __init__(self, id=None, href=None, reference=None, created_user=None, created_app=None, created_at=None, custom_reference=None, contains_bundle=False, status='Initiated', product_group=None, applicants=None, quote_results_href=None, documents_href=None, originating_quote=None, attributes=None, service_case=None):  # noqa: E501
        """Quote - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._reference = None
        self._created_user = None
        self._created_app = None
        self._created_at = None
        self._custom_reference = None
        self._contains_bundle = None
        self._status = None
        self._product_group = None
        self._applicants = None
        self._quote_results_href = None
        self._documents_href = None
        self._originating_quote = None
        self._attributes = None
        self._service_case = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if reference is not None:
            self.reference = reference
        if created_user is not None:
            self.created_user = created_user
        if created_app is not None:
            self.created_app = created_app
        if created_at is not None:
            self.created_at = created_at
        if custom_reference is not None:
            self.custom_reference = custom_reference
        if contains_bundle is not None:
            self.contains_bundle = contains_bundle
        if status is not None:
            self.status = status
        if product_group is not None:
            self.product_group = product_group
        if applicants is not None:
            self.applicants = applicants
        if quote_results_href is not None:
            self.quote_results_href = quote_results_href
        if documents_href is not None:
            self.documents_href = documents_href
        if originating_quote is not None:
            self.originating_quote = originating_quote
        if attributes is not None:
            self.attributes = attributes
        if service_case is not None:
            self.service_case = service_case

    @property
    def id(self):
        """Gets the id of this Quote.  # noqa: E501

        Quote unique identifier.  # noqa: E501

        :return: The id of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Quote.

        Quote unique identifier.  # noqa: E501

        :param id: The id of this Quote.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Quote.  # noqa: E501

        URI for given quote.  # noqa: E501

        :return: The href of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Quote.

        URI for given quote.  # noqa: E501

        :param href: The href of this Quote.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def reference(self):
        """Gets the reference of this Quote.  # noqa: E501

        Auto-generated Intelliflo reference number.  # noqa: E501

        :return: The reference of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Quote.

        Auto-generated Intelliflo reference number.  # noqa: E501

        :param reference: The reference of this Quote.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def created_user(self):
        """Gets the created_user of this Quote.  # noqa: E501


        :return: The created_user of this Quote.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this Quote.


        :param created_user: The created_user of this Quote.  # noqa: E501
        :type: NamedUserRef
        """

        self._created_user = created_user

    @property
    def created_app(self):
        """Gets the created_app of this Quote.  # noqa: E501


        :return: The created_app of this Quote.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_app

    @created_app.setter
    def created_app(self, created_app):
        """Sets the created_app of this Quote.


        :param created_app: The created_app of this Quote.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_app = created_app

    @property
    def created_at(self):
        """Gets the created_at of this Quote.  # noqa: E501

        Quote created date.  # noqa: E501

        :return: The created_at of this Quote.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Quote.

        Quote created date.  # noqa: E501

        :param created_at: The created_at of this Quote.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def custom_reference(self):
        """Gets the custom_reference of this Quote.  # noqa: E501

        Quote free text reference.  # noqa: E501

        :return: The custom_reference of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._custom_reference

    @custom_reference.setter
    def custom_reference(self, custom_reference):
        """Sets the custom_reference of this Quote.

        Quote free text reference.  # noqa: E501

        :param custom_reference: The custom_reference of this Quote.  # noqa: E501
        :type: str
        """

        self._custom_reference = custom_reference

    @property
    def contains_bundle(self):
        """Gets the contains_bundle of this Quote.  # noqa: E501

        Indicates whether the quote expects multiple results grouped by bundle reference.  # noqa: E501

        :return: The contains_bundle of this Quote.  # noqa: E501
        :rtype: bool
        """
        return self._contains_bundle

    @contains_bundle.setter
    def contains_bundle(self, contains_bundle):
        """Sets the contains_bundle of this Quote.

        Indicates whether the quote expects multiple results grouped by bundle reference.  # noqa: E501

        :param contains_bundle: The contains_bundle of this Quote.  # noqa: E501
        :type: bool
        """

        self._contains_bundle = contains_bundle

    @property
    def status(self):
        """Gets the status of this Quote.  # noqa: E501

        The current status of the quote.  One of 'Initiated', 'Submitted', 'Failed', 'Expired', 'Complete'.  # noqa: E501

        :return: The status of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Quote.

        The current status of the quote.  One of 'Initiated', 'Submitted', 'Failed', 'Expired', 'Complete'.  # noqa: E501

        :param status: The status of this Quote.  # noqa: E501
        :type: str
        """
        allowed_values = ["Initiated", "Submitted", "Failed", "Complete", "Expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def product_group(self):
        """Gets the product_group of this Quote.  # noqa: E501

        Product group for the quote.  # noqa: E501

        :return: The product_group of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._product_group

    @product_group.setter
    def product_group(self, product_group):
        """Sets the product_group of this Quote.

        Product group for the quote.  # noqa: E501

        :param product_group: The product_group of this Quote.  # noqa: E501
        :type: str
        """
        allowed_values = ["Annuity", "CashBankAccount", "EquityRelease", "GeneralMedicalInsurance", "GroupProtection", "Investment", "LifeAssuredInvestment", "LoanCredit", "Mortgage", "PensionContributionDrawdown", "PensionDefinedBenefit", "PersonalProtection"]  # noqa: E501
        if product_group not in allowed_values:
            raise ValueError(
                "Invalid value for `product_group` ({0}), must be one of {1}"  # noqa: E501
                .format(product_group, allowed_values)
            )

        self._product_group = product_group

    @property
    def applicants(self):
        """Gets the applicants of this Quote.  # noqa: E501

        Applicants the quote was requested for. Applicant at index 0 is the primary applicant.  # noqa: E501

        :return: The applicants of this Quote.  # noqa: E501
        :rtype: list[PartyRef]
        """
        return self._applicants

    @applicants.setter
    def applicants(self, applicants):
        """Sets the applicants of this Quote.

        Applicants the quote was requested for. Applicant at index 0 is the primary applicant.  # noqa: E501

        :param applicants: The applicants of this Quote.  # noqa: E501
        :type: list[PartyRef]
        """

        self._applicants = applicants

    @property
    def quote_results_href(self):
        """Gets the quote_results_href of this Quote.  # noqa: E501

        Quote results hypermedia link.  # noqa: E501

        :return: The quote_results_href of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._quote_results_href

    @quote_results_href.setter
    def quote_results_href(self, quote_results_href):
        """Sets the quote_results_href of this Quote.

        Quote results hypermedia link.  # noqa: E501

        :param quote_results_href: The quote_results_href of this Quote.  # noqa: E501
        :type: str
        """

        self._quote_results_href = quote_results_href

    @property
    def documents_href(self):
        """Gets the documents_href of this Quote.  # noqa: E501

        Documents hypermedia link.  # noqa: E501

        :return: The documents_href of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._documents_href

    @documents_href.setter
    def documents_href(self, documents_href):
        """Sets the documents_href of this Quote.

        Documents hypermedia link.  # noqa: E501

        :param documents_href: The documents_href of this Quote.  # noqa: E501
        :type: str
        """

        self._documents_href = documents_href

    @property
    def originating_quote(self):
        """Gets the originating_quote of this Quote.  # noqa: E501


        :return: The originating_quote of this Quote.  # noqa: E501
        :rtype: OriginatingQuoteRef
        """
        return self._originating_quote

    @originating_quote.setter
    def originating_quote(self, originating_quote):
        """Sets the originating_quote of this Quote.


        :param originating_quote: The originating_quote of this Quote.  # noqa: E501
        :type: OriginatingQuoteRef
        """

        self._originating_quote = originating_quote

    @property
    def attributes(self):
        """Gets the attributes of this Quote.  # noqa: E501

        Additional quote attributes as key value pairs.  # noqa: E501

        :return: The attributes of this Quote.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Quote.

        Additional quote attributes as key value pairs.  # noqa: E501

        :param attributes: The attributes of this Quote.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def service_case(self):
        """Gets the service_case of this Quote.  # noqa: E501


        :return: The service_case of this Quote.  # noqa: E501
        :rtype: QuotationServiceCaseReference
        """
        return self._service_case

    @service_case.setter
    def service_case(self, service_case):
        """Sets the service_case of this Quote.


        :param service_case: The service_case of this Quote.  # noqa: E501
        :type: QuotationServiceCaseReference
        """

        self._service_case = service_case

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Quote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Quote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
