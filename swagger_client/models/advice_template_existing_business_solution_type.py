# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdviceTemplateExistingBusinessSolutionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'actions': 'list[str]',
        'investment_strategy': 'AdviceTemplateInvestmentStrategy'
    }

    attribute_map = {
        'category': 'category',
        'actions': 'actions',
        'investment_strategy': 'investmentStrategy'
    }

    def __init__(self, category=None, actions=None, investment_strategy=None):  # noqa: E501
        """AdviceTemplateExistingBusinessSolutionType - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._actions = None
        self._investment_strategy = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if actions is not None:
            self.actions = actions
        if investment_strategy is not None:
            self.investment_strategy = investment_strategy

    @property
    def category(self):
        """Gets the category of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501

        Category for existing business.  # noqa: E501

        :return: The category of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AdviceTemplateExistingBusinessSolutionType.

        Category for existing business.  # noqa: E501

        :param category: The category of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501
        :type: str
        """
        allowed_values = ["Retirement", "Investment", "Mortgage", "Protection"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def actions(self):
        """Gets the actions of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501

        Actions for existing business.  # noqa: E501

        :return: The actions of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AdviceTemplateExistingBusinessSolutionType.

        Actions for existing business.  # noqa: E501

        :param actions: The actions of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def investment_strategy(self):
        """Gets the investment_strategy of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501


        :return: The investment_strategy of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501
        :rtype: AdviceTemplateInvestmentStrategy
        """
        return self._investment_strategy

    @investment_strategy.setter
    def investment_strategy(self, investment_strategy):
        """Sets the investment_strategy of this AdviceTemplateExistingBusinessSolutionType.


        :param investment_strategy: The investment_strategy of this AdviceTemplateExistingBusinessSolutionType.  # noqa: E501
        :type: AdviceTemplateInvestmentStrategy
        """

        self._investment_strategy = investment_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdviceTemplateExistingBusinessSolutionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdviceTemplateExistingBusinessSolutionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
