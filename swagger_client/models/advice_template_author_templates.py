# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdviceTemplateAuthorTemplates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'NamedAuthorCategoryRef',
        'template': 'NamedAuthorTemplateRef',
        'proposal_types': 'list[str]'
    }

    attribute_map = {
        'category': 'category',
        'template': 'template',
        'proposal_types': 'proposalTypes'
    }

    def __init__(self, category=None, template=None, proposal_types=None):  # noqa: E501
        """AdviceTemplateAuthorTemplates - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._template = None
        self._proposal_types = None
        self.discriminator = None
        self.category = category
        if template is not None:
            self.template = template
        if proposal_types is not None:
            self.proposal_types = proposal_types

    @property
    def category(self):
        """Gets the category of this AdviceTemplateAuthorTemplates.  # noqa: E501


        :return: The category of this AdviceTemplateAuthorTemplates.  # noqa: E501
        :rtype: NamedAuthorCategoryRef
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AdviceTemplateAuthorTemplates.


        :param category: The category of this AdviceTemplateAuthorTemplates.  # noqa: E501
        :type: NamedAuthorCategoryRef
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def template(self):
        """Gets the template of this AdviceTemplateAuthorTemplates.  # noqa: E501


        :return: The template of this AdviceTemplateAuthorTemplates.  # noqa: E501
        :rtype: NamedAuthorTemplateRef
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this AdviceTemplateAuthorTemplates.


        :param template: The template of this AdviceTemplateAuthorTemplates.  # noqa: E501
        :type: NamedAuthorTemplateRef
        """

        self._template = template

    @property
    def proposal_types(self):
        """Gets the proposal_types of this AdviceTemplateAuthorTemplates.  # noqa: E501

        List of proposal type discriminators.  # noqa: E501

        :return: The proposal_types of this AdviceTemplateAuthorTemplates.  # noqa: E501
        :rtype: list[str]
        """
        return self._proposal_types

    @proposal_types.setter
    def proposal_types(self, proposal_types):
        """Sets the proposal_types of this AdviceTemplateAuthorTemplates.

        List of proposal type discriminators.  # noqa: E501

        :param proposal_types: The proposal_types of this AdviceTemplateAuthorTemplates.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Investment", "Pension", "Annuity", "PersonalProtection", "Mortgage", "EquityRelease", "GeneralInsurance", "NewMoney", "Switch", "ProductReview", "AmendProductDetails", "AmendRegularContributionsPremiums", "AmendRegularWithdrawalIncome", "CloseProduct", "LumpsumWithdrawal", "NoAction", "Rebalance"]  # noqa: E501
        if not set(proposal_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `proposal_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(proposal_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._proposal_types = proposal_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdviceTemplateAuthorTemplates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdviceTemplateAuthorTemplates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
