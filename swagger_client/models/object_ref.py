# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObjectRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'href': 'str',
        'filename': 'str',
        'original_filename': 'str',
        'content_type': 'str',
        'content_length': 'int',
        'content_md5': 'str',
        'upload_status': 'str',
        'provider': 'str'
    }

    attribute_map = {
        'key': 'key',
        'href': 'href',
        'filename': 'filename',
        'original_filename': 'original_filename',
        'content_type': 'content_type',
        'content_length': 'content_length',
        'content_md5': 'content_md5',
        'upload_status': 'upload_status',
        'provider': 'provider'
    }

    def __init__(self, key=None, href=None, filename=None, original_filename=None, content_type=None, content_length=None, content_md5=None, upload_status=None, provider=None):  # noqa: E501
        """ObjectRef - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._href = None
        self._filename = None
        self._original_filename = None
        self._content_type = None
        self._content_length = None
        self._content_md5 = None
        self._upload_status = None
        self._provider = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if href is not None:
            self.href = href
        if filename is not None:
            self.filename = filename
        if original_filename is not None:
            self.original_filename = original_filename
        if content_type is not None:
            self.content_type = content_type
        if content_length is not None:
            self.content_length = content_length
        if content_md5 is not None:
            self.content_md5 = content_md5
        if upload_status is not None:
            self.upload_status = upload_status
        if provider is not None:
            self.provider = provider

    @property
    def key(self):
        """Gets the key of this ObjectRef.  # noqa: E501


        :return: The key of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ObjectRef.


        :param key: The key of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def href(self):
        """Gets the href of this ObjectRef.  # noqa: E501


        :return: The href of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ObjectRef.


        :param href: The href of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def filename(self):
        """Gets the filename of this ObjectRef.  # noqa: E501


        :return: The filename of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ObjectRef.


        :param filename: The filename of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def original_filename(self):
        """Gets the original_filename of this ObjectRef.  # noqa: E501


        :return: The original_filename of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this ObjectRef.


        :param original_filename: The original_filename of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._original_filename = original_filename

    @property
    def content_type(self):
        """Gets the content_type of this ObjectRef.  # noqa: E501


        :return: The content_type of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ObjectRef.


        :param content_type: The content_type of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def content_length(self):
        """Gets the content_length of this ObjectRef.  # noqa: E501


        :return: The content_length of this ObjectRef.  # noqa: E501
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this ObjectRef.


        :param content_length: The content_length of this ObjectRef.  # noqa: E501
        :type: int
        """

        self._content_length = content_length

    @property
    def content_md5(self):
        """Gets the content_md5 of this ObjectRef.  # noqa: E501

        An md5 hash of the object content, computed by the client before submitting the request.  # noqa: E501

        :return: The content_md5 of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._content_md5

    @content_md5.setter
    def content_md5(self, content_md5):
        """Sets the content_md5 of this ObjectRef.

        An md5 hash of the object content, computed by the client before submitting the request.  # noqa: E501

        :param content_md5: The content_md5 of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._content_md5 = content_md5

    @property
    def upload_status(self):
        """Gets the upload_status of this ObjectRef.  # noqa: E501

        Describes the current state of the object upload. Possible values are pending, completed or failed.  # noqa: E501

        :return: The upload_status of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """Sets the upload_status of this ObjectRef.

        Describes the current state of the object upload. Possible values are pending, completed or failed.  # noqa: E501

        :param upload_status: The upload_status of this ObjectRef.  # noqa: E501
        :type: str
        """

        self._upload_status = upload_status

    @property
    def provider(self):
        """Gets the provider of this ObjectRef.  # noqa: E501


        :return: The provider of this ObjectRef.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ObjectRef.


        :param provider: The provider of this ObjectRef.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "AmazonS3", "IntellifloStandard", "IntellifloEnterprise"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
