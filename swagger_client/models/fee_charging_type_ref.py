# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeeChargingTypeRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'min_fee': 'CurrencyValue',
        'max_fee': 'CurrencyValue',
        'min_percentage': 'float',
        'max_percentage': 'float'
    }

    attribute_map = {
        'name': 'name',
        'min_fee': 'minFee',
        'max_fee': 'maxFee',
        'min_percentage': 'minPercentage',
        'max_percentage': 'maxPercentage'
    }

    def __init__(self, name=None, min_fee=None, max_fee=None, min_percentage=None, max_percentage=None):  # noqa: E501
        """FeeChargingTypeRef - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._min_fee = None
        self._max_fee = None
        self._min_percentage = None
        self._max_percentage = None
        self.discriminator = None
        self.name = name
        if min_fee is not None:
            self.min_fee = min_fee
        if max_fee is not None:
            self.max_fee = max_fee
        if min_percentage is not None:
            self.min_percentage = min_percentage
        if max_percentage is not None:
            self.max_percentage = max_percentage

    @property
    def name(self):
        """Gets the name of this FeeChargingTypeRef.  # noqa: E501

        Fee charging type name  # noqa: E501

        :return: The name of this FeeChargingTypeRef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeeChargingTypeRef.

        Fee charging type name  # noqa: E501

        :param name: The name of this FeeChargingTypeRef.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        allowed_values = ["FixedPrice", "PercentOfFumAum", "PercentOfAllInvestmentContribution", "NonChargeable", "FixedPriceRange", "BillingRateFeeTimeBased", "BillingRateFeeTaskBased", "PercentOfRegularContribution", "PercentOfLumpSumContribution", "PercentOfTransferContribution", "TieredPercentOfAumBlendedArrears", "TieredPercentOfAumBlendedAdvanced", "TieredPercentOfAumCliffArrears", "TieredPercentOfAumCliffAdvanced"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def min_fee(self):
        """Gets the min_fee of this FeeChargingTypeRef.  # noqa: E501


        :return: The min_fee of this FeeChargingTypeRef.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._min_fee

    @min_fee.setter
    def min_fee(self, min_fee):
        """Sets the min_fee of this FeeChargingTypeRef.


        :param min_fee: The min_fee of this FeeChargingTypeRef.  # noqa: E501
        :type: CurrencyValue
        """

        self._min_fee = min_fee

    @property
    def max_fee(self):
        """Gets the max_fee of this FeeChargingTypeRef.  # noqa: E501


        :return: The max_fee of this FeeChargingTypeRef.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._max_fee

    @max_fee.setter
    def max_fee(self, max_fee):
        """Sets the max_fee of this FeeChargingTypeRef.


        :param max_fee: The max_fee of this FeeChargingTypeRef.  # noqa: E501
        :type: CurrencyValue
        """

        self._max_fee = max_fee

    @property
    def min_percentage(self):
        """Gets the min_percentage of this FeeChargingTypeRef.  # noqa: E501

        Required if fee is percentage based. Value has to be exact match of the value that is set for the fee type within IO.  Contact your IO tenant administrator to get information about available fee charging options.  # noqa: E501

        :return: The min_percentage of this FeeChargingTypeRef.  # noqa: E501
        :rtype: float
        """
        return self._min_percentage

    @min_percentage.setter
    def min_percentage(self, min_percentage):
        """Sets the min_percentage of this FeeChargingTypeRef.

        Required if fee is percentage based. Value has to be exact match of the value that is set for the fee type within IO.  Contact your IO tenant administrator to get information about available fee charging options.  # noqa: E501

        :param min_percentage: The min_percentage of this FeeChargingTypeRef.  # noqa: E501
        :type: float
        """

        self._min_percentage = min_percentage

    @property
    def max_percentage(self):
        """Gets the max_percentage of this FeeChargingTypeRef.  # noqa: E501

        Required if fee is percentage based. Value has to be exact match of the value that is set for the fee type within IO.  Contact your IO tenant administrator to get information about available fee charging options.  # noqa: E501

        :return: The max_percentage of this FeeChargingTypeRef.  # noqa: E501
        :rtype: float
        """
        return self._max_percentage

    @max_percentage.setter
    def max_percentage(self, max_percentage):
        """Sets the max_percentage of this FeeChargingTypeRef.

        Required if fee is percentage based. Value has to be exact match of the value that is set for the fee type within IO.  Contact your IO tenant administrator to get information about available fee charging options.  # noqa: E501

        :param max_percentage: The max_percentage of this FeeChargingTypeRef.  # noqa: E501
        :type: float
        """

        self._max_percentage = max_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeeChargingTypeRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeeChargingTypeRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
