# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Recommendation2CategoryDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'is_person': 'bool',
        'is_corporate': 'bool',
        'is_trust': 'bool',
        'is_archived': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'is_person': 'isPerson',
        'is_corporate': 'isCorporate',
        'is_trust': 'isTrust',
        'is_archived': 'isArchived'
    }

    def __init__(self, id=None, href=None, name=None, is_person=None, is_corporate=None, is_trust=None, is_archived=None):  # noqa: E501
        """Recommendation2CategoryDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._is_person = None
        self._is_corporate = None
        self._is_trust = None
        self._is_archived = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if is_person is not None:
            self.is_person = is_person
        if is_corporate is not None:
            self.is_corporate = is_corporate
        if is_trust is not None:
            self.is_trust = is_trust
        if is_archived is not None:
            self.is_archived = is_archived

    @property
    def id(self):
        """Gets the id of this Recommendation2CategoryDocument.  # noqa: E501

        Category Unique Identifier.  # noqa: E501

        :return: The id of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Recommendation2CategoryDocument.

        Category Unique Identifier.  # noqa: E501

        :param id: The id of this Recommendation2CategoryDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Recommendation2CategoryDocument.  # noqa: E501

        Category hypermedia link.  # noqa: E501

        :return: The href of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Recommendation2CategoryDocument.

        Category hypermedia link.  # noqa: E501

        :param href: The href of this Recommendation2CategoryDocument.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this Recommendation2CategoryDocument.  # noqa: E501

        Name of the Category.  # noqa: E501

        :return: The name of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Recommendation2CategoryDocument.

        Name of the Category.  # noqa: E501

        :param name: The name of this Recommendation2CategoryDocument.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_person(self):
        """Gets the is_person of this Recommendation2CategoryDocument.  # noqa: E501

        Determines if the category can be applied to a person recommendation.  # noqa: E501

        :return: The is_person of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_person

    @is_person.setter
    def is_person(self, is_person):
        """Sets the is_person of this Recommendation2CategoryDocument.

        Determines if the category can be applied to a person recommendation.  # noqa: E501

        :param is_person: The is_person of this Recommendation2CategoryDocument.  # noqa: E501
        :type: bool
        """

        self._is_person = is_person

    @property
    def is_corporate(self):
        """Gets the is_corporate of this Recommendation2CategoryDocument.  # noqa: E501

        Determines if the category can be applied to a corporate recommendation.  # noqa: E501

        :return: The is_corporate of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_corporate

    @is_corporate.setter
    def is_corporate(self, is_corporate):
        """Sets the is_corporate of this Recommendation2CategoryDocument.

        Determines if the category can be applied to a corporate recommendation.  # noqa: E501

        :param is_corporate: The is_corporate of this Recommendation2CategoryDocument.  # noqa: E501
        :type: bool
        """

        self._is_corporate = is_corporate

    @property
    def is_trust(self):
        """Gets the is_trust of this Recommendation2CategoryDocument.  # noqa: E501

        Determines if the category can be applied to a trust recommendation.  # noqa: E501

        :return: The is_trust of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_trust

    @is_trust.setter
    def is_trust(self, is_trust):
        """Sets the is_trust of this Recommendation2CategoryDocument.

        Determines if the category can be applied to a trust recommendation.  # noqa: E501

        :param is_trust: The is_trust of this Recommendation2CategoryDocument.  # noqa: E501
        :type: bool
        """

        self._is_trust = is_trust

    @property
    def is_archived(self):
        """Gets the is_archived of this Recommendation2CategoryDocument.  # noqa: E501

        Determines if the category is archived.  # noqa: E501

        :return: The is_archived of this Recommendation2CategoryDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this Recommendation2CategoryDocument.

        Determines if the category is archived.  # noqa: E501

        :param is_archived: The is_archived of this Recommendation2CategoryDocument.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recommendation2CategoryDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recommendation2CategoryDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
