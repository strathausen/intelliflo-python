# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtrTemplate2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'group_owner': 'GroupOwnerReference',
        'created_by_app': 'NamedAppReference',
        'created_by': 'UserReference',
        'tags': 'list[str]',
        'is_active': 'bool',
        'is_answered': 'bool',
        'questions': 'list[AtrTemplateQuestion]',
        'question_groups': 'dict(str, AtrQuestionGroup)',
        'inconsistent_answers': 'list[AtrAnswerContradictions]',
        'risk_profiles': 'dict(str, AtrRiskProfile)',
        'created_at': 'datetime',
        'asset_model': 'AssetModel',
        'updated_at': 'datetime',
        'app_template': 'AtrAppTemplateRef',
        'retake_interval': 'int'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'group_owner': 'groupOwner',
        'created_by_app': 'createdByApp',
        'created_by': 'createdBy',
        'tags': 'tags',
        'is_active': 'isActive',
        'is_answered': 'isAnswered',
        'questions': 'questions',
        'question_groups': 'questionGroups',
        'inconsistent_answers': 'inconsistentAnswers',
        'risk_profiles': 'riskProfiles',
        'created_at': 'createdAt',
        'asset_model': 'assetModel',
        'updated_at': 'updatedAt',
        'app_template': 'appTemplate',
        'retake_interval': 'retakeInterval'
    }

    def __init__(self, id=None, href=None, name=None, group_owner=None, created_by_app=None, created_by=None, tags=None, is_active=False, is_answered=None, questions=None, question_groups=None, inconsistent_answers=None, risk_profiles=None, created_at=None, asset_model=None, updated_at=None, app_template=None, retake_interval=None):  # noqa: E501
        """AtrTemplate2 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._group_owner = None
        self._created_by_app = None
        self._created_by = None
        self._tags = None
        self._is_active = None
        self._is_answered = None
        self._questions = None
        self._question_groups = None
        self._inconsistent_answers = None
        self._risk_profiles = None
        self._created_at = None
        self._asset_model = None
        self._updated_at = None
        self._app_template = None
        self._retake_interval = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if group_owner is not None:
            self.group_owner = group_owner
        if created_by_app is not None:
            self.created_by_app = created_by_app
        if created_by is not None:
            self.created_by = created_by
        if tags is not None:
            self.tags = tags
        if is_active is not None:
            self.is_active = is_active
        if is_answered is not None:
            self.is_answered = is_answered
        self.questions = questions
        if question_groups is not None:
            self.question_groups = question_groups
        if inconsistent_answers is not None:
            self.inconsistent_answers = inconsistent_answers
        if risk_profiles is not None:
            self.risk_profiles = risk_profiles
        if created_at is not None:
            self.created_at = created_at
        if asset_model is not None:
            self.asset_model = asset_model
        if updated_at is not None:
            self.updated_at = updated_at
        if app_template is not None:
            self.app_template = app_template
        if retake_interval is not None:
            self.retake_interval = retake_interval

    @property
    def id(self):
        """Gets the id of this AtrTemplate2.  # noqa: E501

        ATR template unique identifier.  # noqa: E501

        :return: The id of this AtrTemplate2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtrTemplate2.

        ATR template unique identifier.  # noqa: E501

        :param id: The id of this AtrTemplate2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AtrTemplate2.  # noqa: E501

        ATR template hypermedia link.  # noqa: E501

        :return: The href of this AtrTemplate2.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AtrTemplate2.

        ATR template hypermedia link.  # noqa: E501

        :param href: The href of this AtrTemplate2.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this AtrTemplate2.  # noqa: E501

        Name of the ATR template.  # noqa: E501

        :return: The name of this AtrTemplate2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AtrTemplate2.

        Name of the ATR template.  # noqa: E501

        :param name: The name of this AtrTemplate2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def group_owner(self):
        """Gets the group_owner of this AtrTemplate2.  # noqa: E501


        :return: The group_owner of this AtrTemplate2.  # noqa: E501
        :rtype: GroupOwnerReference
        """
        return self._group_owner

    @group_owner.setter
    def group_owner(self, group_owner):
        """Sets the group_owner of this AtrTemplate2.


        :param group_owner: The group_owner of this AtrTemplate2.  # noqa: E501
        :type: GroupOwnerReference
        """

        self._group_owner = group_owner

    @property
    def created_by_app(self):
        """Gets the created_by_app of this AtrTemplate2.  # noqa: E501


        :return: The created_by_app of this AtrTemplate2.  # noqa: E501
        :rtype: NamedAppReference
        """
        return self._created_by_app

    @created_by_app.setter
    def created_by_app(self, created_by_app):
        """Sets the created_by_app of this AtrTemplate2.


        :param created_by_app: The created_by_app of this AtrTemplate2.  # noqa: E501
        :type: NamedAppReference
        """

        self._created_by_app = created_by_app

    @property
    def created_by(self):
        """Gets the created_by of this AtrTemplate2.  # noqa: E501


        :return: The created_by of this AtrTemplate2.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AtrTemplate2.


        :param created_by: The created_by of this AtrTemplate2.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def tags(self):
        """Gets the tags of this AtrTemplate2.  # noqa: E501

        List of tags associated with the ATR template.  # noqa: E501

        :return: The tags of this AtrTemplate2.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AtrTemplate2.

        List of tags associated with the ATR template.  # noqa: E501

        :param tags: The tags of this AtrTemplate2.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def is_active(self):
        """Gets the is_active of this AtrTemplate2.  # noqa: E501

        Is ATR template Active?  # noqa: E501

        :return: The is_active of this AtrTemplate2.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AtrTemplate2.

        Is ATR template Active?  # noqa: E501

        :param is_active: The is_active of this AtrTemplate2.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_answered(self):
        """Gets the is_answered of this AtrTemplate2.  # noqa: E501

        Flag indicating whether an ATR questionnaire based upon the template has been completed or not.  # noqa: E501

        :return: The is_answered of this AtrTemplate2.  # noqa: E501
        :rtype: bool
        """
        return self._is_answered

    @is_answered.setter
    def is_answered(self, is_answered):
        """Sets the is_answered of this AtrTemplate2.

        Flag indicating whether an ATR questionnaire based upon the template has been completed or not.  # noqa: E501

        :param is_answered: The is_answered of this AtrTemplate2.  # noqa: E501
        :type: bool
        """

        self._is_answered = is_answered

    @property
    def questions(self):
        """Gets the questions of this AtrTemplate2.  # noqa: E501

        ATR questions and answer options.  # noqa: E501

        :return: The questions of this AtrTemplate2.  # noqa: E501
        :rtype: list[AtrTemplateQuestion]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this AtrTemplate2.

        ATR questions and answer options.  # noqa: E501

        :param questions: The questions of this AtrTemplate2.  # noqa: E501
        :type: list[AtrTemplateQuestion]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions

    @property
    def question_groups(self):
        """Gets the question_groups of this AtrTemplate2.  # noqa: E501

        Question Groups associated with the ATR template.  This can be used to determine if a client's answers contain contradictory statements by comparing groups of answers together.  Only one of QuestionGroups of InconsistentAnswers can be specified.  # noqa: E501

        :return: The question_groups of this AtrTemplate2.  # noqa: E501
        :rtype: dict(str, AtrQuestionGroup)
        """
        return self._question_groups

    @question_groups.setter
    def question_groups(self, question_groups):
        """Sets the question_groups of this AtrTemplate2.

        Question Groups associated with the ATR template.  This can be used to determine if a client's answers contain contradictory statements by comparing groups of answers together.  Only one of QuestionGroups of InconsistentAnswers can be specified.  # noqa: E501

        :param question_groups: The question_groups of this AtrTemplate2.  # noqa: E501
        :type: dict(str, AtrQuestionGroup)
        """

        self._question_groups = question_groups

    @property
    def inconsistent_answers(self):
        """Gets the inconsistent_answers of this AtrTemplate2.  # noqa: E501

        A list of questions and any associated contradictory questions and answers.  This can be used to determine if a client's answers contain contradictory statements by comparing answers to individual questions.  Only one of QuestionGroups of InconsistentAnswers can be specified.  # noqa: E501

        :return: The inconsistent_answers of this AtrTemplate2.  # noqa: E501
        :rtype: list[AtrAnswerContradictions]
        """
        return self._inconsistent_answers

    @inconsistent_answers.setter
    def inconsistent_answers(self, inconsistent_answers):
        """Sets the inconsistent_answers of this AtrTemplate2.

        A list of questions and any associated contradictory questions and answers.  This can be used to determine if a client's answers contain contradictory statements by comparing answers to individual questions.  Only one of QuestionGroups of InconsistentAnswers can be specified.  # noqa: E501

        :param inconsistent_answers: The inconsistent_answers of this AtrTemplate2.  # noqa: E501
        :type: list[AtrAnswerContradictions]
        """

        self._inconsistent_answers = inconsistent_answers

    @property
    def risk_profiles(self):
        """Gets the risk_profiles of this AtrTemplate2.  # noqa: E501

        Risk Profiles associated with the ATR template.  # noqa: E501

        :return: The risk_profiles of this AtrTemplate2.  # noqa: E501
        :rtype: dict(str, AtrRiskProfile)
        """
        return self._risk_profiles

    @risk_profiles.setter
    def risk_profiles(self, risk_profiles):
        """Sets the risk_profiles of this AtrTemplate2.

        Risk Profiles associated with the ATR template.  # noqa: E501

        :param risk_profiles: The risk_profiles of this AtrTemplate2.  # noqa: E501
        :type: dict(str, AtrRiskProfile)
        """

        self._risk_profiles = risk_profiles

    @property
    def created_at(self):
        """Gets the created_at of this AtrTemplate2.  # noqa: E501

        Template Created on.  # noqa: E501

        :return: The created_at of this AtrTemplate2.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AtrTemplate2.

        Template Created on.  # noqa: E501

        :param created_at: The created_at of this AtrTemplate2.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def asset_model(self):
        """Gets the asset_model of this AtrTemplate2.  # noqa: E501


        :return: The asset_model of this AtrTemplate2.  # noqa: E501
        :rtype: AssetModel
        """
        return self._asset_model

    @asset_model.setter
    def asset_model(self, asset_model):
        """Sets the asset_model of this AtrTemplate2.


        :param asset_model: The asset_model of this AtrTemplate2.  # noqa: E501
        :type: AssetModel
        """

        self._asset_model = asset_model

    @property
    def updated_at(self):
        """Gets the updated_at of this AtrTemplate2.  # noqa: E501

        Template Last Updated on  # noqa: E501

        :return: The updated_at of this AtrTemplate2.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AtrTemplate2.

        Template Last Updated on  # noqa: E501

        :param updated_at: The updated_at of this AtrTemplate2.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def app_template(self):
        """Gets the app_template of this AtrTemplate2.  # noqa: E501


        :return: The app_template of this AtrTemplate2.  # noqa: E501
        :rtype: AtrAppTemplateRef
        """
        return self._app_template

    @app_template.setter
    def app_template(self, app_template):
        """Sets the app_template of this AtrTemplate2.


        :param app_template: The app_template of this AtrTemplate2.  # noqa: E501
        :type: AtrAppTemplateRef
        """

        self._app_template = app_template

    @property
    def retake_interval(self):
        """Gets the retake_interval of this AtrTemplate2.  # noqa: E501

        ATR Template Expiration Configuration (in Months)  # noqa: E501

        :return: The retake_interval of this AtrTemplate2.  # noqa: E501
        :rtype: int
        """
        return self._retake_interval

    @retake_interval.setter
    def retake_interval(self, retake_interval):
        """Sets the retake_interval of this AtrTemplate2.

        ATR Template Expiration Configuration (in Months)  # noqa: E501

        :param retake_interval: The retake_interval of this AtrTemplate2.  # noqa: E501
        :type: int
        """

        self._retake_interval = retake_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtrTemplate2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtrTemplate2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
