# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_plan import BasePlan  # noqa: F401,E501

class ProtectionPlan(BasePlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_trust': 'bool',
        'in_trust_to_whom': 'str',
        'premium_loading': 'str',
        'exclusions_notes': 'str',
        'renewal_on': 'datetime'
    }
    if hasattr(BasePlan, "swagger_types"):
        swagger_types.update(BasePlan.swagger_types)

    attribute_map = {
        'in_trust': 'inTrust',
        'in_trust_to_whom': 'inTrustToWhom',
        'premium_loading': 'premiumLoading',
        'exclusions_notes': 'exclusionsNotes',
        'renewal_on': 'renewalOn'
    }
    if hasattr(BasePlan, "attribute_map"):
        attribute_map.update(BasePlan.attribute_map)

    def __init__(self, in_trust=False, in_trust_to_whom='null', premium_loading='null', exclusions_notes='null', renewal_on=None, *args, **kwargs):  # noqa: E501
        """ProtectionPlan - a model defined in Swagger"""  # noqa: E501
        self._in_trust = None
        self._in_trust_to_whom = None
        self._premium_loading = None
        self._exclusions_notes = None
        self._renewal_on = None
        self.discriminator = None
        if in_trust is not None:
            self.in_trust = in_trust
        if in_trust_to_whom is not None:
            self.in_trust_to_whom = in_trust_to_whom
        if premium_loading is not None:
            self.premium_loading = premium_loading
        if exclusions_notes is not None:
            self.exclusions_notes = exclusions_notes
        if renewal_on is not None:
            self.renewal_on = renewal_on
        BasePlan.__init__(self, *args, **kwargs)

    @property
    def in_trust(self):
        """Gets the in_trust of this ProtectionPlan.  # noqa: E501

        In trust flag.  # noqa: E501

        :return: The in_trust of this ProtectionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._in_trust

    @in_trust.setter
    def in_trust(self, in_trust):
        """Sets the in_trust of this ProtectionPlan.

        In trust flag.  # noqa: E501

        :param in_trust: The in_trust of this ProtectionPlan.  # noqa: E501
        :type: bool
        """

        self._in_trust = in_trust

    @property
    def in_trust_to_whom(self):
        """Gets the in_trust_to_whom of this ProtectionPlan.  # noqa: E501

        Name of the trust beneficiary.  # noqa: E501

        :return: The in_trust_to_whom of this ProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._in_trust_to_whom

    @in_trust_to_whom.setter
    def in_trust_to_whom(self, in_trust_to_whom):
        """Sets the in_trust_to_whom of this ProtectionPlan.

        Name of the trust beneficiary.  # noqa: E501

        :param in_trust_to_whom: The in_trust_to_whom of this ProtectionPlan.  # noqa: E501
        :type: str
        """

        self._in_trust_to_whom = in_trust_to_whom

    @property
    def premium_loading(self):
        """Gets the premium_loading of this ProtectionPlan.  # noqa: E501

        The premiums loading associated with the disclosure of increased risk.  # noqa: E501

        :return: The premium_loading of this ProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._premium_loading

    @premium_loading.setter
    def premium_loading(self, premium_loading):
        """Sets the premium_loading of this ProtectionPlan.

        The premiums loading associated with the disclosure of increased risk.  # noqa: E501

        :param premium_loading: The premium_loading of this ProtectionPlan.  # noqa: E501
        :type: str
        """

        self._premium_loading = premium_loading

    @property
    def exclusions_notes(self):
        """Gets the exclusions_notes of this ProtectionPlan.  # noqa: E501

        Summary of any applicable exclusions.  # noqa: E501

        :return: The exclusions_notes of this ProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._exclusions_notes

    @exclusions_notes.setter
    def exclusions_notes(self, exclusions_notes):
        """Sets the exclusions_notes of this ProtectionPlan.

        Summary of any applicable exclusions.  # noqa: E501

        :param exclusions_notes: The exclusions_notes of this ProtectionPlan.  # noqa: E501
        :type: str
        """

        self._exclusions_notes = exclusions_notes

    @property
    def renewal_on(self):
        """Gets the renewal_on of this ProtectionPlan.  # noqa: E501

        Policy renewal date.  # noqa: E501

        :return: The renewal_on of this ProtectionPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._renewal_on

    @renewal_on.setter
    def renewal_on(self, renewal_on):
        """Sets the renewal_on of this ProtectionPlan.

        Policy renewal date.  # noqa: E501

        :param renewal_on: The renewal_on of this ProtectionPlan.  # noqa: E501
        :type: datetime
        """

        self._renewal_on = renewal_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectionPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
