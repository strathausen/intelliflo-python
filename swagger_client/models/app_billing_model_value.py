# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppBillingModelValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'net_price': 'CurrencyValue',
        'frequency': 'str',
        'api_usage_plan': 'str',
        'installation_type': 'str',
        'charge_basis': 'str',
        'custom_charge_desc': 'str',
        'external_ref': 'str'
    }

    attribute_map = {
        'net_price': 'netPrice',
        'frequency': 'frequency',
        'api_usage_plan': 'apiUsagePlan',
        'installation_type': 'installationType',
        'charge_basis': 'chargeBasis',
        'custom_charge_desc': 'customChargeDesc',
        'external_ref': 'externalRef'
    }

    def __init__(self, net_price=None, frequency=None, api_usage_plan=None, installation_type=None, charge_basis=None, custom_charge_desc=None, external_ref=None):  # noqa: E501
        """AppBillingModelValue - a model defined in Swagger"""  # noqa: E501
        self._net_price = None
        self._frequency = None
        self._api_usage_plan = None
        self._installation_type = None
        self._charge_basis = None
        self._custom_charge_desc = None
        self._external_ref = None
        self.discriminator = None
        self.net_price = net_price
        self.frequency = frequency
        self.api_usage_plan = api_usage_plan
        self.installation_type = installation_type
        self.charge_basis = charge_basis
        if custom_charge_desc is not None:
            self.custom_charge_desc = custom_charge_desc
        if external_ref is not None:
            self.external_ref = external_ref

    @property
    def net_price(self):
        """Gets the net_price of this AppBillingModelValue.  # noqa: E501


        :return: The net_price of this AppBillingModelValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._net_price

    @net_price.setter
    def net_price(self, net_price):
        """Sets the net_price of this AppBillingModelValue.


        :param net_price: The net_price of this AppBillingModelValue.  # noqa: E501
        :type: CurrencyValue
        """
        if net_price is None:
            raise ValueError("Invalid value for `net_price`, must not be `None`")  # noqa: E501

        self._net_price = net_price

    @property
    def frequency(self):
        """Gets the frequency of this AppBillingModelValue.  # noqa: E501


        :return: The frequency of this AppBillingModelValue.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this AppBillingModelValue.


        :param frequency: The frequency of this AppBillingModelValue.  # noqa: E501
        :type: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501
        allowed_values = ["monthly", "one_off"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def api_usage_plan(self):
        """Gets the api_usage_plan of this AppBillingModelValue.  # noqa: E501


        :return: The api_usage_plan of this AppBillingModelValue.  # noqa: E501
        :rtype: str
        """
        return self._api_usage_plan

    @api_usage_plan.setter
    def api_usage_plan(self, api_usage_plan):
        """Sets the api_usage_plan of this AppBillingModelValue.


        :param api_usage_plan: The api_usage_plan of this AppBillingModelValue.  # noqa: E501
        :type: str
        """
        if api_usage_plan is None:
            raise ValueError("Invalid value for `api_usage_plan`, must not be `None`")  # noqa: E501

        self._api_usage_plan = api_usage_plan

    @property
    def installation_type(self):
        """Gets the installation_type of this AppBillingModelValue.  # noqa: E501


        :return: The installation_type of this AppBillingModelValue.  # noqa: E501
        :rtype: str
        """
        return self._installation_type

    @installation_type.setter
    def installation_type(self, installation_type):
        """Sets the installation_type of this AppBillingModelValue.


        :param installation_type: The installation_type of this AppBillingModelValue.  # noqa: E501
        :type: str
        """
        if installation_type is None:
            raise ValueError("Invalid value for `installation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "tenant"]  # noqa: E501
        if installation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `installation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(installation_type, allowed_values)
            )

        self._installation_type = installation_type

    @property
    def charge_basis(self):
        """Gets the charge_basis of this AppBillingModelValue.  # noqa: E501


        :return: The charge_basis of this AppBillingModelValue.  # noqa: E501
        :rtype: str
        """
        return self._charge_basis

    @charge_basis.setter
    def charge_basis(self, charge_basis):
        """Sets the charge_basis of this AppBillingModelValue.


        :param charge_basis: The charge_basis of this AppBillingModelValue.  # noqa: E501
        :type: str
        """
        if charge_basis is None:
            raise ValueError("Invalid value for `charge_basis`, must not be `None`")  # noqa: E501
        allowed_values = ["installation", "usage_by_user", "usage_by_tenant", "custom"]  # noqa: E501
        if charge_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_basis, allowed_values)
            )

        self._charge_basis = charge_basis

    @property
    def custom_charge_desc(self):
        """Gets the custom_charge_desc of this AppBillingModelValue.  # noqa: E501


        :return: The custom_charge_desc of this AppBillingModelValue.  # noqa: E501
        :rtype: str
        """
        return self._custom_charge_desc

    @custom_charge_desc.setter
    def custom_charge_desc(self, custom_charge_desc):
        """Sets the custom_charge_desc of this AppBillingModelValue.


        :param custom_charge_desc: The custom_charge_desc of this AppBillingModelValue.  # noqa: E501
        :type: str
        """

        self._custom_charge_desc = custom_charge_desc

    @property
    def external_ref(self):
        """Gets the external_ref of this AppBillingModelValue.  # noqa: E501


        :return: The external_ref of this AppBillingModelValue.  # noqa: E501
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this AppBillingModelValue.


        :param external_ref: The external_ref of this AppBillingModelValue.  # noqa: E501
        :type: str
        """

        self._external_ref = external_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppBillingModelValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppBillingModelValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
