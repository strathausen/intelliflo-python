# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.protection_plan import ProtectionPlan  # noqa: F401,E501

class PersonalProtectionPlan(ProtectionPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_original_investment_protection': 'bool',
        'protection_payout_type': 'str',
        'expense_premium_structure': 'str',
        'income_premium_structure': 'str',
        'life_cover_premium_structure': 'str',
        'critical_illness_premium_structure': 'str',
        'severity_based_cover': 'InsuranceCoverValue',
        'permanent_total_disability_cover': 'InsuranceCoverValue',
        'critical_illness_until_age': 'int',
        'sum_assured': 'CurrencyValue',
        'premium_percentage_assigned_to_investment': 'float',
        'until_age': 'int',
        'term': 'str',
        'life_cover_sum_assured': 'CurrencyValue',
        'owner2_percent_of_sum_assured': 'float',
        'critical_illness_term': 'str',
        'critical_illness_sum_assured': 'CurrencyValue',
        'benefit_options': 'list[str]',
        'benefit_value': 'CurrencyValue',
        'benefit_frequency': 'str',
        'benefit_period': 'BenefitPeriodValue',
        'deferred_period': 'str',
        'qualification_period': 'QualificationPeriodValue',
        'split_benefit_frequency': 'str',
        'split_benefit_value': 'CurrencyValue',
        'split_deferred_period': 'str',
        'benefit_summary_notes': 'str',
        'additional_cover_amount': 'CurrencyValue',
        'index_type': 'str',
        'initial_earnings_period': 'str',
        'waiting_period': 'str',
        'life_cover_payment_basis': 'str',
        'review_on': 'datetime',
        'is_rated': 'bool',
        'is_premium_waiver_woc': 'bool'
    }
    if hasattr(ProtectionPlan, "swagger_types"):
        swagger_types.update(ProtectionPlan.swagger_types)

    attribute_map = {
        'has_original_investment_protection': 'hasOriginalInvestmentProtection',
        'protection_payout_type': 'protectionPayoutType',
        'expense_premium_structure': 'expensePremiumStructure',
        'income_premium_structure': 'incomePremiumStructure',
        'life_cover_premium_structure': 'lifeCoverPremiumStructure',
        'critical_illness_premium_structure': 'criticalIllnessPremiumStructure',
        'severity_based_cover': 'severityBasedCover',
        'permanent_total_disability_cover': 'permanentTotalDisabilityCover',
        'critical_illness_until_age': 'criticalIllnessUntilAge',
        'sum_assured': 'sumAssured',
        'premium_percentage_assigned_to_investment': 'premiumPercentageAssignedToInvestment',
        'until_age': 'untilAge',
        'term': 'term',
        'life_cover_sum_assured': 'lifeCoverSumAssured',
        'owner2_percent_of_sum_assured': 'owner2PercentOfSumAssured',
        'critical_illness_term': 'criticalIllnessTerm',
        'critical_illness_sum_assured': 'criticalIllnessSumAssured',
        'benefit_options': 'benefitOptions',
        'benefit_value': 'benefitValue',
        'benefit_frequency': 'benefitFrequency',
        'benefit_period': 'benefitPeriod',
        'deferred_period': 'deferredPeriod',
        'qualification_period': 'qualificationPeriod',
        'split_benefit_frequency': 'splitBenefitFrequency',
        'split_benefit_value': 'splitBenefitValue',
        'split_deferred_period': 'splitDeferredPeriod',
        'benefit_summary_notes': 'benefitSummaryNotes',
        'additional_cover_amount': 'additionalCoverAmount',
        'index_type': 'indexType',
        'initial_earnings_period': 'initialEarningsPeriod',
        'waiting_period': 'waitingPeriod',
        'life_cover_payment_basis': 'lifeCoverPaymentBasis',
        'review_on': 'reviewOn',
        'is_rated': 'isRated',
        'is_premium_waiver_woc': 'isPremiumWaiverWoc'
    }
    if hasattr(ProtectionPlan, "attribute_map"):
        attribute_map.update(ProtectionPlan.attribute_map)

    def __init__(self, has_original_investment_protection=False, protection_payout_type='null', expense_premium_structure='null', income_premium_structure='null', life_cover_premium_structure='null', critical_illness_premium_structure='null', severity_based_cover=None, permanent_total_disability_cover=None, critical_illness_until_age=None, sum_assured=None, premium_percentage_assigned_to_investment=None, until_age=None, term='null', life_cover_sum_assured=None, owner2_percent_of_sum_assured=None, critical_illness_term='null', critical_illness_sum_assured=None, benefit_options=None, benefit_value=None, benefit_frequency='null', benefit_period=None, deferred_period='null', qualification_period=None, split_benefit_frequency='null', split_benefit_value=None, split_deferred_period='null', benefit_summary_notes='null', additional_cover_amount=None, index_type='null', initial_earnings_period='null', waiting_period='null', life_cover_payment_basis='null', review_on=None, is_rated=False, is_premium_waiver_woc=False, *args, **kwargs):  # noqa: E501
        """PersonalProtectionPlan - a model defined in Swagger"""  # noqa: E501
        self._has_original_investment_protection = None
        self._protection_payout_type = None
        self._expense_premium_structure = None
        self._income_premium_structure = None
        self._life_cover_premium_structure = None
        self._critical_illness_premium_structure = None
        self._severity_based_cover = None
        self._permanent_total_disability_cover = None
        self._critical_illness_until_age = None
        self._sum_assured = None
        self._premium_percentage_assigned_to_investment = None
        self._until_age = None
        self._term = None
        self._life_cover_sum_assured = None
        self._owner2_percent_of_sum_assured = None
        self._critical_illness_term = None
        self._critical_illness_sum_assured = None
        self._benefit_options = None
        self._benefit_value = None
        self._benefit_frequency = None
        self._benefit_period = None
        self._deferred_period = None
        self._qualification_period = None
        self._split_benefit_frequency = None
        self._split_benefit_value = None
        self._split_deferred_period = None
        self._benefit_summary_notes = None
        self._additional_cover_amount = None
        self._index_type = None
        self._initial_earnings_period = None
        self._waiting_period = None
        self._life_cover_payment_basis = None
        self._review_on = None
        self._is_rated = None
        self._is_premium_waiver_woc = None
        self.discriminator = None
        if has_original_investment_protection is not None:
            self.has_original_investment_protection = has_original_investment_protection
        if protection_payout_type is not None:
            self.protection_payout_type = protection_payout_type
        if expense_premium_structure is not None:
            self.expense_premium_structure = expense_premium_structure
        if income_premium_structure is not None:
            self.income_premium_structure = income_premium_structure
        if life_cover_premium_structure is not None:
            self.life_cover_premium_structure = life_cover_premium_structure
        if critical_illness_premium_structure is not None:
            self.critical_illness_premium_structure = critical_illness_premium_structure
        if severity_based_cover is not None:
            self.severity_based_cover = severity_based_cover
        if permanent_total_disability_cover is not None:
            self.permanent_total_disability_cover = permanent_total_disability_cover
        if critical_illness_until_age is not None:
            self.critical_illness_until_age = critical_illness_until_age
        if sum_assured is not None:
            self.sum_assured = sum_assured
        if premium_percentage_assigned_to_investment is not None:
            self.premium_percentage_assigned_to_investment = premium_percentage_assigned_to_investment
        if until_age is not None:
            self.until_age = until_age
        if term is not None:
            self.term = term
        if life_cover_sum_assured is not None:
            self.life_cover_sum_assured = life_cover_sum_assured
        if owner2_percent_of_sum_assured is not None:
            self.owner2_percent_of_sum_assured = owner2_percent_of_sum_assured
        if critical_illness_term is not None:
            self.critical_illness_term = critical_illness_term
        if critical_illness_sum_assured is not None:
            self.critical_illness_sum_assured = critical_illness_sum_assured
        if benefit_options is not None:
            self.benefit_options = benefit_options
        if benefit_value is not None:
            self.benefit_value = benefit_value
        if benefit_frequency is not None:
            self.benefit_frequency = benefit_frequency
        if benefit_period is not None:
            self.benefit_period = benefit_period
        if deferred_period is not None:
            self.deferred_period = deferred_period
        if qualification_period is not None:
            self.qualification_period = qualification_period
        if split_benefit_frequency is not None:
            self.split_benefit_frequency = split_benefit_frequency
        if split_benefit_value is not None:
            self.split_benefit_value = split_benefit_value
        if split_deferred_period is not None:
            self.split_deferred_period = split_deferred_period
        if benefit_summary_notes is not None:
            self.benefit_summary_notes = benefit_summary_notes
        if additional_cover_amount is not None:
            self.additional_cover_amount = additional_cover_amount
        if index_type is not None:
            self.index_type = index_type
        if initial_earnings_period is not None:
            self.initial_earnings_period = initial_earnings_period
        if waiting_period is not None:
            self.waiting_period = waiting_period
        if life_cover_payment_basis is not None:
            self.life_cover_payment_basis = life_cover_payment_basis
        if review_on is not None:
            self.review_on = review_on
        if is_rated is not None:
            self.is_rated = is_rated
        if is_premium_waiver_woc is not None:
            self.is_premium_waiver_woc = is_premium_waiver_woc
        ProtectionPlan.__init__(self, *args, **kwargs)

    @property
    def has_original_investment_protection(self):
        """Gets the has_original_investment_protection of this PersonalProtectionPlan.  # noqa: E501

        Product has a guarantee / protection to protect original investment.  # noqa: E501

        :return: The has_original_investment_protection of this PersonalProtectionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._has_original_investment_protection

    @has_original_investment_protection.setter
    def has_original_investment_protection(self, has_original_investment_protection):
        """Sets the has_original_investment_protection of this PersonalProtectionPlan.

        Product has a guarantee / protection to protect original investment.  # noqa: E501

        :param has_original_investment_protection: The has_original_investment_protection of this PersonalProtectionPlan.  # noqa: E501
        :type: bool
        """

        self._has_original_investment_protection = has_original_investment_protection

    @property
    def protection_payout_type(self):
        """Gets the protection_payout_type of this PersonalProtectionPlan.  # noqa: E501

        The type of payout for the protection.  # noqa: E501

        :return: The protection_payout_type of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._protection_payout_type

    @protection_payout_type.setter
    def protection_payout_type(self, protection_payout_type):
        """Sets the protection_payout_type of this PersonalProtectionPlan.

        The type of payout for the protection.  # noqa: E501

        :param protection_payout_type: The protection_payout_type of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Agreed", "Indemnity"]  # noqa: E501
        if protection_payout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_payout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(protection_payout_type, allowed_values)
            )

        self._protection_payout_type = protection_payout_type

    @property
    def expense_premium_structure(self):
        """Gets the expense_premium_structure of this PersonalProtectionPlan.  # noqa: E501

        The premium structure for expense protection.  # noqa: E501

        :return: The expense_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._expense_premium_structure

    @expense_premium_structure.setter
    def expense_premium_structure(self, expense_premium_structure):
        """Sets the expense_premium_structure of this PersonalProtectionPlan.

        The premium structure for expense protection.  # noqa: E501

        :param expense_premium_structure: The expense_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stepped", "Level", "Hybrid"]  # noqa: E501
        if expense_premium_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `expense_premium_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(expense_premium_structure, allowed_values)
            )

        self._expense_premium_structure = expense_premium_structure

    @property
    def income_premium_structure(self):
        """Gets the income_premium_structure of this PersonalProtectionPlan.  # noqa: E501

        The premium structure for income protection.  # noqa: E501

        :return: The income_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._income_premium_structure

    @income_premium_structure.setter
    def income_premium_structure(self, income_premium_structure):
        """Sets the income_premium_structure of this PersonalProtectionPlan.

        The premium structure for income protection.  # noqa: E501

        :param income_premium_structure: The income_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stepped", "Level", "Hybrid"]  # noqa: E501
        if income_premium_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `income_premium_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(income_premium_structure, allowed_values)
            )

        self._income_premium_structure = income_premium_structure

    @property
    def life_cover_premium_structure(self):
        """Gets the life_cover_premium_structure of this PersonalProtectionPlan.  # noqa: E501

        The premium structure for life cover.  # noqa: E501

        :return: The life_cover_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._life_cover_premium_structure

    @life_cover_premium_structure.setter
    def life_cover_premium_structure(self, life_cover_premium_structure):
        """Sets the life_cover_premium_structure of this PersonalProtectionPlan.

        The premium structure for life cover.  # noqa: E501

        :param life_cover_premium_structure: The life_cover_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stepped", "Level", "Hybrid"]  # noqa: E501
        if life_cover_premium_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `life_cover_premium_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(life_cover_premium_structure, allowed_values)
            )

        self._life_cover_premium_structure = life_cover_premium_structure

    @property
    def critical_illness_premium_structure(self):
        """Gets the critical_illness_premium_structure of this PersonalProtectionPlan.  # noqa: E501

        The premium structure for critical illness cover.  # noqa: E501

        :return: The critical_illness_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._critical_illness_premium_structure

    @critical_illness_premium_structure.setter
    def critical_illness_premium_structure(self, critical_illness_premium_structure):
        """Sets the critical_illness_premium_structure of this PersonalProtectionPlan.

        The premium structure for critical illness cover.  # noqa: E501

        :param critical_illness_premium_structure: The critical_illness_premium_structure of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stepped", "Level", "Hybrid"]  # noqa: E501
        if critical_illness_premium_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `critical_illness_premium_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(critical_illness_premium_structure, allowed_values)
            )

        self._critical_illness_premium_structure = critical_illness_premium_structure

    @property
    def severity_based_cover(self):
        """Gets the severity_based_cover of this PersonalProtectionPlan.  # noqa: E501


        :return: The severity_based_cover of this PersonalProtectionPlan.  # noqa: E501
        :rtype: InsuranceCoverValue
        """
        return self._severity_based_cover

    @severity_based_cover.setter
    def severity_based_cover(self, severity_based_cover):
        """Sets the severity_based_cover of this PersonalProtectionPlan.


        :param severity_based_cover: The severity_based_cover of this PersonalProtectionPlan.  # noqa: E501
        :type: InsuranceCoverValue
        """

        self._severity_based_cover = severity_based_cover

    @property
    def permanent_total_disability_cover(self):
        """Gets the permanent_total_disability_cover of this PersonalProtectionPlan.  # noqa: E501


        :return: The permanent_total_disability_cover of this PersonalProtectionPlan.  # noqa: E501
        :rtype: InsuranceCoverValue
        """
        return self._permanent_total_disability_cover

    @permanent_total_disability_cover.setter
    def permanent_total_disability_cover(self, permanent_total_disability_cover):
        """Sets the permanent_total_disability_cover of this PersonalProtectionPlan.


        :param permanent_total_disability_cover: The permanent_total_disability_cover of this PersonalProtectionPlan.  # noqa: E501
        :type: InsuranceCoverValue
        """

        self._permanent_total_disability_cover = permanent_total_disability_cover

    @property
    def critical_illness_until_age(self):
        """Gets the critical_illness_until_age of this PersonalProtectionPlan.  # noqa: E501

        The age at which critical illness cover ceases.  # noqa: E501

        :return: The critical_illness_until_age of this PersonalProtectionPlan.  # noqa: E501
        :rtype: int
        """
        return self._critical_illness_until_age

    @critical_illness_until_age.setter
    def critical_illness_until_age(self, critical_illness_until_age):
        """Sets the critical_illness_until_age of this PersonalProtectionPlan.

        The age at which critical illness cover ceases.  # noqa: E501

        :param critical_illness_until_age: The critical_illness_until_age of this PersonalProtectionPlan.  # noqa: E501
        :type: int
        """

        self._critical_illness_until_age = critical_illness_until_age

    @property
    def sum_assured(self):
        """Gets the sum_assured of this PersonalProtectionPlan.  # noqa: E501


        :return: The sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._sum_assured

    @sum_assured.setter
    def sum_assured(self, sum_assured):
        """Sets the sum_assured of this PersonalProtectionPlan.


        :param sum_assured: The sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._sum_assured = sum_assured

    @property
    def premium_percentage_assigned_to_investment(self):
        """Gets the premium_percentage_assigned_to_investment of this PersonalProtectionPlan.  # noqa: E501

        The Percentage of Premium assigned to Investment.  # noqa: E501

        :return: The premium_percentage_assigned_to_investment of this PersonalProtectionPlan.  # noqa: E501
        :rtype: float
        """
        return self._premium_percentage_assigned_to_investment

    @premium_percentage_assigned_to_investment.setter
    def premium_percentage_assigned_to_investment(self, premium_percentage_assigned_to_investment):
        """Sets the premium_percentage_assigned_to_investment of this PersonalProtectionPlan.

        The Percentage of Premium assigned to Investment.  # noqa: E501

        :param premium_percentage_assigned_to_investment: The premium_percentage_assigned_to_investment of this PersonalProtectionPlan.  # noqa: E501
        :type: float
        """

        self._premium_percentage_assigned_to_investment = premium_percentage_assigned_to_investment

    @property
    def until_age(self):
        """Gets the until_age of this PersonalProtectionPlan.  # noqa: E501

        Income is protected until client reaches age (years).  # noqa: E501

        :return: The until_age of this PersonalProtectionPlan.  # noqa: E501
        :rtype: int
        """
        return self._until_age

    @until_age.setter
    def until_age(self, until_age):
        """Sets the until_age of this PersonalProtectionPlan.

        Income is protected until client reaches age (years).  # noqa: E501

        :param until_age: The until_age of this PersonalProtectionPlan.  # noqa: E501
        :type: int
        """

        self._until_age = until_age

    @property
    def term(self):
        """Gets the term of this PersonalProtectionPlan.  # noqa: E501

        Policy duration in years (format(ISO-8601): \"P[n][Y]\").  # noqa: E501

        :return: The term of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this PersonalProtectionPlan.

        Policy duration in years (format(ISO-8601): \"P[n][Y]\").  # noqa: E501

        :param term: The term of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def life_cover_sum_assured(self):
        """Gets the life_cover_sum_assured of this PersonalProtectionPlan.  # noqa: E501


        :return: The life_cover_sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._life_cover_sum_assured

    @life_cover_sum_assured.setter
    def life_cover_sum_assured(self, life_cover_sum_assured):
        """Sets the life_cover_sum_assured of this PersonalProtectionPlan.


        :param life_cover_sum_assured: The life_cover_sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._life_cover_sum_assured = life_cover_sum_assured

    @property
    def owner2_percent_of_sum_assured(self):
        """Gets the owner2_percent_of_sum_assured of this PersonalProtectionPlan.  # noqa: E501

        The percentage of the Sum Assured which is allocated to the policy co-owner.  # noqa: E501

        :return: The owner2_percent_of_sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :rtype: float
        """
        return self._owner2_percent_of_sum_assured

    @owner2_percent_of_sum_assured.setter
    def owner2_percent_of_sum_assured(self, owner2_percent_of_sum_assured):
        """Sets the owner2_percent_of_sum_assured of this PersonalProtectionPlan.

        The percentage of the Sum Assured which is allocated to the policy co-owner.  # noqa: E501

        :param owner2_percent_of_sum_assured: The owner2_percent_of_sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :type: float
        """

        self._owner2_percent_of_sum_assured = owner2_percent_of_sum_assured

    @property
    def critical_illness_term(self):
        """Gets the critical_illness_term of this PersonalProtectionPlan.  # noqa: E501

        Critical Illness term in years (format(ISO-8601): \"P[n][Y]\").  # noqa: E501

        :return: The critical_illness_term of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._critical_illness_term

    @critical_illness_term.setter
    def critical_illness_term(self, critical_illness_term):
        """Sets the critical_illness_term of this PersonalProtectionPlan.

        Critical Illness term in years (format(ISO-8601): \"P[n][Y]\").  # noqa: E501

        :param critical_illness_term: The critical_illness_term of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._critical_illness_term = critical_illness_term

    @property
    def critical_illness_sum_assured(self):
        """Gets the critical_illness_sum_assured of this PersonalProtectionPlan.  # noqa: E501


        :return: The critical_illness_sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._critical_illness_sum_assured

    @critical_illness_sum_assured.setter
    def critical_illness_sum_assured(self, critical_illness_sum_assured):
        """Sets the critical_illness_sum_assured of this PersonalProtectionPlan.


        :param critical_illness_sum_assured: The critical_illness_sum_assured of this PersonalProtectionPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._critical_illness_sum_assured = critical_illness_sum_assured

    @property
    def benefit_options(self):
        """Gets the benefit_options of this PersonalProtectionPlan.  # noqa: E501

        List of applicable benefits against which payments will be made.  Valid options: ChildrensBenefit, Convertible, Renewable,  TerminalIllness, PaymentProtection.  # noqa: E501

        :return: The benefit_options of this PersonalProtectionPlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._benefit_options

    @benefit_options.setter
    def benefit_options(self, benefit_options):
        """Sets the benefit_options of this PersonalProtectionPlan.

        List of applicable benefits against which payments will be made.  Valid options: ChildrensBenefit, Convertible, Renewable,  TerminalIllness, PaymentProtection.  # noqa: E501

        :param benefit_options: The benefit_options of this PersonalProtectionPlan.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Convertible", "Renewable", "PaymentProtection", "ChildrensBenefit", "TerminalIllness"]  # noqa: E501
        if not set(benefit_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `benefit_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(benefit_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._benefit_options = benefit_options

    @property
    def benefit_value(self):
        """Gets the benefit_value of this PersonalProtectionPlan.  # noqa: E501


        :return: The benefit_value of this PersonalProtectionPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._benefit_value

    @benefit_value.setter
    def benefit_value(self, benefit_value):
        """Sets the benefit_value of this PersonalProtectionPlan.


        :param benefit_value: The benefit_value of this PersonalProtectionPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._benefit_value = benefit_value

    @property
    def benefit_frequency(self):
        """Gets the benefit_frequency of this PersonalProtectionPlan.  # noqa: E501

        How often Benefit payments are made.  # noqa: E501

        :return: The benefit_frequency of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._benefit_frequency

    @benefit_frequency.setter
    def benefit_frequency(self, benefit_frequency):
        """Sets the benefit_frequency of this PersonalProtectionPlan.

        How often Benefit payments are made.  # noqa: E501

        :param benefit_frequency: The benefit_frequency of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if benefit_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `benefit_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(benefit_frequency, allowed_values)
            )

        self._benefit_frequency = benefit_frequency

    @property
    def benefit_period(self):
        """Gets the benefit_period of this PersonalProtectionPlan.  # noqa: E501


        :return: The benefit_period of this PersonalProtectionPlan.  # noqa: E501
        :rtype: BenefitPeriodValue
        """
        return self._benefit_period

    @benefit_period.setter
    def benefit_period(self, benefit_period):
        """Sets the benefit_period of this PersonalProtectionPlan.


        :param benefit_period: The benefit_period of this PersonalProtectionPlan.  # noqa: E501
        :type: BenefitPeriodValue
        """

        self._benefit_period = benefit_period

    @property
    def deferred_period(self):
        """Gets the deferred_period of this PersonalProtectionPlan.  # noqa: E501

        The period between going off work and your income payments commencing (format(ISO-8601): \"P[n][YMWD]\").  # noqa: E501

        :return: The deferred_period of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._deferred_period

    @deferred_period.setter
    def deferred_period(self, deferred_period):
        """Sets the deferred_period of this PersonalProtectionPlan.

        The period between going off work and your income payments commencing (format(ISO-8601): \"P[n][YMWD]\").  # noqa: E501

        :param deferred_period: The deferred_period of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._deferred_period = deferred_period

    @property
    def qualification_period(self):
        """Gets the qualification_period of this PersonalProtectionPlan.  # noqa: E501


        :return: The qualification_period of this PersonalProtectionPlan.  # noqa: E501
        :rtype: QualificationPeriodValue
        """
        return self._qualification_period

    @qualification_period.setter
    def qualification_period(self, qualification_period):
        """Sets the qualification_period of this PersonalProtectionPlan.


        :param qualification_period: The qualification_period of this PersonalProtectionPlan.  # noqa: E501
        :type: QualificationPeriodValue
        """

        self._qualification_period = qualification_period

    @property
    def split_benefit_frequency(self):
        """Gets the split_benefit_frequency of this PersonalProtectionPlan.  # noqa: E501

        How often Split Benefit payments are made.  # noqa: E501

        :return: The split_benefit_frequency of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._split_benefit_frequency

    @split_benefit_frequency.setter
    def split_benefit_frequency(self, split_benefit_frequency):
        """Sets the split_benefit_frequency of this PersonalProtectionPlan.

        How often Split Benefit payments are made.  # noqa: E501

        :param split_benefit_frequency: The split_benefit_frequency of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if split_benefit_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `split_benefit_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(split_benefit_frequency, allowed_values)
            )

        self._split_benefit_frequency = split_benefit_frequency

    @property
    def split_benefit_value(self):
        """Gets the split_benefit_value of this PersonalProtectionPlan.  # noqa: E501


        :return: The split_benefit_value of this PersonalProtectionPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._split_benefit_value

    @split_benefit_value.setter
    def split_benefit_value(self, split_benefit_value):
        """Sets the split_benefit_value of this PersonalProtectionPlan.


        :param split_benefit_value: The split_benefit_value of this PersonalProtectionPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._split_benefit_value = split_benefit_value

    @property
    def split_deferred_period(self):
        """Gets the split_deferred_period of this PersonalProtectionPlan.  # noqa: E501

        Split deferred period (format(ISO-8601): \"P[n][YMWD]\").  # noqa: E501

        :return: The split_deferred_period of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._split_deferred_period

    @split_deferred_period.setter
    def split_deferred_period(self, split_deferred_period):
        """Sets the split_deferred_period of this PersonalProtectionPlan.

        Split deferred period (format(ISO-8601): \"P[n][YMWD]\").  # noqa: E501

        :param split_deferred_period: The split_deferred_period of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._split_deferred_period = split_deferred_period

    @property
    def benefit_summary_notes(self):
        """Gets the benefit_summary_notes of this PersonalProtectionPlan.  # noqa: E501

        Summary of the Benefits associated with this policy.  # noqa: E501

        :return: The benefit_summary_notes of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._benefit_summary_notes

    @benefit_summary_notes.setter
    def benefit_summary_notes(self, benefit_summary_notes):
        """Sets the benefit_summary_notes of this PersonalProtectionPlan.

        Summary of the Benefits associated with this policy.  # noqa: E501

        :param benefit_summary_notes: The benefit_summary_notes of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._benefit_summary_notes = benefit_summary_notes

    @property
    def additional_cover_amount(self):
        """Gets the additional_cover_amount of this PersonalProtectionPlan.  # noqa: E501


        :return: The additional_cover_amount of this PersonalProtectionPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._additional_cover_amount

    @additional_cover_amount.setter
    def additional_cover_amount(self, additional_cover_amount):
        """Sets the additional_cover_amount of this PersonalProtectionPlan.


        :param additional_cover_amount: The additional_cover_amount of this PersonalProtectionPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._additional_cover_amount = additional_cover_amount

    @property
    def index_type(self):
        """Gets the index_type of this PersonalProtectionPlan.  # noqa: E501

        Index type defines whether the amount of cover will change over time and, if it does, what governs that change.  # noqa: E501

        :return: The index_type of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._index_type

    @index_type.setter
    def index_type(self, index_type):
        """Sets the index_type of this PersonalProtectionPlan.

        Index type defines whether the amount of cover will change over time and, if it does, what governs that change.  # noqa: E501

        :param index_type: The index_type of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["LevelNotIndexed", "RPI", "FixedPercentage", "AEI", "Decreasing", "CPI"]  # noqa: E501
        if index_type not in allowed_values:
            raise ValueError(
                "Invalid value for `index_type` ({0}), must be one of {1}"  # noqa: E501
                .format(index_type, allowed_values)
            )

        self._index_type = index_type

    @property
    def initial_earnings_period(self):
        """Gets the initial_earnings_period of this PersonalProtectionPlan.  # noqa: E501

        Initial earnings period in days (format(ISO-8601): \"P[n]D\").  # noqa: E501

        :return: The initial_earnings_period of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._initial_earnings_period

    @initial_earnings_period.setter
    def initial_earnings_period(self, initial_earnings_period):
        """Sets the initial_earnings_period of this PersonalProtectionPlan.

        Initial earnings period in days (format(ISO-8601): \"P[n]D\").  # noqa: E501

        :param initial_earnings_period: The initial_earnings_period of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._initial_earnings_period = initial_earnings_period

    @property
    def waiting_period(self):
        """Gets the waiting_period of this PersonalProtectionPlan.  # noqa: E501

        Waiting period in days (format(ISO-8601): \"P[n]D\").  # noqa: E501

        :return: The waiting_period of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._waiting_period

    @waiting_period.setter
    def waiting_period(self, waiting_period):
        """Sets the waiting_period of this PersonalProtectionPlan.

        Waiting period in days (format(ISO-8601): \"P[n]D\").  # noqa: E501

        :param waiting_period: The waiting_period of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """

        self._waiting_period = waiting_period

    @property
    def life_cover_payment_basis(self):
        """Gets the life_cover_payment_basis of this PersonalProtectionPlan.  # noqa: E501

        Under what conditions Life Cover will be paid.  # noqa: E501

        :return: The life_cover_payment_basis of this PersonalProtectionPlan.  # noqa: E501
        :rtype: str
        """
        return self._life_cover_payment_basis

    @life_cover_payment_basis.setter
    def life_cover_payment_basis(self, life_cover_payment_basis):
        """Sets the life_cover_payment_basis of this PersonalProtectionPlan.

        Under what conditions Life Cover will be paid.  # noqa: E501

        :param life_cover_payment_basis: The life_cover_payment_basis of this PersonalProtectionPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["FirstDeath", "SecondDeath", "Both"]  # noqa: E501
        if life_cover_payment_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `life_cover_payment_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(life_cover_payment_basis, allowed_values)
            )

        self._life_cover_payment_basis = life_cover_payment_basis

    @property
    def review_on(self):
        """Gets the review_on of this PersonalProtectionPlan.  # noqa: E501

        Next policy review date.  # noqa: E501

        :return: The review_on of this PersonalProtectionPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._review_on

    @review_on.setter
    def review_on(self, review_on):
        """Sets the review_on of this PersonalProtectionPlan.

        Next policy review date.  # noqa: E501

        :param review_on: The review_on of this PersonalProtectionPlan.  # noqa: E501
        :type: datetime
        """

        self._review_on = review_on

    @property
    def is_rated(self):
        """Gets the is_rated of this PersonalProtectionPlan.  # noqa: E501

        Indicates a person with less than average health or who has a high-risk occupation.  # noqa: E501

        :return: The is_rated of this PersonalProtectionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_rated

    @is_rated.setter
    def is_rated(self, is_rated):
        """Sets the is_rated of this PersonalProtectionPlan.

        Indicates a person with less than average health or who has a high-risk occupation.  # noqa: E501

        :param is_rated: The is_rated of this PersonalProtectionPlan.  # noqa: E501
        :type: bool
        """

        self._is_rated = is_rated

    @property
    def is_premium_waiver_woc(self):
        """Gets the is_premium_waiver_woc of this PersonalProtectionPlan.  # noqa: E501

        Has the insured taken out premium waiver/Waiver of Contribution insurance to protect their contributions.  # noqa: E501

        :return: The is_premium_waiver_woc of this PersonalProtectionPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_premium_waiver_woc

    @is_premium_waiver_woc.setter
    def is_premium_waiver_woc(self, is_premium_waiver_woc):
        """Sets the is_premium_waiver_woc of this PersonalProtectionPlan.

        Has the insured taken out premium waiver/Waiver of Contribution insurance to protect their contributions.  # noqa: E501

        :param is_premium_waiver_woc: The is_premium_waiver_woc of this PersonalProtectionPlan.  # noqa: E501
        :type: bool
        """

        self._is_premium_waiver_woc = is_premium_waiver_woc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalProtectionPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalProtectionPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
