# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewTopupPlanValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selling_adviser': 'AdviserRef',
        'life_cycle': 'NamedLifecycleRef',
        'is_advice_off_panel': 'bool',
        'commission_rate': 'str',
        'split_template': 'SplitTemplateValue',
        'fees': 'list[FeeRef]'
    }

    attribute_map = {
        'selling_adviser': 'sellingAdviser',
        'life_cycle': 'lifeCycle',
        'is_advice_off_panel': 'isAdviceOffPanel',
        'commission_rate': 'commissionRate',
        'split_template': 'splitTemplate',
        'fees': 'fees'
    }

    def __init__(self, selling_adviser=None, life_cycle=None, is_advice_off_panel=None, commission_rate=None, split_template=None, fees=None):  # noqa: E501
        """NewTopupPlanValue - a model defined in Swagger"""  # noqa: E501
        self._selling_adviser = None
        self._life_cycle = None
        self._is_advice_off_panel = None
        self._commission_rate = None
        self._split_template = None
        self._fees = None
        self.discriminator = None
        if selling_adviser is not None:
            self.selling_adviser = selling_adviser
        if life_cycle is not None:
            self.life_cycle = life_cycle
        if is_advice_off_panel is not None:
            self.is_advice_off_panel = is_advice_off_panel
        if commission_rate is not None:
            self.commission_rate = commission_rate
        if split_template is not None:
            self.split_template = split_template
        if fees is not None:
            self.fees = fees

    @property
    def selling_adviser(self):
        """Gets the selling_adviser of this NewTopupPlanValue.  # noqa: E501


        :return: The selling_adviser of this NewTopupPlanValue.  # noqa: E501
        :rtype: AdviserRef
        """
        return self._selling_adviser

    @selling_adviser.setter
    def selling_adviser(self, selling_adviser):
        """Sets the selling_adviser of this NewTopupPlanValue.


        :param selling_adviser: The selling_adviser of this NewTopupPlanValue.  # noqa: E501
        :type: AdviserRef
        """

        self._selling_adviser = selling_adviser

    @property
    def life_cycle(self):
        """Gets the life_cycle of this NewTopupPlanValue.  # noqa: E501


        :return: The life_cycle of this NewTopupPlanValue.  # noqa: E501
        :rtype: NamedLifecycleRef
        """
        return self._life_cycle

    @life_cycle.setter
    def life_cycle(self, life_cycle):
        """Sets the life_cycle of this NewTopupPlanValue.


        :param life_cycle: The life_cycle of this NewTopupPlanValue.  # noqa: E501
        :type: NamedLifecycleRef
        """

        self._life_cycle = life_cycle

    @property
    def is_advice_off_panel(self):
        """Gets the is_advice_off_panel of this NewTopupPlanValue.  # noqa: E501


        :return: The is_advice_off_panel of this NewTopupPlanValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_advice_off_panel

    @is_advice_off_panel.setter
    def is_advice_off_panel(self, is_advice_off_panel):
        """Sets the is_advice_off_panel of this NewTopupPlanValue.


        :param is_advice_off_panel: The is_advice_off_panel of this NewTopupPlanValue.  # noqa: E501
        :type: bool
        """

        self._is_advice_off_panel = is_advice_off_panel

    @property
    def commission_rate(self):
        """Gets the commission_rate of this NewTopupPlanValue.  # noqa: E501

        Commission rate for top up plan.  # noqa: E501

        :return: The commission_rate of this NewTopupPlanValue.  # noqa: E501
        :rtype: str
        """
        return self._commission_rate

    @commission_rate.setter
    def commission_rate(self, commission_rate):
        """Sets the commission_rate of this NewTopupPlanValue.

        Commission rate for top up plan.  # noqa: E501

        :param commission_rate: The commission_rate of this NewTopupPlanValue.  # noqa: E501
        :type: str
        """

        self._commission_rate = commission_rate

    @property
    def split_template(self):
        """Gets the split_template of this NewTopupPlanValue.  # noqa: E501


        :return: The split_template of this NewTopupPlanValue.  # noqa: E501
        :rtype: SplitTemplateValue
        """
        return self._split_template

    @split_template.setter
    def split_template(self, split_template):
        """Sets the split_template of this NewTopupPlanValue.


        :param split_template: The split_template of this NewTopupPlanValue.  # noqa: E501
        :type: SplitTemplateValue
        """

        self._split_template = split_template

    @property
    def fees(self):
        """Gets the fees of this NewTopupPlanValue.  # noqa: E501

        List of fees for the Top up plan.  # noqa: E501

        :return: The fees of this NewTopupPlanValue.  # noqa: E501
        :rtype: list[FeeRef]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this NewTopupPlanValue.

        List of fees for the Top up plan.  # noqa: E501

        :param fees: The fees of this NewTopupPlanValue.  # noqa: E501
        :type: list[FeeRef]
        """

        self._fees = fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewTopupPlanValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewTopupPlanValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
