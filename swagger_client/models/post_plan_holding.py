# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostPlanHolding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fund': 'FundRef',
        'id': 'int',
        'href': 'str',
        'plan': 'PlanPolicyRef',
        'parent_href': 'str',
        'equity': 'EquityRef',
        'units': 'PlanHoldingUnitValue',
        'transactions_href': 'str',
        'timeseries_href': 'str'
    }

    attribute_map = {
        'fund': 'fund',
        'id': 'id',
        'href': 'href',
        'plan': 'plan',
        'parent_href': 'parent_href',
        'equity': 'equity',
        'units': 'units',
        'transactions_href': 'transactions_href',
        'timeseries_href': 'timeseries_href'
    }

    def __init__(self, fund=None, id=None, href=None, plan=None, parent_href=None, equity=None, units=None, transactions_href=None, timeseries_href=None):  # noqa: E501
        """PostPlanHolding - a model defined in Swagger"""  # noqa: E501
        self._fund = None
        self._id = None
        self._href = None
        self._plan = None
        self._parent_href = None
        self._equity = None
        self._units = None
        self._transactions_href = None
        self._timeseries_href = None
        self.discriminator = None
        if fund is not None:
            self.fund = fund
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if plan is not None:
            self.plan = plan
        if parent_href is not None:
            self.parent_href = parent_href
        if equity is not None:
            self.equity = equity
        if units is not None:
            self.units = units
        if transactions_href is not None:
            self.transactions_href = transactions_href
        if timeseries_href is not None:
            self.timeseries_href = timeseries_href

    @property
    def fund(self):
        """Gets the fund of this PostPlanHolding.  # noqa: E501


        :return: The fund of this PostPlanHolding.  # noqa: E501
        :rtype: FundRef
        """
        return self._fund

    @fund.setter
    def fund(self, fund):
        """Sets the fund of this PostPlanHolding.


        :param fund: The fund of this PostPlanHolding.  # noqa: E501
        :type: FundRef
        """

        self._fund = fund

    @property
    def id(self):
        """Gets the id of this PostPlanHolding.  # noqa: E501

        Holding Id  # noqa: E501

        :return: The id of this PostPlanHolding.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostPlanHolding.

        Holding Id  # noqa: E501

        :param id: The id of this PostPlanHolding.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this PostPlanHolding.  # noqa: E501

        Href of the holding  # noqa: E501

        :return: The href of this PostPlanHolding.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PostPlanHolding.

        Href of the holding  # noqa: E501

        :param href: The href of this PostPlanHolding.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def plan(self):
        """Gets the plan of this PostPlanHolding.  # noqa: E501


        :return: The plan of this PostPlanHolding.  # noqa: E501
        :rtype: PlanPolicyRef
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this PostPlanHolding.


        :param plan: The plan of this PostPlanHolding.  # noqa: E501
        :type: PlanPolicyRef
        """

        self._plan = plan

    @property
    def parent_href(self):
        """Gets the parent_href of this PostPlanHolding.  # noqa: E501

        Parent Href of the holding  # noqa: E501

        :return: The parent_href of this PostPlanHolding.  # noqa: E501
        :rtype: str
        """
        return self._parent_href

    @parent_href.setter
    def parent_href(self, parent_href):
        """Sets the parent_href of this PostPlanHolding.

        Parent Href of the holding  # noqa: E501

        :param parent_href: The parent_href of this PostPlanHolding.  # noqa: E501
        :type: str
        """

        self._parent_href = parent_href

    @property
    def equity(self):
        """Gets the equity of this PostPlanHolding.  # noqa: E501


        :return: The equity of this PostPlanHolding.  # noqa: E501
        :rtype: EquityRef
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this PostPlanHolding.


        :param equity: The equity of this PostPlanHolding.  # noqa: E501
        :type: EquityRef
        """

        self._equity = equity

    @property
    def units(self):
        """Gets the units of this PostPlanHolding.  # noqa: E501


        :return: The units of this PostPlanHolding.  # noqa: E501
        :rtype: PlanHoldingUnitValue
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PostPlanHolding.


        :param units: The units of this PostPlanHolding.  # noqa: E501
        :type: PlanHoldingUnitValue
        """

        self._units = units

    @property
    def transactions_href(self):
        """Gets the transactions_href of this PostPlanHolding.  # noqa: E501


        :return: The transactions_href of this PostPlanHolding.  # noqa: E501
        :rtype: str
        """
        return self._transactions_href

    @transactions_href.setter
    def transactions_href(self, transactions_href):
        """Sets the transactions_href of this PostPlanHolding.


        :param transactions_href: The transactions_href of this PostPlanHolding.  # noqa: E501
        :type: str
        """

        self._transactions_href = transactions_href

    @property
    def timeseries_href(self):
        """Gets the timeseries_href of this PostPlanHolding.  # noqa: E501


        :return: The timeseries_href of this PostPlanHolding.  # noqa: E501
        :rtype: str
        """
        return self._timeseries_href

    @timeseries_href.setter
    def timeseries_href(self, timeseries_href):
        """Sets the timeseries_href of this PostPlanHolding.


        :param timeseries_href: The timeseries_href of this PostPlanHolding.  # noqa: E501
        :type: str
        """

        self._timeseries_href = timeseries_href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostPlanHolding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPlanHolding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
