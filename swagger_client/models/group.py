# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'external_reference': 'str',
        'parent': 'NamedGroupReference',
        'type': 'NamedGroupTypeReference',
        'contacts': 'GroupContactsValue',
        'fca_ref_no': 'str'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'external_reference': 'externalReference',
        'parent': 'parent',
        'type': 'type',
        'contacts': 'contacts',
        'fca_ref_no': 'fcaRefNo'
    }

    def __init__(self, id=None, href=None, name=None, external_reference=None, parent=None, type=None, contacts=None, fca_ref_no=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._external_reference = None
        self._parent = None
        self._type = None
        self._contacts = None
        self._fca_ref_no = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if external_reference is not None:
            self.external_reference = external_reference
        if parent is not None:
            self.parent = parent
        self.type = type
        if contacts is not None:
            self.contacts = contacts
        if fca_ref_no is not None:
            self.fca_ref_no = fca_ref_no

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

        Group unique identifier.  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Group unique identifier.  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Group.  # noqa: E501

        Group hypermedia link.  # noqa: E501

        :return: The href of this Group.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Group.

        Group hypermedia link.  # noqa: E501

        :param href: The href of this Group.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

        Group name.  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Group name.  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def external_reference(self):
        """Gets the external_reference of this Group.  # noqa: E501

        Group external reference.  # noqa: E501

        :return: The external_reference of this Group.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this Group.

        Group external reference.  # noqa: E501

        :param external_reference: The external_reference of this Group.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def parent(self):
        """Gets the parent of this Group.  # noqa: E501


        :return: The parent of this Group.  # noqa: E501
        :rtype: NamedGroupReference
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Group.


        :param parent: The parent of this Group.  # noqa: E501
        :type: NamedGroupReference
        """

        self._parent = parent

    @property
    def type(self):
        """Gets the type of this Group.  # noqa: E501


        :return: The type of this Group.  # noqa: E501
        :rtype: NamedGroupTypeReference
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Group.


        :param type: The type of this Group.  # noqa: E501
        :type: NamedGroupTypeReference
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def contacts(self):
        """Gets the contacts of this Group.  # noqa: E501


        :return: The contacts of this Group.  # noqa: E501
        :rtype: GroupContactsValue
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Group.


        :param contacts: The contacts of this Group.  # noqa: E501
        :type: GroupContactsValue
        """

        self._contacts = contacts

    @property
    def fca_ref_no(self):
        """Gets the fca_ref_no of this Group.  # noqa: E501

        The Financial Conduct authorities reference number.  # noqa: E501

        :return: The fca_ref_no of this Group.  # noqa: E501
        :rtype: str
        """
        return self._fca_ref_no

    @fca_ref_no.setter
    def fca_ref_no(self, fca_ref_no):
        """Sets the fca_ref_no of this Group.

        The Financial Conduct authorities reference number.  # noqa: E501

        :param fca_ref_no: The fca_ref_no of this Group.  # noqa: E501
        :type: str
        """

        self._fca_ref_no = fca_ref_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
