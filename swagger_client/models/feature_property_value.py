# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeaturePropertyValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute': 'str',
        'product_feature': 'str',
        'products_value': 'FeaturePropertyProductsValue'
    }

    attribute_map = {
        'attribute': 'attribute',
        'product_feature': 'productFeature',
        'products_value': 'productsValue'
    }

    def __init__(self, attribute=None, product_feature=None, products_value=None):  # noqa: E501
        """FeaturePropertyValue - a model defined in Swagger"""  # noqa: E501
        self._attribute = None
        self._product_feature = None
        self._products_value = None
        self.discriminator = None
        self.attribute = attribute
        self.product_feature = product_feature
        if products_value is not None:
            self.products_value = products_value

    @property
    def attribute(self):
        """Gets the attribute of this FeaturePropertyValue.  # noqa: E501

        Product property name or attribute.  # noqa: E501

        :return: The attribute of this FeaturePropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this FeaturePropertyValue.

        Product property name or attribute.  # noqa: E501

        :param attribute: The attribute of this FeaturePropertyValue.  # noqa: E501
        :type: str
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")  # noqa: E501

        self._attribute = attribute

    @property
    def product_feature(self):
        """Gets the product_feature of this FeaturePropertyValue.  # noqa: E501

        Product feature name.  # noqa: E501

        :return: The product_feature of this FeaturePropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._product_feature

    @product_feature.setter
    def product_feature(self, product_feature):
        """Sets the product_feature of this FeaturePropertyValue.

        Product feature name.  # noqa: E501

        :param product_feature: The product_feature of this FeaturePropertyValue.  # noqa: E501
        :type: str
        """
        if product_feature is None:
            raise ValueError("Invalid value for `product_feature`, must not be `None`")  # noqa: E501

        self._product_feature = product_feature

    @property
    def products_value(self):
        """Gets the products_value of this FeaturePropertyValue.  # noqa: E501


        :return: The products_value of this FeaturePropertyValue.  # noqa: E501
        :rtype: FeaturePropertyProductsValue
        """
        return self._products_value

    @products_value.setter
    def products_value(self, products_value):
        """Sets the products_value of this FeaturePropertyValue.


        :param products_value: The products_value of this FeaturePropertyValue.  # noqa: E501
        :type: FeaturePropertyProductsValue
        """

        self._products_value = products_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturePropertyValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturePropertyValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
