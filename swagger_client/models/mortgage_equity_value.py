# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MortgageEquityValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheme_name': 'str',
        'scheme_provider': 'str',
        'repayment_start_date': 'datetime',
        'loan_percentage': 'float',
        'loan_amount': 'CurrencyValue'
    }

    attribute_map = {
        'scheme_name': 'schemeName',
        'scheme_provider': 'schemeProvider',
        'repayment_start_date': 'repaymentStartDate',
        'loan_percentage': 'loanPercentage',
        'loan_amount': 'loanAmount'
    }

    def __init__(self, scheme_name='null', scheme_provider='null', repayment_start_date=None, loan_percentage=None, loan_amount=None):  # noqa: E501
        """MortgageEquityValue - a model defined in Swagger"""  # noqa: E501
        self._scheme_name = None
        self._scheme_provider = None
        self._repayment_start_date = None
        self._loan_percentage = None
        self._loan_amount = None
        self.discriminator = None
        if scheme_name is not None:
            self.scheme_name = scheme_name
        if scheme_provider is not None:
            self.scheme_provider = scheme_provider
        if repayment_start_date is not None:
            self.repayment_start_date = repayment_start_date
        if loan_percentage is not None:
            self.loan_percentage = loan_percentage
        if loan_amount is not None:
            self.loan_amount = loan_amount

    @property
    def scheme_name(self):
        """Gets the scheme_name of this MortgageEquityValue.  # noqa: E501

        Equity Loan Scheme Type.  # noqa: E501

        :return: The scheme_name of this MortgageEquityValue.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this MortgageEquityValue.

        Equity Loan Scheme Type.  # noqa: E501

        :param scheme_name: The scheme_name of this MortgageEquityValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["HelpToBuyEngland", "HelpToBuyLondon", "HelpToBuyScotland", "HelpToBuyWales", "HelpToBuyForces", "NewBuy", "SharedEquity", "Partnership"]  # noqa: E501
        if scheme_name not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_name` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme_name, allowed_values)
            )

        self._scheme_name = scheme_name

    @property
    def scheme_provider(self):
        """Gets the scheme_provider of this MortgageEquityValue.  # noqa: E501

        Source of the Equity Loan.  # noqa: E501

        :return: The scheme_provider of this MortgageEquityValue.  # noqa: E501
        :rtype: str
        """
        return self._scheme_provider

    @scheme_provider.setter
    def scheme_provider(self, scheme_provider):
        """Sets the scheme_provider of this MortgageEquityValue.

        Source of the Equity Loan.  # noqa: E501

        :param scheme_provider: The scheme_provider of this MortgageEquityValue.  # noqa: E501
        :type: str
        """

        self._scheme_provider = scheme_provider

    @property
    def repayment_start_date(self):
        """Gets the repayment_start_date of this MortgageEquityValue.  # noqa: E501

        Start date for equity repayments.  # noqa: E501

        :return: The repayment_start_date of this MortgageEquityValue.  # noqa: E501
        :rtype: datetime
        """
        return self._repayment_start_date

    @repayment_start_date.setter
    def repayment_start_date(self, repayment_start_date):
        """Sets the repayment_start_date of this MortgageEquityValue.

        Start date for equity repayments.  # noqa: E501

        :param repayment_start_date: The repayment_start_date of this MortgageEquityValue.  # noqa: E501
        :type: datetime
        """

        self._repayment_start_date = repayment_start_date

    @property
    def loan_percentage(self):
        """Gets the loan_percentage of this MortgageEquityValue.  # noqa: E501

        Percentage of the purchase price that will be received as an equity loan (if a price/valuation has been provided then the percentage will be used to calculate the equity loan amount).  # noqa: E501

        :return: The loan_percentage of this MortgageEquityValue.  # noqa: E501
        :rtype: float
        """
        return self._loan_percentage

    @loan_percentage.setter
    def loan_percentage(self, loan_percentage):
        """Sets the loan_percentage of this MortgageEquityValue.

        Percentage of the purchase price that will be received as an equity loan (if a price/valuation has been provided then the percentage will be used to calculate the equity loan amount).  # noqa: E501

        :param loan_percentage: The loan_percentage of this MortgageEquityValue.  # noqa: E501
        :type: float
        """

        self._loan_percentage = loan_percentage

    @property
    def loan_amount(self):
        """Gets the loan_amount of this MortgageEquityValue.  # noqa: E501


        :return: The loan_amount of this MortgageEquityValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this MortgageEquityValue.


        :param loan_amount: The loan_amount of this MortgageEquityValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._loan_amount = loan_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MortgageEquityValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MortgageEquityValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
