# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientVulnerabilityDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'client': 'NamedClientRef',
        'has_vulnerability': 'str',
        'type': 'str',
        'categories': 'list[str]',
        'notes': 'str',
        'created_on': 'datetime',
        'created_by': 'UserReference',
        'is_current': 'bool',
        'assesed_on': 'datetime',
        'review_on': 'datetime',
        'is_client_portal_suitable': 'str'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'client': 'client',
        'has_vulnerability': 'hasVulnerability',
        'type': 'type',
        'categories': 'categories',
        'notes': 'notes',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'is_current': 'isCurrent',
        'assesed_on': 'assesedOn',
        'review_on': 'reviewOn',
        'is_client_portal_suitable': 'isClientPortalSuitable'
    }

    def __init__(self, id=None, href=None, client=None, has_vulnerability=None, type=None, categories=None, notes=None, created_on=None, created_by=None, is_current=None, assesed_on=None, review_on=None, is_client_portal_suitable=None):  # noqa: E501
        """ClientVulnerabilityDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._client = None
        self._has_vulnerability = None
        self._type = None
        self._categories = None
        self._notes = None
        self._created_on = None
        self._created_by = None
        self._is_current = None
        self._assesed_on = None
        self._review_on = None
        self._is_client_portal_suitable = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if client is not None:
            self.client = client
        if has_vulnerability is not None:
            self.has_vulnerability = has_vulnerability
        if type is not None:
            self.type = type
        if categories is not None:
            self.categories = categories
        if notes is not None:
            self.notes = notes
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if is_current is not None:
            self.is_current = is_current
        if assesed_on is not None:
            self.assesed_on = assesed_on
        if review_on is not None:
            self.review_on = review_on
        if is_client_portal_suitable is not None:
            self.is_client_portal_suitable = is_client_portal_suitable

    @property
    def id(self):
        """Gets the id of this ClientVulnerabilityDocument.  # noqa: E501

        Unique Identifier.  # noqa: E501

        :return: The id of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientVulnerabilityDocument.

        Unique Identifier.  # noqa: E501

        :param id: The id of this ClientVulnerabilityDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ClientVulnerabilityDocument.  # noqa: E501

        Hyperlink to client's current vulnerability.  # noqa: E501

        :return: The href of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ClientVulnerabilityDocument.

        Hyperlink to client's current vulnerability.  # noqa: E501

        :param href: The href of this ClientVulnerabilityDocument.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def client(self):
        """Gets the client of this ClientVulnerabilityDocument.  # noqa: E501


        :return: The client of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: NamedClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ClientVulnerabilityDocument.


        :param client: The client of this ClientVulnerabilityDocument.  # noqa: E501
        :type: NamedClientRef
        """

        self._client = client

    @property
    def has_vulnerability(self):
        """Gets the has_vulnerability of this ClientVulnerabilityDocument.  # noqa: E501

        Determines whether client HasVulnerability. Possible values are `Yes`, `No`, `Potential`.  # noqa: E501

        :return: The has_vulnerability of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: str
        """
        return self._has_vulnerability

    @has_vulnerability.setter
    def has_vulnerability(self, has_vulnerability):
        """Sets the has_vulnerability of this ClientVulnerabilityDocument.

        Determines whether client HasVulnerability. Possible values are `Yes`, `No`, `Potential`.  # noqa: E501

        :param has_vulnerability: The has_vulnerability of this ClientVulnerabilityDocument.  # noqa: E501
        :type: str
        """

        self._has_vulnerability = has_vulnerability

    @property
    def type(self):
        """Gets the type of this ClientVulnerabilityDocument.  # noqa: E501

        Determines the type of vulnerability. Possible values are `Temporary` or `Permanent`.  # noqa: E501

        :return: The type of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClientVulnerabilityDocument.

        Determines the type of vulnerability. Possible values are `Temporary` or `Permanent`.  # noqa: E501

        :param type: The type of this ClientVulnerabilityDocument.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def categories(self):
        """Gets the categories of this ClientVulnerabilityDocument.  # noqa: E501

        Describes the categories for the vulnerability. This could be a list using the possible values `Health`, `LifeEvent`, `Resilience`, `Capability`.  # noqa: E501

        :return: The categories of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ClientVulnerabilityDocument.

        Describes the categories for the vulnerability. This could be a list using the possible values `Health`, `LifeEvent`, `Resilience`, `Capability`.  # noqa: E501

        :param categories: The categories of this ClientVulnerabilityDocument.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def notes(self):
        """Gets the notes of this ClientVulnerabilityDocument.  # noqa: E501

        Vulnerability Notes.  # noqa: E501

        :return: The notes of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ClientVulnerabilityDocument.

        Vulnerability Notes.  # noqa: E501

        :param notes: The notes of this ClientVulnerabilityDocument.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def created_on(self):
        """Gets the created_on of this ClientVulnerabilityDocument.  # noqa: E501

        Date when vulnerability was created.  # noqa: E501

        :return: The created_on of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ClientVulnerabilityDocument.

        Date when vulnerability was created.  # noqa: E501

        :param created_on: The created_on of this ClientVulnerabilityDocument.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this ClientVulnerabilityDocument.  # noqa: E501


        :return: The created_by of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ClientVulnerabilityDocument.


        :param created_by: The created_by of this ClientVulnerabilityDocument.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def is_current(self):
        """Gets the is_current of this ClientVulnerabilityDocument.  # noqa: E501

        Determines whether it is client's current or past vulnerability.  # noqa: E501

        :return: The is_current of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this ClientVulnerabilityDocument.

        Determines whether it is client's current or past vulnerability.  # noqa: E501

        :param is_current: The is_current of this ClientVulnerabilityDocument.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def assesed_on(self):
        """Gets the assesed_on of this ClientVulnerabilityDocument.  # noqa: E501

        Date the vulnerability was assessed.  # noqa: E501

        :return: The assesed_on of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._assesed_on

    @assesed_on.setter
    def assesed_on(self, assesed_on):
        """Sets the assesed_on of this ClientVulnerabilityDocument.

        Date the vulnerability was assessed.  # noqa: E501

        :param assesed_on: The assesed_on of this ClientVulnerabilityDocument.  # noqa: E501
        :type: datetime
        """

        self._assesed_on = assesed_on

    @property
    def review_on(self):
        """Gets the review_on of this ClientVulnerabilityDocument.  # noqa: E501

        Date the vulnerability was last reviewed.  # noqa: E501

        :return: The review_on of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._review_on

    @review_on.setter
    def review_on(self, review_on):
        """Sets the review_on of this ClientVulnerabilityDocument.

        Date the vulnerability was last reviewed.  # noqa: E501

        :param review_on: The review_on of this ClientVulnerabilityDocument.  # noqa: E501
        :type: datetime
        """

        self._review_on = review_on

    @property
    def is_client_portal_suitable(self):
        """Gets the is_client_portal_suitable of this ClientVulnerabilityDocument.  # noqa: E501

        Determines whether client portal is suitable for the vulnerable client.  # noqa: E501

        :return: The is_client_portal_suitable of this ClientVulnerabilityDocument.  # noqa: E501
        :rtype: str
        """
        return self._is_client_portal_suitable

    @is_client_portal_suitable.setter
    def is_client_portal_suitable(self, is_client_portal_suitable):
        """Sets the is_client_portal_suitable of this ClientVulnerabilityDocument.

        Determines whether client portal is suitable for the vulnerable client.  # noqa: E501

        :param is_client_portal_suitable: The is_client_portal_suitable of this ClientVulnerabilityDocument.  # noqa: E501
        :type: str
        """

        self._is_client_portal_suitable = is_client_portal_suitable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientVulnerabilityDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientVulnerabilityDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
