# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LifeAssured(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'href': 'str',
        'title': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'date_of_birth': 'datetime',
        'gender': 'str',
        'permanent_total_disability_cover': 'str'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'href': 'href',
        'title': 'title',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'date_of_birth': 'dateOfBirth',
        'gender': 'gender',
        'permanent_total_disability_cover': 'permanentTotalDisabilityCover'
    }

    def __init__(self, type=None, id=None, href=None, title='null', first_name='null', last_name='null', date_of_birth=None, gender='null', permanent_total_disability_cover='null'):  # noqa: E501
        """LifeAssured - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._href = None
        self._title = None
        self._first_name = None
        self._last_name = None
        self._date_of_birth = None
        self._gender = None
        self._permanent_total_disability_cover = None
        self.discriminator = None
        self.type = type
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if title is not None:
            self.title = title
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if gender is not None:
            self.gender = gender
        if permanent_total_disability_cover is not None:
            self.permanent_total_disability_cover = permanent_total_disability_cover

    @property
    def type(self):
        """Gets the type of this LifeAssured.  # noqa: E501

        Life assured type. Can take the value \"Client\" or \"Other\".  \"Client\" type will return or require the client identifier.  \"Other\" type will return or require details of the person.  # noqa: E501

        :return: The type of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LifeAssured.

        Life assured type. Can take the value \"Client\" or \"Other\".  \"Client\" type will return or require the client identifier.  \"Other\" type will return or require details of the person.  # noqa: E501

        :param type: The type of this LifeAssured.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Client", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this LifeAssured.  # noqa: E501

        Client identifier  # noqa: E501

        :return: The id of this LifeAssured.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LifeAssured.

        Client identifier  # noqa: E501

        :param id: The id of this LifeAssured.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this LifeAssured.  # noqa: E501

        Client Href  # noqa: E501

        :return: The href of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LifeAssured.

        Client Href  # noqa: E501

        :param href: The href of this LifeAssured.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def title(self):
        """Gets the title of this LifeAssured.  # noqa: E501

        Title of the person  # noqa: E501

        :return: The title of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LifeAssured.

        Title of the person  # noqa: E501

        :param title: The title of this LifeAssured.  # noqa: E501
        :type: str
        """
        allowed_values = ["Blank", "None", "Mr", "Mrs", "Miss", "Ms", "Dr", "Professor", "Master", "Count", "Countess", "Dame", "Lady", "Lord", "Baron", "Bishop", "Canon", "Father", "Pastor", "Reverend", "RightReverend", "Sister", "Venerable", "VeryReverend", "TheHonourable", "Judge", "RightHonourable", "RightHonourableLord", "Sheriff", "Brigadier", "Captain", "Colonel", "Commander", "Lieutenant", "LieutenantColonel", "LieutenantCommander", "Major", "MajorGeneral", "SquadronLeader", "WingCommander", "Admiral", "AirCommodore", "AirViceMarshall", "Baroness", "Commodore", "Deacon", "Deaconess", "GroupCaptain", "ReverendDoctor", "SurgeonCaptain", "Archdeacon", "Corporal", "FlightLieutenant", "LanceCorporal", "Madam", "Monsignor", "Prince", "Princess", "Private", "Sir", "RearAdmiral", "StaffSergeant", "Other", "TheEarlof", "TheReverendCanon", "Trooper", "Viscount", "Viscountess", "SecondLieutenant", "Sergeant", "Rabbi", "Duchess", "Mx", "EstateOfTheLate", "Duke"]  # noqa: E501
        if title not in allowed_values:
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"  # noqa: E501
                .format(title, allowed_values)
            )

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this LifeAssured.  # noqa: E501

        First name of the person  # noqa: E501

        :return: The first_name of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this LifeAssured.

        First name of the person  # noqa: E501

        :param first_name: The first_name of this LifeAssured.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this LifeAssured.  # noqa: E501

        Last name of the person  # noqa: E501

        :return: The last_name of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this LifeAssured.

        Last name of the person  # noqa: E501

        :param last_name: The last_name of this LifeAssured.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this LifeAssured.  # noqa: E501

        Date of birth of the person  # noqa: E501

        :return: The date_of_birth of this LifeAssured.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this LifeAssured.

        Date of birth of the person  # noqa: E501

        :param date_of_birth: The date_of_birth of this LifeAssured.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """Gets the gender of this LifeAssured.  # noqa: E501

        Gender of the person  # noqa: E501

        :return: The gender of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this LifeAssured.

        Gender of the person  # noqa: E501

        :param gender: The gender of this LifeAssured.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unspecified", "Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def permanent_total_disability_cover(self):
        """Gets the permanent_total_disability_cover of this LifeAssured.  # noqa: E501

        Permanent Total Disability cover type  # noqa: E501

        :return: The permanent_total_disability_cover of this LifeAssured.  # noqa: E501
        :rtype: str
        """
        return self._permanent_total_disability_cover

    @permanent_total_disability_cover.setter
    def permanent_total_disability_cover(self, permanent_total_disability_cover):
        """Sets the permanent_total_disability_cover of this LifeAssured.

        Permanent Total Disability cover type  # noqa: E501

        :param permanent_total_disability_cover: The permanent_total_disability_cover of this LifeAssured.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "OwnOccupation", "AnySuitedOccupation", "AnyOccupation", "InsurerBest", "ActivitiesOfDailyLiving", "WorkTasks"]  # noqa: E501
        if permanent_total_disability_cover not in allowed_values:
            raise ValueError(
                "Invalid value for `permanent_total_disability_cover` ({0}), must be one of {1}"  # noqa: E501
                .format(permanent_total_disability_cover, allowed_values)
            )

        self._permanent_total_disability_cover = permanent_total_disability_cover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LifeAssured, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LifeAssured):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
