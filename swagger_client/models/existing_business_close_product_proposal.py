# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_recommendation2_proposal import BaseRecommendation2Proposal  # noqa: F401,E501

class ExistingBusinessCloseProductProposal(BaseRecommendation2Proposal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'closure_on': 'datetime',
        'reason_for_closing': 'str',
        'withdrawal': 'CurrencyValue',
        'update_fees': 'bool'
    }
    if hasattr(BaseRecommendation2Proposal, "swagger_types"):
        swagger_types.update(BaseRecommendation2Proposal.swagger_types)

    attribute_map = {
        'closure_on': 'closureOn',
        'reason_for_closing': 'reasonForClosing',
        'withdrawal': 'withdrawal',
        'update_fees': 'updateFees'
    }
    if hasattr(BaseRecommendation2Proposal, "attribute_map"):
        attribute_map.update(BaseRecommendation2Proposal.attribute_map)

    def __init__(self, closure_on=None, reason_for_closing=None, withdrawal=None, update_fees=True, *args, **kwargs):  # noqa: E501
        """ExistingBusinessCloseProductProposal - a model defined in Swagger"""  # noqa: E501
        self._closure_on = None
        self._reason_for_closing = None
        self._withdrawal = None
        self._update_fees = None
        self.discriminator = None
        if closure_on is not None:
            self.closure_on = closure_on
        if reason_for_closing is not None:
            self.reason_for_closing = reason_for_closing
        if withdrawal is not None:
            self.withdrawal = withdrawal
        if update_fees is not None:
            self.update_fees = update_fees
        BaseRecommendation2Proposal.__init__(self, *args, **kwargs)

    @property
    def closure_on(self):
        """Gets the closure_on of this ExistingBusinessCloseProductProposal.  # noqa: E501

        Date of closure.  # noqa: E501

        :return: The closure_on of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :rtype: datetime
        """
        return self._closure_on

    @closure_on.setter
    def closure_on(self, closure_on):
        """Sets the closure_on of this ExistingBusinessCloseProductProposal.

        Date of closure.  # noqa: E501

        :param closure_on: The closure_on of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :type: datetime
        """

        self._closure_on = closure_on

    @property
    def reason_for_closing(self):
        """Gets the reason_for_closing of this ExistingBusinessCloseProductProposal.  # noqa: E501

        Reason for closing product.  # noqa: E501

        :return: The reason_for_closing of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_closing

    @reason_for_closing.setter
    def reason_for_closing(self, reason_for_closing):
        """Sets the reason_for_closing of this ExistingBusinessCloseProductProposal.

        Reason for closing product.  # noqa: E501

        :param reason_for_closing: The reason_for_closing of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :type: str
        """

        self._reason_for_closing = reason_for_closing

    @property
    def withdrawal(self):
        """Gets the withdrawal of this ExistingBusinessCloseProductProposal.  # noqa: E501


        :return: The withdrawal of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._withdrawal

    @withdrawal.setter
    def withdrawal(self, withdrawal):
        """Sets the withdrawal of this ExistingBusinessCloseProductProposal.


        :param withdrawal: The withdrawal of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._withdrawal = withdrawal

    @property
    def update_fees(self):
        """Gets the update_fees of this ExistingBusinessCloseProductProposal.  # noqa: E501

        Should closure update linked Fees in the Due or Cancelled status.  # noqa: E501

        :return: The update_fees of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :rtype: bool
        """
        return self._update_fees

    @update_fees.setter
    def update_fees(self, update_fees):
        """Sets the update_fees of this ExistingBusinessCloseProductProposal.

        Should closure update linked Fees in the Due or Cancelled status.  # noqa: E501

        :param update_fees: The update_fees of this ExistingBusinessCloseProductProposal.  # noqa: E501
        :type: bool
        """

        self._update_fees = update_fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExistingBusinessCloseProductProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExistingBusinessCloseProductProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
