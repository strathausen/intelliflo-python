# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetirementIncomeValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'CurrencyValue',
        'is_todays_money': 'bool',
        'frequency': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'is_todays_money': 'isTodaysMoney',
        'frequency': 'frequency'
    }

    def __init__(self, amount=None, is_todays_money=None, frequency=None):  # noqa: E501
        """RetirementIncomeValue - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._is_todays_money = None
        self._frequency = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if is_todays_money is not None:
            self.is_todays_money = is_todays_money
        if frequency is not None:
            self.frequency = frequency

    @property
    def amount(self):
        """Gets the amount of this RetirementIncomeValue.  # noqa: E501


        :return: The amount of this RetirementIncomeValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RetirementIncomeValue.


        :param amount: The amount of this RetirementIncomeValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._amount = amount

    @property
    def is_todays_money(self):
        """Gets the is_todays_money of this RetirementIncomeValue.  # noqa: E501

        Is it today's money?  # noqa: E501

        :return: The is_todays_money of this RetirementIncomeValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_todays_money

    @is_todays_money.setter
    def is_todays_money(self, is_todays_money):
        """Sets the is_todays_money of this RetirementIncomeValue.

        Is it today's money?  # noqa: E501

        :param is_todays_money: The is_todays_money of this RetirementIncomeValue.  # noqa: E501
        :type: bool
        """

        self._is_todays_money = is_todays_money

    @property
    def frequency(self):
        """Gets the frequency of this RetirementIncomeValue.  # noqa: E501

        Frequency of the income.  # noqa: E501

        :return: The frequency of this RetirementIncomeValue.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RetirementIncomeValue.

        Frequency of the income.  # noqa: E501

        :param frequency: The frequency of this RetirementIncomeValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Lumpsum", "Monthly", "Annually"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetirementIncomeValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetirementIncomeValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
