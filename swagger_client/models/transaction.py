# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'parent_href': 'str',
        'plan': 'MatchPlanRef',
        'holding': 'HoldingRef',
        'transaction_date': 'datetime',
        'source': 'str',
        'type': 'str',
        'debit_credit_indicator': 'str',
        'unit_price': 'CurrencyValue',
        'cost': 'CurrencyValue',
        'gross': 'CurrencyValue',
        'unit_number': 'float',
        'description': 'str',
        'category1': 'str',
        'category1_code': 'str',
        'category2': 'str',
        'category2_code': 'str',
        'payment_from': 'str',
        'payment_to': 'str',
        'frequency': 'str',
        'external_reference': 'str',
        'is_restricted_to_owner': 'bool',
        'created_by_user': 'UserRef2',
        'created_by_app': 'NamedAppRef',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'parent_href': 'parent_href',
        'plan': 'plan',
        'holding': 'holding',
        'transaction_date': 'transactionDate',
        'source': 'source',
        'type': 'type',
        'debit_credit_indicator': 'debitCreditIndicator',
        'unit_price': 'unitPrice',
        'cost': 'cost',
        'gross': 'gross',
        'unit_number': 'unitNumber',
        'description': 'description',
        'category1': 'category1',
        'category1_code': 'category1Code',
        'category2': 'category2',
        'category2_code': 'category2Code',
        'payment_from': 'paymentFrom',
        'payment_to': 'paymentTo',
        'frequency': 'frequency',
        'external_reference': 'externalReference',
        'is_restricted_to_owner': 'isRestrictedToOwner',
        'created_by_user': 'createdByUser',
        'created_by_app': 'createdByApp',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, href=None, parent_href=None, plan=None, holding=None, transaction_date=None, source=None, type=None, debit_credit_indicator=None, unit_price=None, cost=None, gross=None, unit_number=None, description=None, category1=None, category1_code=None, category2=None, category2_code=None, payment_from=None, payment_to=None, frequency=None, external_reference=None, is_restricted_to_owner=None, created_by_user=None, created_by_app=None, created_at=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._parent_href = None
        self._plan = None
        self._holding = None
        self._transaction_date = None
        self._source = None
        self._type = None
        self._debit_credit_indicator = None
        self._unit_price = None
        self._cost = None
        self._gross = None
        self._unit_number = None
        self._description = None
        self._category1 = None
        self._category1_code = None
        self._category2 = None
        self._category2_code = None
        self._payment_from = None
        self._payment_to = None
        self._frequency = None
        self._external_reference = None
        self._is_restricted_to_owner = None
        self._created_by_user = None
        self._created_by_app = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if parent_href is not None:
            self.parent_href = parent_href
        self.plan = plan
        if holding is not None:
            self.holding = holding
        self.transaction_date = transaction_date
        self.source = source
        if type is not None:
            self.type = type
        if debit_credit_indicator is not None:
            self.debit_credit_indicator = debit_credit_indicator
        if unit_price is not None:
            self.unit_price = unit_price
        if cost is not None:
            self.cost = cost
        if gross is not None:
            self.gross = gross
        if unit_number is not None:
            self.unit_number = unit_number
        if description is not None:
            self.description = description
        if category1 is not None:
            self.category1 = category1
        if category1_code is not None:
            self.category1_code = category1_code
        if category2 is not None:
            self.category2 = category2
        if category2_code is not None:
            self.category2_code = category2_code
        if payment_from is not None:
            self.payment_from = payment_from
        if payment_to is not None:
            self.payment_to = payment_to
        if frequency is not None:
            self.frequency = frequency
        if external_reference is not None:
            self.external_reference = external_reference
        if is_restricted_to_owner is not None:
            self.is_restricted_to_owner = is_restricted_to_owner
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if created_by_app is not None:
            self.created_by_app = created_by_app
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501

        Transaction Id  # noqa: E501

        :return: The id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        Transaction Id  # noqa: E501

        :param id: The id of this Transaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Transaction.  # noqa: E501

        Href of the Transaction  # noqa: E501

        :return: The href of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Transaction.

        Href of the Transaction  # noqa: E501

        :param href: The href of this Transaction.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def parent_href(self):
        """Gets the parent_href of this Transaction.  # noqa: E501


        :return: The parent_href of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._parent_href

    @parent_href.setter
    def parent_href(self, parent_href):
        """Sets the parent_href of this Transaction.


        :param parent_href: The parent_href of this Transaction.  # noqa: E501
        :type: str
        """

        self._parent_href = parent_href

    @property
    def plan(self):
        """Gets the plan of this Transaction.  # noqa: E501


        :return: The plan of this Transaction.  # noqa: E501
        :rtype: MatchPlanRef
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Transaction.


        :param plan: The plan of this Transaction.  # noqa: E501
        :type: MatchPlanRef
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def holding(self):
        """Gets the holding of this Transaction.  # noqa: E501


        :return: The holding of this Transaction.  # noqa: E501
        :rtype: HoldingRef
        """
        return self._holding

    @holding.setter
    def holding(self, holding):
        """Sets the holding of this Transaction.


        :param holding: The holding of this Transaction.  # noqa: E501
        :type: HoldingRef
        """

        self._holding = holding

    @property
    def transaction_date(self):
        """Gets the transaction_date of this Transaction.  # noqa: E501

        Transaction date  # noqa: E501

        :return: The transaction_date of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this Transaction.

        Transaction date  # noqa: E501

        :param transaction_date: The transaction_date of this Transaction.  # noqa: E501
        :type: datetime
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")  # noqa: E501

        self._transaction_date = transaction_date

    @property
    def source(self):
        """Gets the source of this Transaction.  # noqa: E501

        Source - Plan|Fund  # noqa: E501

        :return: The source of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Transaction.

        Source - Plan|Fund  # noqa: E501

        :param source: The source of this Transaction.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["Fund", "Plan"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def type(self):
        """Gets the type of this Transaction.  # noqa: E501

        Entry Type - Income|Expense|Transfer In|Transfer Out  # noqa: E501

        :return: The type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        Entry Type - Income|Expense|Transfer In|Transfer Out  # noqa: E501

        :param type: The type of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["Income", "Expense", "TransferIn", "TransferOut"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def debit_credit_indicator(self):
        """Gets the debit_credit_indicator of this Transaction.  # noqa: E501

        Debit Credit indicator DR|CR  # noqa: E501

        :return: The debit_credit_indicator of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._debit_credit_indicator

    @debit_credit_indicator.setter
    def debit_credit_indicator(self, debit_credit_indicator):
        """Sets the debit_credit_indicator of this Transaction.

        Debit Credit indicator DR|CR  # noqa: E501

        :param debit_credit_indicator: The debit_credit_indicator of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["DR", "CR"]  # noqa: E501
        if debit_credit_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `debit_credit_indicator` ({0}), must be one of {1}"  # noqa: E501
                .format(debit_credit_indicator, allowed_values)
            )

        self._debit_credit_indicator = debit_credit_indicator

    @property
    def unit_price(self):
        """Gets the unit_price of this Transaction.  # noqa: E501


        :return: The unit_price of this Transaction.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this Transaction.


        :param unit_price: The unit_price of this Transaction.  # noqa: E501
        :type: CurrencyValue
        """

        self._unit_price = unit_price

    @property
    def cost(self):
        """Gets the cost of this Transaction.  # noqa: E501


        :return: The cost of this Transaction.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Transaction.


        :param cost: The cost of this Transaction.  # noqa: E501
        :type: CurrencyValue
        """

        self._cost = cost

    @property
    def gross(self):
        """Gets the gross of this Transaction.  # noqa: E501


        :return: The gross of this Transaction.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this Transaction.


        :param gross: The gross of this Transaction.  # noqa: E501
        :type: CurrencyValue
        """

        self._gross = gross

    @property
    def unit_number(self):
        """Gets the unit_number of this Transaction.  # noqa: E501

        Unit number, required for fund transactions, defaults to 1 for banking transactions  # noqa: E501

        :return: The unit_number of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this Transaction.

        Unit number, required for fund transactions, defaults to 1 for banking transactions  # noqa: E501

        :param unit_number: The unit_number of this Transaction.  # noqa: E501
        :type: float
        """

        self._unit_number = unit_number

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501

        Transaction description  # noqa: E501

        :return: The description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        Transaction description  # noqa: E501

        :param description: The description of this Transaction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def category1(self):
        """Gets the category1 of this Transaction.  # noqa: E501

        Category 1  # noqa: E501

        :return: The category1 of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category1

    @category1.setter
    def category1(self, category1):
        """Sets the category1 of this Transaction.

        Category 1  # noqa: E501

        :param category1: The category1 of this Transaction.  # noqa: E501
        :type: str
        """

        self._category1 = category1

    @property
    def category1_code(self):
        """Gets the category1_code of this Transaction.  # noqa: E501

        Category 1 Value  # noqa: E501

        :return: The category1_code of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category1_code

    @category1_code.setter
    def category1_code(self, category1_code):
        """Sets the category1_code of this Transaction.

        Category 1 Value  # noqa: E501

        :param category1_code: The category1_code of this Transaction.  # noqa: E501
        :type: str
        """

        self._category1_code = category1_code

    @property
    def category2(self):
        """Gets the category2 of this Transaction.  # noqa: E501

        Category 2  # noqa: E501

        :return: The category2 of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category2

    @category2.setter
    def category2(self, category2):
        """Sets the category2 of this Transaction.

        Category 2  # noqa: E501

        :param category2: The category2 of this Transaction.  # noqa: E501
        :type: str
        """

        self._category2 = category2

    @property
    def category2_code(self):
        """Gets the category2_code of this Transaction.  # noqa: E501

        Category 2 Code  # noqa: E501

        :return: The category2_code of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category2_code

    @category2_code.setter
    def category2_code(self, category2_code):
        """Sets the category2_code of this Transaction.

        Category 2 Code  # noqa: E501

        :param category2_code: The category2_code of this Transaction.  # noqa: E501
        :type: str
        """

        self._category2_code = category2_code

    @property
    def payment_from(self):
        """Gets the payment_from of this Transaction.  # noqa: E501

        Payment From  # noqa: E501

        :return: The payment_from of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._payment_from

    @payment_from.setter
    def payment_from(self, payment_from):
        """Sets the payment_from of this Transaction.

        Payment From  # noqa: E501

        :param payment_from: The payment_from of this Transaction.  # noqa: E501
        :type: str
        """

        self._payment_from = payment_from

    @property
    def payment_to(self):
        """Gets the payment_to of this Transaction.  # noqa: E501

        Payment to  # noqa: E501

        :return: The payment_to of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._payment_to

    @payment_to.setter
    def payment_to(self, payment_to):
        """Sets the payment_to of this Transaction.

        Payment to  # noqa: E501

        :param payment_to: The payment_to of this Transaction.  # noqa: E501
        :type: str
        """

        self._payment_to = payment_to

    @property
    def frequency(self):
        """Gets the frequency of this Transaction.  # noqa: E501

        Transaction Frequency  # noqa: E501

        :return: The frequency of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Transaction.

        Transaction Frequency  # noqa: E501

        :param frequency: The frequency of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single", "Termly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def external_reference(self):
        """Gets the external_reference of this Transaction.  # noqa: E501

        External Reference  # noqa: E501

        :return: The external_reference of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this Transaction.

        External Reference  # noqa: E501

        :param external_reference: The external_reference of this Transaction.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def is_restricted_to_owner(self):
        """Gets the is_restricted_to_owner of this Transaction.  # noqa: E501

        Is Restricted transaction - default to false  # noqa: E501

        :return: The is_restricted_to_owner of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_restricted_to_owner

    @is_restricted_to_owner.setter
    def is_restricted_to_owner(self, is_restricted_to_owner):
        """Sets the is_restricted_to_owner of this Transaction.

        Is Restricted transaction - default to false  # noqa: E501

        :param is_restricted_to_owner: The is_restricted_to_owner of this Transaction.  # noqa: E501
        :type: bool
        """

        self._is_restricted_to_owner = is_restricted_to_owner

    @property
    def created_by_user(self):
        """Gets the created_by_user of this Transaction.  # noqa: E501


        :return: The created_by_user of this Transaction.  # noqa: E501
        :rtype: UserRef2
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this Transaction.


        :param created_by_user: The created_by_user of this Transaction.  # noqa: E501
        :type: UserRef2
        """

        self._created_by_user = created_by_user

    @property
    def created_by_app(self):
        """Gets the created_by_app of this Transaction.  # noqa: E501


        :return: The created_by_app of this Transaction.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_by_app

    @created_by_app.setter
    def created_by_app(self, created_by_app):
        """Sets the created_by_app of this Transaction.


        :param created_by_app: The created_by_app of this Transaction.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_by_app = created_by_app

    @property
    def created_at(self):
        """Gets the created_at of this Transaction.  # noqa: E501

        Will hold the UTC timestamp for when the transaction was created  # noqa: E501

        :return: The created_at of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Transaction.

        Will hold the UTC timestamp for when the transaction was created  # noqa: E501

        :param created_at: The created_at of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
