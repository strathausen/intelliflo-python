# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_advice_template_step import BaseAdviceTemplateStep  # noqa: F401,E501

class SolutionDesignTemplateStep(BaseAdviceTemplateStep):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_business': 'list[AdviceTemplateNewBusinessSolutionType]',
        'existing_business': 'list[AdviceTemplateExistingBusinessSolutionType]',
        'fees': 'AdviceTemplateSolutionStepFee',
        'service_case': 'AdviceTemplateStepServiceCase',
        'allow_multiple_solutions': 'bool',
        'is_risk_profile_editable': 'bool',
        'solution_types': 'list[str]'
    }
    if hasattr(BaseAdviceTemplateStep, "swagger_types"):
        swagger_types.update(BaseAdviceTemplateStep.swagger_types)

    attribute_map = {
        'new_business': 'newBusiness',
        'existing_business': 'existingBusiness',
        'fees': 'fees',
        'service_case': 'serviceCase',
        'allow_multiple_solutions': 'allowMultipleSolutions',
        'is_risk_profile_editable': 'isRiskProfileEditable',
        'solution_types': 'solutionTypes'
    }
    if hasattr(BaseAdviceTemplateStep, "attribute_map"):
        attribute_map.update(BaseAdviceTemplateStep.attribute_map)

    def __init__(self, new_business=None, existing_business=None, fees=None, service_case=None, allow_multiple_solutions=None, is_risk_profile_editable=None, solution_types=None, *args, **kwargs):  # noqa: E501
        """SolutionDesignTemplateStep - a model defined in Swagger"""  # noqa: E501
        self._new_business = None
        self._existing_business = None
        self._fees = None
        self._service_case = None
        self._allow_multiple_solutions = None
        self._is_risk_profile_editable = None
        self._solution_types = None
        self.discriminator = None
        if new_business is not None:
            self.new_business = new_business
        if existing_business is not None:
            self.existing_business = existing_business
        if fees is not None:
            self.fees = fees
        if service_case is not None:
            self.service_case = service_case
        if allow_multiple_solutions is not None:
            self.allow_multiple_solutions = allow_multiple_solutions
        if is_risk_profile_editable is not None:
            self.is_risk_profile_editable = is_risk_profile_editable
        if solution_types is not None:
            self.solution_types = solution_types
        BaseAdviceTemplateStep.__init__(self, *args, **kwargs)

    @property
    def new_business(self):
        """Gets the new_business of this SolutionDesignTemplateStep.  # noqa: E501

        New business solution types.  # noqa: E501

        :return: The new_business of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: list[AdviceTemplateNewBusinessSolutionType]
        """
        return self._new_business

    @new_business.setter
    def new_business(self, new_business):
        """Sets the new_business of this SolutionDesignTemplateStep.

        New business solution types.  # noqa: E501

        :param new_business: The new_business of this SolutionDesignTemplateStep.  # noqa: E501
        :type: list[AdviceTemplateNewBusinessSolutionType]
        """

        self._new_business = new_business

    @property
    def existing_business(self):
        """Gets the existing_business of this SolutionDesignTemplateStep.  # noqa: E501

        Existing business solution types.  # noqa: E501

        :return: The existing_business of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: list[AdviceTemplateExistingBusinessSolutionType]
        """
        return self._existing_business

    @existing_business.setter
    def existing_business(self, existing_business):
        """Sets the existing_business of this SolutionDesignTemplateStep.

        Existing business solution types.  # noqa: E501

        :param existing_business: The existing_business of this SolutionDesignTemplateStep.  # noqa: E501
        :type: list[AdviceTemplateExistingBusinessSolutionType]
        """

        self._existing_business = existing_business

    @property
    def fees(self):
        """Gets the fees of this SolutionDesignTemplateStep.  # noqa: E501


        :return: The fees of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateSolutionStepFee
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this SolutionDesignTemplateStep.


        :param fees: The fees of this SolutionDesignTemplateStep.  # noqa: E501
        :type: AdviceTemplateSolutionStepFee
        """

        self._fees = fees

    @property
    def service_case(self):
        """Gets the service_case of this SolutionDesignTemplateStep.  # noqa: E501


        :return: The service_case of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateStepServiceCase
        """
        return self._service_case

    @service_case.setter
    def service_case(self, service_case):
        """Sets the service_case of this SolutionDesignTemplateStep.


        :param service_case: The service_case of this SolutionDesignTemplateStep.  # noqa: E501
        :type: AdviceTemplateStepServiceCase
        """

        self._service_case = service_case

    @property
    def allow_multiple_solutions(self):
        """Gets the allow_multiple_solutions of this SolutionDesignTemplateStep.  # noqa: E501

        Flag to restrict the journey to add a single solution for each advice.  # noqa: E501

        :return: The allow_multiple_solutions of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_solutions

    @allow_multiple_solutions.setter
    def allow_multiple_solutions(self, allow_multiple_solutions):
        """Sets the allow_multiple_solutions of this SolutionDesignTemplateStep.

        Flag to restrict the journey to add a single solution for each advice.  # noqa: E501

        :param allow_multiple_solutions: The allow_multiple_solutions of this SolutionDesignTemplateStep.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_solutions = allow_multiple_solutions

    @property
    def is_risk_profile_editable(self):
        """Gets the is_risk_profile_editable of this SolutionDesignTemplateStep.  # noqa: E501

        Flag to indicate whether risk profile can be editable for the advice journey.  # noqa: E501

        :return: The is_risk_profile_editable of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: bool
        """
        return self._is_risk_profile_editable

    @is_risk_profile_editable.setter
    def is_risk_profile_editable(self, is_risk_profile_editable):
        """Sets the is_risk_profile_editable of this SolutionDesignTemplateStep.

        Flag to indicate whether risk profile can be editable for the advice journey.  # noqa: E501

        :param is_risk_profile_editable: The is_risk_profile_editable of this SolutionDesignTemplateStep.  # noqa: E501
        :type: bool
        """

        self._is_risk_profile_editable = is_risk_profile_editable

    @property
    def solution_types(self):
        """Gets the solution_types of this SolutionDesignTemplateStep.  # noqa: E501

        Type of supported solutions.  # noqa: E501

        :return: The solution_types of this SolutionDesignTemplateStep.  # noqa: E501
        :rtype: list[str]
        """
        return self._solution_types

    @solution_types.setter
    def solution_types(self, solution_types):
        """Sets the solution_types of this SolutionDesignTemplateStep.

        Type of supported solutions.  # noqa: E501

        :param solution_types: The solution_types of this SolutionDesignTemplateStep.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NewBusiness", "ExistingBusiness", "NonProduct"]  # noqa: E501
        if not set(solution_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `solution_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(solution_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._solution_types = solution_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolutionDesignTemplateStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolutionDesignTemplateStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
