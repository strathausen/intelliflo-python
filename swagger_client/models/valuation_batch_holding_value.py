# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValuationBatchHoldingValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code_type': 'str',
        'code': 'str',
        'name': 'str',
        'units': 'float',
        'units_date': 'datetime',
        'unit_price': 'float',
        'currency_code': 'str',
        'matched_holding_href': 'str',
        'matched_transaction_href': 'str'
    }

    attribute_map = {
        'code_type': 'codeType',
        'code': 'code',
        'name': 'name',
        'units': 'units',
        'units_date': 'unitsDate',
        'unit_price': 'unitPrice',
        'currency_code': 'currencyCode',
        'matched_holding_href': 'matched_holding_href',
        'matched_transaction_href': 'matched_transaction_href'
    }

    def __init__(self, code_type=None, code=None, name=None, units=None, units_date=None, unit_price=None, currency_code=None, matched_holding_href=None, matched_transaction_href=None):  # noqa: E501
        """ValuationBatchHoldingValue - a model defined in Swagger"""  # noqa: E501
        self._code_type = None
        self._code = None
        self._name = None
        self._units = None
        self._units_date = None
        self._unit_price = None
        self._currency_code = None
        self._matched_holding_href = None
        self._matched_transaction_href = None
        self.discriminator = None
        if code_type is not None:
            self.code_type = code_type
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if units is not None:
            self.units = units
        if units_date is not None:
            self.units_date = units_date
        if unit_price is not None:
            self.unit_price = unit_price
        if currency_code is not None:
            self.currency_code = currency_code
        if matched_holding_href is not None:
            self.matched_holding_href = matched_holding_href
        if matched_transaction_href is not None:
            self.matched_transaction_href = matched_transaction_href

    @property
    def code_type(self):
        """Gets the code_type of this ValuationBatchHoldingValue.  # noqa: E501

        Holding code type  # noqa: E501

        :return: The code_type of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: str
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """Sets the code_type of this ValuationBatchHoldingValue.

        Holding code type  # noqa: E501

        :param code_type: The code_type of this ValuationBatchHoldingValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Isin", "Sedol", "Citi", "Mex", "Epic", "ProviderCode", "Apir", "Ticker"]  # noqa: E501
        if code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `code_type` ({0}), must be one of {1}"  # noqa: E501
                .format(code_type, allowed_values)
            )

        self._code_type = code_type

    @property
    def code(self):
        """Gets the code of this ValuationBatchHoldingValue.  # noqa: E501

        Holding code  # noqa: E501

        :return: The code of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ValuationBatchHoldingValue.

        Holding code  # noqa: E501

        :param code: The code of this ValuationBatchHoldingValue.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this ValuationBatchHoldingValue.  # noqa: E501

        Holding name  # noqa: E501

        :return: The name of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ValuationBatchHoldingValue.

        Holding name  # noqa: E501

        :param name: The name of this ValuationBatchHoldingValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def units(self):
        """Gets the units of this ValuationBatchHoldingValue.  # noqa: E501

        Number of units  # noqa: E501

        :return: The units of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ValuationBatchHoldingValue.

        Number of units  # noqa: E501

        :param units: The units of this ValuationBatchHoldingValue.  # noqa: E501
        :type: float
        """

        self._units = units

    @property
    def units_date(self):
        """Gets the units_date of this ValuationBatchHoldingValue.  # noqa: E501

        Date of units  # noqa: E501

        :return: The units_date of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: datetime
        """
        return self._units_date

    @units_date.setter
    def units_date(self, units_date):
        """Sets the units_date of this ValuationBatchHoldingValue.

        Date of units  # noqa: E501

        :param units_date: The units_date of this ValuationBatchHoldingValue.  # noqa: E501
        :type: datetime
        """

        self._units_date = units_date

    @property
    def unit_price(self):
        """Gets the unit_price of this ValuationBatchHoldingValue.  # noqa: E501

        Price of a unit  # noqa: E501

        :return: The unit_price of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ValuationBatchHoldingValue.

        Price of a unit  # noqa: E501

        :param unit_price: The unit_price of this ValuationBatchHoldingValue.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def currency_code(self):
        """Gets the currency_code of this ValuationBatchHoldingValue.  # noqa: E501

        ISO Currency code  # noqa: E501

        :return: The currency_code of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ValuationBatchHoldingValue.

        ISO Currency code  # noqa: E501

        :param currency_code: The currency_code of this ValuationBatchHoldingValue.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def matched_holding_href(self):
        """Gets the matched_holding_href of this ValuationBatchHoldingValue.  # noqa: E501

        Matched holding location  # noqa: E501

        :return: The matched_holding_href of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: str
        """
        return self._matched_holding_href

    @matched_holding_href.setter
    def matched_holding_href(self, matched_holding_href):
        """Sets the matched_holding_href of this ValuationBatchHoldingValue.

        Matched holding location  # noqa: E501

        :param matched_holding_href: The matched_holding_href of this ValuationBatchHoldingValue.  # noqa: E501
        :type: str
        """

        self._matched_holding_href = matched_holding_href

    @property
    def matched_transaction_href(self):
        """Gets the matched_transaction_href of this ValuationBatchHoldingValue.  # noqa: E501

        Matched transaction location  # noqa: E501

        :return: The matched_transaction_href of this ValuationBatchHoldingValue.  # noqa: E501
        :rtype: str
        """
        return self._matched_transaction_href

    @matched_transaction_href.setter
    def matched_transaction_href(self, matched_transaction_href):
        """Sets the matched_transaction_href of this ValuationBatchHoldingValue.

        Matched transaction location  # noqa: E501

        :param matched_transaction_href: The matched_transaction_href of this ValuationBatchHoldingValue.  # noqa: E501
        :type: str
        """

        self._matched_transaction_href = matched_transaction_href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValuationBatchHoldingValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValuationBatchHoldingValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
