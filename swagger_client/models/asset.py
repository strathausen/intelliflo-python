# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Asset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'description': 'str',
        'plan': 'PlanIdRef',
        'asset_type': 'str',
        'is_visible_to_client': 'bool',
        'is_loan_amount': 'bool',
        'is_investment_property': 'bool',
        'original_value': 'AssetValuationRef',
        'current_value': 'AssetValuationRef',
        'owner': 'str',
        'owners': 'list[ClientOwnershipRef]',
        'address': 'AddressValue2',
        'purchased_on': 'datetime',
        'valued_on': 'datetime',
        'purchase_price': 'CurrencyValue',
        'income': 'IncomeIdRef',
        'is_holding': 'bool',
        'currency': 'str',
        'exchange_rate': 'CurrencyRef',
        'created_by_user': 'UserRef2'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'description': 'description',
        'plan': 'plan',
        'asset_type': 'assetType',
        'is_visible_to_client': 'isVisibleToClient',
        'is_loan_amount': 'isLoanAmount',
        'is_investment_property': 'isInvestmentProperty',
        'original_value': 'originalValue',
        'current_value': 'currentValue',
        'owner': 'owner',
        'owners': 'owners',
        'address': 'address',
        'purchased_on': 'purchasedOn',
        'valued_on': 'valuedOn',
        'purchase_price': 'purchasePrice',
        'income': 'income',
        'is_holding': 'isHolding',
        'currency': 'currency',
        'exchange_rate': 'exchangeRate',
        'created_by_user': 'createdByUser'
    }

    def __init__(self, id=None, href=None, description=None, plan=None, asset_type=None, is_visible_to_client=None, is_loan_amount=None, is_investment_property=None, original_value=None, current_value=None, owner='null', owners=None, address=None, purchased_on=None, valued_on=None, purchase_price=None, income=None, is_holding=None, currency=None, exchange_rate=None, created_by_user=None):  # noqa: E501
        """Asset - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._description = None
        self._plan = None
        self._asset_type = None
        self._is_visible_to_client = None
        self._is_loan_amount = None
        self._is_investment_property = None
        self._original_value = None
        self._current_value = None
        self._owner = None
        self._owners = None
        self._address = None
        self._purchased_on = None
        self._valued_on = None
        self._purchase_price = None
        self._income = None
        self._is_holding = None
        self._currency = None
        self._exchange_rate = None
        self._created_by_user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.description = description
        if plan is not None:
            self.plan = plan
        self.asset_type = asset_type
        if is_visible_to_client is not None:
            self.is_visible_to_client = is_visible_to_client
        if is_loan_amount is not None:
            self.is_loan_amount = is_loan_amount
        if is_investment_property is not None:
            self.is_investment_property = is_investment_property
        if original_value is not None:
            self.original_value = original_value
        if current_value is not None:
            self.current_value = current_value
        if owner is not None:
            self.owner = owner
        if owners is not None:
            self.owners = owners
        if address is not None:
            self.address = address
        if purchased_on is not None:
            self.purchased_on = purchased_on
        if valued_on is not None:
            self.valued_on = valued_on
        if purchase_price is not None:
            self.purchase_price = purchase_price
        if income is not None:
            self.income = income
        if is_holding is not None:
            self.is_holding = is_holding
        if currency is not None:
            self.currency = currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if created_by_user is not None:
            self.created_by_user = created_by_user

    @property
    def id(self):
        """Gets the id of this Asset.  # noqa: E501

        Unique asset resource identifier  # noqa: E501

        :return: The id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.

        Unique asset resource identifier  # noqa: E501

        :param id: The id of this Asset.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Asset.  # noqa: E501


        :return: The href of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Asset.


        :param href: The href of this Asset.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def description(self):
        """Gets the description of this Asset.  # noqa: E501

        Description of the asset  # noqa: E501

        :return: The description of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Asset.

        Description of the asset  # noqa: E501

        :param description: The description of this Asset.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def plan(self):
        """Gets the plan of this Asset.  # noqa: E501


        :return: The plan of this Asset.  # noqa: E501
        :rtype: PlanIdRef
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Asset.


        :param plan: The plan of this Asset.  # noqa: E501
        :type: PlanIdRef
        """

        self._plan = plan

    @property
    def asset_type(self):
        """Gets the asset_type of this Asset.  # noqa: E501

        Type (or category) of asset  # noqa: E501

        :return: The asset_type of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this Asset.

        Type (or category) of asset  # noqa: E501

        :param asset_type: The asset_type of this Asset.  # noqa: E501
        :type: str
        """
        if asset_type is None:
            raise ValueError("Invalid value for `asset_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Cash", "Collectibles", "HolidayHome", "HomeContents", "InvestmentProperty", "MainResidence", "MotorVehicles", "NonIncomeProducingRealEstate", "OverseasProperty", "OwnBusiness", "RentalOrOtherProperty", "SecondHome", "Investments", "Other", "Boat", "BuyToLetProperty", "CommercialProperty"]  # noqa: E501
        if asset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_type` ({0}), must be one of {1}"  # noqa: E501
                .format(asset_type, allowed_values)
            )

        self._asset_type = asset_type

    @property
    def is_visible_to_client(self):
        """Gets the is_visible_to_client of this Asset.  # noqa: E501

        Information visible to client  # noqa: E501

        :return: The is_visible_to_client of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_to_client

    @is_visible_to_client.setter
    def is_visible_to_client(self, is_visible_to_client):
        """Sets the is_visible_to_client of this Asset.

        Information visible to client  # noqa: E501

        :param is_visible_to_client: The is_visible_to_client of this Asset.  # noqa: E501
        :type: bool
        """

        self._is_visible_to_client = is_visible_to_client

    @property
    def is_loan_amount(self):
        """Gets the is_loan_amount of this Asset.  # noqa: E501

        If it is a loan amount  # noqa: E501

        :return: The is_loan_amount of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._is_loan_amount

    @is_loan_amount.setter
    def is_loan_amount(self, is_loan_amount):
        """Sets the is_loan_amount of this Asset.

        If it is a loan amount  # noqa: E501

        :param is_loan_amount: The is_loan_amount of this Asset.  # noqa: E501
        :type: bool
        """

        self._is_loan_amount = is_loan_amount

    @property
    def is_investment_property(self):
        """Gets the is_investment_property of this Asset.  # noqa: E501

        If it is investment property  # noqa: E501

        :return: The is_investment_property of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._is_investment_property

    @is_investment_property.setter
    def is_investment_property(self, is_investment_property):
        """Sets the is_investment_property of this Asset.

        If it is investment property  # noqa: E501

        :param is_investment_property: The is_investment_property of this Asset.  # noqa: E501
        :type: bool
        """

        self._is_investment_property = is_investment_property

    @property
    def original_value(self):
        """Gets the original_value of this Asset.  # noqa: E501


        :return: The original_value of this Asset.  # noqa: E501
        :rtype: AssetValuationRef
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """Sets the original_value of this Asset.


        :param original_value: The original_value of this Asset.  # noqa: E501
        :type: AssetValuationRef
        """

        self._original_value = original_value

    @property
    def current_value(self):
        """Gets the current_value of this Asset.  # noqa: E501


        :return: The current_value of this Asset.  # noqa: E501
        :rtype: AssetValuationRef
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this Asset.


        :param current_value: The current_value of this Asset.  # noqa: E501
        :type: AssetValuationRef
        """

        self._current_value = current_value

    @property
    def owner(self):
        """Gets the owner of this Asset.  # noqa: E501

        Current selected Owner  # noqa: E501

        :return: The owner of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Asset.

        Current selected Owner  # noqa: E501

        :param owner: The owner of this Asset.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def owners(self):
        """Gets the owners of this Asset.  # noqa: E501

        Asset Owners  # noqa: E501

        :return: The owners of this Asset.  # noqa: E501
        :rtype: list[ClientOwnershipRef]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this Asset.

        Asset Owners  # noqa: E501

        :param owners: The owners of this Asset.  # noqa: E501
        :type: list[ClientOwnershipRef]
        """

        self._owners = owners

    @property
    def address(self):
        """Gets the address of this Asset.  # noqa: E501


        :return: The address of this Asset.  # noqa: E501
        :rtype: AddressValue2
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Asset.


        :param address: The address of this Asset.  # noqa: E501
        :type: AddressValue2
        """

        self._address = address

    @property
    def purchased_on(self):
        """Gets the purchased_on of this Asset.  # noqa: E501

        Purchase date  # noqa: E501

        :return: The purchased_on of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self._purchased_on

    @purchased_on.setter
    def purchased_on(self, purchased_on):
        """Sets the purchased_on of this Asset.

        Purchase date  # noqa: E501

        :param purchased_on: The purchased_on of this Asset.  # noqa: E501
        :type: datetime
        """

        self._purchased_on = purchased_on

    @property
    def valued_on(self):
        """Gets the valued_on of this Asset.  # noqa: E501

        Valued on date  # noqa: E501

        :return: The valued_on of this Asset.  # noqa: E501
        :rtype: datetime
        """
        return self._valued_on

    @valued_on.setter
    def valued_on(self, valued_on):
        """Sets the valued_on of this Asset.

        Valued on date  # noqa: E501

        :param valued_on: The valued_on of this Asset.  # noqa: E501
        :type: datetime
        """

        self._valued_on = valued_on

    @property
    def purchase_price(self):
        """Gets the purchase_price of this Asset.  # noqa: E501


        :return: The purchase_price of this Asset.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price):
        """Sets the purchase_price of this Asset.


        :param purchase_price: The purchase_price of this Asset.  # noqa: E501
        :type: CurrencyValue
        """

        self._purchase_price = purchase_price

    @property
    def income(self):
        """Gets the income of this Asset.  # noqa: E501


        :return: The income of this Asset.  # noqa: E501
        :rtype: IncomeIdRef
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this Asset.


        :param income: The income of this Asset.  # noqa: E501
        :type: IncomeIdRef
        """

        self._income = income

    @property
    def is_holding(self):
        """Gets the is_holding of this Asset.  # noqa: E501

        If it is holding  # noqa: E501

        :return: The is_holding of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._is_holding

    @is_holding.setter
    def is_holding(self, is_holding):
        """Sets the is_holding of this Asset.

        If it is holding  # noqa: E501

        :param is_holding: The is_holding of this Asset.  # noqa: E501
        :type: bool
        """

        self._is_holding = is_holding

    @property
    def currency(self):
        """Gets the currency of this Asset.  # noqa: E501

        Asset's currency.  # noqa: E501

        :return: The currency of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Asset.

        Asset's currency.  # noqa: E501

        :param currency: The currency of this Asset.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this Asset.  # noqa: E501


        :return: The exchange_rate of this Asset.  # noqa: E501
        :rtype: CurrencyRef
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this Asset.


        :param exchange_rate: The exchange_rate of this Asset.  # noqa: E501
        :type: CurrencyRef
        """

        self._exchange_rate = exchange_rate

    @property
    def created_by_user(self):
        """Gets the created_by_user of this Asset.  # noqa: E501


        :return: The created_by_user of this Asset.  # noqa: E501
        :rtype: UserRef2
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this Asset.


        :param created_by_user: The created_by_user of this Asset.  # noqa: E501
        :type: UserRef2
        """

        self._created_by_user = created_by_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Asset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
