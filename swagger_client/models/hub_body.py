# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HubBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hub_mode': 'str',
        'hub_topic': 'str',
        'hub_callback': 'str',
        'hub_lease_seconds': 'int',
        'hub_secret': 'str'
    }

    attribute_map = {
        'hub_mode': 'hub.mode',
        'hub_topic': 'hub.topic',
        'hub_callback': 'hub.callback',
        'hub_lease_seconds': 'hub.lease_seconds',
        'hub_secret': 'hub.secret'
    }

    def __init__(self, hub_mode=None, hub_topic=None, hub_callback=None, hub_lease_seconds=None, hub_secret=None):  # noqa: E501
        """HubBody - a model defined in Swagger"""  # noqa: E501
        self._hub_mode = None
        self._hub_topic = None
        self._hub_callback = None
        self._hub_lease_seconds = None
        self._hub_secret = None
        self.discriminator = None
        self.hub_mode = hub_mode
        self.hub_topic = hub_topic
        self.hub_callback = hub_callback
        if hub_lease_seconds is not None:
            self.hub_lease_seconds = hub_lease_seconds
        if hub_secret is not None:
            self.hub_secret = hub_secret

    @property
    def hub_mode(self):
        """Gets the hub_mode of this HubBody.  # noqa: E501

        The literal string subscribe or unsubscribe, depending on the goal of the request.  # noqa: E501

        :return: The hub_mode of this HubBody.  # noqa: E501
        :rtype: str
        """
        return self._hub_mode

    @hub_mode.setter
    def hub_mode(self, hub_mode):
        """Sets the hub_mode of this HubBody.

        The literal string subscribe or unsubscribe, depending on the goal of the request.  # noqa: E501

        :param hub_mode: The hub_mode of this HubBody.  # noqa: E501
        :type: str
        """
        if hub_mode is None:
            raise ValueError("Invalid value for `hub_mode`, must not be `None`")  # noqa: E501

        self._hub_mode = hub_mode

    @property
    def hub_topic(self):
        """Gets the hub_topic of this HubBody.  # noqa: E501

        The topic URL that the subscriber wishes to subscribe to or unsubscribe from.  # noqa: E501

        :return: The hub_topic of this HubBody.  # noqa: E501
        :rtype: str
        """
        return self._hub_topic

    @hub_topic.setter
    def hub_topic(self, hub_topic):
        """Sets the hub_topic of this HubBody.

        The topic URL that the subscriber wishes to subscribe to or unsubscribe from.  # noqa: E501

        :param hub_topic: The hub_topic of this HubBody.  # noqa: E501
        :type: str
        """
        if hub_topic is None:
            raise ValueError("Invalid value for `hub_topic`, must not be `None`")  # noqa: E501

        self._hub_topic = hub_topic

    @property
    def hub_callback(self):
        """Gets the hub_callback of this HubBody.  # noqa: E501

        The callback url where content distribution notifications should be delivered.  # noqa: E501

        :return: The hub_callback of this HubBody.  # noqa: E501
        :rtype: str
        """
        return self._hub_callback

    @hub_callback.setter
    def hub_callback(self, hub_callback):
        """Sets the hub_callback of this HubBody.

        The callback url where content distribution notifications should be delivered.  # noqa: E501

        :param hub_callback: The hub_callback of this HubBody.  # noqa: E501
        :type: str
        """
        if hub_callback is None:
            raise ValueError("Invalid value for `hub_callback`, must not be `None`")  # noqa: E501

        self._hub_callback = hub_callback

    @property
    def hub_lease_seconds(self):
        """Gets the hub_lease_seconds of this HubBody.  # noqa: E501

        Number of seconds to have the subscription active, given as a positive decimal integer.  # noqa: E501

        :return: The hub_lease_seconds of this HubBody.  # noqa: E501
        :rtype: int
        """
        return self._hub_lease_seconds

    @hub_lease_seconds.setter
    def hub_lease_seconds(self, hub_lease_seconds):
        """Sets the hub_lease_seconds of this HubBody.

        Number of seconds to have the subscription active, given as a positive decimal integer.  # noqa: E501

        :param hub_lease_seconds: The hub_lease_seconds of this HubBody.  # noqa: E501
        :type: int
        """

        self._hub_lease_seconds = hub_lease_seconds

    @property
    def hub_secret(self):
        """Gets the hub_secret of this HubBody.  # noqa: E501

        A cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution.  # noqa: E501

        :return: The hub_secret of this HubBody.  # noqa: E501
        :rtype: str
        """
        return self._hub_secret

    @hub_secret.setter
    def hub_secret(self, hub_secret):
        """Sets the hub_secret of this HubBody.

        A cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution.  # noqa: E501

        :param hub_secret: The hub_secret of this HubBody.  # noqa: E501
        :type: str
        """

        self._hub_secret = hub_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HubBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
