# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetValuation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'updated_by': 'UserRef2',
        'asset': 'AssetRef',
        'value_on': 'datetime',
        'value': 'CurrencyValue'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'updated_by': 'updatedBy',
        'asset': 'asset',
        'value_on': 'valueOn',
        'value': 'value'
    }

    def __init__(self, id=None, href=None, updated_by=None, asset=None, value_on=None, value=None):  # noqa: E501
        """AssetValuation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._updated_by = None
        self._asset = None
        self._value_on = None
        self._value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if updated_by is not None:
            self.updated_by = updated_by
        if asset is not None:
            self.asset = asset
        if value_on is not None:
            self.value_on = value_on
        if value is not None:
            self.value = value

    @property
    def id(self):
        """Gets the id of this AssetValuation.  # noqa: E501


        :return: The id of this AssetValuation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetValuation.


        :param id: The id of this AssetValuation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AssetValuation.  # noqa: E501


        :return: The href of this AssetValuation.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AssetValuation.


        :param href: The href of this AssetValuation.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def updated_by(self):
        """Gets the updated_by of this AssetValuation.  # noqa: E501


        :return: The updated_by of this AssetValuation.  # noqa: E501
        :rtype: UserRef2
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AssetValuation.


        :param updated_by: The updated_by of this AssetValuation.  # noqa: E501
        :type: UserRef2
        """

        self._updated_by = updated_by

    @property
    def asset(self):
        """Gets the asset of this AssetValuation.  # noqa: E501


        :return: The asset of this AssetValuation.  # noqa: E501
        :rtype: AssetRef
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetValuation.


        :param asset: The asset of this AssetValuation.  # noqa: E501
        :type: AssetRef
        """

        self._asset = asset

    @property
    def value_on(self):
        """Gets the value_on of this AssetValuation.  # noqa: E501

        Editable on put + post.  Date of valuation.  # noqa: E501

        :return: The value_on of this AssetValuation.  # noqa: E501
        :rtype: datetime
        """
        return self._value_on

    @value_on.setter
    def value_on(self, value_on):
        """Sets the value_on of this AssetValuation.

        Editable on put + post.  Date of valuation.  # noqa: E501

        :param value_on: The value_on of this AssetValuation.  # noqa: E501
        :type: datetime
        """

        self._value_on = value_on

    @property
    def value(self):
        """Gets the value of this AssetValuation.  # noqa: E501


        :return: The value of this AssetValuation.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AssetValuation.


        :param value: The value of this AssetValuation.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetValuation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetValuation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
