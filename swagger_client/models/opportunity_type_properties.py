# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpportunityTypeProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_investment_default': 'bool',
        'is_retirement_default': 'bool',
        'is_system': 'bool',
        'is_archived': 'bool',
        'objective_type': 'str',
        'in_use': 'bool'
    }

    attribute_map = {
        'is_investment_default': 'isInvestmentDefault',
        'is_retirement_default': 'isRetirementDefault',
        'is_system': 'isSystem',
        'is_archived': 'isArchived',
        'objective_type': 'objectiveType',
        'in_use': 'inUse'
    }

    def __init__(self, is_investment_default=False, is_retirement_default=False, is_system=False, is_archived=False, objective_type=None, in_use=None):  # noqa: E501
        """OpportunityTypeProperties - a model defined in Swagger"""  # noqa: E501
        self._is_investment_default = None
        self._is_retirement_default = None
        self._is_system = None
        self._is_archived = None
        self._objective_type = None
        self._in_use = None
        self.discriminator = None
        if is_investment_default is not None:
            self.is_investment_default = is_investment_default
        if is_retirement_default is not None:
            self.is_retirement_default = is_retirement_default
        if is_system is not None:
            self.is_system = is_system
        if is_archived is not None:
            self.is_archived = is_archived
        if objective_type is not None:
            self.objective_type = objective_type
        if in_use is not None:
            self.in_use = in_use

    @property
    def is_investment_default(self):
        """Gets the is_investment_default of this OpportunityTypeProperties.  # noqa: E501

        Flag indicating if the type of opportunity is the default for general investments. This can only be set to true where IsSystem is set to false.  # noqa: E501

        :return: The is_investment_default of this OpportunityTypeProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_investment_default

    @is_investment_default.setter
    def is_investment_default(self, is_investment_default):
        """Sets the is_investment_default of this OpportunityTypeProperties.

        Flag indicating if the type of opportunity is the default for general investments. This can only be set to true where IsSystem is set to false.  # noqa: E501

        :param is_investment_default: The is_investment_default of this OpportunityTypeProperties.  # noqa: E501
        :type: bool
        """

        self._is_investment_default = is_investment_default

    @property
    def is_retirement_default(self):
        """Gets the is_retirement_default of this OpportunityTypeProperties.  # noqa: E501

        Flag indicating if the type of opportunity is the default for retirement investments. This can only be set to true where IsSystem is set to false.  # noqa: E501

        :return: The is_retirement_default of this OpportunityTypeProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_retirement_default

    @is_retirement_default.setter
    def is_retirement_default(self, is_retirement_default):
        """Sets the is_retirement_default of this OpportunityTypeProperties.

        Flag indicating if the type of opportunity is the default for retirement investments. This can only be set to true where IsSystem is set to false.  # noqa: E501

        :param is_retirement_default: The is_retirement_default of this OpportunityTypeProperties.  # noqa: E501
        :type: bool
        """

        self._is_retirement_default = is_retirement_default

    @property
    def is_system(self):
        """Gets the is_system of this OpportunityTypeProperties.  # noqa: E501

        Flag indicating if the opportunity type id a system opportunity type.  # noqa: E501

        :return: The is_system of this OpportunityTypeProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this OpportunityTypeProperties.

        Flag indicating if the opportunity type id a system opportunity type.  # noqa: E501

        :param is_system: The is_system of this OpportunityTypeProperties.  # noqa: E501
        :type: bool
        """

        self._is_system = is_system

    @property
    def is_archived(self):
        """Gets the is_archived of this OpportunityTypeProperties.  # noqa: E501

        Flag indicating whether or not the opportunity type has been archived.  # noqa: E501

        :return: The is_archived of this OpportunityTypeProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this OpportunityTypeProperties.

        Flag indicating whether or not the opportunity type has been archived.  # noqa: E501

        :param is_archived: The is_archived of this OpportunityTypeProperties.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def objective_type(self):
        """Gets the objective_type of this OpportunityTypeProperties.  # noqa: E501

        The type of objective that the opportunity relates to.  # noqa: E501

        :return: The objective_type of this OpportunityTypeProperties.  # noqa: E501
        :rtype: str
        """
        return self._objective_type

    @objective_type.setter
    def objective_type(self, objective_type):
        """Sets the objective_type of this OpportunityTypeProperties.

        The type of objective that the opportunity relates to.  # noqa: E501

        :param objective_type: The objective_type of this OpportunityTypeProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["Budget", "EstatePlanning", "Investment", "Mortgage", "EquityRelease", "Protection", "Retirement"]  # noqa: E501
        if objective_type not in allowed_values:
            raise ValueError(
                "Invalid value for `objective_type` ({0}), must be one of {1}"  # noqa: E501
                .format(objective_type, allowed_values)
            )

        self._objective_type = objective_type

    @property
    def in_use(self):
        """Gets the in_use of this OpportunityTypeProperties.  # noqa: E501

        Flag indicating whether or not the opportunity type is being used or not.  # noqa: E501

        :return: The in_use of this OpportunityTypeProperties.  # noqa: E501
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this OpportunityTypeProperties.

        Flag indicating whether or not the opportunity type is being used or not.  # noqa: E501

        :param in_use: The in_use of this OpportunityTypeProperties.  # noqa: E501
        :type: bool
        """

        self._in_use = in_use

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpportunityTypeProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpportunityTypeProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
