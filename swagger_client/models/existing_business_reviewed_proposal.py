# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_recommendation2_proposal import BaseRecommendation2Proposal  # noqa: F401,E501

class ExistingBusinessReviewedProposal(BaseRecommendation2Proposal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'contributions': 'list[ProposedContributionValue]',
        'withdrawals': 'list[ProposedWithdrawalValue]',
        'investment_strategy': 'InvestmentStrategy',
        'product_closure': 'ProductClosure',
        'product_details': 'ProductDetails',
        'retirement_age': 'int'
    }
    if hasattr(BaseRecommendation2Proposal, "swagger_types"):
        swagger_types.update(BaseRecommendation2Proposal.swagger_types)

    attribute_map = {
        'action': 'action',
        'contributions': 'contributions',
        'withdrawals': 'withdrawals',
        'investment_strategy': 'investmentStrategy',
        'product_closure': 'productClosure',
        'product_details': 'productDetails',
        'retirement_age': 'retirementAge'
    }
    if hasattr(BaseRecommendation2Proposal, "attribute_map"):
        attribute_map.update(BaseRecommendation2Proposal.attribute_map)

    def __init__(self, action=None, contributions=None, withdrawals=None, investment_strategy=None, product_closure=None, product_details=None, retirement_age=None, *args, **kwargs):  # noqa: E501
        """ExistingBusinessReviewedProposal - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._contributions = None
        self._withdrawals = None
        self._investment_strategy = None
        self._product_closure = None
        self._product_details = None
        self._retirement_age = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if contributions is not None:
            self.contributions = contributions
        if withdrawals is not None:
            self.withdrawals = withdrawals
        if investment_strategy is not None:
            self.investment_strategy = investment_strategy
        if product_closure is not None:
            self.product_closure = product_closure
        if product_details is not None:
            self.product_details = product_details
        if retirement_age is not None:
            self.retirement_age = retirement_age
        BaseRecommendation2Proposal.__init__(self, *args, **kwargs)

    @property
    def action(self):
        """Gets the action of this ExistingBusinessReviewedProposal.  # noqa: E501


        :return: The action of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ExistingBusinessReviewedProposal.


        :param action: The action of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def contributions(self):
        """Gets the contributions of this ExistingBusinessReviewedProposal.  # noqa: E501

        Proposed lumpsum/transfer/regular contributions for an existing plan.  # noqa: E501

        :return: The contributions of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: list[ProposedContributionValue]
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this ExistingBusinessReviewedProposal.

        Proposed lumpsum/transfer/regular contributions for an existing plan.  # noqa: E501

        :param contributions: The contributions of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: list[ProposedContributionValue]
        """

        self._contributions = contributions

    @property
    def withdrawals(self):
        """Gets the withdrawals of this ExistingBusinessReviewedProposal.  # noqa: E501

        Proposed lumpsum and regular withdrawals or encashments for an existing plan.  # noqa: E501

        :return: The withdrawals of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: list[ProposedWithdrawalValue]
        """
        return self._withdrawals

    @withdrawals.setter
    def withdrawals(self, withdrawals):
        """Sets the withdrawals of this ExistingBusinessReviewedProposal.

        Proposed lumpsum and regular withdrawals or encashments for an existing plan.  # noqa: E501

        :param withdrawals: The withdrawals of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: list[ProposedWithdrawalValue]
        """

        self._withdrawals = withdrawals

    @property
    def investment_strategy(self):
        """Gets the investment_strategy of this ExistingBusinessReviewedProposal.  # noqa: E501


        :return: The investment_strategy of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: InvestmentStrategy
        """
        return self._investment_strategy

    @investment_strategy.setter
    def investment_strategy(self, investment_strategy):
        """Sets the investment_strategy of this ExistingBusinessReviewedProposal.


        :param investment_strategy: The investment_strategy of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: InvestmentStrategy
        """

        self._investment_strategy = investment_strategy

    @property
    def product_closure(self):
        """Gets the product_closure of this ExistingBusinessReviewedProposal.  # noqa: E501


        :return: The product_closure of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: ProductClosure
        """
        return self._product_closure

    @product_closure.setter
    def product_closure(self, product_closure):
        """Sets the product_closure of this ExistingBusinessReviewedProposal.


        :param product_closure: The product_closure of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: ProductClosure
        """

        self._product_closure = product_closure

    @property
    def product_details(self):
        """Gets the product_details of this ExistingBusinessReviewedProposal.  # noqa: E501


        :return: The product_details of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: ProductDetails
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this ExistingBusinessReviewedProposal.


        :param product_details: The product_details of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: ProductDetails
        """

        self._product_details = product_details

    @property
    def retirement_age(self):
        """Gets the retirement_age of this ExistingBusinessReviewedProposal.  # noqa: E501

        Retirement Age for existing business review proposal  # noqa: E501

        :return: The retirement_age of this ExistingBusinessReviewedProposal.  # noqa: E501
        :rtype: int
        """
        return self._retirement_age

    @retirement_age.setter
    def retirement_age(self, retirement_age):
        """Sets the retirement_age of this ExistingBusinessReviewedProposal.

        Retirement Age for existing business review proposal  # noqa: E501

        :param retirement_age: The retirement_age of this ExistingBusinessReviewedProposal.  # noqa: E501
        :type: int
        """

        self._retirement_age = retirement_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExistingBusinessReviewedProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExistingBusinessReviewedProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
