# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundCodesValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apir': 'str',
        'citi': 'str',
        'epic': 'str',
        'sedol': 'str',
        'isin': 'str',
        'mex': 'str'
    }

    attribute_map = {
        'apir': 'apir',
        'citi': 'citi',
        'epic': 'epic',
        'sedol': 'sedol',
        'isin': 'isin',
        'mex': 'mex'
    }

    def __init__(self, apir=None, citi=None, epic=None, sedol=None, isin=None, mex=None):  # noqa: E501
        """FundCodesValue - a model defined in Swagger"""  # noqa: E501
        self._apir = None
        self._citi = None
        self._epic = None
        self._sedol = None
        self._isin = None
        self._mex = None
        self.discriminator = None
        if apir is not None:
            self.apir = apir
        if citi is not None:
            self.citi = citi
        if epic is not None:
            self.epic = epic
        if sedol is not None:
            self.sedol = sedol
        if isin is not None:
            self.isin = isin
        if mex is not None:
            self.mex = mex

    @property
    def apir(self):
        """Gets the apir of this FundCodesValue.  # noqa: E501

        APIR code. The Asia Pacific Investment Register (APIR) Code is a unique identifier for many financial products.  # noqa: E501

        :return: The apir of this FundCodesValue.  # noqa: E501
        :rtype: str
        """
        return self._apir

    @apir.setter
    def apir(self, apir):
        """Sets the apir of this FundCodesValue.

        APIR code. The Asia Pacific Investment Register (APIR) Code is a unique identifier for many financial products.  # noqa: E501

        :param apir: The apir of this FundCodesValue.  # noqa: E501
        :type: str
        """

        self._apir = apir

    @property
    def citi(self):
        """Gets the citi of this FundCodesValue.  # noqa: E501

        Unique identifier for the fund used by Financial Express.  # noqa: E501

        :return: The citi of this FundCodesValue.  # noqa: E501
        :rtype: str
        """
        return self._citi

    @citi.setter
    def citi(self, citi):
        """Sets the citi of this FundCodesValue.

        Unique identifier for the fund used by Financial Express.  # noqa: E501

        :param citi: The citi of this FundCodesValue.  # noqa: E501
        :type: str
        """

        self._citi = citi

    @property
    def epic(self):
        """Gets the epic of this FundCodesValue.  # noqa: E501

        Stock exchange's standard abbreviation of a security's name.  # noqa: E501

        :return: The epic of this FundCodesValue.  # noqa: E501
        :rtype: str
        """
        return self._epic

    @epic.setter
    def epic(self, epic):
        """Sets the epic of this FundCodesValue.

        Stock exchange's standard abbreviation of a security's name.  # noqa: E501

        :param epic: The epic of this FundCodesValue.  # noqa: E501
        :type: str
        """

        self._epic = epic

    @property
    def sedol(self):
        """Gets the sedol of this FundCodesValue.  # noqa: E501

        Security Id used in the UK for clearing purposes. Numbers are assigned by the London Stock Exchange.  # noqa: E501

        :return: The sedol of this FundCodesValue.  # noqa: E501
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this FundCodesValue.

        Security Id used in the UK for clearing purposes. Numbers are assigned by the London Stock Exchange.  # noqa: E501

        :param sedol: The sedol of this FundCodesValue.  # noqa: E501
        :type: str
        """

        self._sedol = sedol

    @property
    def isin(self):
        """Gets the isin of this FundCodesValue.  # noqa: E501

        International Securities Identification Number. The unique id for the security.  # noqa: E501

        :return: The isin of this FundCodesValue.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this FundCodesValue.

        International Securities Identification Number. The unique id for the security.  # noqa: E501

        :param isin: The isin of this FundCodesValue.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def mex(self):
        """Gets the mex of this FundCodesValue.  # noqa: E501

        Unique id for a fund. AKA MEX.  # noqa: E501

        :return: The mex of this FundCodesValue.  # noqa: E501
        :rtype: str
        """
        return self._mex

    @mex.setter
    def mex(self, mex):
        """Sets the mex of this FundCodesValue.

        Unique id for a fund. AKA MEX.  # noqa: E501

        :param mex: The mex of this FundCodesValue.  # noqa: E501
        :type: str
        """

        self._mex = mex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundCodesValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundCodesValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
