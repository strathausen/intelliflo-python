# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'portfolio_category': 'str',
        'product_group': 'str',
        'region_code': 'str',
        'available_plan_purposes_href': 'str',
        'lifecycles_href': 'str',
        'is_tax_qualifying': 'bool',
        'is_wrapper': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'portfolio_category': 'portfolioCategory',
        'product_group': 'productGroup',
        'region_code': 'regionCode',
        'available_plan_purposes_href': 'available_plan_purposes_href',
        'lifecycles_href': 'lifecycles_href',
        'is_tax_qualifying': 'isTaxQualifying',
        'is_wrapper': 'isWrapper'
    }

    def __init__(self, id=None, href=None, name=None, portfolio_category=None, product_group=None, region_code=None, available_plan_purposes_href=None, lifecycles_href=None, is_tax_qualifying=None, is_wrapper=None):  # noqa: E501
        """PlanType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._portfolio_category = None
        self._product_group = None
        self._region_code = None
        self._available_plan_purposes_href = None
        self._lifecycles_href = None
        self._is_tax_qualifying = None
        self._is_wrapper = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if portfolio_category is not None:
            self.portfolio_category = portfolio_category
        if product_group is not None:
            self.product_group = product_group
        if region_code is not None:
            self.region_code = region_code
        if available_plan_purposes_href is not None:
            self.available_plan_purposes_href = available_plan_purposes_href
        if lifecycles_href is not None:
            self.lifecycles_href = lifecycles_href
        if is_tax_qualifying is not None:
            self.is_tax_qualifying = is_tax_qualifying
        if is_wrapper is not None:
            self.is_wrapper = is_wrapper

    @property
    def id(self):
        """Gets the id of this PlanType.  # noqa: E501

        Plan Type unique identifier.  # noqa: E501

        :return: The id of this PlanType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanType.

        Plan Type unique identifier.  # noqa: E501

        :param id: The id of this PlanType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this PlanType.  # noqa: E501

        Plan Type hypermedia link.  # noqa: E501

        :return: The href of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PlanType.

        Plan Type hypermedia link.  # noqa: E501

        :param href: The href of this PlanType.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this PlanType.  # noqa: E501

        Each Plan has a Plan Type which defines which fields are required/relevant.  # noqa: E501

        :return: The name of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlanType.

        Each Plan has a Plan Type which defines which fields are required/relevant.  # noqa: E501

        :param name: The name of this PlanType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def portfolio_category(self):
        """Gets the portfolio_category of this PlanType.  # noqa: E501

        Broad categorisation of the portfolio category the plan belongs to.  # noqa: E501

        :return: The portfolio_category of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_category

    @portfolio_category.setter
    def portfolio_category(self, portfolio_category):
        """Sets the portfolio_category of this PlanType.

        Broad categorisation of the portfolio category the plan belongs to.  # noqa: E501

        :param portfolio_category: The portfolio_category of this PlanType.  # noqa: E501
        :type: str
        """

        self._portfolio_category = portfolio_category

    @property
    def product_group(self):
        """Gets the product_group of this PlanType.  # noqa: E501

        Detailed categorisation of product group name.  # noqa: E501

        :return: The product_group of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._product_group

    @product_group.setter
    def product_group(self, product_group):
        """Sets the product_group of this PlanType.

        Detailed categorisation of product group name.  # noqa: E501

        :param product_group: The product_group of this PlanType.  # noqa: E501
        :type: str
        """

        self._product_group = product_group

    @property
    def region_code(self):
        """Gets the region_code of this PlanType.  # noqa: E501

        Must be a valid ISO country code (ISO 3166-1).  # noqa: E501

        :return: The region_code of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this PlanType.

        Must be a valid ISO country code (ISO 3166-1).  # noqa: E501

        :param region_code: The region_code of this PlanType.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def available_plan_purposes_href(self):
        """Gets the available_plan_purposes_href of this PlanType.  # noqa: E501

        Hypermedia link to associated plan purposes.  # noqa: E501

        :return: The available_plan_purposes_href of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._available_plan_purposes_href

    @available_plan_purposes_href.setter
    def available_plan_purposes_href(self, available_plan_purposes_href):
        """Sets the available_plan_purposes_href of this PlanType.

        Hypermedia link to associated plan purposes.  # noqa: E501

        :param available_plan_purposes_href: The available_plan_purposes_href of this PlanType.  # noqa: E501
        :type: str
        """

        self._available_plan_purposes_href = available_plan_purposes_href

    @property
    def lifecycles_href(self):
        """Gets the lifecycles_href of this PlanType.  # noqa: E501

        Hypermedia link to associated lifecycles.  # noqa: E501

        :return: The lifecycles_href of this PlanType.  # noqa: E501
        :rtype: str
        """
        return self._lifecycles_href

    @lifecycles_href.setter
    def lifecycles_href(self, lifecycles_href):
        """Sets the lifecycles_href of this PlanType.

        Hypermedia link to associated lifecycles.  # noqa: E501

        :param lifecycles_href: The lifecycles_href of this PlanType.  # noqa: E501
        :type: str
        """

        self._lifecycles_href = lifecycles_href

    @property
    def is_tax_qualifying(self):
        """Gets the is_tax_qualifying of this PlanType.  # noqa: E501

        Tax qualifying indicator.  # noqa: E501

        :return: The is_tax_qualifying of this PlanType.  # noqa: E501
        :rtype: bool
        """
        return self._is_tax_qualifying

    @is_tax_qualifying.setter
    def is_tax_qualifying(self, is_tax_qualifying):
        """Sets the is_tax_qualifying of this PlanType.

        Tax qualifying indicator.  # noqa: E501

        :param is_tax_qualifying: The is_tax_qualifying of this PlanType.  # noqa: E501
        :type: bool
        """

        self._is_tax_qualifying = is_tax_qualifying

    @property
    def is_wrapper(self):
        """Gets the is_wrapper of this PlanType.  # noqa: E501

        Wrapper indicator.  # noqa: E501

        :return: The is_wrapper of this PlanType.  # noqa: E501
        :rtype: bool
        """
        return self._is_wrapper

    @is_wrapper.setter
    def is_wrapper(self, is_wrapper):
        """Sets the is_wrapper of this PlanType.

        Wrapper indicator.  # noqa: E501

        :param is_wrapper: The is_wrapper of this PlanType.  # noqa: E501
        :type: bool
        """

        self._is_wrapper = is_wrapper

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
