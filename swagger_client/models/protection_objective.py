# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_objective import BaseObjective  # noqa: F401,E501

class ProtectionObjective(BaseObjective):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cover_amount': 'CurrencyValue',
        'start_on': 'datetime',
        'cover_frequency': 'str',
        'term': 'int',
        'is_whole_of_life': 'bool'
    }
    if hasattr(BaseObjective, "swagger_types"):
        swagger_types.update(BaseObjective.swagger_types)

    attribute_map = {
        'cover_amount': 'coverAmount',
        'start_on': 'startOn',
        'cover_frequency': 'coverFrequency',
        'term': 'term',
        'is_whole_of_life': 'isWholeOfLife'
    }
    if hasattr(BaseObjective, "attribute_map"):
        attribute_map.update(BaseObjective.attribute_map)

    def __init__(self, cover_amount=None, start_on=None, cover_frequency=None, term=None, is_whole_of_life=None, *args, **kwargs):  # noqa: E501
        """ProtectionObjective - a model defined in Swagger"""  # noqa: E501
        self._cover_amount = None
        self._start_on = None
        self._cover_frequency = None
        self._term = None
        self._is_whole_of_life = None
        self.discriminator = None
        if cover_amount is not None:
            self.cover_amount = cover_amount
        if start_on is not None:
            self.start_on = start_on
        if cover_frequency is not None:
            self.cover_frequency = cover_frequency
        if term is not None:
            self.term = term
        if is_whole_of_life is not None:
            self.is_whole_of_life = is_whole_of_life
        BaseObjective.__init__(self, *args, **kwargs)

    @property
    def cover_amount(self):
        """Gets the cover_amount of this ProtectionObjective.  # noqa: E501


        :return: The cover_amount of this ProtectionObjective.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._cover_amount

    @cover_amount.setter
    def cover_amount(self, cover_amount):
        """Sets the cover_amount of this ProtectionObjective.


        :param cover_amount: The cover_amount of this ProtectionObjective.  # noqa: E501
        :type: CurrencyValue
        """

        self._cover_amount = cover_amount

    @property
    def start_on(self):
        """Gets the start_on of this ProtectionObjective.  # noqa: E501

        Start date of the protection.  # noqa: E501

        :return: The start_on of this ProtectionObjective.  # noqa: E501
        :rtype: datetime
        """
        return self._start_on

    @start_on.setter
    def start_on(self, start_on):
        """Sets the start_on of this ProtectionObjective.

        Start date of the protection.  # noqa: E501

        :param start_on: The start_on of this ProtectionObjective.  # noqa: E501
        :type: datetime
        """

        self._start_on = start_on

    @property
    def cover_frequency(self):
        """Gets the cover_frequency of this ProtectionObjective.  # noqa: E501

        Cover frequency of the protection.  # noqa: E501

        :return: The cover_frequency of this ProtectionObjective.  # noqa: E501
        :rtype: str
        """
        return self._cover_frequency

    @cover_frequency.setter
    def cover_frequency(self, cover_frequency):
        """Sets the cover_frequency of this ProtectionObjective.

        Cover frequency of the protection.  # noqa: E501

        :param cover_frequency: The cover_frequency of this ProtectionObjective.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Lumpsum", "Monthly", "Annually"]  # noqa: E501
        if cover_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `cover_frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(cover_frequency, allowed_values)
            )

        self._cover_frequency = cover_frequency

    @property
    def term(self):
        """Gets the term of this ProtectionObjective.  # noqa: E501

        Protection term in months  # noqa: E501

        :return: The term of this ProtectionObjective.  # noqa: E501
        :rtype: int
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this ProtectionObjective.

        Protection term in months  # noqa: E501

        :param term: The term of this ProtectionObjective.  # noqa: E501
        :type: int
        """

        self._term = term

    @property
    def is_whole_of_life(self):
        """Gets the is_whole_of_life of this ProtectionObjective.  # noqa: E501

        Indicates whether the protection is for whole of life.  # noqa: E501

        :return: The is_whole_of_life of this ProtectionObjective.  # noqa: E501
        :rtype: bool
        """
        return self._is_whole_of_life

    @is_whole_of_life.setter
    def is_whole_of_life(self, is_whole_of_life):
        """Sets the is_whole_of_life of this ProtectionObjective.

        Indicates whether the protection is for whole of life.  # noqa: E501

        :param is_whole_of_life: The is_whole_of_life of this ProtectionObjective.  # noqa: E501
        :type: bool
        """

        self._is_whole_of_life = is_whole_of_life

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectionObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionObjective):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
