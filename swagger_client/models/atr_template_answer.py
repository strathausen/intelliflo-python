# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtrTemplateAnswer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'weight': 'int',
        'category_answer_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'weight': 'weight',
        'category_answer_value': 'categoryAnswerValue'
    }

    def __init__(self, id=None, text=None, weight=None, category_answer_value=None):  # noqa: E501
        """AtrTemplateAnswer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._text = None
        self._weight = None
        self._category_answer_value = None
        self.discriminator = None
        self.id = id
        self.text = text
        self.weight = weight
        if category_answer_value is not None:
            self.category_answer_value = category_answer_value

    @property
    def id(self):
        """Gets the id of this AtrTemplateAnswer.  # noqa: E501

        ATR answer option identifier.  # noqa: E501

        :return: The id of this AtrTemplateAnswer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtrTemplateAnswer.

        ATR answer option identifier.  # noqa: E501

        :param id: The id of this AtrTemplateAnswer.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self):
        """Gets the text of this AtrTemplateAnswer.  # noqa: E501

        Answer option text.  # noqa: E501

        :return: The text of this AtrTemplateAnswer.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AtrTemplateAnswer.

        Answer option text.  # noqa: E501

        :param text: The text of this AtrTemplateAnswer.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def weight(self):
        """Gets the weight of this AtrTemplateAnswer.  # noqa: E501

        Answer option's weight.  # noqa: E501

        :return: The weight of this AtrTemplateAnswer.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this AtrTemplateAnswer.

        Answer option's weight.  # noqa: E501

        :param weight: The weight of this AtrTemplateAnswer.  # noqa: E501
        :type: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def category_answer_value(self):
        """Gets the category_answer_value of this AtrTemplateAnswer.  # noqa: E501

        ATR question category answer value.  # noqa: E501

        :return: The category_answer_value of this AtrTemplateAnswer.  # noqa: E501
        :rtype: str
        """
        return self._category_answer_value

    @category_answer_value.setter
    def category_answer_value(self, category_answer_value):
        """Sets the category_answer_value of this AtrTemplateAnswer.

        ATR question category answer value.  # noqa: E501

        :param category_answer_value: The category_answer_value of this AtrTemplateAnswer.  # noqa: E501
        :type: str
        """

        self._category_answer_value = category_answer_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtrTemplateAnswer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtrTemplateAnswer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
