# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InterestSchemeValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rate': 'float',
        'type': 'str',
        'collar_rate': 'float',
        'base_rate': 'str',
        'scheme_rate': 'float',
        'scheme_ends_on': 'datetime',
        'rate_apr': 'float'
    }

    attribute_map = {
        'rate': 'rate',
        'type': 'type',
        'collar_rate': 'collarRate',
        'base_rate': 'baseRate',
        'scheme_rate': 'schemeRate',
        'scheme_ends_on': 'schemeEndsOn',
        'rate_apr': 'rateAPR'
    }

    def __init__(self, rate=None, type='null', collar_rate=None, base_rate='null', scheme_rate=None, scheme_ends_on=None, rate_apr=None):  # noqa: E501
        """InterestSchemeValue - a model defined in Swagger"""  # noqa: E501
        self._rate = None
        self._type = None
        self._collar_rate = None
        self._base_rate = None
        self._scheme_rate = None
        self._scheme_ends_on = None
        self._rate_apr = None
        self.discriminator = None
        if rate is not None:
            self.rate = rate
        if type is not None:
            self.type = type
        if collar_rate is not None:
            self.collar_rate = collar_rate
        if base_rate is not None:
            self.base_rate = base_rate
        if scheme_rate is not None:
            self.scheme_rate = scheme_rate
        if scheme_ends_on is not None:
            self.scheme_ends_on = scheme_ends_on
        if rate_apr is not None:
            self.rate_apr = rate_apr

    @property
    def rate(self):
        """Gets the rate of this InterestSchemeValue.  # noqa: E501

        The Lender's standard product rate.  # noqa: E501

        :return: The rate of this InterestSchemeValue.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this InterestSchemeValue.

        The Lender's standard product rate.  # noqa: E501

        :param rate: The rate of this InterestSchemeValue.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def type(self):
        """Gets the type of this InterestSchemeValue.  # noqa: E501

        Type of interest rate product.  # noqa: E501

        :return: The type of this InterestSchemeValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InterestSchemeValue.

        Type of interest rate product.  # noqa: E501

        :param type: The type of this InterestSchemeValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Capped", "Discount", "Fixed", "Flexible", "LIBOR", "OffsetRate", "Standard", "Tracker", "Variable"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def collar_rate(self):
        """Gets the collar_rate of this InterestSchemeValue.  # noqa: E501

        Represents the interest rate below which a Lender's variable interest rate will not drop.  # noqa: E501

        :return: The collar_rate of this InterestSchemeValue.  # noqa: E501
        :rtype: float
        """
        return self._collar_rate

    @collar_rate.setter
    def collar_rate(self, collar_rate):
        """Sets the collar_rate of this InterestSchemeValue.

        Represents the interest rate below which a Lender's variable interest rate will not drop.  # noqa: E501

        :param collar_rate: The collar_rate of this InterestSchemeValue.  # noqa: E501
        :type: float
        """

        self._collar_rate = collar_rate

    @property
    def base_rate(self):
        """Gets the base_rate of this InterestSchemeValue.  # noqa: E501

        The interest rate the Bank of England charges other banks and lenders that wish to borrow money.  # noqa: E501

        :return: The base_rate of this InterestSchemeValue.  # noqa: E501
        :rtype: str
        """
        return self._base_rate

    @base_rate.setter
    def base_rate(self, base_rate):
        """Sets the base_rate of this InterestSchemeValue.

        The interest rate the Bank of England charges other banks and lenders that wish to borrow money.  # noqa: E501

        :param base_rate: The base_rate of this InterestSchemeValue.  # noqa: E501
        :type: str
        """

        self._base_rate = base_rate

    @property
    def scheme_rate(self):
        """Gets the scheme_rate of this InterestSchemeValue.  # noqa: E501

        A special rate that overrides the standard rate until the scheme ends.  # noqa: E501

        :return: The scheme_rate of this InterestSchemeValue.  # noqa: E501
        :rtype: float
        """
        return self._scheme_rate

    @scheme_rate.setter
    def scheme_rate(self, scheme_rate):
        """Sets the scheme_rate of this InterestSchemeValue.

        A special rate that overrides the standard rate until the scheme ends.  # noqa: E501

        :param scheme_rate: The scheme_rate of this InterestSchemeValue.  # noqa: E501
        :type: float
        """

        self._scheme_rate = scheme_rate

    @property
    def scheme_ends_on(self):
        """Gets the scheme_ends_on of this InterestSchemeValue.  # noqa: E501

        The date on which the scheme rate reverts to the standard rate.  # noqa: E501

        :return: The scheme_ends_on of this InterestSchemeValue.  # noqa: E501
        :rtype: datetime
        """
        return self._scheme_ends_on

    @scheme_ends_on.setter
    def scheme_ends_on(self, scheme_ends_on):
        """Sets the scheme_ends_on of this InterestSchemeValue.

        The date on which the scheme rate reverts to the standard rate.  # noqa: E501

        :param scheme_ends_on: The scheme_ends_on of this InterestSchemeValue.  # noqa: E501
        :type: datetime
        """

        self._scheme_ends_on = scheme_ends_on

    @property
    def rate_apr(self):
        """Gets the rate_apr of this InterestSchemeValue.  # noqa: E501

        Interest Rate APR.  # noqa: E501

        :return: The rate_apr of this InterestSchemeValue.  # noqa: E501
        :rtype: float
        """
        return self._rate_apr

    @rate_apr.setter
    def rate_apr(self, rate_apr):
        """Sets the rate_apr of this InterestSchemeValue.

        Interest Rate APR.  # noqa: E501

        :param rate_apr: The rate_apr of this InterestSchemeValue.  # noqa: E501
        :type: float
        """

        self._rate_apr = rate_apr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterestSchemeValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterestSchemeValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
