# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'type': 'str',
        'value': 'str',
        'is_default': 'bool',
        'note': 'str'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'type': 'type',
        'value': 'value',
        'is_default': 'isDefault',
        'note': 'note'
    }

    def __init__(self, id=None, href=None, type=None, value=None, is_default=None, note='null'):  # noqa: E501
        """ContactDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._type = None
        self._value = None
        self._is_default = None
        self._note = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.type = type
        self.value = value
        if is_default is not None:
            self.is_default = is_default
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this ContactDetail.  # noqa: E501


        :return: The id of this ContactDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactDetail.


        :param id: The id of this ContactDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ContactDetail.  # noqa: E501


        :return: The href of this ContactDetail.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ContactDetail.


        :param href: The href of this ContactDetail.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def type(self):
        """Gets the type of this ContactDetail.  # noqa: E501

        Contact type  # noqa: E501

        :return: The type of this ContactDetail.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactDetail.

        Contact type  # noqa: E501

        :param type: The type of this ContactDetail.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Telephone", "Fax", "Email", "Assistant", "Business", "Business2", "BusinessFax", "Callback", "Car", "AlternativeHome", "ISDN", "Mobile", "Other", "OtherFax", "Pager", "Primary", "Radio", "Telex", "Home", "WebSite", "SocialMedia", "Skype", "Lync"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ContactDetail.  # noqa: E501

        Contact value  # noqa: E501

        :return: The value of this ContactDetail.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContactDetail.

        Contact value  # noqa: E501

        :param value: The value of this ContactDetail.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def is_default(self):
        """Gets the is_default of this ContactDetail.  # noqa: E501

        Use as default contact  # noqa: E501

        :return: The is_default of this ContactDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ContactDetail.

        Use as default contact  # noqa: E501

        :param is_default: The is_default of this ContactDetail.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def note(self):
        """Gets the note of this ContactDetail.  # noqa: E501

        Additional notes  # noqa: E501

        :return: The note of this ContactDetail.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ContactDetail.

        Additional notes  # noqa: E501

        :param note: The note of this ContactDetail.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
