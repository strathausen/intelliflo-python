# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValuationBatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'product_provider': 'NamedProductProviderRef',
        'tenant': 'TenantRef3',
        'planmatch_includeportalreference': 'bool',
        'planmatch_normalised': 'bool',
        'created_at': 'datetime',
        'state': 'str',
        'items_imported': 'int',
        'items_failed': 'int',
        'created_by': 'NamedUserRef'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'product_provider': 'productProvider',
        'tenant': 'tenant',
        'planmatch_includeportalreference': 'planmatch_includeportalreference',
        'planmatch_normalised': 'planmatch_normalised',
        'created_at': 'createdAt',
        'state': 'state',
        'items_imported': 'itemsImported',
        'items_failed': 'itemsFailed',
        'created_by': 'createdBy'
    }

    def __init__(self, id=None, href=None, product_provider=None, tenant=None, planmatch_includeportalreference=None, planmatch_normalised=None, created_at=None, state=None, items_imported=None, items_failed=None, created_by=None):  # noqa: E501
        """ValuationBatch - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._product_provider = None
        self._tenant = None
        self._planmatch_includeportalreference = None
        self._planmatch_normalised = None
        self._created_at = None
        self._state = None
        self._items_imported = None
        self._items_failed = None
        self._created_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if product_provider is not None:
            self.product_provider = product_provider
        if tenant is not None:
            self.tenant = tenant
        if planmatch_includeportalreference is not None:
            self.planmatch_includeportalreference = planmatch_includeportalreference
        if planmatch_normalised is not None:
            self.planmatch_normalised = planmatch_normalised
        if created_at is not None:
            self.created_at = created_at
        if state is not None:
            self.state = state
        if items_imported is not None:
            self.items_imported = items_imported
        if items_failed is not None:
            self.items_failed = items_failed
        if created_by is not None:
            self.created_by = created_by

    @property
    def id(self):
        """Gets the id of this ValuationBatch.  # noqa: E501


        :return: The id of this ValuationBatch.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ValuationBatch.


        :param id: The id of this ValuationBatch.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ValuationBatch.  # noqa: E501


        :return: The href of this ValuationBatch.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ValuationBatch.


        :param href: The href of this ValuationBatch.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def product_provider(self):
        """Gets the product_provider of this ValuationBatch.  # noqa: E501


        :return: The product_provider of this ValuationBatch.  # noqa: E501
        :rtype: NamedProductProviderRef
        """
        return self._product_provider

    @product_provider.setter
    def product_provider(self, product_provider):
        """Sets the product_provider of this ValuationBatch.


        :param product_provider: The product_provider of this ValuationBatch.  # noqa: E501
        :type: NamedProductProviderRef
        """

        self._product_provider = product_provider

    @property
    def tenant(self):
        """Gets the tenant of this ValuationBatch.  # noqa: E501


        :return: The tenant of this ValuationBatch.  # noqa: E501
        :rtype: TenantRef3
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this ValuationBatch.


        :param tenant: The tenant of this ValuationBatch.  # noqa: E501
        :type: TenantRef3
        """

        self._tenant = tenant

    @property
    def planmatch_includeportalreference(self):
        """Gets the planmatch_includeportalreference of this ValuationBatch.  # noqa: E501

        Determines whether to include the portal reference in matching algorithm.  # noqa: E501

        :return: The planmatch_includeportalreference of this ValuationBatch.  # noqa: E501
        :rtype: bool
        """
        return self._planmatch_includeportalreference

    @planmatch_includeportalreference.setter
    def planmatch_includeportalreference(self, planmatch_includeportalreference):
        """Sets the planmatch_includeportalreference of this ValuationBatch.

        Determines whether to include the portal reference in matching algorithm.  # noqa: E501

        :param planmatch_includeportalreference: The planmatch_includeportalreference of this ValuationBatch.  # noqa: E501
        :type: bool
        """

        self._planmatch_includeportalreference = planmatch_includeportalreference

    @property
    def planmatch_normalised(self):
        """Gets the planmatch_normalised of this ValuationBatch.  # noqa: E501

        Determines whether to normalize the formats of values used in the matching algorithm.  # noqa: E501

        :return: The planmatch_normalised of this ValuationBatch.  # noqa: E501
        :rtype: bool
        """
        return self._planmatch_normalised

    @planmatch_normalised.setter
    def planmatch_normalised(self, planmatch_normalised):
        """Sets the planmatch_normalised of this ValuationBatch.

        Determines whether to normalize the formats of values used in the matching algorithm.  # noqa: E501

        :param planmatch_normalised: The planmatch_normalised of this ValuationBatch.  # noqa: E501
        :type: bool
        """

        self._planmatch_normalised = planmatch_normalised

    @property
    def created_at(self):
        """Gets the created_at of this ValuationBatch.  # noqa: E501

        Valuation batch enqueued date time  # noqa: E501

        :return: The created_at of this ValuationBatch.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ValuationBatch.

        Valuation batch enqueued date time  # noqa: E501

        :param created_at: The created_at of this ValuationBatch.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def state(self):
        """Gets the state of this ValuationBatch.  # noqa: E501

        Current status of the valuation batch  # noqa: E501

        :return: The state of this ValuationBatch.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ValuationBatch.

        Current status of the valuation batch  # noqa: E501

        :param state: The state of this ValuationBatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["Queued", "InProgress", "Failed", "Completed", "DeleteInProgress", "DeleteFailed", "Deleted", "Expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def items_imported(self):
        """Gets the items_imported of this ValuationBatch.  # noqa: E501

        Number of items imported successfully  # noqa: E501

        :return: The items_imported of this ValuationBatch.  # noqa: E501
        :rtype: int
        """
        return self._items_imported

    @items_imported.setter
    def items_imported(self, items_imported):
        """Sets the items_imported of this ValuationBatch.

        Number of items imported successfully  # noqa: E501

        :param items_imported: The items_imported of this ValuationBatch.  # noqa: E501
        :type: int
        """

        self._items_imported = items_imported

    @property
    def items_failed(self):
        """Gets the items_failed of this ValuationBatch.  # noqa: E501

        Number of items either not matched or failed to import  # noqa: E501

        :return: The items_failed of this ValuationBatch.  # noqa: E501
        :rtype: int
        """
        return self._items_failed

    @items_failed.setter
    def items_failed(self, items_failed):
        """Sets the items_failed of this ValuationBatch.

        Number of items either not matched or failed to import  # noqa: E501

        :param items_failed: The items_failed of this ValuationBatch.  # noqa: E501
        :type: int
        """

        self._items_failed = items_failed

    @property
    def created_by(self):
        """Gets the created_by of this ValuationBatch.  # noqa: E501


        :return: The created_by of this ValuationBatch.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ValuationBatch.


        :param created_by: The created_by of this ValuationBatch.  # noqa: E501
        :type: NamedUserRef
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValuationBatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValuationBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
