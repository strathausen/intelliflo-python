# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskActivityDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'subject': 'str',
        'description': 'str',
        'activity_type': 'NamedActivityCategoryTypeReference',
        'priority': 'NamedActivityPriorityReference',
        'status': 'str',
        'shown_in_diary': 'bool',
        'shown_in_portal': 'bool',
        'reference': 'str',
        'completion': 'TaskActivityCompletion',
        'related_to': 'list[ActivityRelatedEntity]',
        'linked_entity': 'ActivityLinkedEntity',
        'assigned_by': 'NamedUserReference',
        'assigned_to': 'TaskAssignment',
        'starts_at': 'datetime',
        'due_at': 'datetime',
        'duration': 'TaskDurationValue',
        'billing': 'TaskBillingValue',
        'cost': 'TaskCostValue',
        'recurrence': 'ActivityRecurrenceValue',
        'created_by_app': 'NamedAppReference',
        'created_by_user': 'NamedUserReference',
        'created_at': 'datetime',
        'updated_by_app': 'NamedAppReference',
        'updated_by_user': 'NamedUserReference',
        'updated_at': 'datetime',
        'properties': 'list[ModelProperty]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'subject': 'subject',
        'description': 'description',
        'activity_type': 'activityType',
        'priority': 'priority',
        'status': 'status',
        'shown_in_diary': 'shownInDiary',
        'shown_in_portal': 'shownInPortal',
        'reference': 'reference',
        'completion': 'completion',
        'related_to': 'relatedTo',
        'linked_entity': 'linkedEntity',
        'assigned_by': 'assignedBy',
        'assigned_to': 'assignedTo',
        'starts_at': 'startsAt',
        'due_at': 'dueAt',
        'duration': 'duration',
        'billing': 'billing',
        'cost': 'cost',
        'recurrence': 'recurrence',
        'created_by_app': 'createdByApp',
        'created_by_user': 'createdByUser',
        'created_at': 'createdAt',
        'updated_by_app': 'updatedByApp',
        'updated_by_user': 'updatedByUser',
        'updated_at': 'updatedAt',
        'properties': 'properties'
    }

    def __init__(self, id=None, href=None, subject=None, description=None, activity_type=None, priority=None, status=None, shown_in_diary=False, shown_in_portal=False, reference=None, completion=None, related_to=None, linked_entity=None, assigned_by=None, assigned_to=None, starts_at=None, due_at=None, duration=None, billing=None, cost=None, recurrence=None, created_by_app=None, created_by_user=None, created_at=None, updated_by_app=None, updated_by_user=None, updated_at=None, properties=None):  # noqa: E501
        """TaskActivityDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._subject = None
        self._description = None
        self._activity_type = None
        self._priority = None
        self._status = None
        self._shown_in_diary = None
        self._shown_in_portal = None
        self._reference = None
        self._completion = None
        self._related_to = None
        self._linked_entity = None
        self._assigned_by = None
        self._assigned_to = None
        self._starts_at = None
        self._due_at = None
        self._duration = None
        self._billing = None
        self._cost = None
        self._recurrence = None
        self._created_by_app = None
        self._created_by_user = None
        self._created_at = None
        self._updated_by_app = None
        self._updated_by_user = None
        self._updated_at = None
        self._properties = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if subject is not None:
            self.subject = subject
        if description is not None:
            self.description = description
        self.activity_type = activity_type
        if priority is not None:
            self.priority = priority
        if status is not None:
            self.status = status
        if shown_in_diary is not None:
            self.shown_in_diary = shown_in_diary
        if shown_in_portal is not None:
            self.shown_in_portal = shown_in_portal
        if reference is not None:
            self.reference = reference
        if completion is not None:
            self.completion = completion
        if related_to is not None:
            self.related_to = related_to
        if linked_entity is not None:
            self.linked_entity = linked_entity
        if assigned_by is not None:
            self.assigned_by = assigned_by
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if starts_at is not None:
            self.starts_at = starts_at
        self.due_at = due_at
        if duration is not None:
            self.duration = duration
        if billing is not None:
            self.billing = billing
        if cost is not None:
            self.cost = cost
        if recurrence is not None:
            self.recurrence = recurrence
        if created_by_app is not None:
            self.created_by_app = created_by_app
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if created_at is not None:
            self.created_at = created_at
        if updated_by_app is not None:
            self.updated_by_app = updated_by_app
        if updated_by_user is not None:
            self.updated_by_user = updated_by_user
        if updated_at is not None:
            self.updated_at = updated_at
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this TaskActivityDocument.  # noqa: E501

        The unique identifier for the task.  # noqa: E501

        :return: The id of this TaskActivityDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskActivityDocument.

        The unique identifier for the task.  # noqa: E501

        :param id: The id of this TaskActivityDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this TaskActivityDocument.  # noqa: E501

        The hypertext reference to the task.  # noqa: E501

        :return: The href of this TaskActivityDocument.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this TaskActivityDocument.

        The hypertext reference to the task.  # noqa: E501

        :param href: The href of this TaskActivityDocument.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def subject(self):
        """Gets the subject of this TaskActivityDocument.  # noqa: E501

        The subject of the task.  # noqa: E501

        :return: The subject of this TaskActivityDocument.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TaskActivityDocument.

        The subject of the task.  # noqa: E501

        :param subject: The subject of this TaskActivityDocument.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def description(self):
        """Gets the description of this TaskActivityDocument.  # noqa: E501

        The description of the task.  # noqa: E501

        :return: The description of this TaskActivityDocument.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskActivityDocument.

        The description of the task.  # noqa: E501

        :param description: The description of this TaskActivityDocument.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def activity_type(self):
        """Gets the activity_type of this TaskActivityDocument.  # noqa: E501


        :return: The activity_type of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedActivityCategoryTypeReference
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this TaskActivityDocument.


        :param activity_type: The activity_type of this TaskActivityDocument.  # noqa: E501
        :type: NamedActivityCategoryTypeReference
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501

        self._activity_type = activity_type

    @property
    def priority(self):
        """Gets the priority of this TaskActivityDocument.  # noqa: E501


        :return: The priority of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedActivityPriorityReference
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskActivityDocument.


        :param priority: The priority of this TaskActivityDocument.  # noqa: E501
        :type: NamedActivityPriorityReference
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this TaskActivityDocument.  # noqa: E501

        The current status of the task. Valid values are: 'NotStarted', 'WorkInProgress', 'Incomplete', 'Complete', 'WaitingForResponse'  # noqa: E501

        :return: The status of this TaskActivityDocument.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskActivityDocument.

        The current status of the task. Valid values are: 'NotStarted', 'WorkInProgress', 'Incomplete', 'Complete', 'WaitingForResponse'  # noqa: E501

        :param status: The status of this TaskActivityDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["Incomplete", "Complete", "WorkInProgress", "WaitingForResponse", "NotStarted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def shown_in_diary(self):
        """Gets the shown_in_diary of this TaskActivityDocument.  # noqa: E501

        Flag indicating if the task should be displayed in user diary.  # noqa: E501

        :return: The shown_in_diary of this TaskActivityDocument.  # noqa: E501
        :rtype: bool
        """
        return self._shown_in_diary

    @shown_in_diary.setter
    def shown_in_diary(self, shown_in_diary):
        """Sets the shown_in_diary of this TaskActivityDocument.

        Flag indicating if the task should be displayed in user diary.  # noqa: E501

        :param shown_in_diary: The shown_in_diary of this TaskActivityDocument.  # noqa: E501
        :type: bool
        """

        self._shown_in_diary = shown_in_diary

    @property
    def shown_in_portal(self):
        """Gets the shown_in_portal of this TaskActivityDocument.  # noqa: E501

        Flag indicating if the task  should be displayed in portal.  # noqa: E501

        :return: The shown_in_portal of this TaskActivityDocument.  # noqa: E501
        :rtype: bool
        """
        return self._shown_in_portal

    @shown_in_portal.setter
    def shown_in_portal(self, shown_in_portal):
        """Sets the shown_in_portal of this TaskActivityDocument.

        Flag indicating if the task  should be displayed in portal.  # noqa: E501

        :param shown_in_portal: The shown_in_portal of this TaskActivityDocument.  # noqa: E501
        :type: bool
        """

        self._shown_in_portal = shown_in_portal

    @property
    def reference(self):
        """Gets the reference of this TaskActivityDocument.  # noqa: E501

        A reference of the task.  # noqa: E501

        :return: The reference of this TaskActivityDocument.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TaskActivityDocument.

        A reference of the task.  # noqa: E501

        :param reference: The reference of this TaskActivityDocument.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def completion(self):
        """Gets the completion of this TaskActivityDocument.  # noqa: E501


        :return: The completion of this TaskActivityDocument.  # noqa: E501
        :rtype: TaskActivityCompletion
        """
        return self._completion

    @completion.setter
    def completion(self, completion):
        """Sets the completion of this TaskActivityDocument.


        :param completion: The completion of this TaskActivityDocument.  # noqa: E501
        :type: TaskActivityCompletion
        """

        self._completion = completion

    @property
    def related_to(self):
        """Gets the related_to of this TaskActivityDocument.  # noqa: E501

        The list of entities the task is related to.  # noqa: E501

        :return: The related_to of this TaskActivityDocument.  # noqa: E501
        :rtype: list[ActivityRelatedEntity]
        """
        return self._related_to

    @related_to.setter
    def related_to(self, related_to):
        """Sets the related_to of this TaskActivityDocument.

        The list of entities the task is related to.  # noqa: E501

        :param related_to: The related_to of this TaskActivityDocument.  # noqa: E501
        :type: list[ActivityRelatedEntity]
        """

        self._related_to = related_to

    @property
    def linked_entity(self):
        """Gets the linked_entity of this TaskActivityDocument.  # noqa: E501


        :return: The linked_entity of this TaskActivityDocument.  # noqa: E501
        :rtype: ActivityLinkedEntity
        """
        return self._linked_entity

    @linked_entity.setter
    def linked_entity(self, linked_entity):
        """Sets the linked_entity of this TaskActivityDocument.


        :param linked_entity: The linked_entity of this TaskActivityDocument.  # noqa: E501
        :type: ActivityLinkedEntity
        """

        self._linked_entity = linked_entity

    @property
    def assigned_by(self):
        """Gets the assigned_by of this TaskActivityDocument.  # noqa: E501


        :return: The assigned_by of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedUserReference
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this TaskActivityDocument.


        :param assigned_by: The assigned_by of this TaskActivityDocument.  # noqa: E501
        :type: NamedUserReference
        """

        self._assigned_by = assigned_by

    @property
    def assigned_to(self):
        """Gets the assigned_to of this TaskActivityDocument.  # noqa: E501


        :return: The assigned_to of this TaskActivityDocument.  # noqa: E501
        :rtype: TaskAssignment
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this TaskActivityDocument.


        :param assigned_to: The assigned_to of this TaskActivityDocument.  # noqa: E501
        :type: TaskAssignment
        """

        self._assigned_to = assigned_to

    @property
    def starts_at(self):
        """Gets the starts_at of this TaskActivityDocument.  # noqa: E501

        The date the task is scheduled to start.  # noqa: E501

        :return: The starts_at of this TaskActivityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this TaskActivityDocument.

        The date the task is scheduled to start.  # noqa: E501

        :param starts_at: The starts_at of this TaskActivityDocument.  # noqa: E501
        :type: datetime
        """

        self._starts_at = starts_at

    @property
    def due_at(self):
        """Gets the due_at of this TaskActivityDocument.  # noqa: E501

        The date the task is due to be completed.  # noqa: E501

        :return: The due_at of this TaskActivityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this TaskActivityDocument.

        The date the task is due to be completed.  # noqa: E501

        :param due_at: The due_at of this TaskActivityDocument.  # noqa: E501
        :type: datetime
        """
        if due_at is None:
            raise ValueError("Invalid value for `due_at`, must not be `None`")  # noqa: E501

        self._due_at = due_at

    @property
    def duration(self):
        """Gets the duration of this TaskActivityDocument.  # noqa: E501


        :return: The duration of this TaskActivityDocument.  # noqa: E501
        :rtype: TaskDurationValue
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TaskActivityDocument.


        :param duration: The duration of this TaskActivityDocument.  # noqa: E501
        :type: TaskDurationValue
        """

        self._duration = duration

    @property
    def billing(self):
        """Gets the billing of this TaskActivityDocument.  # noqa: E501


        :return: The billing of this TaskActivityDocument.  # noqa: E501
        :rtype: TaskBillingValue
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this TaskActivityDocument.


        :param billing: The billing of this TaskActivityDocument.  # noqa: E501
        :type: TaskBillingValue
        """

        self._billing = billing

    @property
    def cost(self):
        """Gets the cost of this TaskActivityDocument.  # noqa: E501


        :return: The cost of this TaskActivityDocument.  # noqa: E501
        :rtype: TaskCostValue
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this TaskActivityDocument.


        :param cost: The cost of this TaskActivityDocument.  # noqa: E501
        :type: TaskCostValue
        """

        self._cost = cost

    @property
    def recurrence(self):
        """Gets the recurrence of this TaskActivityDocument.  # noqa: E501


        :return: The recurrence of this TaskActivityDocument.  # noqa: E501
        :rtype: ActivityRecurrenceValue
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this TaskActivityDocument.


        :param recurrence: The recurrence of this TaskActivityDocument.  # noqa: E501
        :type: ActivityRecurrenceValue
        """

        self._recurrence = recurrence

    @property
    def created_by_app(self):
        """Gets the created_by_app of this TaskActivityDocument.  # noqa: E501


        :return: The created_by_app of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedAppReference
        """
        return self._created_by_app

    @created_by_app.setter
    def created_by_app(self, created_by_app):
        """Sets the created_by_app of this TaskActivityDocument.


        :param created_by_app: The created_by_app of this TaskActivityDocument.  # noqa: E501
        :type: NamedAppReference
        """

        self._created_by_app = created_by_app

    @property
    def created_by_user(self):
        """Gets the created_by_user of this TaskActivityDocument.  # noqa: E501


        :return: The created_by_user of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedUserReference
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this TaskActivityDocument.


        :param created_by_user: The created_by_user of this TaskActivityDocument.  # noqa: E501
        :type: NamedUserReference
        """

        self._created_by_user = created_by_user

    @property
    def created_at(self):
        """Gets the created_at of this TaskActivityDocument.  # noqa: E501

        The date the task was created.  # noqa: E501

        :return: The created_at of this TaskActivityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskActivityDocument.

        The date the task was created.  # noqa: E501

        :param created_at: The created_at of this TaskActivityDocument.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_by_app(self):
        """Gets the updated_by_app of this TaskActivityDocument.  # noqa: E501


        :return: The updated_by_app of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedAppReference
        """
        return self._updated_by_app

    @updated_by_app.setter
    def updated_by_app(self, updated_by_app):
        """Sets the updated_by_app of this TaskActivityDocument.


        :param updated_by_app: The updated_by_app of this TaskActivityDocument.  # noqa: E501
        :type: NamedAppReference
        """

        self._updated_by_app = updated_by_app

    @property
    def updated_by_user(self):
        """Gets the updated_by_user of this TaskActivityDocument.  # noqa: E501


        :return: The updated_by_user of this TaskActivityDocument.  # noqa: E501
        :rtype: NamedUserReference
        """
        return self._updated_by_user

    @updated_by_user.setter
    def updated_by_user(self, updated_by_user):
        """Sets the updated_by_user of this TaskActivityDocument.


        :param updated_by_user: The updated_by_user of this TaskActivityDocument.  # noqa: E501
        :type: NamedUserReference
        """

        self._updated_by_user = updated_by_user

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskActivityDocument.  # noqa: E501

        The date the task was last updated.  # noqa: E501

        :return: The updated_at of this TaskActivityDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskActivityDocument.

        The date the task was last updated.  # noqa: E501

        :param updated_at: The updated_at of this TaskActivityDocument.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def properties(self):
        """Gets the properties of this TaskActivityDocument.  # noqa: E501

        Properties  # noqa: E501

        :return: The properties of this TaskActivityDocument.  # noqa: E501
        :rtype: list[ModelProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TaskActivityDocument.

        Properties  # noqa: E501

        :param properties: The properties of this TaskActivityDocument.  # noqa: E501
        :type: list[ModelProperty]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskActivityDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskActivityDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
