# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressDetailsValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line1': 'str',
        'line2': 'str',
        'line3': 'str',
        'line4': 'str',
        'locality': 'str',
        'postal_code': 'str',
        'country': 'CountryValue',
        'county': 'CountyValue'
    }

    attribute_map = {
        'line1': 'line1',
        'line2': 'line2',
        'line3': 'line3',
        'line4': 'line4',
        'locality': 'locality',
        'postal_code': 'postalCode',
        'country': 'country',
        'county': 'county'
    }

    def __init__(self, line1=None, line2='null', line3='null', line4='null', locality='null', postal_code='null', country=None, county=None):  # noqa: E501
        """AddressDetailsValue - a model defined in Swagger"""  # noqa: E501
        self._line1 = None
        self._line2 = None
        self._line3 = None
        self._line4 = None
        self._locality = None
        self._postal_code = None
        self._country = None
        self._county = None
        self.discriminator = None
        self.line1 = line1
        if line2 is not None:
            self.line2 = line2
        if line3 is not None:
            self.line3 = line3
        if line4 is not None:
            self.line4 = line4
        if locality is not None:
            self.locality = locality
        if postal_code is not None:
            self.postal_code = postal_code
        self.country = country
        if county is not None:
            self.county = county

    @property
    def line1(self):
        """Gets the line1 of this AddressDetailsValue.  # noqa: E501

        Address Line 1.  # noqa: E501

        :return: The line1 of this AddressDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this AddressDetailsValue.

        Address Line 1.  # noqa: E501

        :param line1: The line1 of this AddressDetailsValue.  # noqa: E501
        :type: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")  # noqa: E501

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this AddressDetailsValue.  # noqa: E501

        Address Line 2.  # noqa: E501

        :return: The line2 of this AddressDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this AddressDetailsValue.

        Address Line 2.  # noqa: E501

        :param line2: The line2 of this AddressDetailsValue.  # noqa: E501
        :type: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this AddressDetailsValue.  # noqa: E501

        Address Line 3.  # noqa: E501

        :return: The line3 of this AddressDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this AddressDetailsValue.

        Address Line 3.  # noqa: E501

        :param line3: The line3 of this AddressDetailsValue.  # noqa: E501
        :type: str
        """

        self._line3 = line3

    @property
    def line4(self):
        """Gets the line4 of this AddressDetailsValue.  # noqa: E501

        Address Line 4.  # noqa: E501

        :return: The line4 of this AddressDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._line4

    @line4.setter
    def line4(self, line4):
        """Sets the line4 of this AddressDetailsValue.

        Address Line 4.  # noqa: E501

        :param line4: The line4 of this AddressDetailsValue.  # noqa: E501
        :type: str
        """

        self._line4 = line4

    @property
    def locality(self):
        """Gets the locality of this AddressDetailsValue.  # noqa: E501

        The location of the property.  # noqa: E501

        :return: The locality of this AddressDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this AddressDetailsValue.

        The location of the property.  # noqa: E501

        :param locality: The locality of this AddressDetailsValue.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressDetailsValue.  # noqa: E501

        Postal Code.  # noqa: E501

        :return: The postal_code of this AddressDetailsValue.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressDetailsValue.

        Postal Code.  # noqa: E501

        :param postal_code: The postal_code of this AddressDetailsValue.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this AddressDetailsValue.  # noqa: E501


        :return: The country of this AddressDetailsValue.  # noqa: E501
        :rtype: CountryValue
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressDetailsValue.


        :param country: The country of this AddressDetailsValue.  # noqa: E501
        :type: CountryValue
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def county(self):
        """Gets the county of this AddressDetailsValue.  # noqa: E501


        :return: The county of this AddressDetailsValue.  # noqa: E501
        :rtype: CountyValue
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AddressDetailsValue.


        :param county: The county of this AddressDetailsValue.  # noqa: E501
        :type: CountyValue
        """

        self._county = county

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressDetailsValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressDetailsValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
