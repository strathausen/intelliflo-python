# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtrResultChosenRiskProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'chosen_on': 'datetime',
        'risk_profile_ref': 'NamedRiskProfileRef'
    }

    attribute_map = {
        'code': 'code',
        'chosen_on': 'chosenOn',
        'risk_profile_ref': 'riskProfileRef'
    }

    def __init__(self, code=None, chosen_on=None, risk_profile_ref=None):  # noqa: E501
        """AtrResultChosenRiskProfile - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._chosen_on = None
        self._risk_profile_ref = None
        self.discriminator = None
        self.code = code
        if chosen_on is not None:
            self.chosen_on = chosen_on
        if risk_profile_ref is not None:
            self.risk_profile_ref = risk_profile_ref

    @property
    def code(self):
        """Gets the code of this AtrResultChosenRiskProfile.  # noqa: E501

        Risk profile code chosen by the client.  # noqa: E501

        :return: The code of this AtrResultChosenRiskProfile.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AtrResultChosenRiskProfile.

        Risk profile code chosen by the client.  # noqa: E501

        :param code: The code of this AtrResultChosenRiskProfile.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def chosen_on(self):
        """Gets the chosen_on of this AtrResultChosenRiskProfile.  # noqa: E501

        Risk profile chosen date.  # noqa: E501

        :return: The chosen_on of this AtrResultChosenRiskProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._chosen_on

    @chosen_on.setter
    def chosen_on(self, chosen_on):
        """Sets the chosen_on of this AtrResultChosenRiskProfile.

        Risk profile chosen date.  # noqa: E501

        :param chosen_on: The chosen_on of this AtrResultChosenRiskProfile.  # noqa: E501
        :type: datetime
        """

        self._chosen_on = chosen_on

    @property
    def risk_profile_ref(self):
        """Gets the risk_profile_ref of this AtrResultChosenRiskProfile.  # noqa: E501


        :return: The risk_profile_ref of this AtrResultChosenRiskProfile.  # noqa: E501
        :rtype: NamedRiskProfileRef
        """
        return self._risk_profile_ref

    @risk_profile_ref.setter
    def risk_profile_ref(self, risk_profile_ref):
        """Sets the risk_profile_ref of this AtrResultChosenRiskProfile.


        :param risk_profile_ref: The risk_profile_ref of this AtrResultChosenRiskProfile.  # noqa: E501
        :type: NamedRiskProfileRef
        """

        self._risk_profile_ref = risk_profile_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtrResultChosenRiskProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtrResultChosenRiskProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
