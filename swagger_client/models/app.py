# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class App(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'name': 'str',
        'content': 'dict(str, str)',
        'description': 'str',
        'categories': 'list[str]',
        'publisher': 'str',
        'published_targets': 'list[AppPublishedTargetValue]',
        'is_approved_for_install': 'bool',
        'is_approved_by_group': 'bool',
        'summary': 'str',
        'last_updated_at': 'datetime',
        'last_published_at': 'datetime',
        'publish_requested_at': 'datetime',
        'metadata': 'str',
        'collaborators': 'list[AppCollaborator]',
        'billing_model': 'AppBillingModelValue2',
        'app_claims': 'dict(str, str)',
        'secrets': 'AppSecrets',
        'terms_and_conditions_href': 'str',
        'required_scopes': 'list[str]',
        'approved_scopes': 'list[str]',
        'version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'content': 'content',
        'description': 'description',
        'categories': 'categories',
        'publisher': 'publisher',
        'published_targets': 'published_targets',
        'is_approved_for_install': 'isApprovedForInstall',
        'is_approved_by_group': 'isApprovedByGroup',
        'summary': 'summary',
        'last_updated_at': 'lastUpdatedAt',
        'last_published_at': 'lastPublishedAt',
        'publish_requested_at': 'publishRequestedAt',
        'metadata': 'metadata',
        'collaborators': 'collaborators',
        'billing_model': 'billingModel',
        'app_claims': 'appClaims',
        'secrets': 'secrets',
        'terms_and_conditions_href': 'termsAndConditionsHref',
        'required_scopes': 'required_scopes',
        'approved_scopes': 'approved_scopes',
        'version': 'version'
    }

    def __init__(self, id=None, href=None, name=None, content=None, description=None, categories=None, publisher=None, published_targets=None, is_approved_for_install=None, is_approved_by_group=None, summary=None, last_updated_at=None, last_published_at=None, publish_requested_at=None, metadata=None, collaborators=None, billing_model=None, app_claims=None, secrets=None, terms_and_conditions_href=None, required_scopes=None, approved_scopes=None, version=None):  # noqa: E501
        """App - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._content = None
        self._description = None
        self._categories = None
        self._publisher = None
        self._published_targets = None
        self._is_approved_for_install = None
        self._is_approved_by_group = None
        self._summary = None
        self._last_updated_at = None
        self._last_published_at = None
        self._publish_requested_at = None
        self._metadata = None
        self._collaborators = None
        self._billing_model = None
        self._app_claims = None
        self._secrets = None
        self._terms_and_conditions_href = None
        self._required_scopes = None
        self._approved_scopes = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if content is not None:
            self.content = content
        if description is not None:
            self.description = description
        if categories is not None:
            self.categories = categories
        if publisher is not None:
            self.publisher = publisher
        if published_targets is not None:
            self.published_targets = published_targets
        if is_approved_for_install is not None:
            self.is_approved_for_install = is_approved_for_install
        if is_approved_by_group is not None:
            self.is_approved_by_group = is_approved_by_group
        if summary is not None:
            self.summary = summary
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_published_at is not None:
            self.last_published_at = last_published_at
        if publish_requested_at is not None:
            self.publish_requested_at = publish_requested_at
        if metadata is not None:
            self.metadata = metadata
        if collaborators is not None:
            self.collaborators = collaborators
        if billing_model is not None:
            self.billing_model = billing_model
        if app_claims is not None:
            self.app_claims = app_claims
        if secrets is not None:
            self.secrets = secrets
        if terms_and_conditions_href is not None:
            self.terms_and_conditions_href = terms_and_conditions_href
        if required_scopes is not None:
            self.required_scopes = required_scopes
        if approved_scopes is not None:
            self.approved_scopes = approved_scopes
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this App.  # noqa: E501


        :return: The id of this App.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this App.


        :param id: The id of this App.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this App.  # noqa: E501


        :return: The href of this App.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this App.


        :param href: The href of this App.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501


        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.


        :param name: The name of this App.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def content(self):
        """Gets the content of this App.  # noqa: E501

        Content, this is a collection of content that is available to the app. Current supported content values are icon, video_01, img_01, img_02, img_03. Example: ...apps/{appId}/content/icon  # noqa: E501

        :return: The content of this App.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this App.

        Content, this is a collection of content that is available to the app. Current supported content values are icon, video_01, img_01, img_02, img_03. Example: ...apps/{appId}/content/icon  # noqa: E501

        :param content: The content of this App.  # noqa: E501
        :type: dict(str, str)
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this App.  # noqa: E501


        :return: The description of this App.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this App.


        :param description: The description of this App.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def categories(self):
        """Gets the categories of this App.  # noqa: E501


        :return: The categories of this App.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this App.


        :param categories: The categories of this App.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def publisher(self):
        """Gets the publisher of this App.  # noqa: E501


        :return: The publisher of this App.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this App.


        :param publisher: The publisher of this App.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def published_targets(self):
        """Gets the published_targets of this App.  # noqa: E501


        :return: The published_targets of this App.  # noqa: E501
        :rtype: list[AppPublishedTargetValue]
        """
        return self._published_targets

    @published_targets.setter
    def published_targets(self, published_targets):
        """Sets the published_targets of this App.


        :param published_targets: The published_targets of this App.  # noqa: E501
        :type: list[AppPublishedTargetValue]
        """

        self._published_targets = published_targets

    @property
    def is_approved_for_install(self):
        """Gets the is_approved_for_install of this App.  # noqa: E501


        :return: The is_approved_for_install of this App.  # noqa: E501
        :rtype: bool
        """
        return self._is_approved_for_install

    @is_approved_for_install.setter
    def is_approved_for_install(self, is_approved_for_install):
        """Sets the is_approved_for_install of this App.


        :param is_approved_for_install: The is_approved_for_install of this App.  # noqa: E501
        :type: bool
        """

        self._is_approved_for_install = is_approved_for_install

    @property
    def is_approved_by_group(self):
        """Gets the is_approved_by_group of this App.  # noqa: E501


        :return: The is_approved_by_group of this App.  # noqa: E501
        :rtype: bool
        """
        return self._is_approved_by_group

    @is_approved_by_group.setter
    def is_approved_by_group(self, is_approved_by_group):
        """Sets the is_approved_by_group of this App.


        :param is_approved_by_group: The is_approved_by_group of this App.  # noqa: E501
        :type: bool
        """

        self._is_approved_by_group = is_approved_by_group

    @property
    def summary(self):
        """Gets the summary of this App.  # noqa: E501


        :return: The summary of this App.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this App.


        :param summary: The summary of this App.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this App.  # noqa: E501


        :return: The last_updated_at of this App.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this App.


        :param last_updated_at: The last_updated_at of this App.  # noqa: E501
        :type: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def last_published_at(self):
        """Gets the last_published_at of this App.  # noqa: E501


        :return: The last_published_at of this App.  # noqa: E501
        :rtype: datetime
        """
        return self._last_published_at

    @last_published_at.setter
    def last_published_at(self, last_published_at):
        """Sets the last_published_at of this App.


        :param last_published_at: The last_published_at of this App.  # noqa: E501
        :type: datetime
        """

        self._last_published_at = last_published_at

    @property
    def publish_requested_at(self):
        """Gets the publish_requested_at of this App.  # noqa: E501


        :return: The publish_requested_at of this App.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_requested_at

    @publish_requested_at.setter
    def publish_requested_at(self, publish_requested_at):
        """Sets the publish_requested_at of this App.


        :param publish_requested_at: The publish_requested_at of this App.  # noqa: E501
        :type: datetime
        """

        self._publish_requested_at = publish_requested_at

    @property
    def metadata(self):
        """Gets the metadata of this App.  # noqa: E501


        :return: The metadata of this App.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this App.


        :param metadata: The metadata of this App.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def collaborators(self):
        """Gets the collaborators of this App.  # noqa: E501


        :return: The collaborators of this App.  # noqa: E501
        :rtype: list[AppCollaborator]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this App.


        :param collaborators: The collaborators of this App.  # noqa: E501
        :type: list[AppCollaborator]
        """

        self._collaborators = collaborators

    @property
    def billing_model(self):
        """Gets the billing_model of this App.  # noqa: E501


        :return: The billing_model of this App.  # noqa: E501
        :rtype: AppBillingModelValue2
        """
        return self._billing_model

    @billing_model.setter
    def billing_model(self, billing_model):
        """Sets the billing_model of this App.


        :param billing_model: The billing_model of this App.  # noqa: E501
        :type: AppBillingModelValue2
        """

        self._billing_model = billing_model

    @property
    def app_claims(self):
        """Gets the app_claims of this App.  # noqa: E501


        :return: The app_claims of this App.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._app_claims

    @app_claims.setter
    def app_claims(self, app_claims):
        """Sets the app_claims of this App.


        :param app_claims: The app_claims of this App.  # noqa: E501
        :type: dict(str, str)
        """

        self._app_claims = app_claims

    @property
    def secrets(self):
        """Gets the secrets of this App.  # noqa: E501


        :return: The secrets of this App.  # noqa: E501
        :rtype: AppSecrets
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this App.


        :param secrets: The secrets of this App.  # noqa: E501
        :type: AppSecrets
        """

        self._secrets = secrets

    @property
    def terms_and_conditions_href(self):
        """Gets the terms_and_conditions_href of this App.  # noqa: E501


        :return: The terms_and_conditions_href of this App.  # noqa: E501
        :rtype: str
        """
        return self._terms_and_conditions_href

    @terms_and_conditions_href.setter
    def terms_and_conditions_href(self, terms_and_conditions_href):
        """Sets the terms_and_conditions_href of this App.


        :param terms_and_conditions_href: The terms_and_conditions_href of this App.  # noqa: E501
        :type: str
        """

        self._terms_and_conditions_href = terms_and_conditions_href

    @property
    def required_scopes(self):
        """Gets the required_scopes of this App.  # noqa: E501


        :return: The required_scopes of this App.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_scopes

    @required_scopes.setter
    def required_scopes(self, required_scopes):
        """Sets the required_scopes of this App.


        :param required_scopes: The required_scopes of this App.  # noqa: E501
        :type: list[str]
        """

        self._required_scopes = required_scopes

    @property
    def approved_scopes(self):
        """Gets the approved_scopes of this App.  # noqa: E501


        :return: The approved_scopes of this App.  # noqa: E501
        :rtype: list[str]
        """
        return self._approved_scopes

    @approved_scopes.setter
    def approved_scopes(self, approved_scopes):
        """Sets the approved_scopes of this App.


        :param approved_scopes: The approved_scopes of this App.  # noqa: E501
        :type: list[str]
        """

        self._approved_scopes = approved_scopes

    @property
    def version(self):
        """Gets the version of this App.  # noqa: E501


        :return: The version of this App.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this App.


        :param version: The version of this App.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(App, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
