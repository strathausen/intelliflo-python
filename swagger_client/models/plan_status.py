# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'status': 'str',
        'effective_on': 'datetime',
        'created_at': 'datetime',
        'plan': 'PlanPolicyRef'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'effective_on': 'effectiveOn',
        'created_at': 'createdAt',
        'plan': 'plan'
    }

    def __init__(self, id=None, status=None, effective_on=None, created_at=None, plan=None):  # noqa: E501
        """PlanStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._effective_on = None
        self._created_at = None
        self._plan = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.status = status
        self.effective_on = effective_on
        if created_at is not None:
            self.created_at = created_at
        if plan is not None:
            self.plan = plan

    @property
    def id(self):
        """Gets the id of this PlanStatus.  # noqa: E501

        The unique id for the status change.  # noqa: E501

        :return: The id of this PlanStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanStatus.

        The unique id for the status change.  # noqa: E501

        :param id: The id of this PlanStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this PlanStatus.  # noqa: E501

        Custom name provided by the tenant.  # noqa: E501

        :return: The status of this PlanStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlanStatus.

        Custom name provided by the tenant.  # noqa: E501

        :param status: The status of this PlanStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def effective_on(self):
        """Gets the effective_on of this PlanStatus.  # noqa: E501

        Date the Status becomes effective on.  # noqa: E501

        :return: The effective_on of this PlanStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_on

    @effective_on.setter
    def effective_on(self, effective_on):
        """Sets the effective_on of this PlanStatus.

        Date the Status becomes effective on.  # noqa: E501

        :param effective_on: The effective_on of this PlanStatus.  # noqa: E501
        :type: datetime
        """
        if effective_on is None:
            raise ValueError("Invalid value for `effective_on`, must not be `None`")  # noqa: E501

        self._effective_on = effective_on

    @property
    def created_at(self):
        """Gets the created_at of this PlanStatus.  # noqa: E501

        Date and time the record was created.  # noqa: E501

        :return: The created_at of this PlanStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PlanStatus.

        Date and time the record was created.  # noqa: E501

        :param created_at: The created_at of this PlanStatus.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def plan(self):
        """Gets the plan of this PlanStatus.  # noqa: E501


        :return: The plan of this PlanStatus.  # noqa: E501
        :rtype: PlanPolicyRef
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this PlanStatus.


        :param plan: The plan of this PlanStatus.  # noqa: E501
        :type: PlanPolicyRef
        """

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
