# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyValue3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'CurrencyValue',
        'current_residence': 'bool',
        'residence_after_completion': 'bool'
    }

    attribute_map = {
        'value': 'value',
        'current_residence': 'currentResidence',
        'residence_after_completion': 'residenceAfterCompletion'
    }

    def __init__(self, value=None, current_residence=False, residence_after_completion=False):  # noqa: E501
        """PropertyValue3 - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._current_residence = None
        self._residence_after_completion = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if current_residence is not None:
            self.current_residence = current_residence
        if residence_after_completion is not None:
            self.residence_after_completion = residence_after_completion

    @property
    def value(self):
        """Gets the value of this PropertyValue3.  # noqa: E501


        :return: The value of this PropertyValue3.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyValue3.


        :param value: The value of this PropertyValue3.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    @property
    def current_residence(self):
        """Gets the current_residence of this PropertyValue3.  # noqa: E501

        Is the property client's current residence?  # noqa: E501

        :return: The current_residence of this PropertyValue3.  # noqa: E501
        :rtype: bool
        """
        return self._current_residence

    @current_residence.setter
    def current_residence(self, current_residence):
        """Sets the current_residence of this PropertyValue3.

        Is the property client's current residence?  # noqa: E501

        :param current_residence: The current_residence of this PropertyValue3.  # noqa: E501
        :type: bool
        """

        self._current_residence = current_residence

    @property
    def residence_after_completion(self):
        """Gets the residence_after_completion of this PropertyValue3.  # noqa: E501

        Is the property client's residence after completion?  # noqa: E501

        :return: The residence_after_completion of this PropertyValue3.  # noqa: E501
        :rtype: bool
        """
        return self._residence_after_completion

    @residence_after_completion.setter
    def residence_after_completion(self, residence_after_completion):
        """Sets the residence_after_completion of this PropertyValue3.

        Is the property client's residence after completion?  # noqa: E501

        :param residence_after_completion: The residence_after_completion of this PropertyValue3.  # noqa: E501
        :type: bool
        """

        self._residence_after_completion = residence_after_completion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyValue3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyValue3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
