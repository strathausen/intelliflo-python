# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.quote_result import QuoteResult  # noqa: F401,E501

class NewBusinessEquityReleaseQuoteResult(QuoteResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requirement': 'RequirementRef',
        'initial_monthly_cost': 'CurrencyValue',
        'proc_fee': 'CurrencyValue',
        'equity_release_type': 'str',
        'ownership_sold': 'float',
        'released': 'CurrencyValue',
        'equity': 'CurrencyValue',
        'valuation': 'MortgagedPropertyValuationValue4',
        'lumpsum': 'CurrencyValue',
        'repayment_method': 'str',
        'monthly_income': 'CurrencyValue',
        'asset': 'AssetReference',
        'loan_value': 'CurrencyValue',
        'loan_to_value': 'float',
        'application_submitted_on': 'datetime',
        'target_completion_date': 'datetime',
        'completion_date': 'datetime',
        'exchange_date': 'datetime',
        'offer_made_on': 'datetime',
        'review_on': 'datetime',
        'term': 'MortgageTermValue',
        'interest_only_repayment': 'CurrencyValue',
        'capital_repayment': 'CurrencyValue',
        'interest': 'InterestSchemeValue',
        'redemption_penalty': 'MortgageRedemptionValue3',
        'property_address': 'PropertyAddressRef',
        'additional_owners': 'list[PartyRef]',
        'total_fees': 'list[LenderFeeValue3]',
        'provider': 'ProductProviderRef',
        'plan_type': 'PlanTypeReference'
    }
    if hasattr(QuoteResult, "swagger_types"):
        swagger_types.update(QuoteResult.swagger_types)

    attribute_map = {
        'requirement': 'requirement',
        'initial_monthly_cost': 'initialMonthlyCost',
        'proc_fee': 'procFee',
        'equity_release_type': 'equityReleaseType',
        'ownership_sold': 'ownershipSold',
        'released': 'released',
        'equity': 'equity',
        'valuation': 'valuation',
        'lumpsum': 'lumpsum',
        'repayment_method': 'repaymentMethod',
        'monthly_income': 'monthlyIncome',
        'asset': 'asset',
        'loan_value': 'loanValue',
        'loan_to_value': 'loanToValue',
        'application_submitted_on': 'applicationSubmittedOn',
        'target_completion_date': 'targetCompletionDate',
        'completion_date': 'completionDate',
        'exchange_date': 'exchangeDate',
        'offer_made_on': 'offerMadeOn',
        'review_on': 'reviewOn',
        'term': 'term',
        'interest_only_repayment': 'interestOnlyRepayment',
        'capital_repayment': 'capitalRepayment',
        'interest': 'interest',
        'redemption_penalty': 'redemptionPenalty',
        'property_address': 'propertyAddress',
        'additional_owners': 'additionalOwners',
        'total_fees': 'totalFees',
        'provider': 'provider',
        'plan_type': 'planType'
    }
    if hasattr(QuoteResult, "attribute_map"):
        attribute_map.update(QuoteResult.attribute_map)

    def __init__(self, requirement=None, initial_monthly_cost=None, proc_fee=None, equity_release_type=None, ownership_sold=None, released=None, equity=None, valuation=None, lumpsum=None, repayment_method='null', monthly_income=None, asset=None, loan_value=None, loan_to_value=None, application_submitted_on=None, target_completion_date=None, completion_date=None, exchange_date=None, offer_made_on=None, review_on=None, term=None, interest_only_repayment=None, capital_repayment=None, interest=None, redemption_penalty=None, property_address=None, additional_owners=None, total_fees=None, provider=None, plan_type=None, *args, **kwargs):  # noqa: E501
        """NewBusinessEquityReleaseQuoteResult - a model defined in Swagger"""  # noqa: E501
        self._requirement = None
        self._initial_monthly_cost = None
        self._proc_fee = None
        self._equity_release_type = None
        self._ownership_sold = None
        self._released = None
        self._equity = None
        self._valuation = None
        self._lumpsum = None
        self._repayment_method = None
        self._monthly_income = None
        self._asset = None
        self._loan_value = None
        self._loan_to_value = None
        self._application_submitted_on = None
        self._target_completion_date = None
        self._completion_date = None
        self._exchange_date = None
        self._offer_made_on = None
        self._review_on = None
        self._term = None
        self._interest_only_repayment = None
        self._capital_repayment = None
        self._interest = None
        self._redemption_penalty = None
        self._property_address = None
        self._additional_owners = None
        self._total_fees = None
        self._provider = None
        self._plan_type = None
        self.discriminator = None
        if requirement is not None:
            self.requirement = requirement
        if initial_monthly_cost is not None:
            self.initial_monthly_cost = initial_monthly_cost
        if proc_fee is not None:
            self.proc_fee = proc_fee
        if equity_release_type is not None:
            self.equity_release_type = equity_release_type
        if ownership_sold is not None:
            self.ownership_sold = ownership_sold
        if released is not None:
            self.released = released
        if equity is not None:
            self.equity = equity
        if valuation is not None:
            self.valuation = valuation
        if lumpsum is not None:
            self.lumpsum = lumpsum
        if repayment_method is not None:
            self.repayment_method = repayment_method
        if monthly_income is not None:
            self.monthly_income = monthly_income
        if asset is not None:
            self.asset = asset
        if loan_value is not None:
            self.loan_value = loan_value
        if loan_to_value is not None:
            self.loan_to_value = loan_to_value
        if application_submitted_on is not None:
            self.application_submitted_on = application_submitted_on
        if target_completion_date is not None:
            self.target_completion_date = target_completion_date
        if completion_date is not None:
            self.completion_date = completion_date
        if exchange_date is not None:
            self.exchange_date = exchange_date
        if offer_made_on is not None:
            self.offer_made_on = offer_made_on
        if review_on is not None:
            self.review_on = review_on
        if term is not None:
            self.term = term
        if interest_only_repayment is not None:
            self.interest_only_repayment = interest_only_repayment
        if capital_repayment is not None:
            self.capital_repayment = capital_repayment
        if interest is not None:
            self.interest = interest
        if redemption_penalty is not None:
            self.redemption_penalty = redemption_penalty
        if property_address is not None:
            self.property_address = property_address
        if additional_owners is not None:
            self.additional_owners = additional_owners
        if total_fees is not None:
            self.total_fees = total_fees
        if provider is not None:
            self.provider = provider
        if plan_type is not None:
            self.plan_type = plan_type
        QuoteResult.__init__(self, *args, **kwargs)

    @property
    def requirement(self):
        """Gets the requirement of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The requirement of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: RequirementRef
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this NewBusinessEquityReleaseQuoteResult.


        :param requirement: The requirement of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: RequirementRef
        """

        self._requirement = requirement

    @property
    def initial_monthly_cost(self):
        """Gets the initial_monthly_cost of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The initial_monthly_cost of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._initial_monthly_cost

    @initial_monthly_cost.setter
    def initial_monthly_cost(self, initial_monthly_cost):
        """Sets the initial_monthly_cost of this NewBusinessEquityReleaseQuoteResult.


        :param initial_monthly_cost: The initial_monthly_cost of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._initial_monthly_cost = initial_monthly_cost

    @property
    def proc_fee(self):
        """Gets the proc_fee of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The proc_fee of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._proc_fee

    @proc_fee.setter
    def proc_fee(self, proc_fee):
        """Sets the proc_fee of this NewBusinessEquityReleaseQuoteResult.


        :param proc_fee: The proc_fee of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._proc_fee = proc_fee

    @property
    def equity_release_type(self):
        """Gets the equity_release_type of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Type of equity release product.  # noqa: E501

        :return: The equity_release_type of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._equity_release_type

    @equity_release_type.setter
    def equity_release_type(self, equity_release_type):
        """Sets the equity_release_type of this NewBusinessEquityReleaseQuoteResult.

        Type of equity release product.  # noqa: E501

        :param equity_release_type: The equity_release_type of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Lifetime", "HomeReversion"]  # noqa: E501
        if equity_release_type not in allowed_values:
            raise ValueError(
                "Invalid value for `equity_release_type` ({0}), must be one of {1}"  # noqa: E501
                .format(equity_release_type, allowed_values)
            )

        self._equity_release_type = equity_release_type

    @property
    def ownership_sold(self):
        """Gets the ownership_sold of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Percentage of ownership sold.  # noqa: E501

        :return: The ownership_sold of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: float
        """
        return self._ownership_sold

    @ownership_sold.setter
    def ownership_sold(self, ownership_sold):
        """Sets the ownership_sold of this NewBusinessEquityReleaseQuoteResult.

        Percentage of ownership sold.  # noqa: E501

        :param ownership_sold: The ownership_sold of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: float
        """

        self._ownership_sold = ownership_sold

    @property
    def released(self):
        """Gets the released of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The released of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this NewBusinessEquityReleaseQuoteResult.


        :param released: The released of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._released = released

    @property
    def equity(self):
        """Gets the equity of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The equity of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this NewBusinessEquityReleaseQuoteResult.


        :param equity: The equity of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._equity = equity

    @property
    def valuation(self):
        """Gets the valuation of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The valuation of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: MortgagedPropertyValuationValue4
        """
        return self._valuation

    @valuation.setter
    def valuation(self, valuation):
        """Sets the valuation of this NewBusinessEquityReleaseQuoteResult.


        :param valuation: The valuation of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: MortgagedPropertyValuationValue4
        """

        self._valuation = valuation

    @property
    def lumpsum(self):
        """Gets the lumpsum of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The lumpsum of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._lumpsum

    @lumpsum.setter
    def lumpsum(self, lumpsum):
        """Sets the lumpsum of this NewBusinessEquityReleaseQuoteResult.


        :param lumpsum: The lumpsum of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._lumpsum = lumpsum

    @property
    def repayment_method(self):
        """Gets the repayment_method of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Repayment method type.  # noqa: E501

        :return: The repayment_method of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._repayment_method

    @repayment_method.setter
    def repayment_method(self, repayment_method):
        """Sets the repayment_method of this NewBusinessEquityReleaseQuoteResult.

        Repayment method type.  # noqa: E501

        :param repayment_method: The repayment_method of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["InterestOnlySaleOfProperty", "CapitalAndInterest", "SplitRepayment", "InterestOnlyDownsizing", "InterestOnlyOther", "InterestOnlyEndowment", "InterestOnlyNoInvestmentVehicle", "InterestOnlyPension", "InterestOnly", "InterestRollupSaleOfProperty", "InterestOnlyISA"]  # noqa: E501
        if repayment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_method, allowed_values)
            )

        self._repayment_method = repayment_method

    @property
    def monthly_income(self):
        """Gets the monthly_income of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The monthly_income of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._monthly_income

    @monthly_income.setter
    def monthly_income(self, monthly_income):
        """Sets the monthly_income of this NewBusinessEquityReleaseQuoteResult.


        :param monthly_income: The monthly_income of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._monthly_income = monthly_income

    @property
    def asset(self):
        """Gets the asset of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The asset of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: AssetReference
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this NewBusinessEquityReleaseQuoteResult.


        :param asset: The asset of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: AssetReference
        """

        self._asset = asset

    @property
    def loan_value(self):
        """Gets the loan_value of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The loan_value of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._loan_value

    @loan_value.setter
    def loan_value(self, loan_value):
        """Sets the loan_value of this NewBusinessEquityReleaseQuoteResult.


        :param loan_value: The loan_value of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._loan_value = loan_value

    @property
    def loan_to_value(self):
        """Gets the loan_to_value of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Loan to value percentage.  # noqa: E501

        :return: The loan_to_value of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: float
        """
        return self._loan_to_value

    @loan_to_value.setter
    def loan_to_value(self, loan_to_value):
        """Sets the loan_to_value of this NewBusinessEquityReleaseQuoteResult.

        Loan to value percentage.  # noqa: E501

        :param loan_to_value: The loan_to_value of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: float
        """

        self._loan_to_value = loan_to_value

    @property
    def application_submitted_on(self):
        """Gets the application_submitted_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Date application submitted.  # noqa: E501

        :return: The application_submitted_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._application_submitted_on

    @application_submitted_on.setter
    def application_submitted_on(self, application_submitted_on):
        """Sets the application_submitted_on of this NewBusinessEquityReleaseQuoteResult.

        Date application submitted.  # noqa: E501

        :param application_submitted_on: The application_submitted_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: datetime
        """

        self._application_submitted_on = application_submitted_on

    @property
    def target_completion_date(self):
        """Gets the target_completion_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Target completion date.  # noqa: E501

        :return: The target_completion_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._target_completion_date

    @target_completion_date.setter
    def target_completion_date(self, target_completion_date):
        """Sets the target_completion_date of this NewBusinessEquityReleaseQuoteResult.

        Target completion date.  # noqa: E501

        :param target_completion_date: The target_completion_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: datetime
        """

        self._target_completion_date = target_completion_date

    @property
    def completion_date(self):
        """Gets the completion_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Completion date.  # noqa: E501

        :return: The completion_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this NewBusinessEquityReleaseQuoteResult.

        Completion date.  # noqa: E501

        :param completion_date: The completion_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def exchange_date(self):
        """Gets the exchange_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Exchange date.  # noqa: E501

        :return: The exchange_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._exchange_date

    @exchange_date.setter
    def exchange_date(self, exchange_date):
        """Sets the exchange_date of this NewBusinessEquityReleaseQuoteResult.

        Exchange date.  # noqa: E501

        :param exchange_date: The exchange_date of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: datetime
        """

        self._exchange_date = exchange_date

    @property
    def offer_made_on(self):
        """Gets the offer_made_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Offer issued date.  # noqa: E501

        :return: The offer_made_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_made_on

    @offer_made_on.setter
    def offer_made_on(self, offer_made_on):
        """Sets the offer_made_on of this NewBusinessEquityReleaseQuoteResult.

        Offer issued date.  # noqa: E501

        :param offer_made_on: The offer_made_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: datetime
        """

        self._offer_made_on = offer_made_on

    @property
    def review_on(self):
        """Gets the review_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Review date.  # noqa: E501

        :return: The review_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: datetime
        """
        return self._review_on

    @review_on.setter
    def review_on(self, review_on):
        """Sets the review_on of this NewBusinessEquityReleaseQuoteResult.

        Review date.  # noqa: E501

        :param review_on: The review_on of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: datetime
        """

        self._review_on = review_on

    @property
    def term(self):
        """Gets the term of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The term of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: MortgageTermValue
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this NewBusinessEquityReleaseQuoteResult.


        :param term: The term of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: MortgageTermValue
        """

        self._term = term

    @property
    def interest_only_repayment(self):
        """Gets the interest_only_repayment of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The interest_only_repayment of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._interest_only_repayment

    @interest_only_repayment.setter
    def interest_only_repayment(self, interest_only_repayment):
        """Sets the interest_only_repayment of this NewBusinessEquityReleaseQuoteResult.


        :param interest_only_repayment: The interest_only_repayment of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._interest_only_repayment = interest_only_repayment

    @property
    def capital_repayment(self):
        """Gets the capital_repayment of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The capital_repayment of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._capital_repayment

    @capital_repayment.setter
    def capital_repayment(self, capital_repayment):
        """Sets the capital_repayment of this NewBusinessEquityReleaseQuoteResult.


        :param capital_repayment: The capital_repayment of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._capital_repayment = capital_repayment

    @property
    def interest(self):
        """Gets the interest of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The interest of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: InterestSchemeValue
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this NewBusinessEquityReleaseQuoteResult.


        :param interest: The interest of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: InterestSchemeValue
        """

        self._interest = interest

    @property
    def redemption_penalty(self):
        """Gets the redemption_penalty of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The redemption_penalty of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: MortgageRedemptionValue3
        """
        return self._redemption_penalty

    @redemption_penalty.setter
    def redemption_penalty(self, redemption_penalty):
        """Sets the redemption_penalty of this NewBusinessEquityReleaseQuoteResult.


        :param redemption_penalty: The redemption_penalty of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: MortgageRedemptionValue3
        """

        self._redemption_penalty = redemption_penalty

    @property
    def property_address(self):
        """Gets the property_address of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The property_address of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: PropertyAddressRef
        """
        return self._property_address

    @property_address.setter
    def property_address(self, property_address):
        """Sets the property_address of this NewBusinessEquityReleaseQuoteResult.


        :param property_address: The property_address of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: PropertyAddressRef
        """

        self._property_address = property_address

    @property
    def additional_owners(self):
        """Gets the additional_owners of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Additional owners (Maximum 2).  # noqa: E501

        :return: The additional_owners of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: list[PartyRef]
        """
        return self._additional_owners

    @additional_owners.setter
    def additional_owners(self, additional_owners):
        """Sets the additional_owners of this NewBusinessEquityReleaseQuoteResult.

        Additional owners (Maximum 2).  # noqa: E501

        :param additional_owners: The additional_owners of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: list[PartyRef]
        """

        self._additional_owners = additional_owners

    @property
    def total_fees(self):
        """Gets the total_fees of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501

        Collection of lender specific fees.  # noqa: E501

        :return: The total_fees of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: list[LenderFeeValue3]
        """
        return self._total_fees

    @total_fees.setter
    def total_fees(self, total_fees):
        """Sets the total_fees of this NewBusinessEquityReleaseQuoteResult.

        Collection of lender specific fees.  # noqa: E501

        :param total_fees: The total_fees of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: list[LenderFeeValue3]
        """

        self._total_fees = total_fees

    @property
    def provider(self):
        """Gets the provider of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The provider of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: ProductProviderRef
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NewBusinessEquityReleaseQuoteResult.


        :param provider: The provider of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: ProductProviderRef
        """

        self._provider = provider

    @property
    def plan_type(self):
        """Gets the plan_type of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501


        :return: The plan_type of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :rtype: PlanTypeReference
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this NewBusinessEquityReleaseQuoteResult.


        :param plan_type: The plan_type of this NewBusinessEquityReleaseQuoteResult.  # noqa: E501
        :type: PlanTypeReference
        """

        self._plan_type = plan_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewBusinessEquityReleaseQuoteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewBusinessEquityReleaseQuoteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
