# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_recommendation2_proposal import BaseRecommendation2Proposal  # noqa: F401,E501

class NewBusinessAnnuityProposal(BaseRecommendation2Proposal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'premiums': 'list[ProposedContributionValue]',
        'pension_income': 'list[ProposedWithdrawalValue]',
        'proposed_funds': 'list[ProposedFundValue2]',
        'target_model': 'ModelPortfolioReference',
        'annuity_payment_type': 'str',
        'new_business_plan': 'NewBusinessPlanValue',
        'currency': 'str'
    }
    if hasattr(BaseRecommendation2Proposal, "swagger_types"):
        swagger_types.update(BaseRecommendation2Proposal.swagger_types)

    attribute_map = {
        'premiums': 'premiums',
        'pension_income': 'pensionIncome',
        'proposed_funds': 'proposedFunds',
        'target_model': 'targetModel',
        'annuity_payment_type': 'annuityPaymentType',
        'new_business_plan': 'newBusinessPlan',
        'currency': 'currency'
    }
    if hasattr(BaseRecommendation2Proposal, "attribute_map"):
        attribute_map.update(BaseRecommendation2Proposal.attribute_map)

    def __init__(self, premiums=None, pension_income=None, proposed_funds=None, target_model=None, annuity_payment_type='None', new_business_plan=None, currency=None, *args, **kwargs):  # noqa: E501
        """NewBusinessAnnuityProposal - a model defined in Swagger"""  # noqa: E501
        self._premiums = None
        self._pension_income = None
        self._proposed_funds = None
        self._target_model = None
        self._annuity_payment_type = None
        self._new_business_plan = None
        self._currency = None
        self.discriminator = None
        if premiums is not None:
            self.premiums = premiums
        if pension_income is not None:
            self.pension_income = pension_income
        if proposed_funds is not None:
            self.proposed_funds = proposed_funds
        if target_model is not None:
            self.target_model = target_model
        if annuity_payment_type is not None:
            self.annuity_payment_type = annuity_payment_type
        if new_business_plan is not None:
            self.new_business_plan = new_business_plan
        if currency is not None:
            self.currency = currency
        BaseRecommendation2Proposal.__init__(self, *args, **kwargs)

    @property
    def premiums(self):
        """Gets the premiums of this NewBusinessAnnuityProposal.  # noqa: E501

        Contributions for the new business plan.  ContributionReference should be null for new business.  # noqa: E501

        :return: The premiums of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: list[ProposedContributionValue]
        """
        return self._premiums

    @premiums.setter
    def premiums(self, premiums):
        """Sets the premiums of this NewBusinessAnnuityProposal.

        Contributions for the new business plan.  ContributionReference should be null for new business.  # noqa: E501

        :param premiums: The premiums of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: list[ProposedContributionValue]
        """

        self._premiums = premiums

    @property
    def pension_income(self):
        """Gets the pension_income of this NewBusinessAnnuityProposal.  # noqa: E501

        Proposed Pension Income (withdrawal for the annuity).  WithdrawalReference should be null for new business.  # noqa: E501

        :return: The pension_income of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: list[ProposedWithdrawalValue]
        """
        return self._pension_income

    @pension_income.setter
    def pension_income(self, pension_income):
        """Sets the pension_income of this NewBusinessAnnuityProposal.

        Proposed Pension Income (withdrawal for the annuity).  WithdrawalReference should be null for new business.  # noqa: E501

        :param pension_income: The pension_income of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: list[ProposedWithdrawalValue]
        """

        self._pension_income = pension_income

    @property
    def proposed_funds(self):
        """Gets the proposed_funds of this NewBusinessAnnuityProposal.  # noqa: E501

        Proposed funds for the annuity plan.  # noqa: E501

        :return: The proposed_funds of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: list[ProposedFundValue2]
        """
        return self._proposed_funds

    @proposed_funds.setter
    def proposed_funds(self, proposed_funds):
        """Sets the proposed_funds of this NewBusinessAnnuityProposal.

        Proposed funds for the annuity plan.  # noqa: E501

        :param proposed_funds: The proposed_funds of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: list[ProposedFundValue2]
        """

        self._proposed_funds = proposed_funds

    @property
    def target_model(self):
        """Gets the target_model of this NewBusinessAnnuityProposal.  # noqa: E501


        :return: The target_model of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: ModelPortfolioReference
        """
        return self._target_model

    @target_model.setter
    def target_model(self, target_model):
        """Sets the target_model of this NewBusinessAnnuityProposal.


        :param target_model: The target_model of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: ModelPortfolioReference
        """

        self._target_model = target_model

    @property
    def annuity_payment_type(self):
        """Gets the annuity_payment_type of this NewBusinessAnnuityProposal.  # noqa: E501

        Annuity Payment type.  # noqa: E501

        :return: The annuity_payment_type of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: str
        """
        return self._annuity_payment_type

    @annuity_payment_type.setter
    def annuity_payment_type(self, annuity_payment_type):
        """Sets the annuity_payment_type of this NewBusinessAnnuityProposal.

        Annuity Payment type.  # noqa: E501

        :param annuity_payment_type: The annuity_payment_type of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Advance", "Arrears"]  # noqa: E501
        if annuity_payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `annuity_payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(annuity_payment_type, allowed_values)
            )

        self._annuity_payment_type = annuity_payment_type

    @property
    def new_business_plan(self):
        """Gets the new_business_plan of this NewBusinessAnnuityProposal.  # noqa: E501


        :return: The new_business_plan of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: NewBusinessPlanValue
        """
        return self._new_business_plan

    @new_business_plan.setter
    def new_business_plan(self, new_business_plan):
        """Sets the new_business_plan of this NewBusinessAnnuityProposal.


        :param new_business_plan: The new_business_plan of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: NewBusinessPlanValue
        """

        self._new_business_plan = new_business_plan

    @property
    def currency(self):
        """Gets the currency of this NewBusinessAnnuityProposal.  # noqa: E501

        ISO 4217 Currency code for the proposal.  # noqa: E501

        :return: The currency of this NewBusinessAnnuityProposal.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewBusinessAnnuityProposal.

        ISO 4217 Currency code for the proposal.  # noqa: E501

        :param currency: The currency of this NewBusinessAnnuityProposal.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewBusinessAnnuityProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewBusinessAnnuityProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
