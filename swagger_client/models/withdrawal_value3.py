# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WithdrawalValue3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'starts_on': 'datetime',
        'stops_on': 'datetime',
        'value': 'CurrencyValue',
        'frequency': 'str',
        'type': 'str',
        'percentage': 'float',
        'escalation': 'EscalationValue'
    }

    attribute_map = {
        'starts_on': 'startsOn',
        'stops_on': 'stopsOn',
        'value': 'value',
        'frequency': 'frequency',
        'type': 'type',
        'percentage': 'percentage',
        'escalation': 'escalation'
    }

    def __init__(self, starts_on=None, stops_on=None, value=None, frequency='Single', type=None, percentage=0.0, escalation=None):  # noqa: E501
        """WithdrawalValue3 - a model defined in Swagger"""  # noqa: E501
        self._starts_on = None
        self._stops_on = None
        self._value = None
        self._frequency = None
        self._type = None
        self._percentage = None
        self._escalation = None
        self.discriminator = None
        self.starts_on = starts_on
        if stops_on is not None:
            self.stops_on = stops_on
        if value is not None:
            self.value = value
        self.frequency = frequency
        self.type = type
        if percentage is not None:
            self.percentage = percentage
        if escalation is not None:
            self.escalation = escalation

    @property
    def starts_on(self):
        """Gets the starts_on of this WithdrawalValue3.  # noqa: E501

        Date when the withdrawal started.  # noqa: E501

        :return: The starts_on of this WithdrawalValue3.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this WithdrawalValue3.

        Date when the withdrawal started.  # noqa: E501

        :param starts_on: The starts_on of this WithdrawalValue3.  # noqa: E501
        :type: datetime
        """
        if starts_on is None:
            raise ValueError("Invalid value for `starts_on`, must not be `None`")  # noqa: E501

        self._starts_on = starts_on

    @property
    def stops_on(self):
        """Gets the stops_on of this WithdrawalValue3.  # noqa: E501

        Date when the withdrawal ended.  # noqa: E501

        :return: The stops_on of this WithdrawalValue3.  # noqa: E501
        :rtype: datetime
        """
        return self._stops_on

    @stops_on.setter
    def stops_on(self, stops_on):
        """Sets the stops_on of this WithdrawalValue3.

        Date when the withdrawal ended.  # noqa: E501

        :param stops_on: The stops_on of this WithdrawalValue3.  # noqa: E501
        :type: datetime
        """

        self._stops_on = stops_on

    @property
    def value(self):
        """Gets the value of this WithdrawalValue3.  # noqa: E501


        :return: The value of this WithdrawalValue3.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this WithdrawalValue3.


        :param value: The value of this WithdrawalValue3.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    @property
    def frequency(self):
        """Gets the frequency of this WithdrawalValue3.  # noqa: E501

        Frequency type. Defaults to Single when the type of withdrawal is not set to Regular and frequency is set to None.  # noqa: E501

        :return: The frequency of this WithdrawalValue3.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this WithdrawalValue3.

        Frequency type. Defaults to Single when the type of withdrawal is not set to Regular and frequency is set to None.  # noqa: E501

        :param frequency: The frequency of this WithdrawalValue3.  # noqa: E501
        :type: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def type(self):
        """Gets the type of this WithdrawalValue3.  # noqa: E501

        Withdrawal type.  # noqa: E501

        :return: The type of this WithdrawalValue3.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WithdrawalValue3.

        Withdrawal type.  # noqa: E501

        :param type: The type of this WithdrawalValue3.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Regular", "LumpSum", "PercentageOfInvestment", "PercentageOfFund", "Transfer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def percentage(self):
        """Gets the percentage of this WithdrawalValue3.  # noqa: E501

        Percentage of withdrawal. Should be between 0 to 100.  # noqa: E501

        :return: The percentage of this WithdrawalValue3.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this WithdrawalValue3.

        Percentage of withdrawal. Should be between 0 to 100.  # noqa: E501

        :param percentage: The percentage of this WithdrawalValue3.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def escalation(self):
        """Gets the escalation of this WithdrawalValue3.  # noqa: E501


        :return: The escalation of this WithdrawalValue3.  # noqa: E501
        :rtype: EscalationValue
        """
        return self._escalation

    @escalation.setter
    def escalation(self, escalation):
        """Sets the escalation of this WithdrawalValue3.


        :param escalation: The escalation of this WithdrawalValue3.  # noqa: E501
        :type: EscalationValue
        """

        self._escalation = escalation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WithdrawalValue3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithdrawalValue3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
