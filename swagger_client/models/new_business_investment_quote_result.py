# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.quote_result import QuoteResult  # noqa: F401,E501

class NewBusinessInvestmentQuoteResult(QuoteResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contributions': 'list[ContributionValue3]',
        'withdrawals': 'list[WithdrawalValue3]',
        'funds': 'list[ProposedFundValue]',
        'provider': 'ProductProviderRef',
        'plan_type': 'PlanTypeReference'
    }
    if hasattr(QuoteResult, "swagger_types"):
        swagger_types.update(QuoteResult.swagger_types)

    attribute_map = {
        'contributions': 'contributions',
        'withdrawals': 'withdrawals',
        'funds': 'funds',
        'provider': 'provider',
        'plan_type': 'planType'
    }
    if hasattr(QuoteResult, "attribute_map"):
        attribute_map.update(QuoteResult.attribute_map)

    def __init__(self, contributions=None, withdrawals=None, funds=None, provider=None, plan_type=None, *args, **kwargs):  # noqa: E501
        """NewBusinessInvestmentQuoteResult - a model defined in Swagger"""  # noqa: E501
        self._contributions = None
        self._withdrawals = None
        self._funds = None
        self._provider = None
        self._plan_type = None
        self.discriminator = None
        if contributions is not None:
            self.contributions = contributions
        if withdrawals is not None:
            self.withdrawals = withdrawals
        if funds is not None:
            self.funds = funds
        if provider is not None:
            self.provider = provider
        if plan_type is not None:
            self.plan_type = plan_type
        QuoteResult.__init__(self, *args, **kwargs)

    @property
    def contributions(self):
        """Gets the contributions of this NewBusinessInvestmentQuoteResult.  # noqa: E501

        Contributions for the investment quote result.  # noqa: E501

        :return: The contributions of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :rtype: list[ContributionValue3]
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this NewBusinessInvestmentQuoteResult.

        Contributions for the investment quote result.  # noqa: E501

        :param contributions: The contributions of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :type: list[ContributionValue3]
        """

        self._contributions = contributions

    @property
    def withdrawals(self):
        """Gets the withdrawals of this NewBusinessInvestmentQuoteResult.  # noqa: E501

        Withdrawals  for the investment quote result.  # noqa: E501

        :return: The withdrawals of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :rtype: list[WithdrawalValue3]
        """
        return self._withdrawals

    @withdrawals.setter
    def withdrawals(self, withdrawals):
        """Sets the withdrawals of this NewBusinessInvestmentQuoteResult.

        Withdrawals  for the investment quote result.  # noqa: E501

        :param withdrawals: The withdrawals of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :type: list[WithdrawalValue3]
        """

        self._withdrawals = withdrawals

    @property
    def funds(self):
        """Gets the funds of this NewBusinessInvestmentQuoteResult.  # noqa: E501

        Funds  for the investment quote result.  # noqa: E501

        :return: The funds of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :rtype: list[ProposedFundValue]
        """
        return self._funds

    @funds.setter
    def funds(self, funds):
        """Sets the funds of this NewBusinessInvestmentQuoteResult.

        Funds  for the investment quote result.  # noqa: E501

        :param funds: The funds of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :type: list[ProposedFundValue]
        """

        self._funds = funds

    @property
    def provider(self):
        """Gets the provider of this NewBusinessInvestmentQuoteResult.  # noqa: E501


        :return: The provider of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :rtype: ProductProviderRef
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NewBusinessInvestmentQuoteResult.


        :param provider: The provider of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :type: ProductProviderRef
        """

        self._provider = provider

    @property
    def plan_type(self):
        """Gets the plan_type of this NewBusinessInvestmentQuoteResult.  # noqa: E501


        :return: The plan_type of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :rtype: PlanTypeReference
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this NewBusinessInvestmentQuoteResult.


        :param plan_type: The plan_type of this NewBusinessInvestmentQuoteResult.  # noqa: E501
        :type: PlanTypeReference
        """

        self._plan_type = plan_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewBusinessInvestmentQuoteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewBusinessInvestmentQuoteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
