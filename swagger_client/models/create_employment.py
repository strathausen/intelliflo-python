# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_employment import BaseEmployment  # noqa: F401,E501

class CreateEmployment(BaseEmployment):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment_status': 'str'
    }
    if hasattr(BaseEmployment, "swagger_types"):
        swagger_types.update(BaseEmployment.swagger_types)

    attribute_map = {
        'employment_status': 'employmentStatus'
    }
    if hasattr(BaseEmployment, "attribute_map"):
        attribute_map.update(BaseEmployment.attribute_map)

    def __init__(self, employment_status=None, *args, **kwargs):  # noqa: E501
        """CreateEmployment - a model defined in Swagger"""  # noqa: E501
        self._employment_status = None
        self.discriminator = None
        if employment_status is not None:
            self.employment_status = employment_status
        BaseEmployment.__init__(self, *args, **kwargs)

    @property
    def employment_status(self):
        """Gets the employment_status of this CreateEmployment.  # noqa: E501

        Employment Status, 'Unknown' Employment Status is not allowed on CreateEmployment  # noqa: E501

        :return: The employment_status of this CreateEmployment.  # noqa: E501
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this CreateEmployment.

        Employment Status, 'Unknown' Employment Status is not allowed on CreateEmployment  # noqa: E501

        :param employment_status: The employment_status of this CreateEmployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "SelfEmployed", "CompanyDirector", "Retired", "Unemployed", "Houseperson", "Student", "MaternityLeave", "LongTermIllness", "ContractWorker", "Employed", "CarerOfaChildUnder16", "CarerOfaPersonOver16", "Other"]  # noqa: E501
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateEmployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateEmployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
