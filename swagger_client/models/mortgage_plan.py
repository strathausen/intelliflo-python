# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.liability_plan import LiabilityPlan  # noqa: F401,E501

class MortgagePlan(LiabilityPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'CurrencyValue',
        'repayment': 'CurrencyValue',
        'feature_expiry_date': 'datetime',
        'mortgaged_property_valuation': 'MortgagedPropertyValuationValue3',
        'deposit': 'CurrencyValue',
        'mortgage_number': 'str',
        'income_status': 'str',
        'portable': 'bool',
        'redeemed': 'bool',
        'sold': 'bool',
        'first_time_buyer': 'bool',
        'income_evidenced': 'bool',
        'consolidate_debt': 'bool',
        '_property': 'PropertyValue3',
        'lender_fee': 'MortgageFeeValue',
        'property_type': 'str',
        'rate_period_from_completion_months': 'int',
        'interest_only_repayment_vehicle': 'str',
        'has_guarantor': 'bool',
        'is_discharged_on_completion': 'bool',
        'rate_period_years': 'int',
        'reversionary_rate': 'float',
        'consent_to_let': 'ConsentToLetValue',
        'shared_ownership': 'SharedOwnershipValue',
        'shared_equity': 'MortgageEquityValue',
        'is_to_be_consolidated': 'bool',
        'is_liability_to_be_repaid': 'bool',
        'liability_repayment_description': 'str',
        'repayment_method': 'str',
        'interest': 'InterestSchemeValue',
        'term': 'MortgageTermValue',
        'application_submitted_on': 'datetime',
        'loan_to_value': 'float',
        'offer_made_on': 'datetime',
        'target_completion_date': 'datetime',
        'completion_date': 'datetime',
        'exchange_date': 'datetime',
        'review_on': 'datetime',
        'redemption_penalty': 'MortgageRedemptionValue2',
        'additional_owners': 'list[ClientRef]',
        'capital_repayment': 'CurrencyValue',
        'interest_only_repayment': 'CurrencyValue',
        'asset': 'AssetReference',
        'address': 'AddressRef'
    }
    if hasattr(LiabilityPlan, "swagger_types"):
        swagger_types.update(LiabilityPlan.swagger_types)

    attribute_map = {
        'value': 'value',
        'repayment': 'repayment',
        'feature_expiry_date': 'featureExpiryDate',
        'mortgaged_property_valuation': 'mortgagedPropertyValuation',
        'deposit': 'deposit',
        'mortgage_number': 'mortgageNumber',
        'income_status': 'incomeStatus',
        'portable': 'portable',
        'redeemed': 'redeemed',
        'sold': 'sold',
        'first_time_buyer': 'firstTimeBuyer',
        'income_evidenced': 'incomeEvidenced',
        'consolidate_debt': 'consolidateDebt',
        '_property': 'property',
        'lender_fee': 'lenderFee',
        'property_type': 'propertyType',
        'rate_period_from_completion_months': 'ratePeriodFromCompletionMonths',
        'interest_only_repayment_vehicle': 'interestOnlyRepaymentVehicle',
        'has_guarantor': 'hasGuarantor',
        'is_discharged_on_completion': 'isDischargedOnCompletion',
        'rate_period_years': 'ratePeriodYears',
        'reversionary_rate': 'reversionaryRate',
        'consent_to_let': 'consentToLet',
        'shared_ownership': 'sharedOwnership',
        'shared_equity': 'sharedEquity',
        'is_to_be_consolidated': 'isToBeConsolidated',
        'is_liability_to_be_repaid': 'isLiabilityToBeRepaid',
        'liability_repayment_description': 'liabilityRepaymentDescription',
        'repayment_method': 'repaymentMethod',
        'interest': 'interest',
        'term': 'term',
        'application_submitted_on': 'applicationSubmittedOn',
        'loan_to_value': 'loanToValue',
        'offer_made_on': 'offerMadeOn',
        'target_completion_date': 'targetCompletionDate',
        'completion_date': 'completionDate',
        'exchange_date': 'exchangeDate',
        'review_on': 'reviewOn',
        'redemption_penalty': 'redemptionPenalty',
        'additional_owners': 'additionalOwners',
        'capital_repayment': 'capitalRepayment',
        'interest_only_repayment': 'interestOnlyRepayment',
        'asset': 'asset',
        'address': 'address'
    }
    if hasattr(LiabilityPlan, "attribute_map"):
        attribute_map.update(LiabilityPlan.attribute_map)

    def __init__(self, value=None, repayment=None, feature_expiry_date=None, mortgaged_property_valuation=None, deposit=None, mortgage_number='null', income_status='null', portable=False, redeemed=False, sold=False, first_time_buyer=False, income_evidenced=False, consolidate_debt=False, _property=None, lender_fee=None, property_type='null', rate_period_from_completion_months=None, interest_only_repayment_vehicle='null', has_guarantor=False, is_discharged_on_completion=False, rate_period_years=None, reversionary_rate=None, consent_to_let=None, shared_ownership=None, shared_equity=None, is_to_be_consolidated=None, is_liability_to_be_repaid=False, liability_repayment_description='null', repayment_method='null', interest=None, term=None, application_submitted_on=None, loan_to_value=None, offer_made_on=None, target_completion_date=None, completion_date=None, exchange_date=None, review_on=None, redemption_penalty=None, additional_owners=None, capital_repayment=None, interest_only_repayment=None, asset=None, address=None, *args, **kwargs):  # noqa: E501
        """MortgagePlan - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._repayment = None
        self._feature_expiry_date = None
        self._mortgaged_property_valuation = None
        self._deposit = None
        self._mortgage_number = None
        self._income_status = None
        self._portable = None
        self._redeemed = None
        self._sold = None
        self._first_time_buyer = None
        self._income_evidenced = None
        self._consolidate_debt = None
        self.__property = None
        self._lender_fee = None
        self._property_type = None
        self._rate_period_from_completion_months = None
        self._interest_only_repayment_vehicle = None
        self._has_guarantor = None
        self._is_discharged_on_completion = None
        self._rate_period_years = None
        self._reversionary_rate = None
        self._consent_to_let = None
        self._shared_ownership = None
        self._shared_equity = None
        self._is_to_be_consolidated = None
        self._is_liability_to_be_repaid = None
        self._liability_repayment_description = None
        self._repayment_method = None
        self._interest = None
        self._term = None
        self._application_submitted_on = None
        self._loan_to_value = None
        self._offer_made_on = None
        self._target_completion_date = None
        self._completion_date = None
        self._exchange_date = None
        self._review_on = None
        self._redemption_penalty = None
        self._additional_owners = None
        self._capital_repayment = None
        self._interest_only_repayment = None
        self._asset = None
        self._address = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if repayment is not None:
            self.repayment = repayment
        if feature_expiry_date is not None:
            self.feature_expiry_date = feature_expiry_date
        if mortgaged_property_valuation is not None:
            self.mortgaged_property_valuation = mortgaged_property_valuation
        if deposit is not None:
            self.deposit = deposit
        if mortgage_number is not None:
            self.mortgage_number = mortgage_number
        if income_status is not None:
            self.income_status = income_status
        if portable is not None:
            self.portable = portable
        if redeemed is not None:
            self.redeemed = redeemed
        if sold is not None:
            self.sold = sold
        if first_time_buyer is not None:
            self.first_time_buyer = first_time_buyer
        if income_evidenced is not None:
            self.income_evidenced = income_evidenced
        if consolidate_debt is not None:
            self.consolidate_debt = consolidate_debt
        if _property is not None:
            self._property = _property
        if lender_fee is not None:
            self.lender_fee = lender_fee
        if property_type is not None:
            self.property_type = property_type
        if rate_period_from_completion_months is not None:
            self.rate_period_from_completion_months = rate_period_from_completion_months
        if interest_only_repayment_vehicle is not None:
            self.interest_only_repayment_vehicle = interest_only_repayment_vehicle
        if has_guarantor is not None:
            self.has_guarantor = has_guarantor
        if is_discharged_on_completion is not None:
            self.is_discharged_on_completion = is_discharged_on_completion
        if rate_period_years is not None:
            self.rate_period_years = rate_period_years
        if reversionary_rate is not None:
            self.reversionary_rate = reversionary_rate
        if consent_to_let is not None:
            self.consent_to_let = consent_to_let
        if shared_ownership is not None:
            self.shared_ownership = shared_ownership
        if shared_equity is not None:
            self.shared_equity = shared_equity
        if is_to_be_consolidated is not None:
            self.is_to_be_consolidated = is_to_be_consolidated
        if is_liability_to_be_repaid is not None:
            self.is_liability_to_be_repaid = is_liability_to_be_repaid
        if liability_repayment_description is not None:
            self.liability_repayment_description = liability_repayment_description
        if repayment_method is not None:
            self.repayment_method = repayment_method
        if interest is not None:
            self.interest = interest
        if term is not None:
            self.term = term
        if application_submitted_on is not None:
            self.application_submitted_on = application_submitted_on
        if loan_to_value is not None:
            self.loan_to_value = loan_to_value
        if offer_made_on is not None:
            self.offer_made_on = offer_made_on
        if target_completion_date is not None:
            self.target_completion_date = target_completion_date
        if completion_date is not None:
            self.completion_date = completion_date
        if exchange_date is not None:
            self.exchange_date = exchange_date
        if review_on is not None:
            self.review_on = review_on
        if redemption_penalty is not None:
            self.redemption_penalty = redemption_penalty
        if additional_owners is not None:
            self.additional_owners = additional_owners
        if capital_repayment is not None:
            self.capital_repayment = capital_repayment
        if interest_only_repayment is not None:
            self.interest_only_repayment = interest_only_repayment
        if asset is not None:
            self.asset = asset
        if address is not None:
            self.address = address
        LiabilityPlan.__init__(self, *args, **kwargs)

    @property
    def value(self):
        """Gets the value of this MortgagePlan.  # noqa: E501


        :return: The value of this MortgagePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MortgagePlan.


        :param value: The value of this MortgagePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    @property
    def repayment(self):
        """Gets the repayment of this MortgagePlan.  # noqa: E501


        :return: The repayment of this MortgagePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._repayment

    @repayment.setter
    def repayment(self, repayment):
        """Sets the repayment of this MortgagePlan.


        :param repayment: The repayment of this MortgagePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._repayment = repayment

    @property
    def feature_expiry_date(self):
        """Gets the feature_expiry_date of this MortgagePlan.  # noqa: E501

        Scheme expiry date (e.g. fixed term end date).  # noqa: E501

        :return: The feature_expiry_date of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._feature_expiry_date

    @feature_expiry_date.setter
    def feature_expiry_date(self, feature_expiry_date):
        """Sets the feature_expiry_date of this MortgagePlan.

        Scheme expiry date (e.g. fixed term end date).  # noqa: E501

        :param feature_expiry_date: The feature_expiry_date of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._feature_expiry_date = feature_expiry_date

    @property
    def mortgaged_property_valuation(self):
        """Gets the mortgaged_property_valuation of this MortgagePlan.  # noqa: E501


        :return: The mortgaged_property_valuation of this MortgagePlan.  # noqa: E501
        :rtype: MortgagedPropertyValuationValue3
        """
        return self._mortgaged_property_valuation

    @mortgaged_property_valuation.setter
    def mortgaged_property_valuation(self, mortgaged_property_valuation):
        """Sets the mortgaged_property_valuation of this MortgagePlan.


        :param mortgaged_property_valuation: The mortgaged_property_valuation of this MortgagePlan.  # noqa: E501
        :type: MortgagedPropertyValuationValue3
        """

        self._mortgaged_property_valuation = mortgaged_property_valuation

    @property
    def deposit(self):
        """Gets the deposit of this MortgagePlan.  # noqa: E501


        :return: The deposit of this MortgagePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this MortgagePlan.


        :param deposit: The deposit of this MortgagePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._deposit = deposit

    @property
    def mortgage_number(self):
        """Gets the mortgage_number of this MortgagePlan.  # noqa: E501

        A Provider assigned reference for the purposes of tracking a Mortgage Application until such time as that Application is approved or rejected.  # noqa: E501

        :return: The mortgage_number of this MortgagePlan.  # noqa: E501
        :rtype: str
        """
        return self._mortgage_number

    @mortgage_number.setter
    def mortgage_number(self, mortgage_number):
        """Sets the mortgage_number of this MortgagePlan.

        A Provider assigned reference for the purposes of tracking a Mortgage Application until such time as that Application is approved or rejected.  # noqa: E501

        :param mortgage_number: The mortgage_number of this MortgagePlan.  # noqa: E501
        :type: str
        """

        self._mortgage_number = mortgage_number

    @property
    def income_status(self):
        """Gets the income_status of this MortgagePlan.  # noqa: E501

        Required income status for mortgage.  # noqa: E501

        :return: The income_status of this MortgagePlan.  # noqa: E501
        :rtype: str
        """
        return self._income_status

    @income_status.setter
    def income_status(self, income_status):
        """Sets the income_status of this MortgagePlan.

        Required income status for mortgage.  # noqa: E501

        :param income_status: The income_status of this MortgagePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["FullStatus", "NonStatus", "SelfCertification"]  # noqa: E501
        if income_status not in allowed_values:
            raise ValueError(
                "Invalid value for `income_status` ({0}), must be one of {1}"  # noqa: E501
                .format(income_status, allowed_values)
            )

        self._income_status = income_status

    @property
    def portable(self):
        """Gets the portable of this MortgagePlan.  # noqa: E501

        Is the mortgage portable?  # noqa: E501

        :return: The portable of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._portable

    @portable.setter
    def portable(self, portable):
        """Sets the portable of this MortgagePlan.

        Is the mortgage portable?  # noqa: E501

        :param portable: The portable of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._portable = portable

    @property
    def redeemed(self):
        """Gets the redeemed of this MortgagePlan.  # noqa: E501

        Is the mortgage redeemed?  # noqa: E501

        :return: The redeemed of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._redeemed

    @redeemed.setter
    def redeemed(self, redeemed):
        """Sets the redeemed of this MortgagePlan.

        Is the mortgage redeemed?  # noqa: E501

        :param redeemed: The redeemed of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._redeemed = redeemed

    @property
    def sold(self):
        """Gets the sold of this MortgagePlan.  # noqa: E501

        Is client current property sold?  # noqa: E501

        :return: The sold of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._sold

    @sold.setter
    def sold(self, sold):
        """Sets the sold of this MortgagePlan.

        Is client current property sold?  # noqa: E501

        :param sold: The sold of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._sold = sold

    @property
    def first_time_buyer(self):
        """Gets the first_time_buyer of this MortgagePlan.  # noqa: E501

        Is client a first-time buyer?  # noqa: E501

        :return: The first_time_buyer of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._first_time_buyer

    @first_time_buyer.setter
    def first_time_buyer(self, first_time_buyer):
        """Sets the first_time_buyer of this MortgagePlan.

        Is client a first-time buyer?  # noqa: E501

        :param first_time_buyer: The first_time_buyer of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._first_time_buyer = first_time_buyer

    @property
    def income_evidenced(self):
        """Gets the income_evidenced of this MortgagePlan.  # noqa: E501

        Is client income evidenced?  # noqa: E501

        :return: The income_evidenced of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._income_evidenced

    @income_evidenced.setter
    def income_evidenced(self, income_evidenced):
        """Sets the income_evidenced of this MortgagePlan.

        Is client income evidenced?  # noqa: E501

        :param income_evidenced: The income_evidenced of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._income_evidenced = income_evidenced

    @property
    def consolidate_debt(self):
        """Gets the consolidate_debt of this MortgagePlan.  # noqa: E501

        Is mortgage equity to be used to consolidate debt?  # noqa: E501

        :return: The consolidate_debt of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._consolidate_debt

    @consolidate_debt.setter
    def consolidate_debt(self, consolidate_debt):
        """Sets the consolidate_debt of this MortgagePlan.

        Is mortgage equity to be used to consolidate debt?  # noqa: E501

        :param consolidate_debt: The consolidate_debt of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._consolidate_debt = consolidate_debt

    @property
    def _property(self):
        """Gets the _property of this MortgagePlan.  # noqa: E501


        :return: The _property of this MortgagePlan.  # noqa: E501
        :rtype: PropertyValue3
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this MortgagePlan.


        :param _property: The _property of this MortgagePlan.  # noqa: E501
        :type: PropertyValue3
        """

        self.__property = _property

    @property
    def lender_fee(self):
        """Gets the lender_fee of this MortgagePlan.  # noqa: E501


        :return: The lender_fee of this MortgagePlan.  # noqa: E501
        :rtype: MortgageFeeValue
        """
        return self._lender_fee

    @lender_fee.setter
    def lender_fee(self, lender_fee):
        """Sets the lender_fee of this MortgagePlan.


        :param lender_fee: The lender_fee of this MortgagePlan.  # noqa: E501
        :type: MortgageFeeValue
        """

        self._lender_fee = lender_fee

    @property
    def property_type(self):
        """Gets the property_type of this MortgagePlan.  # noqa: E501

        Property type.  # noqa: E501

        :return: The property_type of this MortgagePlan.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this MortgagePlan.

        Property type.  # noqa: E501

        :param property_type: The property_type of this MortgagePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Detached", "SemiDetached", "Terraced", "DetachedBungalow", "SemiDetachedBungalow", "TerracedBungalow", "PurposeBuiltFlat", "ConvertedFlat", "PurposeBuiltMaisonette", "ConvertedMaisonette", "OverAShop", "StudioFlat", "FlatOverFourStoreys", "ListedBuilding", "House", "DuplexSemiDetached", "UnitApartment", "Villa", "Townhouse", "Terrace", "Over55s", "GrannyFlat", "Other"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"  # noqa: E501
                .format(property_type, allowed_values)
            )

        self._property_type = property_type

    @property
    def rate_period_from_completion_months(self):
        """Gets the rate_period_from_completion_months of this MortgagePlan.  # noqa: E501

        Number of months remaining before the current rate period ends.  # noqa: E501

        :return: The rate_period_from_completion_months of this MortgagePlan.  # noqa: E501
        :rtype: int
        """
        return self._rate_period_from_completion_months

    @rate_period_from_completion_months.setter
    def rate_period_from_completion_months(self, rate_period_from_completion_months):
        """Sets the rate_period_from_completion_months of this MortgagePlan.

        Number of months remaining before the current rate period ends.  # noqa: E501

        :param rate_period_from_completion_months: The rate_period_from_completion_months of this MortgagePlan.  # noqa: E501
        :type: int
        """

        self._rate_period_from_completion_months = rate_period_from_completion_months

    @property
    def interest_only_repayment_vehicle(self):
        """Gets the interest_only_repayment_vehicle of this MortgagePlan.  # noqa: E501

        Interest only repayment vehicle.  # noqa: E501

        :return: The interest_only_repayment_vehicle of this MortgagePlan.  # noqa: E501
        :rtype: str
        """
        return self._interest_only_repayment_vehicle

    @interest_only_repayment_vehicle.setter
    def interest_only_repayment_vehicle(self, interest_only_repayment_vehicle):
        """Sets the interest_only_repayment_vehicle of this MortgagePlan.

        Interest only repayment vehicle.  # noqa: E501

        :param interest_only_repayment_vehicle: The interest_only_repayment_vehicle of this MortgagePlan.  # noqa: E501
        :type: str
        """

        self._interest_only_repayment_vehicle = interest_only_repayment_vehicle

    @property
    def has_guarantor(self):
        """Gets the has_guarantor of this MortgagePlan.  # noqa: E501

        Is there a mortgage guarantor?  # noqa: E501

        :return: The has_guarantor of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._has_guarantor

    @has_guarantor.setter
    def has_guarantor(self, has_guarantor):
        """Sets the has_guarantor of this MortgagePlan.

        Is there a mortgage guarantor?  # noqa: E501

        :param has_guarantor: The has_guarantor of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._has_guarantor = has_guarantor

    @property
    def is_discharged_on_completion(self):
        """Gets the is_discharged_on_completion of this MortgagePlan.  # noqa: E501

        Is the mortgage discharged on completion?  # noqa: E501

        :return: The is_discharged_on_completion of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_discharged_on_completion

    @is_discharged_on_completion.setter
    def is_discharged_on_completion(self, is_discharged_on_completion):
        """Sets the is_discharged_on_completion of this MortgagePlan.

        Is the mortgage discharged on completion?  # noqa: E501

        :param is_discharged_on_completion: The is_discharged_on_completion of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._is_discharged_on_completion = is_discharged_on_completion

    @property
    def rate_period_years(self):
        """Gets the rate_period_years of this MortgagePlan.  # noqa: E501

        Rate period (in years).  # noqa: E501

        :return: The rate_period_years of this MortgagePlan.  # noqa: E501
        :rtype: int
        """
        return self._rate_period_years

    @rate_period_years.setter
    def rate_period_years(self, rate_period_years):
        """Sets the rate_period_years of this MortgagePlan.

        Rate period (in years).  # noqa: E501

        :param rate_period_years: The rate_period_years of this MortgagePlan.  # noqa: E501
        :type: int
        """

        self._rate_period_years = rate_period_years

    @property
    def reversionary_rate(self):
        """Gets the reversionary_rate of this MortgagePlan.  # noqa: E501

        Standard Variable Rate.  # noqa: E501

        :return: The reversionary_rate of this MortgagePlan.  # noqa: E501
        :rtype: float
        """
        return self._reversionary_rate

    @reversionary_rate.setter
    def reversionary_rate(self, reversionary_rate):
        """Sets the reversionary_rate of this MortgagePlan.

        Standard Variable Rate.  # noqa: E501

        :param reversionary_rate: The reversionary_rate of this MortgagePlan.  # noqa: E501
        :type: float
        """

        self._reversionary_rate = reversionary_rate

    @property
    def consent_to_let(self):
        """Gets the consent_to_let of this MortgagePlan.  # noqa: E501


        :return: The consent_to_let of this MortgagePlan.  # noqa: E501
        :rtype: ConsentToLetValue
        """
        return self._consent_to_let

    @consent_to_let.setter
    def consent_to_let(self, consent_to_let):
        """Sets the consent_to_let of this MortgagePlan.


        :param consent_to_let: The consent_to_let of this MortgagePlan.  # noqa: E501
        :type: ConsentToLetValue
        """

        self._consent_to_let = consent_to_let

    @property
    def shared_ownership(self):
        """Gets the shared_ownership of this MortgagePlan.  # noqa: E501


        :return: The shared_ownership of this MortgagePlan.  # noqa: E501
        :rtype: SharedOwnershipValue
        """
        return self._shared_ownership

    @shared_ownership.setter
    def shared_ownership(self, shared_ownership):
        """Sets the shared_ownership of this MortgagePlan.


        :param shared_ownership: The shared_ownership of this MortgagePlan.  # noqa: E501
        :type: SharedOwnershipValue
        """

        self._shared_ownership = shared_ownership

    @property
    def shared_equity(self):
        """Gets the shared_equity of this MortgagePlan.  # noqa: E501


        :return: The shared_equity of this MortgagePlan.  # noqa: E501
        :rtype: MortgageEquityValue
        """
        return self._shared_equity

    @shared_equity.setter
    def shared_equity(self, shared_equity):
        """Sets the shared_equity of this MortgagePlan.


        :param shared_equity: The shared_equity of this MortgagePlan.  # noqa: E501
        :type: MortgageEquityValue
        """

        self._shared_equity = shared_equity

    @property
    def is_to_be_consolidated(self):
        """Gets the is_to_be_consolidated of this MortgagePlan.  # noqa: E501

        Consolidate  # noqa: E501

        :return: The is_to_be_consolidated of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_to_be_consolidated

    @is_to_be_consolidated.setter
    def is_to_be_consolidated(self, is_to_be_consolidated):
        """Sets the is_to_be_consolidated of this MortgagePlan.

        Consolidate  # noqa: E501

        :param is_to_be_consolidated: The is_to_be_consolidated of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._is_to_be_consolidated = is_to_be_consolidated

    @property
    def is_liability_to_be_repaid(self):
        """Gets the is_liability_to_be_repaid of this MortgagePlan.  # noqa: E501

        Whether liability is to be repaid?  # noqa: E501

        :return: The is_liability_to_be_repaid of this MortgagePlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_liability_to_be_repaid

    @is_liability_to_be_repaid.setter
    def is_liability_to_be_repaid(self, is_liability_to_be_repaid):
        """Sets the is_liability_to_be_repaid of this MortgagePlan.

        Whether liability is to be repaid?  # noqa: E501

        :param is_liability_to_be_repaid: The is_liability_to_be_repaid of this MortgagePlan.  # noqa: E501
        :type: bool
        """

        self._is_liability_to_be_repaid = is_liability_to_be_repaid

    @property
    def liability_repayment_description(self):
        """Gets the liability_repayment_description of this MortgagePlan.  # noqa: E501

        How will liability be repaid  # noqa: E501

        :return: The liability_repayment_description of this MortgagePlan.  # noqa: E501
        :rtype: str
        """
        return self._liability_repayment_description

    @liability_repayment_description.setter
    def liability_repayment_description(self, liability_repayment_description):
        """Sets the liability_repayment_description of this MortgagePlan.

        How will liability be repaid  # noqa: E501

        :param liability_repayment_description: The liability_repayment_description of this MortgagePlan.  # noqa: E501
        :type: str
        """

        self._liability_repayment_description = liability_repayment_description

    @property
    def repayment_method(self):
        """Gets the repayment_method of this MortgagePlan.  # noqa: E501

        Repayment method type.  # noqa: E501

        :return: The repayment_method of this MortgagePlan.  # noqa: E501
        :rtype: str
        """
        return self._repayment_method

    @repayment_method.setter
    def repayment_method(self, repayment_method):
        """Sets the repayment_method of this MortgagePlan.

        Repayment method type.  # noqa: E501

        :param repayment_method: The repayment_method of this MortgagePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["InterestOnlySaleOfProperty", "CapitalAndInterest", "SplitRepayment", "InterestOnlyDownsizing", "InterestOnlyOther", "InterestOnlyEndowment", "InterestOnlyNoInvestmentVehicle", "InterestOnlyPension", "InterestOnly", "InterestRollupSaleOfProperty", "InterestOnlyISA"]  # noqa: E501
        if repayment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_method` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_method, allowed_values)
            )

        self._repayment_method = repayment_method

    @property
    def interest(self):
        """Gets the interest of this MortgagePlan.  # noqa: E501


        :return: The interest of this MortgagePlan.  # noqa: E501
        :rtype: InterestSchemeValue
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this MortgagePlan.


        :param interest: The interest of this MortgagePlan.  # noqa: E501
        :type: InterestSchemeValue
        """

        self._interest = interest

    @property
    def term(self):
        """Gets the term of this MortgagePlan.  # noqa: E501


        :return: The term of this MortgagePlan.  # noqa: E501
        :rtype: MortgageTermValue
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this MortgagePlan.


        :param term: The term of this MortgagePlan.  # noqa: E501
        :type: MortgageTermValue
        """

        self._term = term

    @property
    def application_submitted_on(self):
        """Gets the application_submitted_on of this MortgagePlan.  # noqa: E501

        Date mortgage application submitted.  # noqa: E501

        :return: The application_submitted_on of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._application_submitted_on

    @application_submitted_on.setter
    def application_submitted_on(self, application_submitted_on):
        """Sets the application_submitted_on of this MortgagePlan.

        Date mortgage application submitted.  # noqa: E501

        :param application_submitted_on: The application_submitted_on of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._application_submitted_on = application_submitted_on

    @property
    def loan_to_value(self):
        """Gets the loan_to_value of this MortgagePlan.  # noqa: E501

        Loan to value percentage.  # noqa: E501

        :return: The loan_to_value of this MortgagePlan.  # noqa: E501
        :rtype: float
        """
        return self._loan_to_value

    @loan_to_value.setter
    def loan_to_value(self, loan_to_value):
        """Sets the loan_to_value of this MortgagePlan.

        Loan to value percentage.  # noqa: E501

        :param loan_to_value: The loan_to_value of this MortgagePlan.  # noqa: E501
        :type: float
        """

        self._loan_to_value = loan_to_value

    @property
    def offer_made_on(self):
        """Gets the offer_made_on of this MortgagePlan.  # noqa: E501

        Date mortgage offer made on.  # noqa: E501

        :return: The offer_made_on of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_made_on

    @offer_made_on.setter
    def offer_made_on(self, offer_made_on):
        """Sets the offer_made_on of this MortgagePlan.

        Date mortgage offer made on.  # noqa: E501

        :param offer_made_on: The offer_made_on of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._offer_made_on = offer_made_on

    @property
    def target_completion_date(self):
        """Gets the target_completion_date of this MortgagePlan.  # noqa: E501

        Target completion date.  # noqa: E501

        :return: The target_completion_date of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._target_completion_date

    @target_completion_date.setter
    def target_completion_date(self, target_completion_date):
        """Sets the target_completion_date of this MortgagePlan.

        Target completion date.  # noqa: E501

        :param target_completion_date: The target_completion_date of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._target_completion_date = target_completion_date

    @property
    def completion_date(self):
        """Gets the completion_date of this MortgagePlan.  # noqa: E501

        Completion date.  # noqa: E501

        :return: The completion_date of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this MortgagePlan.

        Completion date.  # noqa: E501

        :param completion_date: The completion_date of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def exchange_date(self):
        """Gets the exchange_date of this MortgagePlan.  # noqa: E501

        Exchange date.  # noqa: E501

        :return: The exchange_date of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._exchange_date

    @exchange_date.setter
    def exchange_date(self, exchange_date):
        """Sets the exchange_date of this MortgagePlan.

        Exchange date.  # noqa: E501

        :param exchange_date: The exchange_date of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._exchange_date = exchange_date

    @property
    def review_on(self):
        """Gets the review_on of this MortgagePlan.  # noqa: E501

        Mortgage review date.  # noqa: E501

        :return: The review_on of this MortgagePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._review_on

    @review_on.setter
    def review_on(self, review_on):
        """Sets the review_on of this MortgagePlan.

        Mortgage review date.  # noqa: E501

        :param review_on: The review_on of this MortgagePlan.  # noqa: E501
        :type: datetime
        """

        self._review_on = review_on

    @property
    def redemption_penalty(self):
        """Gets the redemption_penalty of this MortgagePlan.  # noqa: E501


        :return: The redemption_penalty of this MortgagePlan.  # noqa: E501
        :rtype: MortgageRedemptionValue2
        """
        return self._redemption_penalty

    @redemption_penalty.setter
    def redemption_penalty(self, redemption_penalty):
        """Sets the redemption_penalty of this MortgagePlan.


        :param redemption_penalty: The redemption_penalty of this MortgagePlan.  # noqa: E501
        :type: MortgageRedemptionValue2
        """

        self._redemption_penalty = redemption_penalty

    @property
    def additional_owners(self):
        """Gets the additional_owners of this MortgagePlan.  # noqa: E501

        Additional owners (Maximum 2).  # noqa: E501

        :return: The additional_owners of this MortgagePlan.  # noqa: E501
        :rtype: list[ClientRef]
        """
        return self._additional_owners

    @additional_owners.setter
    def additional_owners(self, additional_owners):
        """Sets the additional_owners of this MortgagePlan.

        Additional owners (Maximum 2).  # noqa: E501

        :param additional_owners: The additional_owners of this MortgagePlan.  # noqa: E501
        :type: list[ClientRef]
        """

        self._additional_owners = additional_owners

    @property
    def capital_repayment(self):
        """Gets the capital_repayment of this MortgagePlan.  # noqa: E501


        :return: The capital_repayment of this MortgagePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._capital_repayment

    @capital_repayment.setter
    def capital_repayment(self, capital_repayment):
        """Sets the capital_repayment of this MortgagePlan.


        :param capital_repayment: The capital_repayment of this MortgagePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._capital_repayment = capital_repayment

    @property
    def interest_only_repayment(self):
        """Gets the interest_only_repayment of this MortgagePlan.  # noqa: E501


        :return: The interest_only_repayment of this MortgagePlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._interest_only_repayment

    @interest_only_repayment.setter
    def interest_only_repayment(self, interest_only_repayment):
        """Sets the interest_only_repayment of this MortgagePlan.


        :param interest_only_repayment: The interest_only_repayment of this MortgagePlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._interest_only_repayment = interest_only_repayment

    @property
    def asset(self):
        """Gets the asset of this MortgagePlan.  # noqa: E501


        :return: The asset of this MortgagePlan.  # noqa: E501
        :rtype: AssetReference
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this MortgagePlan.


        :param asset: The asset of this MortgagePlan.  # noqa: E501
        :type: AssetReference
        """

        self._asset = asset

    @property
    def address(self):
        """Gets the address of this MortgagePlan.  # noqa: E501


        :return: The address of this MortgagePlan.  # noqa: E501
        :rtype: AddressRef
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MortgagePlan.


        :param address: The address of this MortgagePlan.  # noqa: E501
        :type: AddressRef
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MortgagePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MortgagePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
