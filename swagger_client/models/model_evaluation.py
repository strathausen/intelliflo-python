# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelEvaluation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drift_algorithm': 'str',
        'drift_value': 'float',
        'holdings': 'list[ModelHoldingDocument]'
    }

    attribute_map = {
        'drift_algorithm': 'driftAlgorithm',
        'drift_value': 'driftValue',
        'holdings': 'holdings'
    }

    def __init__(self, drift_algorithm='AvgDeviationPercentage', drift_value=0.0, holdings=None):  # noqa: E501
        """ModelEvaluation - a model defined in Swagger"""  # noqa: E501
        self._drift_algorithm = None
        self._drift_value = None
        self._holdings = None
        self.discriminator = None
        if drift_algorithm is not None:
            self.drift_algorithm = drift_algorithm
        if drift_value is not None:
            self.drift_value = drift_value
        self.holdings = holdings

    @property
    def drift_algorithm(self):
        """Gets the drift_algorithm of this ModelEvaluation.  # noqa: E501

        Drift algorithm type.  # noqa: E501

        :return: The drift_algorithm of this ModelEvaluation.  # noqa: E501
        :rtype: str
        """
        return self._drift_algorithm

    @drift_algorithm.setter
    def drift_algorithm(self, drift_algorithm):
        """Sets the drift_algorithm of this ModelEvaluation.

        Drift algorithm type.  # noqa: E501

        :param drift_algorithm: The drift_algorithm of this ModelEvaluation.  # noqa: E501
        :type: str
        """
        allowed_values = ["AvgDeviationPercentage", "StdDeviationPercentage", "TotalDeviationPercentage", "MaxDeviationPercentage", "AvgAbsDeviationPercentage", "StdAbsDeviationPercentage", "TotalAbsDeviationPercentage", "MaxAbsDeviationPercentage"]  # noqa: E501
        if drift_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `drift_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(drift_algorithm, allowed_values)
            )

        self._drift_algorithm = drift_algorithm

    @property
    def drift_value(self):
        """Gets the drift_value of this ModelEvaluation.  # noqa: E501

        Drift value.  # noqa: E501

        :return: The drift_value of this ModelEvaluation.  # noqa: E501
        :rtype: float
        """
        return self._drift_value

    @drift_value.setter
    def drift_value(self, drift_value):
        """Sets the drift_value of this ModelEvaluation.

        Drift value.  # noqa: E501

        :param drift_value: The drift_value of this ModelEvaluation.  # noqa: E501
        :type: float
        """

        self._drift_value = drift_value

    @property
    def holdings(self):
        """Gets the holdings of this ModelEvaluation.  # noqa: E501

        Fund or equity holdings for the model.  # noqa: E501

        :return: The holdings of this ModelEvaluation.  # noqa: E501
        :rtype: list[ModelHoldingDocument]
        """
        return self._holdings

    @holdings.setter
    def holdings(self, holdings):
        """Sets the holdings of this ModelEvaluation.

        Fund or equity holdings for the model.  # noqa: E501

        :param holdings: The holdings of this ModelEvaluation.  # noqa: E501
        :type: list[ModelHoldingDocument]
        """
        if holdings is None:
            raise ValueError("Invalid value for `holdings`, must not be `None`")  # noqa: E501

        self._holdings = holdings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelEvaluation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelEvaluation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
