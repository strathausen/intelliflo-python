# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundProposal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'parent_href': 'str',
        'holdings': 'list[FundProposalHoldingValue]',
        'model': 'CodedRef',
        'client_id': 'int',
        'plan_id': 'int'
    }

    attribute_map = {
        'href': 'href',
        'parent_href': 'parent_href',
        'holdings': 'holdings',
        'model': 'model',
        'client_id': 'clientId',
        'plan_id': 'planId'
    }

    def __init__(self, href=None, parent_href=None, holdings=None, model=None, client_id=None, plan_id=None):  # noqa: E501
        """FundProposal - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._parent_href = None
        self._holdings = None
        self._model = None
        self._client_id = None
        self._plan_id = None
        self.discriminator = None
        if href is not None:
            self.href = href
        if parent_href is not None:
            self.parent_href = parent_href
        if holdings is not None:
            self.holdings = holdings
        if model is not None:
            self.model = model
        if client_id is not None:
            self.client_id = client_id
        if plan_id is not None:
            self.plan_id = plan_id

    @property
    def href(self):
        """Gets the href of this FundProposal.  # noqa: E501

        Fund proposal hypermedia link.  # noqa: E501

        :return: The href of this FundProposal.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FundProposal.

        Fund proposal hypermedia link.  # noqa: E501

        :param href: The href of this FundProposal.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def parent_href(self):
        """Gets the parent_href of this FundProposal.  # noqa: E501

        Plan hypermedia link.  # noqa: E501

        :return: The parent_href of this FundProposal.  # noqa: E501
        :rtype: str
        """
        return self._parent_href

    @parent_href.setter
    def parent_href(self, parent_href):
        """Sets the parent_href of this FundProposal.

        Plan hypermedia link.  # noqa: E501

        :param parent_href: The parent_href of this FundProposal.  # noqa: E501
        :type: str
        """

        self._parent_href = parent_href

    @property
    def holdings(self):
        """Gets the holdings of this FundProposal.  # noqa: E501


        :return: The holdings of this FundProposal.  # noqa: E501
        :rtype: list[FundProposalHoldingValue]
        """
        return self._holdings

    @holdings.setter
    def holdings(self, holdings):
        """Sets the holdings of this FundProposal.


        :param holdings: The holdings of this FundProposal.  # noqa: E501
        :type: list[FundProposalHoldingValue]
        """

        self._holdings = holdings

    @property
    def model(self):
        """Gets the model of this FundProposal.  # noqa: E501


        :return: The model of this FundProposal.  # noqa: E501
        :rtype: CodedRef
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this FundProposal.


        :param model: The model of this FundProposal.  # noqa: E501
        :type: CodedRef
        """

        self._model = model

    @property
    def client_id(self):
        """Gets the client_id of this FundProposal.  # noqa: E501


        :return: The client_id of this FundProposal.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FundProposal.


        :param client_id: The client_id of this FundProposal.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def plan_id(self):
        """Gets the plan_id of this FundProposal.  # noqa: E501


        :return: The plan_id of this FundProposal.  # noqa: E501
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this FundProposal.


        :param plan_id: The plan_id of this FundProposal.  # noqa: E501
        :type: int
        """

        self._plan_id = plan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
