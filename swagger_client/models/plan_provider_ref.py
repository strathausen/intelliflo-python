# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanProviderRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'provider': 'NamedProductProviderRef',
        'plan_type': 'PlanTypeShortReference',
        'policy_number': 'str',
        'reference': 'str',
        'current_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'provider': 'provider',
        'plan_type': 'planType',
        'policy_number': 'policyNumber',
        'reference': 'reference',
        'current_status': 'currentStatus'
    }

    def __init__(self, id=None, href=None, provider=None, plan_type=None, policy_number=None, reference=None, current_status=None):  # noqa: E501
        """PlanProviderRef - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._provider = None
        self._plan_type = None
        self._policy_number = None
        self._reference = None
        self._current_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if provider is not None:
            self.provider = provider
        if plan_type is not None:
            self.plan_type = plan_type
        if policy_number is not None:
            self.policy_number = policy_number
        if reference is not None:
            self.reference = reference
        if current_status is not None:
            self.current_status = current_status

    @property
    def id(self):
        """Gets the id of this PlanProviderRef.  # noqa: E501

        Plan identifier.  # noqa: E501

        :return: The id of this PlanProviderRef.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanProviderRef.

        Plan identifier.  # noqa: E501

        :param id: The id of this PlanProviderRef.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this PlanProviderRef.  # noqa: E501

        Reference to the plan.  # noqa: E501

        :return: The href of this PlanProviderRef.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PlanProviderRef.

        Reference to the plan.  # noqa: E501

        :param href: The href of this PlanProviderRef.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def provider(self):
        """Gets the provider of this PlanProviderRef.  # noqa: E501


        :return: The provider of this PlanProviderRef.  # noqa: E501
        :rtype: NamedProductProviderRef
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PlanProviderRef.


        :param provider: The provider of this PlanProviderRef.  # noqa: E501
        :type: NamedProductProviderRef
        """

        self._provider = provider

    @property
    def plan_type(self):
        """Gets the plan_type of this PlanProviderRef.  # noqa: E501


        :return: The plan_type of this PlanProviderRef.  # noqa: E501
        :rtype: PlanTypeShortReference
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this PlanProviderRef.


        :param plan_type: The plan_type of this PlanProviderRef.  # noqa: E501
        :type: PlanTypeShortReference
        """

        self._plan_type = plan_type

    @property
    def policy_number(self):
        """Gets the policy_number of this PlanProviderRef.  # noqa: E501


        :return: The policy_number of this PlanProviderRef.  # noqa: E501
        :rtype: str
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number):
        """Sets the policy_number of this PlanProviderRef.


        :param policy_number: The policy_number of this PlanProviderRef.  # noqa: E501
        :type: str
        """

        self._policy_number = policy_number

    @property
    def reference(self):
        """Gets the reference of this PlanProviderRef.  # noqa: E501


        :return: The reference of this PlanProviderRef.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PlanProviderRef.


        :param reference: The reference of this PlanProviderRef.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def current_status(self):
        """Gets the current_status of this PlanProviderRef.  # noqa: E501


        :return: The current_status of this PlanProviderRef.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this PlanProviderRef.


        :param current_status: The current_status of this PlanProviderRef.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanProviderRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanProviderRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
