# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProposedContributionValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'starts_on': 'datetime',
        'stops_on': 'datetime',
        'value': 'CurrencyValue',
        'previous_value': 'CurrencyValue',
        'frequency': 'str',
        'type': 'str',
        'transfer_type': 'str',
        'is_full_transfer': 'bool',
        'tax_basis': 'str',
        'contributor_type': 'str',
        'escalation': 'EscalationValue',
        'contribution_reference': 'ContributionReference',
        'is_stop_existing_contribution': 'bool',
        'transfer_from': 'NamedPlanReference',
        'include_in_initial_fees': 'bool'
    }

    attribute_map = {
        'starts_on': 'startsOn',
        'stops_on': 'stopsOn',
        'value': 'value',
        'previous_value': 'previousValue',
        'frequency': 'frequency',
        'type': 'type',
        'transfer_type': 'transferType',
        'is_full_transfer': 'isFullTransfer',
        'tax_basis': 'taxBasis',
        'contributor_type': 'contributorType',
        'escalation': 'escalation',
        'contribution_reference': 'contributionReference',
        'is_stop_existing_contribution': 'isStopExistingContribution',
        'transfer_from': 'transferFrom',
        'include_in_initial_fees': 'includeInInitialFees'
    }

    def __init__(self, starts_on=None, stops_on=None, value=None, previous_value=None, frequency='Single', type=None, transfer_type=None, is_full_transfer=None, tax_basis=None, contributor_type='Self', escalation=None, contribution_reference=None, is_stop_existing_contribution=None, transfer_from=None, include_in_initial_fees=None):  # noqa: E501
        """ProposedContributionValue - a model defined in Swagger"""  # noqa: E501
        self._starts_on = None
        self._stops_on = None
        self._value = None
        self._previous_value = None
        self._frequency = None
        self._type = None
        self._transfer_type = None
        self._is_full_transfer = None
        self._tax_basis = None
        self._contributor_type = None
        self._escalation = None
        self._contribution_reference = None
        self._is_stop_existing_contribution = None
        self._transfer_from = None
        self._include_in_initial_fees = None
        self.discriminator = None
        self.starts_on = starts_on
        if stops_on is not None:
            self.stops_on = stops_on
        if value is not None:
            self.value = value
        if previous_value is not None:
            self.previous_value = previous_value
        self.frequency = frequency
        self.type = type
        if transfer_type is not None:
            self.transfer_type = transfer_type
        if is_full_transfer is not None:
            self.is_full_transfer = is_full_transfer
        if tax_basis is not None:
            self.tax_basis = tax_basis
        if contributor_type is not None:
            self.contributor_type = contributor_type
        if escalation is not None:
            self.escalation = escalation
        if contribution_reference is not None:
            self.contribution_reference = contribution_reference
        if is_stop_existing_contribution is not None:
            self.is_stop_existing_contribution = is_stop_existing_contribution
        if transfer_from is not None:
            self.transfer_from = transfer_from
        if include_in_initial_fees is not None:
            self.include_in_initial_fees = include_in_initial_fees

    @property
    def starts_on(self):
        """Gets the starts_on of this ProposedContributionValue.  # noqa: E501

        Date when the contribution started.  # noqa: E501

        :return: The starts_on of this ProposedContributionValue.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this ProposedContributionValue.

        Date when the contribution started.  # noqa: E501

        :param starts_on: The starts_on of this ProposedContributionValue.  # noqa: E501
        :type: datetime
        """
        if starts_on is None:
            raise ValueError("Invalid value for `starts_on`, must not be `None`")  # noqa: E501

        self._starts_on = starts_on

    @property
    def stops_on(self):
        """Gets the stops_on of this ProposedContributionValue.  # noqa: E501

        Date when the contribution ended.  # noqa: E501

        :return: The stops_on of this ProposedContributionValue.  # noqa: E501
        :rtype: datetime
        """
        return self._stops_on

    @stops_on.setter
    def stops_on(self, stops_on):
        """Sets the stops_on of this ProposedContributionValue.

        Date when the contribution ended.  # noqa: E501

        :param stops_on: The stops_on of this ProposedContributionValue.  # noqa: E501
        :type: datetime
        """

        self._stops_on = stops_on

    @property
    def value(self):
        """Gets the value of this ProposedContributionValue.  # noqa: E501


        :return: The value of this ProposedContributionValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProposedContributionValue.


        :param value: The value of this ProposedContributionValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._value = value

    @property
    def previous_value(self):
        """Gets the previous_value of this ProposedContributionValue.  # noqa: E501


        :return: The previous_value of this ProposedContributionValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this ProposedContributionValue.


        :param previous_value: The previous_value of this ProposedContributionValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._previous_value = previous_value

    @property
    def frequency(self):
        """Gets the frequency of this ProposedContributionValue.  # noqa: E501

        Frequency type. When contribution is not of type Regular with frequency type None, then default value will be used instead.  # noqa: E501

        :return: The frequency of this ProposedContributionValue.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ProposedContributionValue.

        Frequency type. When contribution is not of type Regular with frequency type None, then default value will be used instead.  # noqa: E501

        :param frequency: The frequency of this ProposedContributionValue.  # noqa: E501
        :type: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "Weekly", "Fortnightly", "FourWeekly", "Monthly", "Quarterly", "HalfYearly", "Annually", "Single"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def type(self):
        """Gets the type of this ProposedContributionValue.  # noqa: E501

        Contribution type for the contribution.  # noqa: E501

        :return: The type of this ProposedContributionValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProposedContributionValue.

        Contribution type for the contribution.  # noqa: E501

        :param type: The type of this ProposedContributionValue.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Regular", "LumpSum", "Transfer", "Rebate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def transfer_type(self):
        """Gets the transfer_type of this ProposedContributionValue.  # noqa: E501

        Transfer type applicable for the Contribution of type transfer.  # noqa: E501

        :return: The transfer_type of this ProposedContributionValue.  # noqa: E501
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this ProposedContributionValue.

        Transfer type applicable for the Contribution of type transfer.  # noqa: E501

        :param transfer_type: The transfer_type of this ProposedContributionValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Cash", "Inspecie"]  # noqa: E501
        if transfer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transfer_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transfer_type, allowed_values)
            )

        self._transfer_type = transfer_type

    @property
    def is_full_transfer(self):
        """Gets the is_full_transfer of this ProposedContributionValue.  # noqa: E501

        Determines whether transfer is full or partial.  # noqa: E501

        :return: The is_full_transfer of this ProposedContributionValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_full_transfer

    @is_full_transfer.setter
    def is_full_transfer(self, is_full_transfer):
        """Sets the is_full_transfer of this ProposedContributionValue.

        Determines whether transfer is full or partial.  # noqa: E501

        :param is_full_transfer: The is_full_transfer of this ProposedContributionValue.  # noqa: E501
        :type: bool
        """

        self._is_full_transfer = is_full_transfer

    @property
    def tax_basis(self):
        """Gets the tax_basis of this ProposedContributionValue.  # noqa: E501

        Tax Basis on proposed contributions.  # noqa: E501

        :return: The tax_basis of this ProposedContributionValue.  # noqa: E501
        :rtype: str
        """
        return self._tax_basis

    @tax_basis.setter
    def tax_basis(self, tax_basis):
        """Sets the tax_basis of this ProposedContributionValue.

        Tax Basis on proposed contributions.  # noqa: E501

        :param tax_basis: The tax_basis of this ProposedContributionValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Gross", "Net", "NA"]  # noqa: E501
        if tax_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_basis` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_basis, allowed_values)
            )

        self._tax_basis = tax_basis

    @property
    def contributor_type(self):
        """Gets the contributor_type of this ProposedContributionValue.  # noqa: E501

        Contributor type for the contribution. Default will be Self if not supplied.  # noqa: E501

        :return: The contributor_type of this ProposedContributionValue.  # noqa: E501
        :rtype: str
        """
        return self._contributor_type

    @contributor_type.setter
    def contributor_type(self, contributor_type):
        """Sets the contributor_type of this ProposedContributionValue.

        Contributor type for the contribution. Default will be Self if not supplied.  # noqa: E501

        :param contributor_type: The contributor_type of this ProposedContributionValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Self", "Employer", "Other", "N_A", "Government", "Relative", "SalarySacrifice", "PartnerOrSpouse"]  # noqa: E501
        if contributor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contributor_type` ({0}), must be one of {1}"  # noqa: E501
                .format(contributor_type, allowed_values)
            )

        self._contributor_type = contributor_type

    @property
    def escalation(self):
        """Gets the escalation of this ProposedContributionValue.  # noqa: E501


        :return: The escalation of this ProposedContributionValue.  # noqa: E501
        :rtype: EscalationValue
        """
        return self._escalation

    @escalation.setter
    def escalation(self, escalation):
        """Sets the escalation of this ProposedContributionValue.


        :param escalation: The escalation of this ProposedContributionValue.  # noqa: E501
        :type: EscalationValue
        """

        self._escalation = escalation

    @property
    def contribution_reference(self):
        """Gets the contribution_reference of this ProposedContributionValue.  # noqa: E501


        :return: The contribution_reference of this ProposedContributionValue.  # noqa: E501
        :rtype: ContributionReference
        """
        return self._contribution_reference

    @contribution_reference.setter
    def contribution_reference(self, contribution_reference):
        """Sets the contribution_reference of this ProposedContributionValue.


        :param contribution_reference: The contribution_reference of this ProposedContributionValue.  # noqa: E501
        :type: ContributionReference
        """

        self._contribution_reference = contribution_reference

    @property
    def is_stop_existing_contribution(self):
        """Gets the is_stop_existing_contribution of this ProposedContributionValue.  # noqa: E501

        Determines whether current regular contribution/premium should be stopped.  # noqa: E501

        :return: The is_stop_existing_contribution of this ProposedContributionValue.  # noqa: E501
        :rtype: bool
        """
        return self._is_stop_existing_contribution

    @is_stop_existing_contribution.setter
    def is_stop_existing_contribution(self, is_stop_existing_contribution):
        """Sets the is_stop_existing_contribution of this ProposedContributionValue.

        Determines whether current regular contribution/premium should be stopped.  # noqa: E501

        :param is_stop_existing_contribution: The is_stop_existing_contribution of this ProposedContributionValue.  # noqa: E501
        :type: bool
        """

        self._is_stop_existing_contribution = is_stop_existing_contribution

    @property
    def transfer_from(self):
        """Gets the transfer_from of this ProposedContributionValue.  # noqa: E501


        :return: The transfer_from of this ProposedContributionValue.  # noqa: E501
        :rtype: NamedPlanReference
        """
        return self._transfer_from

    @transfer_from.setter
    def transfer_from(self, transfer_from):
        """Sets the transfer_from of this ProposedContributionValue.


        :param transfer_from: The transfer_from of this ProposedContributionValue.  # noqa: E501
        :type: NamedPlanReference
        """

        self._transfer_from = transfer_from

    @property
    def include_in_initial_fees(self):
        """Gets the include_in_initial_fees of this ProposedContributionValue.  # noqa: E501

        Determines whether to include Initial Fees or Not.  # noqa: E501

        :return: The include_in_initial_fees of this ProposedContributionValue.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_initial_fees

    @include_in_initial_fees.setter
    def include_in_initial_fees(self, include_in_initial_fees):
        """Sets the include_in_initial_fees of this ProposedContributionValue.

        Determines whether to include Initial Fees or Not.  # noqa: E501

        :param include_in_initial_fees: The include_in_initial_fees of this ProposedContributionValue.  # noqa: E501
        :type: bool
        """

        self._include_in_initial_fees = include_in_initial_fees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProposedContributionValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProposedContributionValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
