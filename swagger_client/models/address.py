# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'residency_status': 'str',
        'type': 'str',
        'resident_from': 'datetime',
        'resident_to': 'datetime',
        'status': 'str',
        'is_default': 'bool',
        'address': 'AddressDetailsValue',
        'is_registered_on_electoral_roll': 'bool',
        'is_potential_mortgage': 'bool',
        '_property': 'PropertyDetailsValue'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'residency_status': 'residencyStatus',
        'type': 'type',
        'resident_from': 'residentFrom',
        'resident_to': 'residentTo',
        'status': 'status',
        'is_default': 'isDefault',
        'address': 'address',
        'is_registered_on_electoral_roll': 'isRegisteredOnElectoralRoll',
        'is_potential_mortgage': 'isPotentialMortgage',
        '_property': 'property'
    }

    def __init__(self, id=None, href=None, residency_status='null', type=None, resident_from=None, resident_to=None, status='null', is_default=False, address=None, is_registered_on_electoral_roll=False, is_potential_mortgage=False, _property=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._residency_status = None
        self._type = None
        self._resident_from = None
        self._resident_to = None
        self._status = None
        self._is_default = None
        self._address = None
        self._is_registered_on_electoral_roll = None
        self._is_potential_mortgage = None
        self.__property = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if residency_status is not None:
            self.residency_status = residency_status
        if type is not None:
            self.type = type
        if resident_from is not None:
            self.resident_from = resident_from
        if resident_to is not None:
            self.resident_to = resident_to
        if status is not None:
            self.status = status
        if is_default is not None:
            self.is_default = is_default
        self.address = address
        if is_registered_on_electoral_roll is not None:
            self.is_registered_on_electoral_roll = is_registered_on_electoral_roll
        if is_potential_mortgage is not None:
            self.is_potential_mortgage = is_potential_mortgage
        if _property is not None:
            self._property = _property

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501


        :return: The id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.


        :param id: The id of this Address.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Address.  # noqa: E501


        :return: The href of this Address.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Address.


        :param href: The href of this Address.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def residency_status(self):
        """Gets the residency_status of this Address.  # noqa: E501

        Residency status  # noqa: E501

        :return: The residency_status of this Address.  # noqa: E501
        :rtype: str
        """
        return self._residency_status

    @residency_status.setter
    def residency_status(self, residency_status):
        """Sets the residency_status of this Address.

        Residency status  # noqa: E501

        :param residency_status: The residency_status of this Address.  # noqa: E501
        :type: str
        """
        allowed_values = ["OwnerOccupierMortgaged", "OwnerOccupierUnencumbered", "TenantPrivate", "TenantLocalAuthorityHousingAssociation", "LivingWithFamilyFriends"]  # noqa: E501
        if residency_status not in allowed_values:
            raise ValueError(
                "Invalid value for `residency_status` ({0}), must be one of {1}"  # noqa: E501
                .format(residency_status, allowed_values)
            )

        self._residency_status = residency_status

    @property
    def type(self):
        """Gets the type of this Address.  # noqa: E501

        Address type  # noqa: E501

        :return: The type of this Address.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Address.

        Address type  # noqa: E501

        :param type: The type of this Address.  # noqa: E501
        :type: str
        """
        allowed_values = ["Home", "Business", "Other", "Registered", "Correspondence"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def resident_from(self):
        """Gets the resident_from of this Address.  # noqa: E501

        Resident from  # noqa: E501

        :return: The resident_from of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._resident_from

    @resident_from.setter
    def resident_from(self, resident_from):
        """Sets the resident_from of this Address.

        Resident from  # noqa: E501

        :param resident_from: The resident_from of this Address.  # noqa: E501
        :type: datetime
        """

        self._resident_from = resident_from

    @property
    def resident_to(self):
        """Gets the resident_to of this Address.  # noqa: E501

        Resident to  # noqa: E501

        :return: The resident_to of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._resident_to

    @resident_to.setter
    def resident_to(self, resident_to):
        """Sets the resident_to of this Address.

        Resident to  # noqa: E501

        :param resident_to: The resident_to of this Address.  # noqa: E501
        :type: datetime
        """

        self._resident_to = resident_to

    @property
    def status(self):
        """Gets the status of this Address.  # noqa: E501

        Address status  # noqa: E501

        :return: The status of this Address.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Address.

        Address status  # noqa: E501

        :param status: The status of this Address.  # noqa: E501
        :type: str
        """
        allowed_values = ["Current", "Previous", "Unknown", "Prospective"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_default(self):
        """Gets the is_default of this Address.  # noqa: E501

        Is default address flag  # noqa: E501

        :return: The is_default of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Address.

        Is default address flag  # noqa: E501

        :param is_default: The is_default of this Address.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def address(self):
        """Gets the address of this Address.  # noqa: E501


        :return: The address of this Address.  # noqa: E501
        :rtype: AddressDetailsValue
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Address.


        :param address: The address of this Address.  # noqa: E501
        :type: AddressDetailsValue
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def is_registered_on_electoral_roll(self):
        """Gets the is_registered_on_electoral_roll of this Address.  # noqa: E501

        This parameter indicates whether the addressee is registered at this address to vote within the electoral district.  # noqa: E501

        :return: The is_registered_on_electoral_roll of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered_on_electoral_roll

    @is_registered_on_electoral_roll.setter
    def is_registered_on_electoral_roll(self, is_registered_on_electoral_roll):
        """Sets the is_registered_on_electoral_roll of this Address.

        This parameter indicates whether the addressee is registered at this address to vote within the electoral district.  # noqa: E501

        :param is_registered_on_electoral_roll: The is_registered_on_electoral_roll of this Address.  # noqa: E501
        :type: bool
        """

        self._is_registered_on_electoral_roll = is_registered_on_electoral_roll

    @property
    def is_potential_mortgage(self):
        """Gets the is_potential_mortgage of this Address.  # noqa: E501

        This parameter indicates whether the address can be mortgage.  # noqa: E501

        :return: The is_potential_mortgage of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_potential_mortgage

    @is_potential_mortgage.setter
    def is_potential_mortgage(self, is_potential_mortgage):
        """Sets the is_potential_mortgage of this Address.

        This parameter indicates whether the address can be mortgage.  # noqa: E501

        :param is_potential_mortgage: The is_potential_mortgage of this Address.  # noqa: E501
        :type: bool
        """

        self._is_potential_mortgage = is_potential_mortgage

    @property
    def _property(self):
        """Gets the _property of this Address.  # noqa: E501


        :return: The _property of this Address.  # noqa: E501
        :rtype: PropertyDetailsValue
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Address.


        :param _property: The _property of this Address.  # noqa: E501
        :type: PropertyDetailsValue
        """

        self.__property = _property

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
