# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_advice_template_step import BaseAdviceTemplateStep  # noqa: F401,E501

class DocumentTemplateStep(BaseAdviceTemplateStep):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'templates': 'list[AdviceTemplateAuthorTemplates]',
        'modes_of_signature': 'list[str]',
        'service_case': 'AdviceTemplateStepServiceCase'
    }
    if hasattr(BaseAdviceTemplateStep, "swagger_types"):
        swagger_types.update(BaseAdviceTemplateStep.swagger_types)

    attribute_map = {
        'templates': 'templates',
        'modes_of_signature': 'modesOfSignature',
        'service_case': 'serviceCase'
    }
    if hasattr(BaseAdviceTemplateStep, "attribute_map"):
        attribute_map.update(BaseAdviceTemplateStep.attribute_map)

    def __init__(self, templates=None, modes_of_signature=None, service_case=None, *args, **kwargs):  # noqa: E501
        """DocumentTemplateStep - a model defined in Swagger"""  # noqa: E501
        self._templates = None
        self._modes_of_signature = None
        self._service_case = None
        self.discriminator = None
        if templates is not None:
            self.templates = templates
        if modes_of_signature is not None:
            self.modes_of_signature = modes_of_signature
        if service_case is not None:
            self.service_case = service_case
        BaseAdviceTemplateStep.__init__(self, *args, **kwargs)

    @property
    def templates(self):
        """Gets the templates of this DocumentTemplateStep.  # noqa: E501

        Author Templates for advice template.  # noqa: E501

        :return: The templates of this DocumentTemplateStep.  # noqa: E501
        :rtype: list[AdviceTemplateAuthorTemplates]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this DocumentTemplateStep.

        Author Templates for advice template.  # noqa: E501

        :param templates: The templates of this DocumentTemplateStep.  # noqa: E501
        :type: list[AdviceTemplateAuthorTemplates]
        """

        self._templates = templates

    @property
    def modes_of_signature(self):
        """Gets the modes_of_signature of this DocumentTemplateStep.  # noqa: E501

        Modes Of Signature for advice template.  # noqa: E501

        :return: The modes_of_signature of this DocumentTemplateStep.  # noqa: E501
        :rtype: list[str]
        """
        return self._modes_of_signature

    @modes_of_signature.setter
    def modes_of_signature(self, modes_of_signature):
        """Sets the modes_of_signature of this DocumentTemplateStep.

        Modes Of Signature for advice template.  # noqa: E501

        :param modes_of_signature: The modes_of_signature of this DocumentTemplateStep.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SignManually", "SignUsingPfp", "SignUsingEmail"]  # noqa: E501
        if not set(modes_of_signature).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `modes_of_signature` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(modes_of_signature) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._modes_of_signature = modes_of_signature

    @property
    def service_case(self):
        """Gets the service_case of this DocumentTemplateStep.  # noqa: E501


        :return: The service_case of this DocumentTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateStepServiceCase
        """
        return self._service_case

    @service_case.setter
    def service_case(self, service_case):
        """Sets the service_case of this DocumentTemplateStep.


        :param service_case: The service_case of this DocumentTemplateStep.  # noqa: E501
        :type: AdviceTemplateStepServiceCase
        """

        self._service_case = service_case

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentTemplateStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentTemplateStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
