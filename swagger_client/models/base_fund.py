# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseFund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'source': 'str',
        'name': 'str',
        'short_name': 'str',
        'price': 'CurrencyValue',
        'priced_on': 'datetime',
        'fund_prices_href': 'str',
        'type': 'str',
        'codes': 'FundEquityCodes',
        'currency': 'str',
        '_yield': 'CurrencyValue',
        'inc_acc': 'str',
        'initial_charge': 'float',
        'exit_charge': 'float',
        'annual_mgmt_charge': 'float',
        'is_closed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'source': 'source',
        'name': 'name',
        'short_name': 'shortName',
        'price': 'price',
        'priced_on': 'pricedOn',
        'fund_prices_href': 'fundPrices_href',
        'type': 'type',
        'codes': 'codes',
        'currency': 'currency',
        '_yield': 'yield',
        'inc_acc': 'incAcc',
        'initial_charge': 'initialCharge',
        'exit_charge': 'exitCharge',
        'annual_mgmt_charge': 'annualMgmtCharge',
        'is_closed': 'isClosed'
    }

    def __init__(self, id=None, href=None, source=None, name=None, short_name=None, price=None, priced_on=None, fund_prices_href=None, type=None, codes=None, currency=None, _yield=None, inc_acc=None, initial_charge=None, exit_charge=None, annual_mgmt_charge=None, is_closed=None):  # noqa: E501
        """BaseFund - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._source = None
        self._name = None
        self._short_name = None
        self._price = None
        self._priced_on = None
        self._fund_prices_href = None
        self._type = None
        self._codes = None
        self._currency = None
        self.__yield = None
        self._inc_acc = None
        self._initial_charge = None
        self._exit_charge = None
        self._annual_mgmt_charge = None
        self._is_closed = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if source is not None:
            self.source = source
        self.name = name
        if short_name is not None:
            self.short_name = short_name
        if price is not None:
            self.price = price
        if priced_on is not None:
            self.priced_on = priced_on
        if fund_prices_href is not None:
            self.fund_prices_href = fund_prices_href
        self.type = type
        if codes is not None:
            self.codes = codes
        if currency is not None:
            self.currency = currency
        if _yield is not None:
            self._yield = _yield
        if inc_acc is not None:
            self.inc_acc = inc_acc
        if initial_charge is not None:
            self.initial_charge = initial_charge
        if exit_charge is not None:
            self.exit_charge = exit_charge
        if annual_mgmt_charge is not None:
            self.annual_mgmt_charge = annual_mgmt_charge
        if is_closed is not None:
            self.is_closed = is_closed

    @property
    def id(self):
        """Gets the id of this BaseFund.  # noqa: E501

        Fund Id  eg. F1234 for Feed Fund  or M1234 for Manual Fund  # noqa: E501

        :return: The id of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseFund.

        Fund Id  eg. F1234 for Feed Fund  or M1234 for Manual Fund  # noqa: E501

        :param id: The id of this BaseFund.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BaseFund.  # noqa: E501

        Fund Href  # noqa: E501

        :return: The href of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseFund.

        Fund Href  # noqa: E501

        :param href: The href of this BaseFund.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def source(self):
        """Gets the source of this BaseFund.  # noqa: E501

        Fund source  # noqa: E501

        :return: The source of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BaseFund.

        Fund source  # noqa: E501

        :param source: The source of this BaseFund.  # noqa: E501
        :type: str
        """
        allowed_values = ["FinExFeed", "NonFeed", "MorningStarFeed", "Equity"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def name(self):
        """Gets the name of this BaseFund.  # noqa: E501

        Fund Name  # noqa: E501

        :return: The name of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseFund.

        Fund Name  # noqa: E501

        :param name: The name of this BaseFund.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this BaseFund.  # noqa: E501

        Fund short name  # noqa: E501

        :return: The short_name of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this BaseFund.

        Fund short name  # noqa: E501

        :param short_name: The short_name of this BaseFund.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def price(self):
        """Gets the price of this BaseFund.  # noqa: E501


        :return: The price of this BaseFund.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BaseFund.


        :param price: The price of this BaseFund.  # noqa: E501
        :type: CurrencyValue
        """

        self._price = price

    @property
    def priced_on(self):
        """Gets the priced_on of this BaseFund.  # noqa: E501

        Price date  # noqa: E501

        :return: The priced_on of this BaseFund.  # noqa: E501
        :rtype: datetime
        """
        return self._priced_on

    @priced_on.setter
    def priced_on(self, priced_on):
        """Sets the priced_on of this BaseFund.

        Price date  # noqa: E501

        :param priced_on: The priced_on of this BaseFund.  # noqa: E501
        :type: datetime
        """

        self._priced_on = priced_on

    @property
    def fund_prices_href(self):
        """Gets the fund_prices_href of this BaseFund.  # noqa: E501

        Href to Fund Prices  # noqa: E501

        :return: The fund_prices_href of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._fund_prices_href

    @fund_prices_href.setter
    def fund_prices_href(self, fund_prices_href):
        """Sets the fund_prices_href of this BaseFund.

        Href to Fund Prices  # noqa: E501

        :param fund_prices_href: The fund_prices_href of this BaseFund.  # noqa: E501
        :type: str
        """

        self._fund_prices_href = fund_prices_href

    @property
    def type(self):
        """Gets the type of this BaseFund.  # noqa: E501

        Fund Type  # noqa: E501

        :return: The type of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseFund.

        Fund Type  # noqa: E501

        :param type: The type of this BaseFund.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["UkAuthorisedUnitTrust", "UkoeiCs", "OtherUkUnitTrusts", "UkInsuranceFunds", "UkPensionFunds", "OffshoreFsaFunds", "OffshoreInsuranceFunds", "Equities", "Unknown", "UkInvestmentTrusts", "OffshoreRegulatedFunds", "IndicativeNetLife", "IndicativeNetPension", "CashFunds"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def codes(self):
        """Gets the codes of this BaseFund.  # noqa: E501


        :return: The codes of this BaseFund.  # noqa: E501
        :rtype: FundEquityCodes
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this BaseFund.


        :param codes: The codes of this BaseFund.  # noqa: E501
        :type: FundEquityCodes
        """

        self._codes = codes

    @property
    def currency(self):
        """Gets the currency of this BaseFund.  # noqa: E501

        The currency of the fund.  # noqa: E501

        :return: The currency of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BaseFund.

        The currency of the fund.  # noqa: E501

        :param currency: The currency of this BaseFund.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def _yield(self):
        """Gets the _yield of this BaseFund.  # noqa: E501


        :return: The _yield of this BaseFund.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this BaseFund.


        :param _yield: The _yield of this BaseFund.  # noqa: E501
        :type: CurrencyValue
        """

        self.__yield = _yield

    @property
    def inc_acc(self):
        """Gets the inc_acc of this BaseFund.  # noqa: E501

        Income or accumulation  # noqa: E501

        :return: The inc_acc of this BaseFund.  # noqa: E501
        :rtype: str
        """
        return self._inc_acc

    @inc_acc.setter
    def inc_acc(self, inc_acc):
        """Sets the inc_acc of this BaseFund.

        Income or accumulation  # noqa: E501

        :param inc_acc: The inc_acc of this BaseFund.  # noqa: E501
        :type: str
        """
        allowed_values = ["Income", "Accumulate"]  # noqa: E501
        if inc_acc not in allowed_values:
            raise ValueError(
                "Invalid value for `inc_acc` ({0}), must be one of {1}"  # noqa: E501
                .format(inc_acc, allowed_values)
            )

        self._inc_acc = inc_acc

    @property
    def initial_charge(self):
        """Gets the initial_charge of this BaseFund.  # noqa: E501

        Initial charge  # noqa: E501

        :return: The initial_charge of this BaseFund.  # noqa: E501
        :rtype: float
        """
        return self._initial_charge

    @initial_charge.setter
    def initial_charge(self, initial_charge):
        """Sets the initial_charge of this BaseFund.

        Initial charge  # noqa: E501

        :param initial_charge: The initial_charge of this BaseFund.  # noqa: E501
        :type: float
        """

        self._initial_charge = initial_charge

    @property
    def exit_charge(self):
        """Gets the exit_charge of this BaseFund.  # noqa: E501

        Exit charge  # noqa: E501

        :return: The exit_charge of this BaseFund.  # noqa: E501
        :rtype: float
        """
        return self._exit_charge

    @exit_charge.setter
    def exit_charge(self, exit_charge):
        """Sets the exit_charge of this BaseFund.

        Exit charge  # noqa: E501

        :param exit_charge: The exit_charge of this BaseFund.  # noqa: E501
        :type: float
        """

        self._exit_charge = exit_charge

    @property
    def annual_mgmt_charge(self):
        """Gets the annual_mgmt_charge of this BaseFund.  # noqa: E501

        Annual management charge  # noqa: E501

        :return: The annual_mgmt_charge of this BaseFund.  # noqa: E501
        :rtype: float
        """
        return self._annual_mgmt_charge

    @annual_mgmt_charge.setter
    def annual_mgmt_charge(self, annual_mgmt_charge):
        """Sets the annual_mgmt_charge of this BaseFund.

        Annual management charge  # noqa: E501

        :param annual_mgmt_charge: The annual_mgmt_charge of this BaseFund.  # noqa: E501
        :type: float
        """

        self._annual_mgmt_charge = annual_mgmt_charge

    @property
    def is_closed(self):
        """Gets the is_closed of this BaseFund.  # noqa: E501

        Closed fund flag  # noqa: E501

        :return: The is_closed of this BaseFund.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this BaseFund.

        Closed fund flag  # noqa: E501

        :param is_closed: The is_closed of this BaseFund.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseFund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseFund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
