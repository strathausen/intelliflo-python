# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductBenefitFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'quote_result': 'QuoteResultRef',
        'existing_product': 'ProductProviderValue',
        'benefits': 'list[ProductBenefitValue]',
        'feature_properties': 'list[FeaturePropertyValue]',
        'costs': 'list[CostValue]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'quote_result': 'quoteResult',
        'existing_product': 'existingProduct',
        'benefits': 'benefits',
        'feature_properties': 'featureProperties',
        'costs': 'costs'
    }

    def __init__(self, id=None, href=None, quote_result=None, existing_product=None, benefits=None, feature_properties=None, costs=None):  # noqa: E501
        """ProductBenefitFeatures - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._quote_result = None
        self._existing_product = None
        self._benefits = None
        self._feature_properties = None
        self._costs = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if quote_result is not None:
            self.quote_result = quote_result
        if existing_product is not None:
            self.existing_product = existing_product
        if benefits is not None:
            self.benefits = benefits
        if feature_properties is not None:
            self.feature_properties = feature_properties
        if costs is not None:
            self.costs = costs

    @property
    def id(self):
        """Gets the id of this ProductBenefitFeatures.  # noqa: E501


        :return: The id of this ProductBenefitFeatures.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductBenefitFeatures.


        :param id: The id of this ProductBenefitFeatures.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ProductBenefitFeatures.  # noqa: E501


        :return: The href of this ProductBenefitFeatures.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProductBenefitFeatures.


        :param href: The href of this ProductBenefitFeatures.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def quote_result(self):
        """Gets the quote_result of this ProductBenefitFeatures.  # noqa: E501


        :return: The quote_result of this ProductBenefitFeatures.  # noqa: E501
        :rtype: QuoteResultRef
        """
        return self._quote_result

    @quote_result.setter
    def quote_result(self, quote_result):
        """Sets the quote_result of this ProductBenefitFeatures.


        :param quote_result: The quote_result of this ProductBenefitFeatures.  # noqa: E501
        :type: QuoteResultRef
        """

        self._quote_result = quote_result

    @property
    def existing_product(self):
        """Gets the existing_product of this ProductBenefitFeatures.  # noqa: E501


        :return: The existing_product of this ProductBenefitFeatures.  # noqa: E501
        :rtype: ProductProviderValue
        """
        return self._existing_product

    @existing_product.setter
    def existing_product(self, existing_product):
        """Sets the existing_product of this ProductBenefitFeatures.


        :param existing_product: The existing_product of this ProductBenefitFeatures.  # noqa: E501
        :type: ProductProviderValue
        """

        self._existing_product = existing_product

    @property
    def benefits(self):
        """Gets the benefits of this ProductBenefitFeatures.  # noqa: E501


        :return: The benefits of this ProductBenefitFeatures.  # noqa: E501
        :rtype: list[ProductBenefitValue]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this ProductBenefitFeatures.


        :param benefits: The benefits of this ProductBenefitFeatures.  # noqa: E501
        :type: list[ProductBenefitValue]
        """

        self._benefits = benefits

    @property
    def feature_properties(self):
        """Gets the feature_properties of this ProductBenefitFeatures.  # noqa: E501


        :return: The feature_properties of this ProductBenefitFeatures.  # noqa: E501
        :rtype: list[FeaturePropertyValue]
        """
        return self._feature_properties

    @feature_properties.setter
    def feature_properties(self, feature_properties):
        """Sets the feature_properties of this ProductBenefitFeatures.


        :param feature_properties: The feature_properties of this ProductBenefitFeatures.  # noqa: E501
        :type: list[FeaturePropertyValue]
        """

        self._feature_properties = feature_properties

    @property
    def costs(self):
        """Gets the costs of this ProductBenefitFeatures.  # noqa: E501


        :return: The costs of this ProductBenefitFeatures.  # noqa: E501
        :rtype: list[CostValue]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this ProductBenefitFeatures.


        :param costs: The costs of this ProductBenefitFeatures.  # noqa: E501
        :type: list[CostValue]
        """

        self._costs = costs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductBenefitFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductBenefitFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
