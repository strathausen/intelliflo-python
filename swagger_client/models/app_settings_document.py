# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppSettingsDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'app_id': 'str',
        'created_by': 'UserRef',
        'group': 'GroupRef',
        'settings': 'dict(str, str)',
        'tenant': 'TenantRef2'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'app_id': 'appId',
        'created_by': 'createdBy',
        'group': 'group',
        'settings': 'settings',
        'tenant': 'tenant'
    }

    def __init__(self, id=None, href=None, app_id=None, created_by=None, group=None, settings=None, tenant=None):  # noqa: E501
        """AppSettingsDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._app_id = None
        self._created_by = None
        self._group = None
        self._settings = None
        self._tenant = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if app_id is not None:
            self.app_id = app_id
        if created_by is not None:
            self.created_by = created_by
        if group is not None:
            self.group = group
        if settings is not None:
            self.settings = settings
        if tenant is not None:
            self.tenant = tenant

    @property
    def id(self):
        """Gets the id of this AppSettingsDocument.  # noqa: E501


        :return: The id of this AppSettingsDocument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppSettingsDocument.


        :param id: The id of this AppSettingsDocument.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this AppSettingsDocument.  # noqa: E501


        :return: The href of this AppSettingsDocument.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AppSettingsDocument.


        :param href: The href of this AppSettingsDocument.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def app_id(self):
        """Gets the app_id of this AppSettingsDocument.  # noqa: E501


        :return: The app_id of this AppSettingsDocument.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppSettingsDocument.


        :param app_id: The app_id of this AppSettingsDocument.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def created_by(self):
        """Gets the created_by of this AppSettingsDocument.  # noqa: E501


        :return: The created_by of this AppSettingsDocument.  # noqa: E501
        :rtype: UserRef
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AppSettingsDocument.


        :param created_by: The created_by of this AppSettingsDocument.  # noqa: E501
        :type: UserRef
        """

        self._created_by = created_by

    @property
    def group(self):
        """Gets the group of this AppSettingsDocument.  # noqa: E501


        :return: The group of this AppSettingsDocument.  # noqa: E501
        :rtype: GroupRef
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AppSettingsDocument.


        :param group: The group of this AppSettingsDocument.  # noqa: E501
        :type: GroupRef
        """

        self._group = group

    @property
    def settings(self):
        """Gets the settings of this AppSettingsDocument.  # noqa: E501


        :return: The settings of this AppSettingsDocument.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AppSettingsDocument.


        :param settings: The settings of this AppSettingsDocument.  # noqa: E501
        :type: dict(str, str)
        """

        self._settings = settings

    @property
    def tenant(self):
        """Gets the tenant of this AppSettingsDocument.  # noqa: E501


        :return: The tenant of this AppSettingsDocument.  # noqa: E501
        :rtype: TenantRef2
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this AppSettingsDocument.


        :param tenant: The tenant of this AppSettingsDocument.  # noqa: E501
        :type: TenantRef2
        """

        self._tenant = tenant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppSettingsDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppSettingsDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
