# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.liability_plan import LiabilityPlan  # noqa: F401,E501

class LoanCreditPlan(LiabilityPlan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_loan_value': 'CurrencyValue',
        'loan_type': 'str',
        'rate_type': 'str',
        'protection_type': 'str',
        'redemption_notes': 'str',
        'loan_term': 'str',
        'credit_limit': 'CurrencyValue',
        'interest_rate': 'float',
        'is_to_be_consolidated': 'bool',
        'is_liability_to_be_repaid': 'bool',
        'liability_repayment_description': 'str'
    }
    if hasattr(LiabilityPlan, "swagger_types"):
        swagger_types.update(LiabilityPlan.swagger_types)

    attribute_map = {
        'original_loan_value': 'originalLoanValue',
        'loan_type': 'loanType',
        'rate_type': 'rateType',
        'protection_type': 'protectionType',
        'redemption_notes': 'redemptionNotes',
        'loan_term': 'loanTerm',
        'credit_limit': 'creditLimit',
        'interest_rate': 'interestRate',
        'is_to_be_consolidated': 'isToBeConsolidated',
        'is_liability_to_be_repaid': 'isLiabilityToBeRepaid',
        'liability_repayment_description': 'liabilityRepaymentDescription'
    }
    if hasattr(LiabilityPlan, "attribute_map"):
        attribute_map.update(LiabilityPlan.attribute_map)

    def __init__(self, original_loan_value=None, loan_type='null', rate_type='null', protection_type='null', redemption_notes='null', loan_term=None, credit_limit=None, interest_rate=None, is_to_be_consolidated=None, is_liability_to_be_repaid=False, liability_repayment_description='null', *args, **kwargs):  # noqa: E501
        """LoanCreditPlan - a model defined in Swagger"""  # noqa: E501
        self._original_loan_value = None
        self._loan_type = None
        self._rate_type = None
        self._protection_type = None
        self._redemption_notes = None
        self._loan_term = None
        self._credit_limit = None
        self._interest_rate = None
        self._is_to_be_consolidated = None
        self._is_liability_to_be_repaid = None
        self._liability_repayment_description = None
        self.discriminator = None
        if original_loan_value is not None:
            self.original_loan_value = original_loan_value
        if loan_type is not None:
            self.loan_type = loan_type
        if rate_type is not None:
            self.rate_type = rate_type
        if protection_type is not None:
            self.protection_type = protection_type
        if redemption_notes is not None:
            self.redemption_notes = redemption_notes
        if loan_term is not None:
            self.loan_term = loan_term
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if is_to_be_consolidated is not None:
            self.is_to_be_consolidated = is_to_be_consolidated
        if is_liability_to_be_repaid is not None:
            self.is_liability_to_be_repaid = is_liability_to_be_repaid
        if liability_repayment_description is not None:
            self.liability_repayment_description = liability_repayment_description
        LiabilityPlan.__init__(self, *args, **kwargs)

    @property
    def original_loan_value(self):
        """Gets the original_loan_value of this LoanCreditPlan.  # noqa: E501


        :return: The original_loan_value of this LoanCreditPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._original_loan_value

    @original_loan_value.setter
    def original_loan_value(self, original_loan_value):
        """Sets the original_loan_value of this LoanCreditPlan.


        :param original_loan_value: The original_loan_value of this LoanCreditPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._original_loan_value = original_loan_value

    @property
    def loan_type(self):
        """Gets the loan_type of this LoanCreditPlan.  # noqa: E501

        Type of loan repayment.  # noqa: E501

        :return: The loan_type of this LoanCreditPlan.  # noqa: E501
        :rtype: str
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this LoanCreditPlan.

        Type of loan repayment.  # noqa: E501

        :param loan_type: The loan_type of this LoanCreditPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Repayment", "InterestOnly"]  # noqa: E501
        if loan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(loan_type, allowed_values)
            )

        self._loan_type = loan_type

    @property
    def rate_type(self):
        """Gets the rate_type of this LoanCreditPlan.  # noqa: E501

        Type of interest rate product.  # noqa: E501

        :return: The rate_type of this LoanCreditPlan.  # noqa: E501
        :rtype: str
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this LoanCreditPlan.

        Type of interest rate product.  # noqa: E501

        :param rate_type: The rate_type of this LoanCreditPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Capped", "Discount", "Fixed", "Flexible", "LIBOR", "OffsetRate", "Standard", "Tracker", "Variable"]  # noqa: E501
        if rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rate_type, allowed_values)
            )

        self._rate_type = rate_type

    @property
    def protection_type(self):
        """Gets the protection_type of this LoanCreditPlan.  # noqa: E501

        Protection type.  # noqa: E501

        :return: The protection_type of this LoanCreditPlan.  # noqa: E501
        :rtype: str
        """
        return self._protection_type

    @protection_type.setter
    def protection_type(self, protection_type):
        """Sets the protection_type of this LoanCreditPlan.

        Protection type.  # noqa: E501

        :param protection_type: The protection_type of this LoanCreditPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["No", "Life", "CIC", "ASU", "LifeCIC", "LifeASU", "CICASU", "LifeCICASU"]  # noqa: E501
        if protection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(protection_type, allowed_values)
            )

        self._protection_type = protection_type

    @property
    def redemption_notes(self):
        """Gets the redemption_notes of this LoanCreditPlan.  # noqa: E501

        Terms of redemption.  # noqa: E501

        :return: The redemption_notes of this LoanCreditPlan.  # noqa: E501
        :rtype: str
        """
        return self._redemption_notes

    @redemption_notes.setter
    def redemption_notes(self, redemption_notes):
        """Sets the redemption_notes of this LoanCreditPlan.

        Terms of redemption.  # noqa: E501

        :param redemption_notes: The redemption_notes of this LoanCreditPlan.  # noqa: E501
        :type: str
        """

        self._redemption_notes = redemption_notes

    @property
    def loan_term(self):
        """Gets the loan_term of this LoanCreditPlan.  # noqa: E501

        Loan term in ISO-8601 and restricted to months between 0 to 1200.  # noqa: E501

        :return: The loan_term of this LoanCreditPlan.  # noqa: E501
        :rtype: str
        """
        return self._loan_term

    @loan_term.setter
    def loan_term(self, loan_term):
        """Sets the loan_term of this LoanCreditPlan.

        Loan term in ISO-8601 and restricted to months between 0 to 1200.  # noqa: E501

        :param loan_term: The loan_term of this LoanCreditPlan.  # noqa: E501
        :type: str
        """

        self._loan_term = loan_term

    @property
    def credit_limit(self):
        """Gets the credit_limit of this LoanCreditPlan.  # noqa: E501


        :return: The credit_limit of this LoanCreditPlan.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this LoanCreditPlan.


        :param credit_limit: The credit_limit of this LoanCreditPlan.  # noqa: E501
        :type: CurrencyValue
        """

        self._credit_limit = credit_limit

    @property
    def interest_rate(self):
        """Gets the interest_rate of this LoanCreditPlan.  # noqa: E501


        :return: The interest_rate of this LoanCreditPlan.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this LoanCreditPlan.


        :param interest_rate: The interest_rate of this LoanCreditPlan.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def is_to_be_consolidated(self):
        """Gets the is_to_be_consolidated of this LoanCreditPlan.  # noqa: E501

        Consolidate  # noqa: E501

        :return: The is_to_be_consolidated of this LoanCreditPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_to_be_consolidated

    @is_to_be_consolidated.setter
    def is_to_be_consolidated(self, is_to_be_consolidated):
        """Sets the is_to_be_consolidated of this LoanCreditPlan.

        Consolidate  # noqa: E501

        :param is_to_be_consolidated: The is_to_be_consolidated of this LoanCreditPlan.  # noqa: E501
        :type: bool
        """

        self._is_to_be_consolidated = is_to_be_consolidated

    @property
    def is_liability_to_be_repaid(self):
        """Gets the is_liability_to_be_repaid of this LoanCreditPlan.  # noqa: E501

        Whether liability is to be repaid?  # noqa: E501

        :return: The is_liability_to_be_repaid of this LoanCreditPlan.  # noqa: E501
        :rtype: bool
        """
        return self._is_liability_to_be_repaid

    @is_liability_to_be_repaid.setter
    def is_liability_to_be_repaid(self, is_liability_to_be_repaid):
        """Sets the is_liability_to_be_repaid of this LoanCreditPlan.

        Whether liability is to be repaid?  # noqa: E501

        :param is_liability_to_be_repaid: The is_liability_to_be_repaid of this LoanCreditPlan.  # noqa: E501
        :type: bool
        """

        self._is_liability_to_be_repaid = is_liability_to_be_repaid

    @property
    def liability_repayment_description(self):
        """Gets the liability_repayment_description of this LoanCreditPlan.  # noqa: E501

        How will liability be repaid?  # noqa: E501

        :return: The liability_repayment_description of this LoanCreditPlan.  # noqa: E501
        :rtype: str
        """
        return self._liability_repayment_description

    @liability_repayment_description.setter
    def liability_repayment_description(self, liability_repayment_description):
        """Sets the liability_repayment_description of this LoanCreditPlan.

        How will liability be repaid?  # noqa: E501

        :param liability_repayment_description: The liability_repayment_description of this LoanCreditPlan.  # noqa: E501
        :type: str
        """

        self._liability_repayment_description = liability_repayment_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanCreditPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanCreditPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
