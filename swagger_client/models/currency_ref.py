# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrencyRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'rate': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'rate': 'rate'
    }

    def __init__(self, currency=None, rate=None):  # noqa: E501
        """CurrencyRef - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._rate = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if rate is not None:
            self.rate = rate

    @property
    def currency(self):
        """Gets the currency of this CurrencyRef.  # noqa: E501


        :return: The currency of this CurrencyRef.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CurrencyRef.


        :param currency: The currency of this CurrencyRef.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def rate(self):
        """Gets the rate of this CurrencyRef.  # noqa: E501

        Indicates the most recent exchange rate.  The exchange rate returned is the rate in reference to the regional currency. (eg. If the Regional  Currency is GBP, and Plan Currency is EUR, the response will show the exchange rate 1GBP = 1.10  EUR )  # noqa: E501

        :return: The rate of this CurrencyRef.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this CurrencyRef.

        Indicates the most recent exchange rate.  The exchange rate returned is the rate in reference to the regional currency. (eg. If the Regional  Currency is GBP, and Plan Currency is EUR, the response will show the exchange rate 1GBP = 1.10  EUR )  # noqa: E501

        :param rate: The rate of this CurrencyRef.  # noqa: E501
        :type: float
        """

        self._rate = rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
