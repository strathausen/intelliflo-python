# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Insight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client': 'InsightsClientRef',
        'code': 'str',
        'title': 'str',
        'sub_title': 'str',
        'body': 'str',
        'display_hint': 'str',
        'nav_key': 'str',
        'nav_context': 'dict(str, str)',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'client': 'client',
        'code': 'code',
        'title': 'title',
        'sub_title': 'subTitle',
        'body': 'body',
        'display_hint': 'displayHint',
        'nav_key': 'navKey',
        'nav_context': 'navContext',
        'created_at': 'createdAt'
    }

    def __init__(self, id=None, client=None, code=None, title=None, sub_title=None, body=None, display_hint=None, nav_key=None, nav_context=None, created_at=None):  # noqa: E501
        """Insight - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client = None
        self._code = None
        self._title = None
        self._sub_title = None
        self._body = None
        self._display_hint = None
        self._nav_key = None
        self._nav_context = None
        self._created_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if client is not None:
            self.client = client
        self.code = code
        if title is not None:
            self.title = title
        if sub_title is not None:
            self.sub_title = sub_title
        self.body = body
        self.display_hint = display_hint
        self.nav_key = nav_key
        if nav_context is not None:
            self.nav_context = nav_context
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this Insight.  # noqa: E501

        The unique identifier for the Insight.  # noqa: E501

        :return: The id of this Insight.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Insight.

        The unique identifier for the Insight.  # noqa: E501

        :param id: The id of this Insight.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client(self):
        """Gets the client of this Insight.  # noqa: E501


        :return: The client of this Insight.  # noqa: E501
        :rtype: InsightsClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Insight.


        :param client: The client of this Insight.  # noqa: E501
        :type: InsightsClientRef
        """

        self._client = client

    @property
    def code(self):
        """Gets the code of this Insight.  # noqa: E501

        The code identifying the type of insight.  # noqa: E501

        :return: The code of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Insight.

        The code identifying the type of insight.  # noqa: E501

        :param code: The code of this Insight.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        allowed_values = ["LargeExpense", "LargeIncome", "GoalProgress", "Top5Expenses", "NetWorth", "PlanValuation", "MessageReceived", "JustReleased", "Rebalance", "OpenBanking"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"  # noqa: E501
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def title(self):
        """Gets the title of this Insight.  # noqa: E501

        The title for the Insight.  # noqa: E501

        :return: The title of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Insight.

        The title for the Insight.  # noqa: E501

        :param title: The title of this Insight.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def sub_title(self):
        """Gets the sub_title of this Insight.  # noqa: E501

        The subtitle for the Insight.  # noqa: E501

        :return: The sub_title of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this Insight.

        The subtitle for the Insight.  # noqa: E501

        :param sub_title: The sub_title of this Insight.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def body(self):
        """Gets the body of this Insight.  # noqa: E501

        The body of the Insight.  # noqa: E501

        :return: The body of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Insight.

        The body of the Insight.  # noqa: E501

        :param body: The body of this Insight.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def display_hint(self):
        """Gets the display_hint of this Insight.  # noqa: E501

        The display hint for the Insight.  # noqa: E501

        :return: The display_hint of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._display_hint

    @display_hint.setter
    def display_hint(self, display_hint):
        """Sets the display_hint of this Insight.

        The display hint for the Insight.  # noqa: E501

        :param display_hint: The display_hint of this Insight.  # noqa: E501
        :type: str
        """
        if display_hint is None:
            raise ValueError("Invalid value for `display_hint`, must not be `None`")  # noqa: E501

        self._display_hint = display_hint

    @property
    def nav_key(self):
        """Gets the nav_key of this Insight.  # noqa: E501

        The navigational key for the Insight.  # noqa: E501

        :return: The nav_key of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._nav_key

    @nav_key.setter
    def nav_key(self, nav_key):
        """Sets the nav_key of this Insight.

        The navigational key for the Insight.  # noqa: E501

        :param nav_key: The nav_key of this Insight.  # noqa: E501
        :type: str
        """
        if nav_key is None:
            raise ValueError("Invalid value for `nav_key`, must not be `None`")  # noqa: E501

        self._nav_key = nav_key

    @property
    def nav_context(self):
        """Gets the nav_context of this Insight.  # noqa: E501

        The navigational context properties for the Insight. A maximum of 10 can be defined.  # noqa: E501

        :return: The nav_context of this Insight.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._nav_context

    @nav_context.setter
    def nav_context(self, nav_context):
        """Sets the nav_context of this Insight.

        The navigational context properties for the Insight. A maximum of 10 can be defined.  # noqa: E501

        :param nav_context: The nav_context of this Insight.  # noqa: E501
        :type: dict(str, str)
        """

        self._nav_context = nav_context

    @property
    def created_at(self):
        """Gets the created_at of this Insight.  # noqa: E501

        The date when the Insight was created.  # noqa: E501

        :return: The created_at of this Insight.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Insight.

        The date when the Insight was created.  # noqa: E501

        :param created_at: The created_at of this Insight.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Insight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Insight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
