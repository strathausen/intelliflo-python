# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BuildingContentsInsuranceValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sum_insured': 'CurrencyValue',
        'cover_options': 'list[str]',
        'excess': 'CurrencyValue'
    }

    attribute_map = {
        'sum_insured': 'sumInsured',
        'cover_options': 'coverOptions',
        'excess': 'excess'
    }

    def __init__(self, sum_insured=None, cover_options=None, excess=None):  # noqa: E501
        """BuildingContentsInsuranceValue - a model defined in Swagger"""  # noqa: E501
        self._sum_insured = None
        self._cover_options = None
        self._excess = None
        self.discriminator = None
        if sum_insured is not None:
            self.sum_insured = sum_insured
        if cover_options is not None:
            self.cover_options = cover_options
        if excess is not None:
            self.excess = excess

    @property
    def sum_insured(self):
        """Gets the sum_insured of this BuildingContentsInsuranceValue.  # noqa: E501


        :return: The sum_insured of this BuildingContentsInsuranceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._sum_insured

    @sum_insured.setter
    def sum_insured(self, sum_insured):
        """Sets the sum_insured of this BuildingContentsInsuranceValue.


        :param sum_insured: The sum_insured of this BuildingContentsInsuranceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._sum_insured = sum_insured

    @property
    def cover_options(self):
        """Gets the cover_options of this BuildingContentsInsuranceValue.  # noqa: E501

        List of cover options.  Valid options are: None, AccidentalDamage, HomeEmergency, LegalFees,  PersonalPossessions, Family, WaterDangerousSports.  # noqa: E501

        :return: The cover_options of this BuildingContentsInsuranceValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._cover_options

    @cover_options.setter
    def cover_options(self, cover_options):
        """Sets the cover_options of this BuildingContentsInsuranceValue.

        List of cover options.  Valid options are: None, AccidentalDamage, HomeEmergency, LegalFees,  PersonalPossessions, Family, WaterDangerousSports.  # noqa: E501

        :param cover_options: The cover_options of this BuildingContentsInsuranceValue.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["None", "AccidentalDamage", "HomeEmergency", "LegalFees", "PersonalPossessions", "Family", "WaterDangerousSports"]  # noqa: E501
        if not set(cover_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `cover_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(cover_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._cover_options = cover_options

    @property
    def excess(self):
        """Gets the excess of this BuildingContentsInsuranceValue.  # noqa: E501


        :return: The excess of this BuildingContentsInsuranceValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._excess

    @excess.setter
    def excess(self, excess):
        """Sets the excess of this BuildingContentsInsuranceValue.


        :param excess: The excess of this BuildingContentsInsuranceValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._excess = excess

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuildingContentsInsuranceValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildingContentsInsuranceValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
