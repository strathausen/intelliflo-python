# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SplitTemplateRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'split_template_owner_id': 'int',
        'href': 'str'
    }

    attribute_map = {
        'id': 'id',
        'split_template_owner_id': 'splitTemplateOwnerId',
        'href': 'href'
    }

    def __init__(self, id=None, split_template_owner_id=None, href=None):  # noqa: E501
        """SplitTemplateRef - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._split_template_owner_id = None
        self._href = None
        self.discriminator = None
        self.id = id
        if split_template_owner_id is not None:
            self.split_template_owner_id = split_template_owner_id
        if href is not None:
            self.href = href

    @property
    def id(self):
        """Gets the id of this SplitTemplateRef.  # noqa: E501

        Split Template Unique Identifier.  # noqa: E501

        :return: The id of this SplitTemplateRef.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SplitTemplateRef.

        Split Template Unique Identifier.  # noqa: E501

        :param id: The id of this SplitTemplateRef.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def split_template_owner_id(self):
        """Gets the split_template_owner_id of this SplitTemplateRef.  # noqa: E501


        :return: The split_template_owner_id of this SplitTemplateRef.  # noqa: E501
        :rtype: int
        """
        return self._split_template_owner_id

    @split_template_owner_id.setter
    def split_template_owner_id(self, split_template_owner_id):
        """Sets the split_template_owner_id of this SplitTemplateRef.


        :param split_template_owner_id: The split_template_owner_id of this SplitTemplateRef.  # noqa: E501
        :type: int
        """

        self._split_template_owner_id = split_template_owner_id

    @property
    def href(self):
        """Gets the href of this SplitTemplateRef.  # noqa: E501

        Hypermedia reference to Split Template.  # noqa: E501

        :return: The href of this SplitTemplateRef.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SplitTemplateRef.

        Hypermedia reference to Split Template.  # noqa: E501

        :param href: The href of this SplitTemplateRef.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SplitTemplateRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitTemplateRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
