# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'parent_href': 'str',
        'type': 'str',
        'unit_price': 'CurrencyValue',
        'cost': 'CurrencyValue',
        'gross': 'CurrencyValue',
        'unit_number': 'float',
        'transaction_date': 'datetime',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'parent_href': 'parent_href',
        'type': 'type',
        'unit_price': 'unitPrice',
        'cost': 'cost',
        'gross': 'gross',
        'unit_number': 'unitNumber',
        'transaction_date': 'transactionDate',
        'description': 'description'
    }

    def __init__(self, id=None, href=None, parent_href=None, type=None, unit_price=None, cost=None, gross=None, unit_number=None, transaction_date=None, description=None):  # noqa: E501
        """FundTransaction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._parent_href = None
        self._type = None
        self._unit_price = None
        self._cost = None
        self._gross = None
        self._unit_number = None
        self._transaction_date = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if parent_href is not None:
            self.parent_href = parent_href
        if type is not None:
            self.type = type
        if unit_price is not None:
            self.unit_price = unit_price
        if cost is not None:
            self.cost = cost
        if gross is not None:
            self.gross = gross
        if unit_number is not None:
            self.unit_number = unit_number
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this FundTransaction.  # noqa: E501

        Transaction Id  # noqa: E501

        :return: The id of this FundTransaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FundTransaction.

        Transaction Id  # noqa: E501

        :param id: The id of this FundTransaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this FundTransaction.  # noqa: E501

        Href of the transaction  # noqa: E501

        :return: The href of this FundTransaction.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FundTransaction.

        Href of the transaction  # noqa: E501

        :param href: The href of this FundTransaction.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def parent_href(self):
        """Gets the parent_href of this FundTransaction.  # noqa: E501

        Parent Href of the transaction  # noqa: E501

        :return: The parent_href of this FundTransaction.  # noqa: E501
        :rtype: str
        """
        return self._parent_href

    @parent_href.setter
    def parent_href(self, parent_href):
        """Sets the parent_href of this FundTransaction.

        Parent Href of the transaction  # noqa: E501

        :param parent_href: The parent_href of this FundTransaction.  # noqa: E501
        :type: str
        """

        self._parent_href = parent_href

    @property
    def type(self):
        """Gets the type of this FundTransaction.  # noqa: E501

        Transaction type  # noqa: E501

        :return: The type of this FundTransaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FundTransaction.

        Transaction type  # noqa: E501

        :param type: The type of this FundTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["Purchase", "Sale", "SecurityTransferIn", "SecurityTransferOut", "SwitchPurchase", "SwitchSale", "Cancellation", "CorporateEventStockIncrease", "CorporateEventStockDecrease", "TransferInCash", "TransferInSpeciesStock", "Withdrawal", "IncomeReinvest", "AccruedBonus", "IncomeDistributed", "Charge", "Bonus", "Current", "TransferOutCash", "TransferOutInSpeciesStock", "ReregistrationOut", "ReregistrationIn", "Reattribution", "FundSplit", "FundAmalgamation", "TaxCredit", "ShareBuyBack", "Adjustment", "CashReceipt", "CashWithdrawal", "Conversion", "Dividend", "FeesCharges", "Interest", "PartialSurrender", "Rebate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_price(self):
        """Gets the unit_price of this FundTransaction.  # noqa: E501


        :return: The unit_price of this FundTransaction.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this FundTransaction.


        :param unit_price: The unit_price of this FundTransaction.  # noqa: E501
        :type: CurrencyValue
        """

        self._unit_price = unit_price

    @property
    def cost(self):
        """Gets the cost of this FundTransaction.  # noqa: E501


        :return: The cost of this FundTransaction.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this FundTransaction.


        :param cost: The cost of this FundTransaction.  # noqa: E501
        :type: CurrencyValue
        """

        self._cost = cost

    @property
    def gross(self):
        """Gets the gross of this FundTransaction.  # noqa: E501


        :return: The gross of this FundTransaction.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this FundTransaction.


        :param gross: The gross of this FundTransaction.  # noqa: E501
        :type: CurrencyValue
        """

        self._gross = gross

    @property
    def unit_number(self):
        """Gets the unit_number of this FundTransaction.  # noqa: E501

        Unit number  # noqa: E501

        :return: The unit_number of this FundTransaction.  # noqa: E501
        :rtype: float
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this FundTransaction.

        Unit number  # noqa: E501

        :param unit_number: The unit_number of this FundTransaction.  # noqa: E501
        :type: float
        """

        self._unit_number = unit_number

    @property
    def transaction_date(self):
        """Gets the transaction_date of this FundTransaction.  # noqa: E501

        Transaction date  # noqa: E501

        :return: The transaction_date of this FundTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this FundTransaction.

        Transaction date  # noqa: E501

        :param transaction_date: The transaction_date of this FundTransaction.  # noqa: E501
        :type: datetime
        """

        self._transaction_date = transaction_date

    @property
    def description(self):
        """Gets the description of this FundTransaction.  # noqa: E501

        Transaction description  # noqa: E501

        :return: The description of this FundTransaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FundTransaction.

        Transaction description  # noqa: E501

        :param description: The description of this FundTransaction.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
