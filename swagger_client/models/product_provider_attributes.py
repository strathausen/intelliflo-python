# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductProviderAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_feed': 'bool',
        'bank_account_transaction_feed': 'bool',
        'is_visible_to_client': 'bool',
        'logo_href': 'str'
    }

    attribute_map = {
        'transaction_feed': 'transaction_feed',
        'bank_account_transaction_feed': 'bankAccountTransactionFeed',
        'is_visible_to_client': 'isVisibleToClient',
        'logo_href': 'logoHref'
    }

    def __init__(self, transaction_feed=None, bank_account_transaction_feed=None, is_visible_to_client=None, logo_href=None):  # noqa: E501
        """ProductProviderAttributes - a model defined in Swagger"""  # noqa: E501
        self._transaction_feed = None
        self._bank_account_transaction_feed = None
        self._is_visible_to_client = None
        self._logo_href = None
        self.discriminator = None
        self.transaction_feed = transaction_feed
        self.bank_account_transaction_feed = bank_account_transaction_feed
        self.is_visible_to_client = is_visible_to_client
        if logo_href is not None:
            self.logo_href = logo_href

    @property
    def transaction_feed(self):
        """Gets the transaction_feed of this ProductProviderAttributes.  # noqa: E501

        Indicates that a product provider is a fund transaction provider.  # noqa: E501

        :return: The transaction_feed of this ProductProviderAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._transaction_feed

    @transaction_feed.setter
    def transaction_feed(self, transaction_feed):
        """Sets the transaction_feed of this ProductProviderAttributes.

        Indicates that a product provider is a fund transaction provider.  # noqa: E501

        :param transaction_feed: The transaction_feed of this ProductProviderAttributes.  # noqa: E501
        :type: bool
        """
        if transaction_feed is None:
            raise ValueError("Invalid value for `transaction_feed`, must not be `None`")  # noqa: E501

        self._transaction_feed = transaction_feed

    @property
    def bank_account_transaction_feed(self):
        """Gets the bank_account_transaction_feed of this ProductProviderAttributes.  # noqa: E501

        Indicates that a product provider is an open banking transaction provider.  # noqa: E501

        :return: The bank_account_transaction_feed of this ProductProviderAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._bank_account_transaction_feed

    @bank_account_transaction_feed.setter
    def bank_account_transaction_feed(self, bank_account_transaction_feed):
        """Sets the bank_account_transaction_feed of this ProductProviderAttributes.

        Indicates that a product provider is an open banking transaction provider.  # noqa: E501

        :param bank_account_transaction_feed: The bank_account_transaction_feed of this ProductProviderAttributes.  # noqa: E501
        :type: bool
        """
        if bank_account_transaction_feed is None:
            raise ValueError("Invalid value for `bank_account_transaction_feed`, must not be `None`")  # noqa: E501

        self._bank_account_transaction_feed = bank_account_transaction_feed

    @property
    def is_visible_to_client(self):
        """Gets the is_visible_to_client of this ProductProviderAttributes.  # noqa: E501

        Indicates that a product provider should be visible to clients.  # noqa: E501

        :return: The is_visible_to_client of this ProductProviderAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_to_client

    @is_visible_to_client.setter
    def is_visible_to_client(self, is_visible_to_client):
        """Sets the is_visible_to_client of this ProductProviderAttributes.

        Indicates that a product provider should be visible to clients.  # noqa: E501

        :param is_visible_to_client: The is_visible_to_client of this ProductProviderAttributes.  # noqa: E501
        :type: bool
        """
        if is_visible_to_client is None:
            raise ValueError("Invalid value for `is_visible_to_client`, must not be `None`")  # noqa: E501

        self._is_visible_to_client = is_visible_to_client

    @property
    def logo_href(self):
        """Gets the logo_href of this ProductProviderAttributes.  # noqa: E501

        Indicates the path reference for storing Logo  # noqa: E501

        :return: The logo_href of this ProductProviderAttributes.  # noqa: E501
        :rtype: str
        """
        return self._logo_href

    @logo_href.setter
    def logo_href(self, logo_href):
        """Sets the logo_href of this ProductProviderAttributes.

        Indicates the path reference for storing Logo  # noqa: E501

        :param logo_href: The logo_href of this ProductProviderAttributes.  # noqa: E501
        :type: str
        """

        self._logo_href = logo_href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductProviderAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductProviderAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
