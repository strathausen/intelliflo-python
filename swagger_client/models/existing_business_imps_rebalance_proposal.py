# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_recommendation2_proposal import BaseRecommendation2Proposal  # noqa: F401,E501

class ExistingBusinessImpsRebalanceProposal(BaseRecommendation2Proposal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rebalance': 'RebalanceReference',
        'rebalance_type': 'str',
        'model_evaluation': 'ModelEvaluation',
        'current_model': 'ModelPortfolioReference',
        'target_model': 'ModelPortfolioReference',
        'rebalance_commentary': 'str',
        'expires_at': 'datetime'
    }
    if hasattr(BaseRecommendation2Proposal, "swagger_types"):
        swagger_types.update(BaseRecommendation2Proposal.swagger_types)

    attribute_map = {
        'rebalance': 'rebalance',
        'rebalance_type': 'rebalanceType',
        'model_evaluation': 'modelEvaluation',
        'current_model': 'currentModel',
        'target_model': 'targetModel',
        'rebalance_commentary': 'rebalanceCommentary',
        'expires_at': 'expiresAt'
    }
    if hasattr(BaseRecommendation2Proposal, "attribute_map"):
        attribute_map.update(BaseRecommendation2Proposal.attribute_map)

    def __init__(self, rebalance=None, rebalance_type='NoActionRequired', model_evaluation=None, current_model=None, target_model=None, rebalance_commentary=None, expires_at=None, *args, **kwargs):  # noqa: E501
        """ExistingBusinessImpsRebalanceProposal - a model defined in Swagger"""  # noqa: E501
        self._rebalance = None
        self._rebalance_type = None
        self._model_evaluation = None
        self._current_model = None
        self._target_model = None
        self._rebalance_commentary = None
        self._expires_at = None
        self.discriminator = None
        if rebalance is not None:
            self.rebalance = rebalance
        if rebalance_type is not None:
            self.rebalance_type = rebalance_type
        if model_evaluation is not None:
            self.model_evaluation = model_evaluation
        if current_model is not None:
            self.current_model = current_model
        if target_model is not None:
            self.target_model = target_model
        if rebalance_commentary is not None:
            self.rebalance_commentary = rebalance_commentary
        if expires_at is not None:
            self.expires_at = expires_at
        BaseRecommendation2Proposal.__init__(self, *args, **kwargs)

    @property
    def rebalance(self):
        """Gets the rebalance of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501


        :return: The rebalance of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: RebalanceReference
        """
        return self._rebalance

    @rebalance.setter
    def rebalance(self, rebalance):
        """Sets the rebalance of this ExistingBusinessImpsRebalanceProposal.


        :param rebalance: The rebalance of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: RebalanceReference
        """

        self._rebalance = rebalance

    @property
    def rebalance_type(self):
        """Gets the rebalance_type of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501

        Determines the type of rebalance recommendation.  # noqa: E501

        :return: The rebalance_type of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: str
        """
        return self._rebalance_type

    @rebalance_type.setter
    def rebalance_type(self, rebalance_type):
        """Sets the rebalance_type of this ExistingBusinessImpsRebalanceProposal.

        Determines the type of rebalance recommendation.  # noqa: E501

        :param rebalance_type: The rebalance_type of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoActionRequired", "ModelUpdate", "Rebalance"]  # noqa: E501
        if rebalance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rebalance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rebalance_type, allowed_values)
            )

        self._rebalance_type = rebalance_type

    @property
    def model_evaluation(self):
        """Gets the model_evaluation of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501


        :return: The model_evaluation of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: ModelEvaluation
        """
        return self._model_evaluation

    @model_evaluation.setter
    def model_evaluation(self, model_evaluation):
        """Sets the model_evaluation of this ExistingBusinessImpsRebalanceProposal.


        :param model_evaluation: The model_evaluation of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: ModelEvaluation
        """

        self._model_evaluation = model_evaluation

    @property
    def current_model(self):
        """Gets the current_model of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501


        :return: The current_model of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: ModelPortfolioReference
        """
        return self._current_model

    @current_model.setter
    def current_model(self, current_model):
        """Sets the current_model of this ExistingBusinessImpsRebalanceProposal.


        :param current_model: The current_model of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: ModelPortfolioReference
        """

        self._current_model = current_model

    @property
    def target_model(self):
        """Gets the target_model of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501


        :return: The target_model of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: ModelPortfolioReference
        """
        return self._target_model

    @target_model.setter
    def target_model(self, target_model):
        """Sets the target_model of this ExistingBusinessImpsRebalanceProposal.


        :param target_model: The target_model of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: ModelPortfolioReference
        """

        self._target_model = target_model

    @property
    def rebalance_commentary(self):
        """Gets the rebalance_commentary of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501

        Contains comment to reblance.  # noqa: E501

        :return: The rebalance_commentary of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: str
        """
        return self._rebalance_commentary

    @rebalance_commentary.setter
    def rebalance_commentary(self, rebalance_commentary):
        """Sets the rebalance_commentary of this ExistingBusinessImpsRebalanceProposal.

        Contains comment to reblance.  # noqa: E501

        :param rebalance_commentary: The rebalance_commentary of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: str
        """

        self._rebalance_commentary = rebalance_commentary

    @property
    def expires_at(self):
        """Gets the expires_at of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501

        Date and time in UTC when the proposal expires.  # noqa: E501

        :return: The expires_at of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ExistingBusinessImpsRebalanceProposal.

        Date and time in UTC when the proposal expires.  # noqa: E501

        :param expires_at: The expires_at of this ExistingBusinessImpsRebalanceProposal.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExistingBusinessImpsRebalanceProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExistingBusinessImpsRebalanceProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
