# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'user_name': 'str',
        'email': 'str',
        'subject': 'str',
        'application_type': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'time_zone': 'str',
        'status': 'str',
        'references': 'AdditionalDetailsRef',
        'tenant': 'NamedTenantRef',
        'client': 'ClientRef',
        'group': 'NamedGroupRef',
        'last_login_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'user_name': 'userName',
        'email': 'email',
        'subject': 'subject',
        'application_type': 'applicationType',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'time_zone': 'timeZone',
        'status': 'status',
        'references': 'references',
        'tenant': 'tenant',
        'client': 'client',
        'group': 'group',
        'last_login_at': 'lastLoginAt'
    }

    def __init__(self, id=None, href=None, user_name=None, email=None, subject=None, application_type=None, first_name=None, last_name=None, time_zone=None, status=None, references=None, tenant=None, client=None, group=None, last_login_at=None):  # noqa: E501
        """UserDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._user_name = None
        self._email = None
        self._subject = None
        self._application_type = None
        self._first_name = None
        self._last_name = None
        self._time_zone = None
        self._status = None
        self._references = None
        self._tenant = None
        self._client = None
        self._group = None
        self._last_login_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.user_name = user_name
        if email is not None:
            self.email = email
        if subject is not None:
            self.subject = subject
        if application_type is not None:
            self.application_type = application_type
        self.first_name = first_name
        self.last_name = last_name
        if time_zone is not None:
            self.time_zone = time_zone
        if status is not None:
            self.status = status
        if references is not None:
            self.references = references
        if tenant is not None:
            self.tenant = tenant
        if client is not None:
            self.client = client
        if group is not None:
            self.group = group
        if last_login_at is not None:
            self.last_login_at = last_login_at

    @property
    def id(self):
        """Gets the id of this UserDetails.  # noqa: E501

        User unique identifier.  # noqa: E501

        :return: The id of this UserDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetails.

        User unique identifier.  # noqa: E501

        :param id: The id of this UserDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this UserDetails.  # noqa: E501

        User hypermedia link.  # noqa: E501

        :return: The href of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UserDetails.

        User hypermedia link.  # noqa: E501

        :param href: The href of this UserDetails.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def user_name(self):
        """Gets the user_name of this UserDetails.  # noqa: E501

        User unique username.  # noqa: E501

        :return: The user_name of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserDetails.

        User unique username.  # noqa: E501

        :param user_name: The user_name of this UserDetails.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def email(self):
        """Gets the email of this UserDetails.  # noqa: E501

        User email address.  # noqa: E501

        :return: The email of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetails.

        User email address.  # noqa: E501

        :param email: The email of this UserDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def subject(self):
        """Gets the subject of this UserDetails.  # noqa: E501

        Unique identifier Guid. If one is not provided, then we will generate one for you.  # noqa: E501

        :return: The subject of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this UserDetails.

        Unique identifier Guid. If one is not provided, then we will generate one for you.  # noqa: E501

        :param subject: The subject of this UserDetails.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def application_type(self):
        """Gets the application_type of this UserDetails.  # noqa: E501

        Application Type  # noqa: E501

        :return: The application_type of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this UserDetails.

        Application Type  # noqa: E501

        :param application_type: The application_type of this UserDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["BackOffice", "Client"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"  # noqa: E501
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def first_name(self):
        """Gets the first_name of this UserDetails.  # noqa: E501

        User first name.  # noqa: E501

        :return: The first_name of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDetails.

        User first name.  # noqa: E501

        :param first_name: The first_name of this UserDetails.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserDetails.  # noqa: E501

        User last name.  # noqa: E501

        :return: The last_name of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDetails.

        User last name.  # noqa: E501

        :param last_name: The last_name of this UserDetails.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def time_zone(self):
        """Gets the time_zone of this UserDetails.  # noqa: E501

        User timezone. The timezone should be a valid timezoneid from the IANA time zone database. E.g: Europe/London or America/New_York.  # noqa: E501

        :return: The time_zone of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UserDetails.

        User timezone. The timezone should be a valid timezoneid from the IANA time zone database. E.g: Europe/London or America/New_York.  # noqa: E501

        :param time_zone: The time_zone of this UserDetails.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def status(self):
        """Gets the status of this UserDetails.  # noqa: E501

        User status.  # noqa: E501

        :return: The status of this UserDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserDetails.

        User status.  # noqa: E501

        :param status: The status of this UserDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Locked", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def references(self):
        """Gets the references of this UserDetails.  # noqa: E501


        :return: The references of this UserDetails.  # noqa: E501
        :rtype: AdditionalDetailsRef
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this UserDetails.


        :param references: The references of this UserDetails.  # noqa: E501
        :type: AdditionalDetailsRef
        """

        self._references = references

    @property
    def tenant(self):
        """Gets the tenant of this UserDetails.  # noqa: E501


        :return: The tenant of this UserDetails.  # noqa: E501
        :rtype: NamedTenantRef
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this UserDetails.


        :param tenant: The tenant of this UserDetails.  # noqa: E501
        :type: NamedTenantRef
        """

        self._tenant = tenant

    @property
    def client(self):
        """Gets the client of this UserDetails.  # noqa: E501


        :return: The client of this UserDetails.  # noqa: E501
        :rtype: ClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this UserDetails.


        :param client: The client of this UserDetails.  # noqa: E501
        :type: ClientRef
        """

        self._client = client

    @property
    def group(self):
        """Gets the group of this UserDetails.  # noqa: E501


        :return: The group of this UserDetails.  # noqa: E501
        :rtype: NamedGroupRef
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this UserDetails.


        :param group: The group of this UserDetails.  # noqa: E501
        :type: NamedGroupRef
        """

        self._group = group

    @property
    def last_login_at(self):
        """Gets the last_login_at of this UserDetails.  # noqa: E501

        Last logon time of user  # noqa: E501

        :return: The last_login_at of this UserDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at):
        """Sets the last_login_at of this UserDetails.

        Last logon time of user  # noqa: E501

        :param last_login_at: The last_login_at of this UserDetails.  # noqa: E501
        :type: datetime
        """

        self._last_login_at = last_login_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
