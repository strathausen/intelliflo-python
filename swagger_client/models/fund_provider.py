# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'href': 'str',
        'line1': 'str',
        'line2': 'str',
        'line3': 'str',
        'line4': 'str',
        'postal_code': 'str',
        'country': 'str',
        'email': 'str',
        'telephone': 'str',
        'website': 'str',
        'fund_type': 'str'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'href': 'href',
        'line1': 'line1',
        'line2': 'line2',
        'line3': 'line3',
        'line4': 'line4',
        'postal_code': 'postalCode',
        'country': 'country',
        'email': 'email',
        'telephone': 'telephone',
        'website': 'website',
        'fund_type': 'fundType'
    }

    def __init__(self, code=None, name=None, href=None, line1=None, line2=None, line3=None, line4=None, postal_code=None, country=None, email=None, telephone=None, website=None, fund_type=None):  # noqa: E501
        """FundProvider - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._name = None
        self._href = None
        self._line1 = None
        self._line2 = None
        self._line3 = None
        self._line4 = None
        self._postal_code = None
        self._country = None
        self._email = None
        self._telephone = None
        self._website = None
        self._fund_type = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if href is not None:
            self.href = href
        if line1 is not None:
            self.line1 = line1
        if line2 is not None:
            self.line2 = line2
        if line3 is not None:
            self.line3 = line3
        if line4 is not None:
            self.line4 = line4
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country
        if email is not None:
            self.email = email
        if telephone is not None:
            self.telephone = telephone
        if website is not None:
            self.website = website
        if fund_type is not None:
            self.fund_type = fund_type

    @property
    def code(self):
        """Gets the code of this FundProvider.  # noqa: E501


        :return: The code of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FundProvider.


        :param code: The code of this FundProvider.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this FundProvider.  # noqa: E501


        :return: The name of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FundProvider.


        :param name: The name of this FundProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def href(self):
        """Gets the href of this FundProvider.  # noqa: E501


        :return: The href of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this FundProvider.


        :param href: The href of this FundProvider.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def line1(self):
        """Gets the line1 of this FundProvider.  # noqa: E501

        Address line 1  # noqa: E501

        :return: The line1 of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this FundProvider.

        Address line 1  # noqa: E501

        :param line1: The line1 of this FundProvider.  # noqa: E501
        :type: str
        """

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this FundProvider.  # noqa: E501

        Address line 2  # noqa: E501

        :return: The line2 of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this FundProvider.

        Address line 2  # noqa: E501

        :param line2: The line2 of this FundProvider.  # noqa: E501
        :type: str
        """

        self._line2 = line2

    @property
    def line3(self):
        """Gets the line3 of this FundProvider.  # noqa: E501

        Address line 3  # noqa: E501

        :return: The line3 of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """Sets the line3 of this FundProvider.

        Address line 3  # noqa: E501

        :param line3: The line3 of this FundProvider.  # noqa: E501
        :type: str
        """

        self._line3 = line3

    @property
    def line4(self):
        """Gets the line4 of this FundProvider.  # noqa: E501

        Address line 4  # noqa: E501

        :return: The line4 of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._line4

    @line4.setter
    def line4(self, line4):
        """Sets the line4 of this FundProvider.

        Address line 4  # noqa: E501

        :param line4: The line4 of this FundProvider.  # noqa: E501
        :type: str
        """

        self._line4 = line4

    @property
    def postal_code(self):
        """Gets the postal_code of this FundProvider.  # noqa: E501

        Postal code  # noqa: E501

        :return: The postal_code of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this FundProvider.

        Postal code  # noqa: E501

        :param postal_code: The postal_code of this FundProvider.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this FundProvider.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FundProvider.

        Country  # noqa: E501

        :param country: The country of this FundProvider.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this FundProvider.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FundProvider.

        Email  # noqa: E501

        :param email: The email of this FundProvider.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def telephone(self):
        """Gets the telephone of this FundProvider.  # noqa: E501

        Telephone  # noqa: E501

        :return: The telephone of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this FundProvider.

        Telephone  # noqa: E501

        :param telephone: The telephone of this FundProvider.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def website(self):
        """Gets the website of this FundProvider.  # noqa: E501

        Website  # noqa: E501

        :return: The website of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this FundProvider.

        Website  # noqa: E501

        :param website: The website of this FundProvider.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def fund_type(self):
        """Gets the fund_type of this FundProvider.  # noqa: E501

        Fund type  # noqa: E501

        :return: The fund_type of this FundProvider.  # noqa: E501
        :rtype: str
        """
        return self._fund_type

    @fund_type.setter
    def fund_type(self, fund_type):
        """Sets the fund_type of this FundProvider.

        Fund type  # noqa: E501

        :param fund_type: The fund_type of this FundProvider.  # noqa: E501
        :type: str
        """
        allowed_values = ["UkAuthorisedUnitTrust", "UkoeiCs", "OtherUkUnitTrusts", "UkInsuranceFunds", "UkPensionFunds", "OffshoreFsaFunds", "OffshoreInsuranceFunds", "Equities", "Unknown", "UkInvestmentTrusts", "OffshoreRegulatedFunds", "IndicativeNetLife", "IndicativeNetPension", "CashFunds"]  # noqa: E501
        if fund_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fund_type` ({0}), must be one of {1}"  # noqa: E501
                .format(fund_type, allowed_values)
            )

        self._fund_type = fund_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
