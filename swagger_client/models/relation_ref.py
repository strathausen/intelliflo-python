# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RelationRef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'href': 'str',
        'is_head_of_family_group': 'bool',
        'party_type': 'str',
        'access_to_subject': 'RelationshipAccessValue'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'href': 'href',
        'is_head_of_family_group': 'isHeadOfFamilyGroup',
        'party_type': 'partyType',
        'access_to_subject': 'accessToSubject'
    }

    def __init__(self, id=None, name=None, type=None, href=None, is_head_of_family_group=None, party_type=None, access_to_subject=None):  # noqa: E501
        """RelationRef - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._href = None
        self._is_head_of_family_group = None
        self._party_type = None
        self._access_to_subject = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.type = type
        if href is not None:
            self.href = href
        if is_head_of_family_group is not None:
            self.is_head_of_family_group = is_head_of_family_group
        if party_type is not None:
            self.party_type = party_type
        if access_to_subject is not None:
            self.access_to_subject = access_to_subject

    @property
    def id(self):
        """Gets the id of this RelationRef.  # noqa: E501


        :return: The id of this RelationRef.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RelationRef.


        :param id: The id of this RelationRef.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RelationRef.  # noqa: E501


        :return: The name of this RelationRef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RelationRef.


        :param name: The name of this RelationRef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this RelationRef.  # noqa: E501


        :return: The type of this RelationRef.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationRef.


        :param type: The type of this RelationRef.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Client", "Lead", "PersonalContact"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def href(self):
        """Gets the href of this RelationRef.  # noqa: E501


        :return: The href of this RelationRef.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this RelationRef.


        :param href: The href of this RelationRef.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def is_head_of_family_group(self):
        """Gets the is_head_of_family_group of this RelationRef.  # noqa: E501

        Is head of family group flag  # noqa: E501

        :return: The is_head_of_family_group of this RelationRef.  # noqa: E501
        :rtype: bool
        """
        return self._is_head_of_family_group

    @is_head_of_family_group.setter
    def is_head_of_family_group(self, is_head_of_family_group):
        """Sets the is_head_of_family_group of this RelationRef.

        Is head of family group flag  # noqa: E501

        :param is_head_of_family_group: The is_head_of_family_group of this RelationRef.  # noqa: E501
        :type: bool
        """

        self._is_head_of_family_group = is_head_of_family_group

    @property
    def party_type(self):
        """Gets the party_type of this RelationRef.  # noqa: E501

        Party type  # noqa: E501

        :return: The party_type of this RelationRef.  # noqa: E501
        :rtype: str
        """
        return self._party_type

    @party_type.setter
    def party_type(self, party_type):
        """Sets the party_type of this RelationRef.

        Party type  # noqa: E501

        :param party_type: The party_type of this RelationRef.  # noqa: E501
        :type: str
        """
        allowed_values = ["Person", "Trust", "Corporate"]  # noqa: E501
        if party_type not in allowed_values:
            raise ValueError(
                "Invalid value for `party_type` ({0}), must be one of {1}"  # noqa: E501
                .format(party_type, allowed_values)
            )

        self._party_type = party_type

    @property
    def access_to_subject(self):
        """Gets the access_to_subject of this RelationRef.  # noqa: E501


        :return: The access_to_subject of this RelationRef.  # noqa: E501
        :rtype: RelationshipAccessValue
        """
        return self._access_to_subject

    @access_to_subject.setter
    def access_to_subject(self, access_to_subject):
        """Sets the access_to_subject of this RelationRef.


        :param access_to_subject: The access_to_subject of this RelationRef.  # noqa: E501
        :type: RelationshipAccessValue
        """

        self._access_to_subject = access_to_subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelationRef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
