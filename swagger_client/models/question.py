# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Question(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'question_type': 'str',
        'subcategory': 'Subcategory',
        'is_required': 'bool',
        'is_multiple': 'bool',
        'text': 'str',
        'options': 'list[QuestionOption]',
        'order': 'int',
        'tags': 'list[str]',
        'is_archived': 'bool',
        'include_notes': 'bool',
        'place_holder_text': 'str',
        'help_text': 'str',
        'pattern': 'str',
        'error_text': 'str',
        'attributes': 'dict(str, str)',
        'logic': 'list[QuestionLogic]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'question_type': 'questionType',
        'subcategory': 'subcategory',
        'is_required': 'isRequired',
        'is_multiple': 'isMultiple',
        'text': 'text',
        'options': 'options',
        'order': 'order',
        'tags': 'tags',
        'is_archived': 'isArchived',
        'include_notes': 'includeNotes',
        'place_holder_text': 'placeHolderText',
        'help_text': 'helpText',
        'pattern': 'pattern',
        'error_text': 'errorText',
        'attributes': 'attributes',
        'logic': 'logic'
    }

    def __init__(self, id=None, href=None, question_type=None, subcategory=None, is_required=None, is_multiple=None, text=None, options=None, order=None, tags=None, is_archived=None, include_notes=None, place_holder_text=None, help_text=None, pattern=None, error_text=None, attributes=None, logic=None):  # noqa: E501
        """Question - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._question_type = None
        self._subcategory = None
        self._is_required = None
        self._is_multiple = None
        self._text = None
        self._options = None
        self._order = None
        self._tags = None
        self._is_archived = None
        self._include_notes = None
        self._place_holder_text = None
        self._help_text = None
        self._pattern = None
        self._error_text = None
        self._attributes = None
        self._logic = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.question_type = question_type
        if subcategory is not None:
            self.subcategory = subcategory
        if is_required is not None:
            self.is_required = is_required
        if is_multiple is not None:
            self.is_multiple = is_multiple
        self.text = text
        if options is not None:
            self.options = options
        self.order = order
        if tags is not None:
            self.tags = tags
        if is_archived is not None:
            self.is_archived = is_archived
        if include_notes is not None:
            self.include_notes = include_notes
        if place_holder_text is not None:
            self.place_holder_text = place_holder_text
        if help_text is not None:
            self.help_text = help_text
        if pattern is not None:
            self.pattern = pattern
        if error_text is not None:
            self.error_text = error_text
        if attributes is not None:
            self.attributes = attributes
        if logic is not None:
            self.logic = logic

    @property
    def id(self):
        """Gets the id of this Question.  # noqa: E501

        The unique identifier for the Question.  # noqa: E501

        :return: The id of this Question.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Question.

        The unique identifier for the Question.  # noqa: E501

        :param id: The id of this Question.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Question.  # noqa: E501


        :return: The href of this Question.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Question.


        :param href: The href of this Question.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def question_type(self):
        """Gets the question_type of this Question.  # noqa: E501

        The type of the Question.  # noqa: E501

        :return: The question_type of this Question.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this Question.

        The type of the Question.  # noqa: E501

        :param question_type: The question_type of this Question.  # noqa: E501
        :type: str
        """
        if question_type is None:
            raise ValueError("Invalid value for `question_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Text", "Textarea", "NumberWhole", "NumberDecimal", "Date", "YesNo", "DropDownList", "Select", "Checkbox", "Monetary"]  # noqa: E501
        if question_type not in allowed_values:
            raise ValueError(
                "Invalid value for `question_type` ({0}), must be one of {1}"  # noqa: E501
                .format(question_type, allowed_values)
            )

        self._question_type = question_type

    @property
    def subcategory(self):
        """Gets the subcategory of this Question.  # noqa: E501


        :return: The subcategory of this Question.  # noqa: E501
        :rtype: Subcategory
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this Question.


        :param subcategory: The subcategory of this Question.  # noqa: E501
        :type: Subcategory
        """

        self._subcategory = subcategory

    @property
    def is_required(self):
        """Gets the is_required of this Question.  # noqa: E501

        Flag indicating whether the question must be answered or not.  # noqa: E501

        :return: The is_required of this Question.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this Question.

        Flag indicating whether the question must be answered or not.  # noqa: E501

        :param is_required: The is_required of this Question.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def is_multiple(self):
        """Gets the is_multiple of this Question.  # noqa: E501

        Flag indicating whether multiple answer options can exist for a given question. This can only be used if the QuestionType is 'select', 'dropdown' or 'checkbox'.  # noqa: E501

        :return: The is_multiple of this Question.  # noqa: E501
        :rtype: bool
        """
        return self._is_multiple

    @is_multiple.setter
    def is_multiple(self, is_multiple):
        """Sets the is_multiple of this Question.

        Flag indicating whether multiple answer options can exist for a given question. This can only be used if the QuestionType is 'select', 'dropdown' or 'checkbox'.  # noqa: E501

        :param is_multiple: The is_multiple of this Question.  # noqa: E501
        :type: bool
        """

        self._is_multiple = is_multiple

    @property
    def text(self):
        """Gets the text of this Question.  # noqa: E501

        The actual text for the question.  # noqa: E501

        :return: The text of this Question.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Question.

        The actual text for the question.  # noqa: E501

        :param text: The text of this Question.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def options(self):
        """Gets the options of this Question.  # noqa: E501

        The list of potential answers to a question. This is only applicable and required if the QuestionType is 'select', 'dropdown' or 'checkbox'.  # noqa: E501

        :return: The options of this Question.  # noqa: E501
        :rtype: list[QuestionOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Question.

        The list of potential answers to a question. This is only applicable and required if the QuestionType is 'select', 'dropdown' or 'checkbox'.  # noqa: E501

        :param options: The options of this Question.  # noqa: E501
        :type: list[QuestionOption]
        """

        self._options = options

    @property
    def order(self):
        """Gets the order of this Question.  # noqa: E501

        The order, within the questions subcategory, in which the questions should be displayed.  # noqa: E501

        :return: The order of this Question.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Question.

        The order, within the questions subcategory, in which the questions should be displayed.  # noqa: E501

        :param order: The order of this Question.  # noqa: E501
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def tags(self):
        """Gets the tags of this Question.  # noqa: E501

        A list of tags associated with the question. Tags are free text and are used to group a series of questions together. Questions can be filtered by Tag.  # noqa: E501

        :return: The tags of this Question.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Question.

        A list of tags associated with the question. Tags are free text and are used to group a series of questions together. Questions can be filtered by Tag.  # noqa: E501

        :param tags: The tags of this Question.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def is_archived(self):
        """Gets the is_archived of this Question.  # noqa: E501

        Flag indicating whether the question has been archived or not. Archived questions are no longer used/displayed.  # noqa: E501

        :return: The is_archived of this Question.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this Question.

        Flag indicating whether the question has been archived or not. Archived questions are no longer used/displayed.  # noqa: E501

        :param is_archived: The is_archived of this Question.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def include_notes(self):
        """Gets the include_notes of this Question.  # noqa: E501

        Flag indicating whether to display a text box to capture additional text notes alongside the answer input.  # noqa: E501

        :return: The include_notes of this Question.  # noqa: E501
        :rtype: bool
        """
        return self._include_notes

    @include_notes.setter
    def include_notes(self, include_notes):
        """Sets the include_notes of this Question.

        Flag indicating whether to display a text box to capture additional text notes alongside the answer input.  # noqa: E501

        :param include_notes: The include_notes of this Question.  # noqa: E501
        :type: bool
        """

        self._include_notes = include_notes

    @property
    def place_holder_text(self):
        """Gets the place_holder_text of this Question.  # noqa: E501

        Text to display on the form as placeholder text.  # noqa: E501

        :return: The place_holder_text of this Question.  # noqa: E501
        :rtype: str
        """
        return self._place_holder_text

    @place_holder_text.setter
    def place_holder_text(self, place_holder_text):
        """Sets the place_holder_text of this Question.

        Text to display on the form as placeholder text.  # noqa: E501

        :param place_holder_text: The place_holder_text of this Question.  # noqa: E501
        :type: str
        """

        self._place_holder_text = place_holder_text

    @property
    def help_text(self):
        """Gets the help_text of this Question.  # noqa: E501

        Text to display on form as help text.  # noqa: E501

        :return: The help_text of this Question.  # noqa: E501
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this Question.

        Text to display on form as help text.  # noqa: E501

        :param help_text: The help_text of this Question.  # noqa: E501
        :type: str
        """

        self._help_text = help_text

    @property
    def pattern(self):
        """Gets the pattern of this Question.  # noqa: E501

        Regex pattern for input validation.  # noqa: E501

        :return: The pattern of this Question.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this Question.

        Regex pattern for input validation.  # noqa: E501

        :param pattern: The pattern of this Question.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def error_text(self):
        """Gets the error_text of this Question.  # noqa: E501

        The error text to display to the user if the given answer is invalid.  # noqa: E501

        :return: The error_text of this Question.  # noqa: E501
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this Question.

        The error text to display to the user if the given answer is invalid.  # noqa: E501

        :param error_text: The error_text of this Question.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def attributes(self):
        """Gets the attributes of this Question.  # noqa: E501

        A list (max 5) of attributes related to a question. Attribute prefixed with '_' are reserved system attributes.  The attributes '_category' and '_subcategory' may be used to categorise questions.  # noqa: E501

        :return: The attributes of this Question.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Question.

        A list (max 5) of attributes related to a question. Attribute prefixed with '_' are reserved system attributes.  The attributes '_category' and '_subcategory' may be used to categorise questions.  # noqa: E501

        :param attributes: The attributes of this Question.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def logic(self):
        """Gets the logic of this Question.  # noqa: E501

        Rules determining if the question is displayed/required etc based on the answers to other related questions..  # noqa: E501

        :return: The logic of this Question.  # noqa: E501
        :rtype: list[QuestionLogic]
        """
        return self._logic

    @logic.setter
    def logic(self, logic):
        """Sets the logic of this Question.

        Rules determining if the question is displayed/required etc based on the answers to other related questions..  # noqa: E501

        :param logic: The logic of this Question.  # noqa: E501
        :type: list[QuestionLogic]
        """

        self._logic = logic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Question, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Question):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
