# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelFundValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'allocation': 'float',
        'currency_code': 'str',
        'fund_code_type': 'str',
        'code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'allocation': 'allocation',
        'currency_code': 'currencyCode',
        'fund_code_type': 'fundCodeType',
        'code': 'code'
    }

    def __init__(self, name=None, allocation=0.0, currency_code=None, fund_code_type=None, code=None):  # noqa: E501
        """ModelFundValue - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._allocation = None
        self._currency_code = None
        self._fund_code_type = None
        self._code = None
        self.discriminator = None
        self.name = name
        if allocation is not None:
            self.allocation = allocation
        self.currency_code = currency_code
        self.fund_code_type = fund_code_type
        self.code = code

    @property
    def name(self):
        """Gets the name of this ModelFundValue.  # noqa: E501

        The Name of this fund  # noqa: E501

        :return: The name of this ModelFundValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelFundValue.

        The Name of this fund  # noqa: E501

        :param name: The name of this ModelFundValue.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def allocation(self):
        """Gets the allocation of this ModelFundValue.  # noqa: E501

        The recommended percentage allocation of this fund. Should be a value between 0.00 and 100.00. The sum of allocations must equal 100.  # noqa: E501

        :return: The allocation of this ModelFundValue.  # noqa: E501
        :rtype: float
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this ModelFundValue.

        The recommended percentage allocation of this fund. Should be a value between 0.00 and 100.00. The sum of allocations must equal 100.  # noqa: E501

        :param allocation: The allocation of this ModelFundValue.  # noqa: E501
        :type: float
        """

        self._allocation = allocation

    @property
    def currency_code(self):
        """Gets the currency_code of this ModelFundValue.  # noqa: E501

        The Currency Code for the fund. 3 letter currency code (ISO 4217: GBP)  # noqa: E501

        :return: The currency_code of this ModelFundValue.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ModelFundValue.

        The Currency Code for the fund. 3 letter currency code (ISO 4217: GBP)  # noqa: E501

        :param currency_code: The currency_code of this ModelFundValue.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def fund_code_type(self):
        """Gets the fund_code_type of this ModelFundValue.  # noqa: E501

        The Type of instrument code used to identify the Fund.  Note that for feed funds, the underlying fund must have an ISIN code to generate references to KIID documents,  so the preferred codeType value for funds is 'isin'.  You can use other code types to upload the model but KIID documents can only be referenced if the underlying feed fund has an ISIN code.  # noqa: E501

        :return: The fund_code_type of this ModelFundValue.  # noqa: E501
        :rtype: str
        """
        return self._fund_code_type

    @fund_code_type.setter
    def fund_code_type(self, fund_code_type):
        """Sets the fund_code_type of this ModelFundValue.

        The Type of instrument code used to identify the Fund.  Note that for feed funds, the underlying fund must have an ISIN code to generate references to KIID documents,  so the preferred codeType value for funds is 'isin'.  You can use other code types to upload the model but KIID documents can only be referenced if the underlying feed fund has an ISIN code.  # noqa: E501

        :param fund_code_type: The fund_code_type of this ModelFundValue.  # noqa: E501
        :type: str
        """
        if fund_code_type is None:
            raise ValueError("Invalid value for `fund_code_type`, must not be `None`")  # noqa: E501
        allowed_values = ["citi", "epic", "isin", "mex", "sedol", "provider"]  # noqa: E501
        if fund_code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fund_code_type` ({0}), must be one of {1}"  # noqa: E501
                .format(fund_code_type, allowed_values)
            )

        self._fund_code_type = fund_code_type

    @property
    def code(self):
        """Gets the code of this ModelFundValue.  # noqa: E501

        The instrument code for this fund  # noqa: E501

        :return: The code of this ModelFundValue.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ModelFundValue.

        The instrument code for this fund  # noqa: E501

        :param code: The code of this ModelFundValue.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelFundValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelFundValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
