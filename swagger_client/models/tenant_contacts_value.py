# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TenantContactsValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_primary': 'str',
        'email_primary': 'str',
        'email_support': 'str',
        'email_admin': 'str',
        'name_primary': 'str'
    }

    attribute_map = {
        'phone_primary': 'phone_primary',
        'email_primary': 'email_primary',
        'email_support': 'email_support',
        'email_admin': 'email_admin',
        'name_primary': 'name_primary'
    }

    def __init__(self, phone_primary=None, email_primary=None, email_support=None, email_admin=None, name_primary=None):  # noqa: E501
        """TenantContactsValue - a model defined in Swagger"""  # noqa: E501
        self._phone_primary = None
        self._email_primary = None
        self._email_support = None
        self._email_admin = None
        self._name_primary = None
        self.discriminator = None
        self.phone_primary = phone_primary
        self.email_primary = email_primary
        if email_support is not None:
            self.email_support = email_support
        if email_admin is not None:
            self.email_admin = email_admin
        self.name_primary = name_primary

    @property
    def phone_primary(self):
        """Gets the phone_primary of this TenantContactsValue.  # noqa: E501

        Tenant contact phone number.  # noqa: E501

        :return: The phone_primary of this TenantContactsValue.  # noqa: E501
        :rtype: str
        """
        return self._phone_primary

    @phone_primary.setter
    def phone_primary(self, phone_primary):
        """Sets the phone_primary of this TenantContactsValue.

        Tenant contact phone number.  # noqa: E501

        :param phone_primary: The phone_primary of this TenantContactsValue.  # noqa: E501
        :type: str
        """
        if phone_primary is None:
            raise ValueError("Invalid value for `phone_primary`, must not be `None`")  # noqa: E501

        self._phone_primary = phone_primary

    @property
    def email_primary(self):
        """Gets the email_primary of this TenantContactsValue.  # noqa: E501

        Tenant contact email address.  # noqa: E501

        :return: The email_primary of this TenantContactsValue.  # noqa: E501
        :rtype: str
        """
        return self._email_primary

    @email_primary.setter
    def email_primary(self, email_primary):
        """Sets the email_primary of this TenantContactsValue.

        Tenant contact email address.  # noqa: E501

        :param email_primary: The email_primary of this TenantContactsValue.  # noqa: E501
        :type: str
        """
        if email_primary is None:
            raise ValueError("Invalid value for `email_primary`, must not be `None`")  # noqa: E501

        self._email_primary = email_primary

    @property
    def email_support(self):
        """Gets the email_support of this TenantContactsValue.  # noqa: E501

        Tenant support contact email address.  # noqa: E501

        :return: The email_support of this TenantContactsValue.  # noqa: E501
        :rtype: str
        """
        return self._email_support

    @email_support.setter
    def email_support(self, email_support):
        """Sets the email_support of this TenantContactsValue.

        Tenant support contact email address.  # noqa: E501

        :param email_support: The email_support of this TenantContactsValue.  # noqa: E501
        :type: str
        """

        self._email_support = email_support

    @property
    def email_admin(self):
        """Gets the email_admin of this TenantContactsValue.  # noqa: E501

        Tenant admin contact email address.  # noqa: E501

        :return: The email_admin of this TenantContactsValue.  # noqa: E501
        :rtype: str
        """
        return self._email_admin

    @email_admin.setter
    def email_admin(self, email_admin):
        """Sets the email_admin of this TenantContactsValue.

        Tenant admin contact email address.  # noqa: E501

        :param email_admin: The email_admin of this TenantContactsValue.  # noqa: E501
        :type: str
        """

        self._email_admin = email_admin

    @property
    def name_primary(self):
        """Gets the name_primary of this TenantContactsValue.  # noqa: E501

        Tenant contact person.  # noqa: E501

        :return: The name_primary of this TenantContactsValue.  # noqa: E501
        :rtype: str
        """
        return self._name_primary

    @name_primary.setter
    def name_primary(self, name_primary):
        """Sets the name_primary of this TenantContactsValue.

        Tenant contact person.  # noqa: E501

        :param name_primary: The name_primary of this TenantContactsValue.  # noqa: E501
        :type: str
        """
        if name_primary is None:
            raise ValueError("Invalid value for `name_primary`, must not be `None`")  # noqa: E501

        self._name_primary = name_primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TenantContactsValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantContactsValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
