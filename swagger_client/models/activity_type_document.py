# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityTypeDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'description': 'str',
        'activity_event_type': 'str',
        'is_client_related': 'bool',
        'is_plan_related': 'bool',
        'is_fee_related': 'bool',
        'is_retainer_related': 'bool',
        'is_opportunity_related': 'bool',
        'is_adviser_related': 'bool',
        'is_mandatory_outcome': 'bool',
        'is_archived': 'bool',
        'is_deletable': 'bool',
        'is_hidden': 'bool',
        'category': 'NamedActivityCategoryReference',
        'group': 'NamedGroupReference',
        'include_subgroups': 'bool',
        'priority': 'NamedPriorityReference',
        'task_billing_rate': 'float',
        'estimated_time': 'ActivityEstimatedTime'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'description': 'description',
        'activity_event_type': 'activityEventType',
        'is_client_related': 'isClientRelated',
        'is_plan_related': 'isPlanRelated',
        'is_fee_related': 'isFeeRelated',
        'is_retainer_related': 'isRetainerRelated',
        'is_opportunity_related': 'isOpportunityRelated',
        'is_adviser_related': 'isAdviserRelated',
        'is_mandatory_outcome': 'isMandatoryOutcome',
        'is_archived': 'isArchived',
        'is_deletable': 'isDeletable',
        'is_hidden': 'isHidden',
        'category': 'category',
        'group': 'group',
        'include_subgroups': 'includeSubgroups',
        'priority': 'priority',
        'task_billing_rate': 'taskBillingRate',
        'estimated_time': 'estimatedTime'
    }

    def __init__(self, id=None, href=None, name=None, description=None, activity_event_type=None, is_client_related=None, is_plan_related=None, is_fee_related=None, is_retainer_related=None, is_opportunity_related=None, is_adviser_related=None, is_mandatory_outcome=False, is_archived=None, is_deletable=None, is_hidden=None, category=None, group=None, include_subgroups=None, priority=None, task_billing_rate=None, estimated_time=None):  # noqa: E501
        """ActivityTypeDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._description = None
        self._activity_event_type = None
        self._is_client_related = None
        self._is_plan_related = None
        self._is_fee_related = None
        self._is_retainer_related = None
        self._is_opportunity_related = None
        self._is_adviser_related = None
        self._is_mandatory_outcome = None
        self._is_archived = None
        self._is_deletable = None
        self._is_hidden = None
        self._category = None
        self._group = None
        self._include_subgroups = None
        self._priority = None
        self._task_billing_rate = None
        self._estimated_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.name = name
        if description is not None:
            self.description = description
        if activity_event_type is not None:
            self.activity_event_type = activity_event_type
        if is_client_related is not None:
            self.is_client_related = is_client_related
        if is_plan_related is not None:
            self.is_plan_related = is_plan_related
        if is_fee_related is not None:
            self.is_fee_related = is_fee_related
        if is_retainer_related is not None:
            self.is_retainer_related = is_retainer_related
        if is_opportunity_related is not None:
            self.is_opportunity_related = is_opportunity_related
        if is_adviser_related is not None:
            self.is_adviser_related = is_adviser_related
        if is_mandatory_outcome is not None:
            self.is_mandatory_outcome = is_mandatory_outcome
        if is_archived is not None:
            self.is_archived = is_archived
        if is_deletable is not None:
            self.is_deletable = is_deletable
        if is_hidden is not None:
            self.is_hidden = is_hidden
        if category is not None:
            self.category = category
        if group is not None:
            self.group = group
        if include_subgroups is not None:
            self.include_subgroups = include_subgroups
        if priority is not None:
            self.priority = priority
        if task_billing_rate is not None:
            self.task_billing_rate = task_billing_rate
        if estimated_time is not None:
            self.estimated_time = estimated_time

    @property
    def id(self):
        """Gets the id of this ActivityTypeDocument.  # noqa: E501

        The unique identifier for the activity type.  # noqa: E501

        :return: The id of this ActivityTypeDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityTypeDocument.

        The unique identifier for the activity type.  # noqa: E501

        :param id: The id of this ActivityTypeDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ActivityTypeDocument.  # noqa: E501

        The hypertext reference to the activity type.  # noqa: E501

        :return: The href of this ActivityTypeDocument.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ActivityTypeDocument.

        The hypertext reference to the activity type.  # noqa: E501

        :param href: The href of this ActivityTypeDocument.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this ActivityTypeDocument.  # noqa: E501

        The name of the activity type.  # noqa: E501

        :return: The name of this ActivityTypeDocument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityTypeDocument.

        The name of the activity type.  # noqa: E501

        :param name: The name of this ActivityTypeDocument.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ActivityTypeDocument.  # noqa: E501

        The description of the activity type.  # noqa: E501

        :return: The description of this ActivityTypeDocument.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityTypeDocument.

        The description of the activity type.  # noqa: E501

        :param description: The description of this ActivityTypeDocument.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def activity_event_type(self):
        """Gets the activity_event_type of this ActivityTypeDocument.  # noqa: E501

        The event type for the activity type.  # noqa: E501

        :return: The activity_event_type of this ActivityTypeDocument.  # noqa: E501
        :rtype: str
        """
        return self._activity_event_type

    @activity_event_type.setter
    def activity_event_type(self, activity_event_type):
        """Sets the activity_event_type of this ActivityTypeDocument.

        The event type for the activity type.  # noqa: E501

        :param activity_event_type: The activity_event_type of this ActivityTypeDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["Task", "Diary"]  # noqa: E501
        if activity_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_event_type, allowed_values)
            )

        self._activity_event_type = activity_event_type

    @property
    def is_client_related(self):
        """Gets the is_client_related of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type is client related.  # noqa: E501

        :return: The is_client_related of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_client_related

    @is_client_related.setter
    def is_client_related(self, is_client_related):
        """Sets the is_client_related of this ActivityTypeDocument.

        Flag indicating if the activity type is client related.  # noqa: E501

        :param is_client_related: The is_client_related of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_client_related = is_client_related

    @property
    def is_plan_related(self):
        """Gets the is_plan_related of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type is plan related.  # noqa: E501

        :return: The is_plan_related of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_plan_related

    @is_plan_related.setter
    def is_plan_related(self, is_plan_related):
        """Sets the is_plan_related of this ActivityTypeDocument.

        Flag indicating if the activity type is plan related.  # noqa: E501

        :param is_plan_related: The is_plan_related of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_plan_related = is_plan_related

    @property
    def is_fee_related(self):
        """Gets the is_fee_related of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type is fee related.  # noqa: E501

        :return: The is_fee_related of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_fee_related

    @is_fee_related.setter
    def is_fee_related(self, is_fee_related):
        """Sets the is_fee_related of this ActivityTypeDocument.

        Flag indicating if the activity type is fee related.  # noqa: E501

        :param is_fee_related: The is_fee_related of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_fee_related = is_fee_related

    @property
    def is_retainer_related(self):
        """Gets the is_retainer_related of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type is retainer related.  # noqa: E501

        :return: The is_retainer_related of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_retainer_related

    @is_retainer_related.setter
    def is_retainer_related(self, is_retainer_related):
        """Sets the is_retainer_related of this ActivityTypeDocument.

        Flag indicating if the activity type is retainer related.  # noqa: E501

        :param is_retainer_related: The is_retainer_related of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_retainer_related = is_retainer_related

    @property
    def is_opportunity_related(self):
        """Gets the is_opportunity_related of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type is opportunity related.  # noqa: E501

        :return: The is_opportunity_related of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_opportunity_related

    @is_opportunity_related.setter
    def is_opportunity_related(self, is_opportunity_related):
        """Sets the is_opportunity_related of this ActivityTypeDocument.

        Flag indicating if the activity type is opportunity related.  # noqa: E501

        :param is_opportunity_related: The is_opportunity_related of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_opportunity_related = is_opportunity_related

    @property
    def is_adviser_related(self):
        """Gets the is_adviser_related of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type is advisor related.  # noqa: E501

        :return: The is_adviser_related of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_adviser_related

    @is_adviser_related.setter
    def is_adviser_related(self, is_adviser_related):
        """Sets the is_adviser_related of this ActivityTypeDocument.

        Flag indicating if the activity type is advisor related.  # noqa: E501

        :param is_adviser_related: The is_adviser_related of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_adviser_related = is_adviser_related

    @property
    def is_mandatory_outcome(self):
        """Gets the is_mandatory_outcome of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity outcome is mandatory.  # noqa: E501

        :return: The is_mandatory_outcome of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory_outcome

    @is_mandatory_outcome.setter
    def is_mandatory_outcome(self, is_mandatory_outcome):
        """Sets the is_mandatory_outcome of this ActivityTypeDocument.

        Flag indicating if the activity outcome is mandatory.  # noqa: E501

        :param is_mandatory_outcome: The is_mandatory_outcome of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_mandatory_outcome = is_mandatory_outcome

    @property
    def is_archived(self):
        """Gets the is_archived of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if activity type is archived.  # noqa: E501

        :return: The is_archived of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this ActivityTypeDocument.

        Flag indicating if activity type is archived.  # noqa: E501

        :param is_archived: The is_archived of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_deletable(self):
        """Gets the is_deletable of this ActivityTypeDocument.  # noqa: E501

        Flag indicating if the activity type can be deleted or not. if activity type is used in any of the tasks or appointments then we cannot delete the activity type.  # noqa: E501

        :return: The is_deletable of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_deletable

    @is_deletable.setter
    def is_deletable(self, is_deletable):
        """Sets the is_deletable of this ActivityTypeDocument.

        Flag indicating if the activity type can be deleted or not. if activity type is used in any of the tasks or appointments then we cannot delete the activity type.  # noqa: E501

        :param is_deletable: The is_deletable of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_deletable = is_deletable

    @property
    def is_hidden(self):
        """Gets the is_hidden of this ActivityTypeDocument.  # noqa: E501

        Flag is indicating if the activity type is hidden for the user based on user group.  # noqa: E501

        :return: The is_hidden of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this ActivityTypeDocument.

        Flag is indicating if the activity type is hidden for the user based on user group.  # noqa: E501

        :param is_hidden: The is_hidden of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def category(self):
        """Gets the category of this ActivityTypeDocument.  # noqa: E501


        :return: The category of this ActivityTypeDocument.  # noqa: E501
        :rtype: NamedActivityCategoryReference
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActivityTypeDocument.


        :param category: The category of this ActivityTypeDocument.  # noqa: E501
        :type: NamedActivityCategoryReference
        """

        self._category = category

    @property
    def group(self):
        """Gets the group of this ActivityTypeDocument.  # noqa: E501


        :return: The group of this ActivityTypeDocument.  # noqa: E501
        :rtype: NamedGroupReference
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ActivityTypeDocument.


        :param group: The group of this ActivityTypeDocument.  # noqa: E501
        :type: NamedGroupReference
        """

        self._group = group

    @property
    def include_subgroups(self):
        """Gets the include_subgroups of this ActivityTypeDocument.  # noqa: E501

        The flag indicating whether to provide access of activity type to sub groups or not.  # noqa: E501

        :return: The include_subgroups of this ActivityTypeDocument.  # noqa: E501
        :rtype: bool
        """
        return self._include_subgroups

    @include_subgroups.setter
    def include_subgroups(self, include_subgroups):
        """Sets the include_subgroups of this ActivityTypeDocument.

        The flag indicating whether to provide access of activity type to sub groups or not.  # noqa: E501

        :param include_subgroups: The include_subgroups of this ActivityTypeDocument.  # noqa: E501
        :type: bool
        """

        self._include_subgroups = include_subgroups

    @property
    def priority(self):
        """Gets the priority of this ActivityTypeDocument.  # noqa: E501


        :return: The priority of this ActivityTypeDocument.  # noqa: E501
        :rtype: NamedPriorityReference
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ActivityTypeDocument.


        :param priority: The priority of this ActivityTypeDocument.  # noqa: E501
        :type: NamedPriorityReference
        """

        self._priority = priority

    @property
    def task_billing_rate(self):
        """Gets the task_billing_rate of this ActivityTypeDocument.  # noqa: E501

        The task billing rate of the activity type.  # noqa: E501

        :return: The task_billing_rate of this ActivityTypeDocument.  # noqa: E501
        :rtype: float
        """
        return self._task_billing_rate

    @task_billing_rate.setter
    def task_billing_rate(self, task_billing_rate):
        """Sets the task_billing_rate of this ActivityTypeDocument.

        The task billing rate of the activity type.  # noqa: E501

        :param task_billing_rate: The task_billing_rate of this ActivityTypeDocument.  # noqa: E501
        :type: float
        """

        self._task_billing_rate = task_billing_rate

    @property
    def estimated_time(self):
        """Gets the estimated_time of this ActivityTypeDocument.  # noqa: E501


        :return: The estimated_time of this ActivityTypeDocument.  # noqa: E501
        :rtype: ActivityEstimatedTime
        """
        return self._estimated_time

    @estimated_time.setter
    def estimated_time(self, estimated_time):
        """Sets the estimated_time of this ActivityTypeDocument.


        :param estimated_time: The estimated_time of this ActivityTypeDocument.  # noqa: E501
        :type: ActivityEstimatedTime
        """

        self._estimated_time = estimated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityTypeDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityTypeDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
