# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Adviser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'name': 'str',
        'authorised_on': 'datetime',
        'fca_ref_no': 'str',
        'person': 'PersonValue',
        'joined_firm_on': 'datetime',
        'left_firm_on': 'datetime',
        'migration_ref': 'str',
        'external_ref1': 'str',
        'external_ref2': 'str',
        'addresses_href': 'str',
        'contact_details_href': 'str',
        'tand_c_coach': 'TandCCoachRef',
        'user': 'UserReference',
        'group': 'NamedGroupReference',
        'can_sell_off_panel': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'name': 'name',
        'authorised_on': 'authorisedOn',
        'fca_ref_no': 'fcaRefNo',
        'person': 'person',
        'joined_firm_on': 'joinedFirmOn',
        'left_firm_on': 'leftFirmOn',
        'migration_ref': 'migrationRef',
        'external_ref1': 'externalRef1',
        'external_ref2': 'externalRef2',
        'addresses_href': 'addresses_href',
        'contact_details_href': 'contactDetails_href',
        'tand_c_coach': 'tandCCoach',
        'user': 'user',
        'group': 'group',
        'can_sell_off_panel': 'canSellOffPanel'
    }

    def __init__(self, id=None, href=None, name=None, authorised_on=None, fca_ref_no=None, person=None, joined_firm_on=None, left_firm_on=None, migration_ref=None, external_ref1=None, external_ref2=None, addresses_href=None, contact_details_href=None, tand_c_coach=None, user=None, group=None, can_sell_off_panel=None):  # noqa: E501
        """Adviser - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._name = None
        self._authorised_on = None
        self._fca_ref_no = None
        self._person = None
        self._joined_firm_on = None
        self._left_firm_on = None
        self._migration_ref = None
        self._external_ref1 = None
        self._external_ref2 = None
        self._addresses_href = None
        self._contact_details_href = None
        self._tand_c_coach = None
        self._user = None
        self._group = None
        self._can_sell_off_panel = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if name is not None:
            self.name = name
        if authorised_on is not None:
            self.authorised_on = authorised_on
        if fca_ref_no is not None:
            self.fca_ref_no = fca_ref_no
        if person is not None:
            self.person = person
        if joined_firm_on is not None:
            self.joined_firm_on = joined_firm_on
        if left_firm_on is not None:
            self.left_firm_on = left_firm_on
        if migration_ref is not None:
            self.migration_ref = migration_ref
        if external_ref1 is not None:
            self.external_ref1 = external_ref1
        if external_ref2 is not None:
            self.external_ref2 = external_ref2
        if addresses_href is not None:
            self.addresses_href = addresses_href
        if contact_details_href is not None:
            self.contact_details_href = contact_details_href
        if tand_c_coach is not None:
            self.tand_c_coach = tand_c_coach
        if user is not None:
            self.user = user
        if group is not None:
            self.group = group
        if can_sell_off_panel is not None:
            self.can_sell_off_panel = can_sell_off_panel

    @property
    def id(self):
        """Gets the id of this Adviser.  # noqa: E501

        The unique identifier for the Adviser.  # noqa: E501

        :return: The id of this Adviser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Adviser.

        The unique identifier for the Adviser.  # noqa: E501

        :param id: The id of this Adviser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Adviser.  # noqa: E501

        The hypertext reference to the Adviser.  # noqa: E501

        :return: The href of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Adviser.

        The hypertext reference to the Adviser.  # noqa: E501

        :param href: The href of this Adviser.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this Adviser.  # noqa: E501

        The Adviser's name consisting of their Firstname and Lastname.  # noqa: E501

        :return: The name of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Adviser.

        The Adviser's name consisting of their Firstname and Lastname.  # noqa: E501

        :param name: The name of this Adviser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def authorised_on(self):
        """Gets the authorised_on of this Adviser.  # noqa: E501

        The date the Adviser was authorised.  # noqa: E501

        :return: The authorised_on of this Adviser.  # noqa: E501
        :rtype: datetime
        """
        return self._authorised_on

    @authorised_on.setter
    def authorised_on(self, authorised_on):
        """Sets the authorised_on of this Adviser.

        The date the Adviser was authorised.  # noqa: E501

        :param authorised_on: The authorised_on of this Adviser.  # noqa: E501
        :type: datetime
        """

        self._authorised_on = authorised_on

    @property
    def fca_ref_no(self):
        """Gets the fca_ref_no of this Adviser.  # noqa: E501

        Authorisation number from the local Financial Regulatory Body.  # noqa: E501

        :return: The fca_ref_no of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._fca_ref_no

    @fca_ref_no.setter
    def fca_ref_no(self, fca_ref_no):
        """Sets the fca_ref_no of this Adviser.

        Authorisation number from the local Financial Regulatory Body.  # noqa: E501

        :param fca_ref_no: The fca_ref_no of this Adviser.  # noqa: E501
        :type: str
        """

        self._fca_ref_no = fca_ref_no

    @property
    def person(self):
        """Gets the person of this Adviser.  # noqa: E501


        :return: The person of this Adviser.  # noqa: E501
        :rtype: PersonValue
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this Adviser.


        :param person: The person of this Adviser.  # noqa: E501
        :type: PersonValue
        """

        self._person = person

    @property
    def joined_firm_on(self):
        """Gets the joined_firm_on of this Adviser.  # noqa: E501

        The date the Adviser joined the advising company.  # noqa: E501

        :return: The joined_firm_on of this Adviser.  # noqa: E501
        :rtype: datetime
        """
        return self._joined_firm_on

    @joined_firm_on.setter
    def joined_firm_on(self, joined_firm_on):
        """Sets the joined_firm_on of this Adviser.

        The date the Adviser joined the advising company.  # noqa: E501

        :param joined_firm_on: The joined_firm_on of this Adviser.  # noqa: E501
        :type: datetime
        """

        self._joined_firm_on = joined_firm_on

    @property
    def left_firm_on(self):
        """Gets the left_firm_on of this Adviser.  # noqa: E501

        The date the Adviser left the advising company.  # noqa: E501

        :return: The left_firm_on of this Adviser.  # noqa: E501
        :rtype: datetime
        """
        return self._left_firm_on

    @left_firm_on.setter
    def left_firm_on(self, left_firm_on):
        """Sets the left_firm_on of this Adviser.

        The date the Adviser left the advising company.  # noqa: E501

        :param left_firm_on: The left_firm_on of this Adviser.  # noqa: E501
        :type: datetime
        """

        self._left_firm_on = left_firm_on

    @property
    def migration_ref(self):
        """Gets the migration_ref of this Adviser.  # noqa: E501

        The Adviser's migration reference. Typically a reference set when the Adviser was imported into the system.  # noqa: E501

        :return: The migration_ref of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._migration_ref

    @migration_ref.setter
    def migration_ref(self, migration_ref):
        """Sets the migration_ref of this Adviser.

        The Adviser's migration reference. Typically a reference set when the Adviser was imported into the system.  # noqa: E501

        :param migration_ref: The migration_ref of this Adviser.  # noqa: E501
        :type: str
        """

        self._migration_ref = migration_ref

    @property
    def external_ref1(self):
        """Gets the external_ref1 of this Adviser.  # noqa: E501

        An external reference for the Adviser.  # noqa: E501

        :return: The external_ref1 of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._external_ref1

    @external_ref1.setter
    def external_ref1(self, external_ref1):
        """Sets the external_ref1 of this Adviser.

        An external reference for the Adviser.  # noqa: E501

        :param external_ref1: The external_ref1 of this Adviser.  # noqa: E501
        :type: str
        """

        self._external_ref1 = external_ref1

    @property
    def external_ref2(self):
        """Gets the external_ref2 of this Adviser.  # noqa: E501

        An secondary external reference for the Adviser.  # noqa: E501

        :return: The external_ref2 of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._external_ref2

    @external_ref2.setter
    def external_ref2(self, external_ref2):
        """Sets the external_ref2 of this Adviser.

        An secondary external reference for the Adviser.  # noqa: E501

        :param external_ref2: The external_ref2 of this Adviser.  # noqa: E501
        :type: str
        """

        self._external_ref2 = external_ref2

    @property
    def addresses_href(self):
        """Gets the addresses_href of this Adviser.  # noqa: E501

        The hypertext reference to the address or addresses held for the Adviser. Typically these may be a home, work or correspondance address.  # noqa: E501

        :return: The addresses_href of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._addresses_href

    @addresses_href.setter
    def addresses_href(self, addresses_href):
        """Sets the addresses_href of this Adviser.

        The hypertext reference to the address or addresses held for the Adviser. Typically these may be a home, work or correspondance address.  # noqa: E501

        :param addresses_href: The addresses_href of this Adviser.  # noqa: E501
        :type: str
        """

        self._addresses_href = addresses_href

    @property
    def contact_details_href(self):
        """Gets the contact_details_href of this Adviser.  # noqa: E501

        The hypertext reference to the list of contact details held for the Adviser.  # noqa: E501

        :return: The contact_details_href of this Adviser.  # noqa: E501
        :rtype: str
        """
        return self._contact_details_href

    @contact_details_href.setter
    def contact_details_href(self, contact_details_href):
        """Sets the contact_details_href of this Adviser.

        The hypertext reference to the list of contact details held for the Adviser.  # noqa: E501

        :param contact_details_href: The contact_details_href of this Adviser.  # noqa: E501
        :type: str
        """

        self._contact_details_href = contact_details_href

    @property
    def tand_c_coach(self):
        """Gets the tand_c_coach of this Adviser.  # noqa: E501


        :return: The tand_c_coach of this Adviser.  # noqa: E501
        :rtype: TandCCoachRef
        """
        return self._tand_c_coach

    @tand_c_coach.setter
    def tand_c_coach(self, tand_c_coach):
        """Sets the tand_c_coach of this Adviser.


        :param tand_c_coach: The tand_c_coach of this Adviser.  # noqa: E501
        :type: TandCCoachRef
        """

        self._tand_c_coach = tand_c_coach

    @property
    def user(self):
        """Gets the user of this Adviser.  # noqa: E501


        :return: The user of this Adviser.  # noqa: E501
        :rtype: UserReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Adviser.


        :param user: The user of this Adviser.  # noqa: E501
        :type: UserReference
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this Adviser.  # noqa: E501


        :return: The group of this Adviser.  # noqa: E501
        :rtype: NamedGroupReference
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Adviser.


        :param group: The group of this Adviser.  # noqa: E501
        :type: NamedGroupReference
        """

        self._group = group

    @property
    def can_sell_off_panel(self):
        """Gets the can_sell_off_panel of this Adviser.  # noqa: E501

        Indicating whether the Adviser can sell off panel.  # noqa: E501

        :return: The can_sell_off_panel of this Adviser.  # noqa: E501
        :rtype: bool
        """
        return self._can_sell_off_panel

    @can_sell_off_panel.setter
    def can_sell_off_panel(self, can_sell_off_panel):
        """Sets the can_sell_off_panel of this Adviser.

        Indicating whether the Adviser can sell off panel.  # noqa: E501

        :param can_sell_off_panel: The can_sell_off_panel of this Adviser.  # noqa: E501
        :type: bool
        """

        self._can_sell_off_panel = can_sell_off_panel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Adviser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Adviser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
