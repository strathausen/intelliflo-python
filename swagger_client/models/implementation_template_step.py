# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_advice_template_step import BaseAdviceTemplateStep  # noqa: F401,E501

class ImplementationTemplateStep(BaseAdviceTemplateStep):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recommendation': 'AdviceTemplateStepRecommendation',
        'implementation': 'AdviceTemplateStepImplementation'
    }
    if hasattr(BaseAdviceTemplateStep, "swagger_types"):
        swagger_types.update(BaseAdviceTemplateStep.swagger_types)

    attribute_map = {
        'recommendation': 'recommendation',
        'implementation': 'implementation'
    }
    if hasattr(BaseAdviceTemplateStep, "attribute_map"):
        attribute_map.update(BaseAdviceTemplateStep.attribute_map)

    def __init__(self, recommendation=None, implementation=None, *args, **kwargs):  # noqa: E501
        """ImplementationTemplateStep - a model defined in Swagger"""  # noqa: E501
        self._recommendation = None
        self._implementation = None
        self.discriminator = None
        if recommendation is not None:
            self.recommendation = recommendation
        if implementation is not None:
            self.implementation = implementation
        BaseAdviceTemplateStep.__init__(self, *args, **kwargs)

    @property
    def recommendation(self):
        """Gets the recommendation of this ImplementationTemplateStep.  # noqa: E501


        :return: The recommendation of this ImplementationTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateStepRecommendation
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this ImplementationTemplateStep.


        :param recommendation: The recommendation of this ImplementationTemplateStep.  # noqa: E501
        :type: AdviceTemplateStepRecommendation
        """

        self._recommendation = recommendation

    @property
    def implementation(self):
        """Gets the implementation of this ImplementationTemplateStep.  # noqa: E501


        :return: The implementation of this ImplementationTemplateStep.  # noqa: E501
        :rtype: AdviceTemplateStepImplementation
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this ImplementationTemplateStep.


        :param implementation: The implementation of this ImplementationTemplateStep.  # noqa: E501
        :type: AdviceTemplateStepImplementation
        """

        self._implementation = implementation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImplementationTemplateStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImplementationTemplateStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
