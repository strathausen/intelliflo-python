# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProviderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'provider_name': 'str',
        'href': 'str',
        'code': 'str',
        'name': 'str',
        'description': 'str',
        'change_description': 'str',
        'market_commentary_rss_href': 'str',
        'is_active': 'bool',
        'funds': 'list[ModelFundValue]',
        'atrs': 'list[ModelAtrValue]',
        'created_at': 'datetime',
        'created_by_app': 'NamedAppRef',
        'reference': 'str',
        'expected_return': 'str',
        'expected_risk': 'str',
        'investment_amount_upper': 'float',
        'investment_amount_lower': 'float',
        'benchmark_name': 'str',
        'allow_rebalance': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'provider_name': 'providerName',
        'href': 'href',
        'code': 'code',
        'name': 'name',
        'description': 'description',
        'change_description': 'changeDescription',
        'market_commentary_rss_href': 'marketCommentaryRssHref',
        'is_active': 'isActive',
        'funds': 'funds',
        'atrs': 'atrs',
        'created_at': 'createdAt',
        'created_by_app': 'createdByApp',
        'reference': 'reference',
        'expected_return': 'expectedReturn',
        'expected_risk': 'expectedRisk',
        'investment_amount_upper': 'investmentAmountUpper',
        'investment_amount_lower': 'investmentAmountLower',
        'benchmark_name': 'benchmarkName',
        'allow_rebalance': 'allowRebalance'
    }

    def __init__(self, id=None, provider_name=None, href=None, code=None, name=None, description=None, change_description=None, market_commentary_rss_href=None, is_active=None, funds=None, atrs=None, created_at=None, created_by_app=None, reference=None, expected_return=None, expected_risk=None, investment_amount_upper=None, investment_amount_lower=None, benchmark_name=None, allow_rebalance=True):  # noqa: E501
        """ProviderModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._provider_name = None
        self._href = None
        self._code = None
        self._name = None
        self._description = None
        self._change_description = None
        self._market_commentary_rss_href = None
        self._is_active = None
        self._funds = None
        self._atrs = None
        self._created_at = None
        self._created_by_app = None
        self._reference = None
        self._expected_return = None
        self._expected_risk = None
        self._investment_amount_upper = None
        self._investment_amount_lower = None
        self._benchmark_name = None
        self._allow_rebalance = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if provider_name is not None:
            self.provider_name = provider_name
        if href is not None:
            self.href = href
        self.code = code
        self.name = name
        self.description = description
        if change_description is not None:
            self.change_description = change_description
        if market_commentary_rss_href is not None:
            self.market_commentary_rss_href = market_commentary_rss_href
        if is_active is not None:
            self.is_active = is_active
        self.funds = funds
        self.atrs = atrs
        if created_at is not None:
            self.created_at = created_at
        if created_by_app is not None:
            self.created_by_app = created_by_app
        if reference is not None:
            self.reference = reference
        if expected_return is not None:
            self.expected_return = expected_return
        if expected_risk is not None:
            self.expected_risk = expected_risk
        if investment_amount_upper is not None:
            self.investment_amount_upper = investment_amount_upper
        if investment_amount_lower is not None:
            self.investment_amount_lower = investment_amount_lower
        if benchmark_name is not None:
            self.benchmark_name = benchmark_name
        if allow_rebalance is not None:
            self.allow_rebalance = allow_rebalance

    @property
    def id(self):
        """Gets the id of this ProviderModel.  # noqa: E501

        An unique Identifier for this Portfolio Model  # noqa: E501

        :return: The id of this ProviderModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderModel.

        An unique Identifier for this Portfolio Model  # noqa: E501

        :param id: The id of this ProviderModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def provider_name(self):
        """Gets the provider_name of this ProviderModel.  # noqa: E501

        The Portfolio Model Provider  # noqa: E501

        :return: The provider_name of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this ProviderModel.

        The Portfolio Model Provider  # noqa: E501

        :param provider_name: The provider_name of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def href(self):
        """Gets the href of this ProviderModel.  # noqa: E501

        Resource Uri for this Portfolio Model  # noqa: E501

        :return: The href of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProviderModel.

        Resource Uri for this Portfolio Model  # noqa: E501

        :param href: The href of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def code(self):
        """Gets the code of this ProviderModel.  # noqa: E501

        A Unique code to identify this Portfolio Model  # noqa: E501

        :return: The code of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProviderModel.

        A Unique code to identify this Portfolio Model  # noqa: E501

        :param code: The code of this ProviderModel.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this ProviderModel.  # noqa: E501

        The Name of the this Portfolio Model  # noqa: E501

        :return: The name of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProviderModel.

        The Name of the this Portfolio Model  # noqa: E501

        :param name: The name of this ProviderModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProviderModel.  # noqa: E501

        Short Description of this Portfolio Model  # noqa: E501

        :return: The description of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProviderModel.

        Short Description of this Portfolio Model  # noqa: E501

        :param description: The description of this ProviderModel.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def change_description(self):
        """Gets the change_description of this ProviderModel.  # noqa: E501

        Short commentary on what has changed in this version of the Portfolio Model  # noqa: E501

        :return: The change_description of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._change_description

    @change_description.setter
    def change_description(self, change_description):
        """Sets the change_description of this ProviderModel.

        Short commentary on what has changed in this version of the Portfolio Model  # noqa: E501

        :param change_description: The change_description of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._change_description = change_description

    @property
    def market_commentary_rss_href(self):
        """Gets the market_commentary_rss_href of this ProviderModel.  # noqa: E501

        The Url for the Market Commentary RSS feed for this Portfolio Model  # noqa: E501

        :return: The market_commentary_rss_href of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._market_commentary_rss_href

    @market_commentary_rss_href.setter
    def market_commentary_rss_href(self, market_commentary_rss_href):
        """Sets the market_commentary_rss_href of this ProviderModel.

        The Url for the Market Commentary RSS feed for this Portfolio Model  # noqa: E501

        :param market_commentary_rss_href: The market_commentary_rss_href of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._market_commentary_rss_href = market_commentary_rss_href

    @property
    def is_active(self):
        """Gets the is_active of this ProviderModel.  # noqa: E501

        Indicates that this is the latest version of the Portfolio Model  # noqa: E501

        :return: The is_active of this ProviderModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProviderModel.

        Indicates that this is the latest version of the Portfolio Model  # noqa: E501

        :param is_active: The is_active of this ProviderModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def funds(self):
        """Gets the funds of this ProviderModel.  # noqa: E501

        The list of recommended Fund allocations for this model.  # noqa: E501

        :return: The funds of this ProviderModel.  # noqa: E501
        :rtype: list[ModelFundValue]
        """
        return self._funds

    @funds.setter
    def funds(self, funds):
        """Sets the funds of this ProviderModel.

        The list of recommended Fund allocations for this model.  # noqa: E501

        :param funds: The funds of this ProviderModel.  # noqa: E501
        :type: list[ModelFundValue]
        """
        if funds is None:
            raise ValueError("Invalid value for `funds`, must not be `None`")  # noqa: E501

        self._funds = funds

    @property
    def atrs(self):
        """Gets the atrs of this ProviderModel.  # noqa: E501

        The list of ATRs that this model is suitable for  # noqa: E501

        :return: The atrs of this ProviderModel.  # noqa: E501
        :rtype: list[ModelAtrValue]
        """
        return self._atrs

    @atrs.setter
    def atrs(self, atrs):
        """Sets the atrs of this ProviderModel.

        The list of ATRs that this model is suitable for  # noqa: E501

        :param atrs: The atrs of this ProviderModel.  # noqa: E501
        :type: list[ModelAtrValue]
        """
        if atrs is None:
            raise ValueError("Invalid value for `atrs`, must not be `None`")  # noqa: E501

        self._atrs = atrs

    @property
    def created_at(self):
        """Gets the created_at of this ProviderModel.  # noqa: E501

        Indicates when this version of the Portfolio Model was created.  # noqa: E501

        :return: The created_at of this ProviderModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProviderModel.

        Indicates when this version of the Portfolio Model was created.  # noqa: E501

        :param created_at: The created_at of this ProviderModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by_app(self):
        """Gets the created_by_app of this ProviderModel.  # noqa: E501


        :return: The created_by_app of this ProviderModel.  # noqa: E501
        :rtype: NamedAppRef
        """
        return self._created_by_app

    @created_by_app.setter
    def created_by_app(self, created_by_app):
        """Sets the created_by_app of this ProviderModel.


        :param created_by_app: The created_by_app of this ProviderModel.  # noqa: E501
        :type: NamedAppRef
        """

        self._created_by_app = created_by_app

    @property
    def reference(self):
        """Gets the reference of this ProviderModel.  # noqa: E501

        The additional reference the Adviser Pro tool uses for models alongside the model code  # noqa: E501

        :return: The reference of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ProviderModel.

        The additional reference the Adviser Pro tool uses for models alongside the model code  # noqa: E501

        :param reference: The reference of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def expected_return(self):
        """Gets the expected_return of this ProviderModel.  # noqa: E501

        The expected return for the model  # noqa: E501

        :return: The expected_return of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._expected_return

    @expected_return.setter
    def expected_return(self, expected_return):
        """Sets the expected_return of this ProviderModel.

        The expected return for the model  # noqa: E501

        :param expected_return: The expected_return of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._expected_return = expected_return

    @property
    def expected_risk(self):
        """Gets the expected_risk of this ProviderModel.  # noqa: E501

        The expected risk for the model  # noqa: E501

        :return: The expected_risk of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._expected_risk

    @expected_risk.setter
    def expected_risk(self, expected_risk):
        """Sets the expected_risk of this ProviderModel.

        The expected risk for the model  # noqa: E501

        :param expected_risk: The expected_risk of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._expected_risk = expected_risk

    @property
    def investment_amount_upper(self):
        """Gets the investment_amount_upper of this ProviderModel.  # noqa: E501

        The maximum investment amount required/permitted for the model  # noqa: E501

        :return: The investment_amount_upper of this ProviderModel.  # noqa: E501
        :rtype: float
        """
        return self._investment_amount_upper

    @investment_amount_upper.setter
    def investment_amount_upper(self, investment_amount_upper):
        """Sets the investment_amount_upper of this ProviderModel.

        The maximum investment amount required/permitted for the model  # noqa: E501

        :param investment_amount_upper: The investment_amount_upper of this ProviderModel.  # noqa: E501
        :type: float
        """

        self._investment_amount_upper = investment_amount_upper

    @property
    def investment_amount_lower(self):
        """Gets the investment_amount_lower of this ProviderModel.  # noqa: E501

        The minimum investment amount required/permitted for the model  # noqa: E501

        :return: The investment_amount_lower of this ProviderModel.  # noqa: E501
        :rtype: float
        """
        return self._investment_amount_lower

    @investment_amount_lower.setter
    def investment_amount_lower(self, investment_amount_lower):
        """Sets the investment_amount_lower of this ProviderModel.

        The minimum investment amount required/permitted for the model  # noqa: E501

        :param investment_amount_lower: The investment_amount_lower of this ProviderModel.  # noqa: E501
        :type: float
        """

        self._investment_amount_lower = investment_amount_lower

    @property
    def benchmark_name(self):
        """Gets the benchmark_name of this ProviderModel.  # noqa: E501

        The Benchmark associated with the portfolio model  # noqa: E501

        :return: The benchmark_name of this ProviderModel.  # noqa: E501
        :rtype: str
        """
        return self._benchmark_name

    @benchmark_name.setter
    def benchmark_name(self, benchmark_name):
        """Sets the benchmark_name of this ProviderModel.

        The Benchmark associated with the portfolio model  # noqa: E501

        :param benchmark_name: The benchmark_name of this ProviderModel.  # noqa: E501
        :type: str
        """

        self._benchmark_name = benchmark_name

    @property
    def allow_rebalance(self):
        """Gets the allow_rebalance of this ProviderModel.  # noqa: E501

        Allow iMPS rebalance activity  # noqa: E501

        :return: The allow_rebalance of this ProviderModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_rebalance

    @allow_rebalance.setter
    def allow_rebalance(self, allow_rebalance):
        """Sets the allow_rebalance of this ProviderModel.

        Allow iMPS rebalance activity  # noqa: E501

        :param allow_rebalance: The allow_rebalance of this ProviderModel.  # noqa: E501
        :type: bool
        """

        self._allow_rebalance = allow_rebalance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProviderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
