# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_objective import BaseObjective  # noqa: F401,E501

class InvestmentObjective(BaseObjective):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_amount': 'CurrencyValue',
        'target_on': 'datetime',
        'frequency': 'str',
        'term': 'int',
        'has_investment_preference': 'str',
        'investment_preferences': 'str',
        'risk_profile': 'RiskProfileValue',
        'risk_profile_named_ref': 'RiskProfileNamedRef',
        'atr_ref': 'ATRRef',
        'investment_preference_ref': 'InvestmentPreferenceRef'
    }
    if hasattr(BaseObjective, "swagger_types"):
        swagger_types.update(BaseObjective.swagger_types)

    attribute_map = {
        'target_amount': 'targetAmount',
        'target_on': 'targetOn',
        'frequency': 'frequency',
        'term': 'term',
        'has_investment_preference': 'hasInvestmentPreference',
        'investment_preferences': 'investmentPreferences',
        'risk_profile': 'riskProfile',
        'risk_profile_named_ref': 'riskProfileNamedRef',
        'atr_ref': 'atrRef',
        'investment_preference_ref': 'investmentPreferenceRef'
    }
    if hasattr(BaseObjective, "attribute_map"):
        attribute_map.update(BaseObjective.attribute_map)

    def __init__(self, target_amount=None, target_on=None, frequency=None, term=None, has_investment_preference=None, investment_preferences=None, risk_profile=None, risk_profile_named_ref=None, atr_ref=None, investment_preference_ref=None, *args, **kwargs):  # noqa: E501
        """InvestmentObjective - a model defined in Swagger"""  # noqa: E501
        self._target_amount = None
        self._target_on = None
        self._frequency = None
        self._term = None
        self._has_investment_preference = None
        self._investment_preferences = None
        self._risk_profile = None
        self._risk_profile_named_ref = None
        self._atr_ref = None
        self._investment_preference_ref = None
        self.discriminator = None
        if target_amount is not None:
            self.target_amount = target_amount
        if target_on is not None:
            self.target_on = target_on
        if frequency is not None:
            self.frequency = frequency
        if term is not None:
            self.term = term
        if has_investment_preference is not None:
            self.has_investment_preference = has_investment_preference
        if investment_preferences is not None:
            self.investment_preferences = investment_preferences
        if risk_profile is not None:
            self.risk_profile = risk_profile
        if risk_profile_named_ref is not None:
            self.risk_profile_named_ref = risk_profile_named_ref
        if atr_ref is not None:
            self.atr_ref = atr_ref
        if investment_preference_ref is not None:
            self.investment_preference_ref = investment_preference_ref
        BaseObjective.__init__(self, *args, **kwargs)

    @property
    def target_amount(self):
        """Gets the target_amount of this InvestmentObjective.  # noqa: E501


        :return: The target_amount of this InvestmentObjective.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._target_amount

    @target_amount.setter
    def target_amount(self, target_amount):
        """Sets the target_amount of this InvestmentObjective.


        :param target_amount: The target_amount of this InvestmentObjective.  # noqa: E501
        :type: CurrencyValue
        """

        self._target_amount = target_amount

    @property
    def target_on(self):
        """Gets the target_on of this InvestmentObjective.  # noqa: E501

        Target date for the Investment.  # noqa: E501

        :return: The target_on of this InvestmentObjective.  # noqa: E501
        :rtype: datetime
        """
        return self._target_on

    @target_on.setter
    def target_on(self, target_on):
        """Sets the target_on of this InvestmentObjective.

        Target date for the Investment.  # noqa: E501

        :param target_on: The target_on of this InvestmentObjective.  # noqa: E501
        :type: datetime
        """

        self._target_on = target_on

    @property
    def frequency(self):
        """Gets the frequency of this InvestmentObjective.  # noqa: E501

        Frequency of the requirement.  # noqa: E501

        :return: The frequency of this InvestmentObjective.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this InvestmentObjective.

        Frequency of the requirement.  # noqa: E501

        :param frequency: The frequency of this InvestmentObjective.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Lumpsum", "Monthly", "Annually"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def term(self):
        """Gets the term of this InvestmentObjective.  # noqa: E501

        Investment term in months.  # noqa: E501

        :return: The term of this InvestmentObjective.  # noqa: E501
        :rtype: int
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this InvestmentObjective.

        Investment term in months.  # noqa: E501

        :param term: The term of this InvestmentObjective.  # noqa: E501
        :type: int
        """

        self._term = term

    @property
    def has_investment_preference(self):
        """Gets the has_investment_preference of this InvestmentObjective.  # noqa: E501

        Has Investment Preference?  # noqa: E501

        :return: The has_investment_preference of this InvestmentObjective.  # noqa: E501
        :rtype: str
        """
        return self._has_investment_preference

    @has_investment_preference.setter
    def has_investment_preference(self, has_investment_preference):
        """Sets the has_investment_preference of this InvestmentObjective.

        Has Investment Preference?  # noqa: E501

        :param has_investment_preference: The has_investment_preference of this InvestmentObjective.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unanswered", "Yes", "No"]  # noqa: E501
        if has_investment_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `has_investment_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(has_investment_preference, allowed_values)
            )

        self._has_investment_preference = has_investment_preference

    @property
    def investment_preferences(self):
        """Gets the investment_preferences of this InvestmentObjective.  # noqa: E501

        Investment Preference details.  # noqa: E501

        :return: The investment_preferences of this InvestmentObjective.  # noqa: E501
        :rtype: str
        """
        return self._investment_preferences

    @investment_preferences.setter
    def investment_preferences(self, investment_preferences):
        """Sets the investment_preferences of this InvestmentObjective.

        Investment Preference details.  # noqa: E501

        :param investment_preferences: The investment_preferences of this InvestmentObjective.  # noqa: E501
        :type: str
        """

        self._investment_preferences = investment_preferences

    @property
    def risk_profile(self):
        """Gets the risk_profile of this InvestmentObjective.  # noqa: E501


        :return: The risk_profile of this InvestmentObjective.  # noqa: E501
        :rtype: RiskProfileValue
        """
        return self._risk_profile

    @risk_profile.setter
    def risk_profile(self, risk_profile):
        """Sets the risk_profile of this InvestmentObjective.


        :param risk_profile: The risk_profile of this InvestmentObjective.  # noqa: E501
        :type: RiskProfileValue
        """

        self._risk_profile = risk_profile

    @property
    def risk_profile_named_ref(self):
        """Gets the risk_profile_named_ref of this InvestmentObjective.  # noqa: E501


        :return: The risk_profile_named_ref of this InvestmentObjective.  # noqa: E501
        :rtype: RiskProfileNamedRef
        """
        return self._risk_profile_named_ref

    @risk_profile_named_ref.setter
    def risk_profile_named_ref(self, risk_profile_named_ref):
        """Sets the risk_profile_named_ref of this InvestmentObjective.


        :param risk_profile_named_ref: The risk_profile_named_ref of this InvestmentObjective.  # noqa: E501
        :type: RiskProfileNamedRef
        """

        self._risk_profile_named_ref = risk_profile_named_ref

    @property
    def atr_ref(self):
        """Gets the atr_ref of this InvestmentObjective.  # noqa: E501


        :return: The atr_ref of this InvestmentObjective.  # noqa: E501
        :rtype: ATRRef
        """
        return self._atr_ref

    @atr_ref.setter
    def atr_ref(self, atr_ref):
        """Sets the atr_ref of this InvestmentObjective.


        :param atr_ref: The atr_ref of this InvestmentObjective.  # noqa: E501
        :type: ATRRef
        """

        self._atr_ref = atr_ref

    @property
    def investment_preference_ref(self):
        """Gets the investment_preference_ref of this InvestmentObjective.  # noqa: E501


        :return: The investment_preference_ref of this InvestmentObjective.  # noqa: E501
        :rtype: InvestmentPreferenceRef
        """
        return self._investment_preference_ref

    @investment_preference_ref.setter
    def investment_preference_ref(self, investment_preference_ref):
        """Sets the investment_preference_ref of this InvestmentObjective.


        :param investment_preference_ref: The investment_preference_ref of this InvestmentObjective.  # noqa: E501
        :type: InvestmentPreferenceRef
        """

        self._investment_preference_ref = investment_preference_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentObjective):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
