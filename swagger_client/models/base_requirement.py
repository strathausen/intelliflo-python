# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseRequirement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'discriminator': 'str',
        'href': 'str',
        'created_at': 'datetime',
        'applicants': 'list[NamedClientRef]'
    }

    attribute_map = {
        'id': 'id',
        'discriminator': 'discriminator',
        'href': 'href',
        'created_at': 'createdAt',
        'applicants': 'applicants'
    }

    def __init__(self, id=None, discriminator=None, href=None, created_at=None, applicants=None):  # noqa: E501
        """BaseRequirement - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._discriminator = None
        self._href = None
        self._created_at = None
        self._applicants = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.discriminator = discriminator
        if href is not None:
            self.href = href
        if created_at is not None:
            self.created_at = created_at
        if applicants is not None:
            self.applicants = applicants

    @property
    def id(self):
        """Gets the id of this BaseRequirement.  # noqa: E501

        Requirement unique identifier.  # noqa: E501

        :return: The id of this BaseRequirement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseRequirement.

        Requirement unique identifier.  # noqa: E501

        :param id: The id of this BaseRequirement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def discriminator(self):
        """Gets the discriminator of this BaseRequirement.  # noqa: E501


        :return: The discriminator of this BaseRequirement.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this BaseRequirement.


        :param discriminator: The discriminator of this BaseRequirement.  # noqa: E501
        :type: str
        """
        if discriminator is None:
            raise ValueError("Invalid value for `discriminator`, must not be `None`")  # noqa: E501

        self._discriminator = discriminator

    @property
    def href(self):
        """Gets the href of this BaseRequirement.  # noqa: E501

        Hypermedia link to the requirement.  # noqa: E501

        :return: The href of this BaseRequirement.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseRequirement.

        Hypermedia link to the requirement.  # noqa: E501

        :param href: The href of this BaseRequirement.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created_at(self):
        """Gets the created_at of this BaseRequirement.  # noqa: E501

        Requirement created date.  # noqa: E501

        :return: The created_at of this BaseRequirement.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BaseRequirement.

        Requirement created date.  # noqa: E501

        :param created_at: The created_at of this BaseRequirement.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def applicants(self):
        """Gets the applicants of this BaseRequirement.  # noqa: E501

        A list of applicants.  # noqa: E501

        :return: The applicants of this BaseRequirement.  # noqa: E501
        :rtype: list[NamedClientRef]
        """
        return self._applicants

    @applicants.setter
    def applicants(self, applicants):
        """Sets the applicants of this BaseRequirement.

        A list of applicants.  # noqa: E501

        :param applicants: The applicants of this BaseRequirement.  # noqa: E501
        :type: list[NamedClientRef]
        """

        self._applicants = applicants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseRequirement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseRequirement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
