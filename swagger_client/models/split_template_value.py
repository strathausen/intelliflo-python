# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SplitTemplateValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adviser': 'AdviserRef',
        'client': 'NamedClientReference',
        'split_template': 'SplitTemplateRef',
        'type': 'str'
    }

    attribute_map = {
        'adviser': 'adviser',
        'client': 'client',
        'split_template': 'splitTemplate',
        'type': 'type'
    }

    def __init__(self, adviser=None, client=None, split_template=None, type=None):  # noqa: E501
        """SplitTemplateValue - a model defined in Swagger"""  # noqa: E501
        self._adviser = None
        self._client = None
        self._split_template = None
        self._type = None
        self.discriminator = None
        if adviser is not None:
            self.adviser = adviser
        if client is not None:
            self.client = client
        self.split_template = split_template
        if type is not None:
            self.type = type

    @property
    def adviser(self):
        """Gets the adviser of this SplitTemplateValue.  # noqa: E501


        :return: The adviser of this SplitTemplateValue.  # noqa: E501
        :rtype: AdviserRef
        """
        return self._adviser

    @adviser.setter
    def adviser(self, adviser):
        """Sets the adviser of this SplitTemplateValue.


        :param adviser: The adviser of this SplitTemplateValue.  # noqa: E501
        :type: AdviserRef
        """

        self._adviser = adviser

    @property
    def client(self):
        """Gets the client of this SplitTemplateValue.  # noqa: E501


        :return: The client of this SplitTemplateValue.  # noqa: E501
        :rtype: NamedClientReference
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this SplitTemplateValue.


        :param client: The client of this SplitTemplateValue.  # noqa: E501
        :type: NamedClientReference
        """

        self._client = client

    @property
    def split_template(self):
        """Gets the split_template of this SplitTemplateValue.  # noqa: E501


        :return: The split_template of this SplitTemplateValue.  # noqa: E501
        :rtype: SplitTemplateRef
        """
        return self._split_template

    @split_template.setter
    def split_template(self, split_template):
        """Sets the split_template of this SplitTemplateValue.


        :param split_template: The split_template of this SplitTemplateValue.  # noqa: E501
        :type: SplitTemplateRef
        """
        if split_template is None:
            raise ValueError("Invalid value for `split_template`, must not be `None`")  # noqa: E501

        self._split_template = split_template

    @property
    def type(self):
        """Gets the type of this SplitTemplateValue.  # noqa: E501

        Split template type.  # noqa: E501

        :return: The type of this SplitTemplateValue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SplitTemplateValue.

        Split template type.  # noqa: E501

        :param type: The type of this SplitTemplateValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Client", "SellingAdviser", "ServicingAdviser"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SplitTemplateValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplitTemplateValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
