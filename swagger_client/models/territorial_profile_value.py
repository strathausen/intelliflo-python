# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerritorialProfileValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uk_resident': 'bool',
        'country_of_birth': 'str',
        'uk_domicile': 'bool',
        'expatriate': 'bool',
        'country_of_residence': 'CountryValue',
        'country_of_domicile': 'CountryValue',
        'country_of_origin': 'CountryValue',
        'place_of_birth': 'str',
        'countries_of_citizenship': 'list[CountryValue]'
    }

    attribute_map = {
        'uk_resident': 'ukResident',
        'country_of_birth': 'countryOfBirth',
        'uk_domicile': 'ukDomicile',
        'expatriate': 'expatriate',
        'country_of_residence': 'countryOfResidence',
        'country_of_domicile': 'countryOfDomicile',
        'country_of_origin': 'countryOfOrigin',
        'place_of_birth': 'placeOfBirth',
        'countries_of_citizenship': 'countriesOfCitizenship'
    }

    def __init__(self, uk_resident=None, country_of_birth=None, uk_domicile=None, expatriate=None, country_of_residence=None, country_of_domicile=None, country_of_origin=None, place_of_birth=None, countries_of_citizenship=None):  # noqa: E501
        """TerritorialProfileValue - a model defined in Swagger"""  # noqa: E501
        self._uk_resident = None
        self._country_of_birth = None
        self._uk_domicile = None
        self._expatriate = None
        self._country_of_residence = None
        self._country_of_domicile = None
        self._country_of_origin = None
        self._place_of_birth = None
        self._countries_of_citizenship = None
        self.discriminator = None
        if uk_resident is not None:
            self.uk_resident = uk_resident
        if country_of_birth is not None:
            self.country_of_birth = country_of_birth
        if uk_domicile is not None:
            self.uk_domicile = uk_domicile
        if expatriate is not None:
            self.expatriate = expatriate
        if country_of_residence is not None:
            self.country_of_residence = country_of_residence
        if country_of_domicile is not None:
            self.country_of_domicile = country_of_domicile
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if countries_of_citizenship is not None:
            self.countries_of_citizenship = countries_of_citizenship

    @property
    def uk_resident(self):
        """Gets the uk_resident of this TerritorialProfileValue.  # noqa: E501

        Flag indicating if the person is a resident of the UK or not?  Note: This property has been depricated and will be removed in future. Please use CountryOfResidence instead.  If provided the CountryOfResidence property will be used to set the the value of the UkResident property.  # noqa: E501

        :return: The uk_resident of this TerritorialProfileValue.  # noqa: E501
        :rtype: bool
        """
        return self._uk_resident

    @uk_resident.setter
    def uk_resident(self, uk_resident):
        """Sets the uk_resident of this TerritorialProfileValue.

        Flag indicating if the person is a resident of the UK or not?  Note: This property has been depricated and will be removed in future. Please use CountryOfResidence instead.  If provided the CountryOfResidence property will be used to set the the value of the UkResident property.  # noqa: E501

        :param uk_resident: The uk_resident of this TerritorialProfileValue.  # noqa: E501
        :type: bool
        """

        self._uk_resident = uk_resident

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this TerritorialProfileValue.  # noqa: E501

        The person's country of birth.  Note: This property has been depricated and will be removed in future. Please use CountryOfOrigin instead.  # noqa: E501

        :return: The country_of_birth of this TerritorialProfileValue.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this TerritorialProfileValue.

        The person's country of birth.  Note: This property has been depricated and will be removed in future. Please use CountryOfOrigin instead.  # noqa: E501

        :param country_of_birth: The country_of_birth of this TerritorialProfileValue.  # noqa: E501
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def uk_domicile(self):
        """Gets the uk_domicile of this TerritorialProfileValue.  # noqa: E501

        Flag indicating if the person is domiciled in the UK or not?  Note: This property has been depricated and will be removed in future. Please use CountryOfDomicile instead.  If provided the CountryOfDomicile property will be used to set the the value of the UkDomicile property.  # noqa: E501

        :return: The uk_domicile of this TerritorialProfileValue.  # noqa: E501
        :rtype: bool
        """
        return self._uk_domicile

    @uk_domicile.setter
    def uk_domicile(self, uk_domicile):
        """Sets the uk_domicile of this TerritorialProfileValue.

        Flag indicating if the person is domiciled in the UK or not?  Note: This property has been depricated and will be removed in future. Please use CountryOfDomicile instead.  If provided the CountryOfDomicile property will be used to set the the value of the UkDomicile property.  # noqa: E501

        :param uk_domicile: The uk_domicile of this TerritorialProfileValue.  # noqa: E501
        :type: bool
        """

        self._uk_domicile = uk_domicile

    @property
    def expatriate(self):
        """Gets the expatriate of this TerritorialProfileValue.  # noqa: E501

        Flag indicating if the person an expatriate or not?  # noqa: E501

        :return: The expatriate of this TerritorialProfileValue.  # noqa: E501
        :rtype: bool
        """
        return self._expatriate

    @expatriate.setter
    def expatriate(self, expatriate):
        """Sets the expatriate of this TerritorialProfileValue.

        Flag indicating if the person an expatriate or not?  # noqa: E501

        :param expatriate: The expatriate of this TerritorialProfileValue.  # noqa: E501
        :type: bool
        """

        self._expatriate = expatriate

    @property
    def country_of_residence(self):
        """Gets the country_of_residence of this TerritorialProfileValue.  # noqa: E501


        :return: The country_of_residence of this TerritorialProfileValue.  # noqa: E501
        :rtype: CountryValue
        """
        return self._country_of_residence

    @country_of_residence.setter
    def country_of_residence(self, country_of_residence):
        """Sets the country_of_residence of this TerritorialProfileValue.


        :param country_of_residence: The country_of_residence of this TerritorialProfileValue.  # noqa: E501
        :type: CountryValue
        """

        self._country_of_residence = country_of_residence

    @property
    def country_of_domicile(self):
        """Gets the country_of_domicile of this TerritorialProfileValue.  # noqa: E501


        :return: The country_of_domicile of this TerritorialProfileValue.  # noqa: E501
        :rtype: CountryValue
        """
        return self._country_of_domicile

    @country_of_domicile.setter
    def country_of_domicile(self, country_of_domicile):
        """Sets the country_of_domicile of this TerritorialProfileValue.


        :param country_of_domicile: The country_of_domicile of this TerritorialProfileValue.  # noqa: E501
        :type: CountryValue
        """

        self._country_of_domicile = country_of_domicile

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this TerritorialProfileValue.  # noqa: E501


        :return: The country_of_origin of this TerritorialProfileValue.  # noqa: E501
        :rtype: CountryValue
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this TerritorialProfileValue.


        :param country_of_origin: The country_of_origin of this TerritorialProfileValue.  # noqa: E501
        :type: CountryValue
        """

        self._country_of_origin = country_of_origin

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this TerritorialProfileValue.  # noqa: E501

        Place of birth of the person.  # noqa: E501

        :return: The place_of_birth of this TerritorialProfileValue.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this TerritorialProfileValue.

        Place of birth of the person.  # noqa: E501

        :param place_of_birth: The place_of_birth of this TerritorialProfileValue.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def countries_of_citizenship(self):
        """Gets the countries_of_citizenship of this TerritorialProfileValue.  # noqa: E501

        Countries where the person has citizenship.  # noqa: E501

        :return: The countries_of_citizenship of this TerritorialProfileValue.  # noqa: E501
        :rtype: list[CountryValue]
        """
        return self._countries_of_citizenship

    @countries_of_citizenship.setter
    def countries_of_citizenship(self, countries_of_citizenship):
        """Sets the countries_of_citizenship of this TerritorialProfileValue.

        Countries where the person has citizenship.  # noqa: E501

        :param countries_of_citizenship: The countries_of_citizenship of this TerritorialProfileValue.  # noqa: E501
        :type: list[CountryValue]
        """

        self._countries_of_citizenship = countries_of_citizenship

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerritorialProfileValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerritorialProfileValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
