# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseRecommendation2Proposal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discriminator': 'str',
        'id': 'int',
        'href': 'str',
        'status': 'str',
        'implementation_status': 'str',
        'status_at': 'datetime',
        'status_by': 'NamedUserRef',
        'recommendation': 'Recommendation2Ref',
        'plan': 'PlanReference',
        'quote_result': 'QuoteResultRef2',
        'owners': 'list[NamedClientReference]',
        'properties': 'dict(str, str)',
        'atr': 'AtrRef',
        'fee_model': 'FeeModelFeeTemplateRef',
        'program': 'NamedProgramReference'
    }

    attribute_map = {
        'discriminator': 'discriminator',
        'id': 'id',
        'href': 'href',
        'status': 'status',
        'implementation_status': 'implementationStatus',
        'status_at': 'statusAt',
        'status_by': 'statusBy',
        'recommendation': 'recommendation',
        'plan': 'plan',
        'quote_result': 'quoteResult',
        'owners': 'owners',
        'properties': 'properties',
        'atr': 'atr',
        'fee_model': 'feeModel',
        'program': 'program'
    }

    discriminator_value_class_map = {
          'ExistingBusinessAmendRegularWithdrawalIncomeProposal': 'ExistingBusinessAmendRegularWithdrawalIncomeProposal',
'ExistingBusinessNewMoneyProposal': 'ExistingBusinessNewMoneyProposal',
'ExistingBusinessTransferRolloverProposal': 'ExistingBusinessTransferRolloverProposal',
'NewBusinessPersonalProtectionProposal': 'NewBusinessPersonalProtectionProposal',
'ExistingBusinessSwitchProposal': 'ExistingBusinessSwitchProposal',
'NewBusinessInvestmentProposal': 'NewBusinessInvestmentProposal',
'ExistingBusinessAmendRegularContributionsPremiumsProposal': 'ExistingBusinessAmendRegularContributionsPremiumsProposal',
'ExistingBusinessReviewedProposal': 'ExistingBusinessReviewedProposal',
'ExistingBusinessNoActionProposal': 'ExistingBusinessNoActionProposal',
'ExistingBusinessImpsRebalanceProposal': 'ExistingBusinessImpsRebalanceProposal',
'NewBusinessGeneralInsuranceProposal': 'NewBusinessGeneralInsuranceProposal',
'ExistingBusinessLumpsumWithdrawalProposal': 'ExistingBusinessLumpsumWithdrawalProposal',
'NonProductProposal': 'NonProductProposal',
'NewBusinessEquityReleaseProposal': 'NewBusinessEquityReleaseProposal',
'ExistingBusinessAmendProductDetailsProposal': 'ExistingBusinessAmendProductDetailsProposal',
'ExistingBusinessCloseProductProposal': 'ExistingBusinessCloseProductProposal',
'NewBusinessAnnuityProposal': 'NewBusinessAnnuityProposal',
'NewBusinessPensionProposal': 'NewBusinessPensionProposal',
'NewBusinessMortgageProposal': 'NewBusinessMortgageProposal',
'ExistingBusinessRebalanceProposal': 'ExistingBusinessRebalanceProposal'    }

    def __init__(self, discriminator=None, id=None, href=None, status=None, implementation_status=None, status_at=None, status_by=None, recommendation=None, plan=None, quote_result=None, owners=None, properties=None, atr=None, fee_model=None, program=None):  # noqa: E501
        """BaseRecommendation2Proposal - a model defined in Swagger"""  # noqa: E501
        self._discriminator = None
        self._id = None
        self._href = None
        self._status = None
        self._implementation_status = None
        self._status_at = None
        self._status_by = None
        self._recommendation = None
        self._plan = None
        self._quote_result = None
        self._owners = None
        self._properties = None
        self._atr = None
        self._fee_model = None
        self._program = None
        self.discriminator = 'discriminator'
        self.discriminator = discriminator
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if status is not None:
            self.status = status
        if implementation_status is not None:
            self.implementation_status = implementation_status
        if status_at is not None:
            self.status_at = status_at
        if status_by is not None:
            self.status_by = status_by
        self.recommendation = recommendation
        if plan is not None:
            self.plan = plan
        if quote_result is not None:
            self.quote_result = quote_result
        self.owners = owners
        if properties is not None:
            self.properties = properties
        if atr is not None:
            self.atr = atr
        if fee_model is not None:
            self.fee_model = fee_model
        if program is not None:
            self.program = program

    @property
    def discriminator(self):
        """Gets the discriminator of this BaseRecommendation2Proposal.  # noqa: E501

        Proposal discriminator value.  # noqa: E501

        :return: The discriminator of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this BaseRecommendation2Proposal.

        Proposal discriminator value.  # noqa: E501

        :param discriminator: The discriminator of this BaseRecommendation2Proposal.  # noqa: E501
        :type: str
        """
        if discriminator is None:
            raise ValueError("Invalid value for `discriminator`, must not be `None`")  # noqa: E501
        allowed_values = ["ExistingBusinessAmendProductDetailsProposal", "ExistingBusinessAmendRegularContributionsPremiumsProposal", "ExistingBusinessAmendRegularWithdrawalIncomeProposal", "ExistingBusinessCloseProductProposal", "ExistingBusinessImpsRebalanceProposal", "ExistingBusinessLumpsumWithdrawalProposal", "ExistingBusinessNewMoneyProposal", "ExistingBusinessNoActionProposal", "ExistingBusinessRebalanceProposal", "ExistingBusinessReviewedProposal", "ExistingBusinessSwitchProposal", "ExistingBusinessTransferRolloverProposal", "NewBusinessAnnuityProposal", "NewBusinessEquityReleaseProposal", "NewBusinessGeneralInsuranceProposal", "NewBusinessInvestmentProposal", "NewBusinessMortgageProposal", "NewBusinessPensionProposal", "NewBusinessPersonalProtectionProposal", "NonProductProposal"]  # noqa: E501
        if discriminator not in allowed_values:
            raise ValueError(
                "Invalid value for `discriminator` ({0}), must be one of {1}"  # noqa: E501
                .format(discriminator, allowed_values)
            )

        self._discriminator = discriminator

    @property
    def id(self):
        """Gets the id of this BaseRecommendation2Proposal.  # noqa: E501

        Proposal unique identifier.  # noqa: E501

        :return: The id of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseRecommendation2Proposal.

        Proposal unique identifier.  # noqa: E501

        :param id: The id of this BaseRecommendation2Proposal.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BaseRecommendation2Proposal.  # noqa: E501

        Proposal hypermedia link.  # noqa: E501

        :return: The href of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseRecommendation2Proposal.

        Proposal hypermedia link.  # noqa: E501

        :param href: The href of this BaseRecommendation2Proposal.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def status(self):
        """Gets the status of this BaseRecommendation2Proposal.  # noqa: E501

        Proposal status.  # noqa: E501

        :return: The status of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseRecommendation2Proposal.

        Proposal status.  # noqa: E501

        :param status: The status of this BaseRecommendation2Proposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Active", "Completed", "Rejected", "Accepted", "Cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def implementation_status(self):
        """Gets the implementation_status of this BaseRecommendation2Proposal.  # noqa: E501

        Implementation status.  # noqa: E501

        :return: The implementation_status of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: str
        """
        return self._implementation_status

    @implementation_status.setter
    def implementation_status(self, implementation_status):
        """Sets the implementation_status of this BaseRecommendation2Proposal.

        Implementation status.  # noqa: E501

        :param implementation_status: The implementation_status of this BaseRecommendation2Proposal.  # noqa: E501
        :type: str
        """
        allowed_values = ["Draft", "InProgress", "Cancelled", "Completed", "InProgressError", "Rejected"]  # noqa: E501
        if implementation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `implementation_status` ({0}), must be one of {1}"  # noqa: E501
                .format(implementation_status, allowed_values)
            )

        self._implementation_status = implementation_status

    @property
    def status_at(self):
        """Gets the status_at of this BaseRecommendation2Proposal.  # noqa: E501

        Date and time the proposal status was set at.  # noqa: E501

        :return: The status_at of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: datetime
        """
        return self._status_at

    @status_at.setter
    def status_at(self, status_at):
        """Sets the status_at of this BaseRecommendation2Proposal.

        Date and time the proposal status was set at.  # noqa: E501

        :param status_at: The status_at of this BaseRecommendation2Proposal.  # noqa: E501
        :type: datetime
        """

        self._status_at = status_at

    @property
    def status_by(self):
        """Gets the status_by of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The status_by of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._status_by

    @status_by.setter
    def status_by(self, status_by):
        """Sets the status_by of this BaseRecommendation2Proposal.


        :param status_by: The status_by of this BaseRecommendation2Proposal.  # noqa: E501
        :type: NamedUserRef
        """

        self._status_by = status_by

    @property
    def recommendation(self):
        """Gets the recommendation of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The recommendation of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: Recommendation2Ref
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this BaseRecommendation2Proposal.


        :param recommendation: The recommendation of this BaseRecommendation2Proposal.  # noqa: E501
        :type: Recommendation2Ref
        """
        if recommendation is None:
            raise ValueError("Invalid value for `recommendation`, must not be `None`")  # noqa: E501

        self._recommendation = recommendation

    @property
    def plan(self):
        """Gets the plan of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The plan of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: PlanReference
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this BaseRecommendation2Proposal.


        :param plan: The plan of this BaseRecommendation2Proposal.  # noqa: E501
        :type: PlanReference
        """

        self._plan = plan

    @property
    def quote_result(self):
        """Gets the quote_result of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The quote_result of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: QuoteResultRef2
        """
        return self._quote_result

    @quote_result.setter
    def quote_result(self, quote_result):
        """Sets the quote_result of this BaseRecommendation2Proposal.


        :param quote_result: The quote_result of this BaseRecommendation2Proposal.  # noqa: E501
        :type: QuoteResultRef2
        """

        self._quote_result = quote_result

    @property
    def owners(self):
        """Gets the owners of this BaseRecommendation2Proposal.  # noqa: E501

        Collection of proposal owners (clients only). Owner at index 0 is the primary owner.  # noqa: E501

        :return: The owners of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: list[NamedClientReference]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this BaseRecommendation2Proposal.

        Collection of proposal owners (clients only). Owner at index 0 is the primary owner.  # noqa: E501

        :param owners: The owners of this BaseRecommendation2Proposal.  # noqa: E501
        :type: list[NamedClientReference]
        """
        if owners is None:
            raise ValueError("Invalid value for `owners`, must not be `None`")  # noqa: E501

        self._owners = owners

    @property
    def properties(self):
        """Gets the properties of this BaseRecommendation2Proposal.  # noqa: E501

        Editable on POST, PUT.  Limited to 10 items.  Use this to set custom properties for a proposal e.g.      \"properties\": {         \"myCustomProperty\": \"A value\",         \"anotherCustomProperty\": \"Some other value\"      }  # noqa: E501

        :return: The properties of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BaseRecommendation2Proposal.

        Editable on POST, PUT.  Limited to 10 items.  Use this to set custom properties for a proposal e.g.      \"properties\": {         \"myCustomProperty\": \"A value\",         \"anotherCustomProperty\": \"Some other value\"      }  # noqa: E501

        :param properties: The properties of this BaseRecommendation2Proposal.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def atr(self):
        """Gets the atr of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The atr of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: AtrRef
        """
        return self._atr

    @atr.setter
    def atr(self, atr):
        """Sets the atr of this BaseRecommendation2Proposal.


        :param atr: The atr of this BaseRecommendation2Proposal.  # noqa: E501
        :type: AtrRef
        """

        self._atr = atr

    @property
    def fee_model(self):
        """Gets the fee_model of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The fee_model of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: FeeModelFeeTemplateRef
        """
        return self._fee_model

    @fee_model.setter
    def fee_model(self, fee_model):
        """Sets the fee_model of this BaseRecommendation2Proposal.


        :param fee_model: The fee_model of this BaseRecommendation2Proposal.  # noqa: E501
        :type: FeeModelFeeTemplateRef
        """

        self._fee_model = fee_model

    @property
    def program(self):
        """Gets the program of this BaseRecommendation2Proposal.  # noqa: E501


        :return: The program of this BaseRecommendation2Proposal.  # noqa: E501
        :rtype: NamedProgramReference
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this BaseRecommendation2Proposal.


        :param program: The program of this BaseRecommendation2Proposal.  # noqa: E501
        :type: NamedProgramReference
        """

        self._program = program

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseRecommendation2Proposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseRecommendation2Proposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
