# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsuranceCoverValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'premium_structure': 'str',
        'amount': 'CurrencyValue',
        'term': 'str',
        'until_age': 'int'
    }

    attribute_map = {
        'premium_structure': 'premiumStructure',
        'amount': 'amount',
        'term': 'term',
        'until_age': 'untilAge'
    }

    def __init__(self, premium_structure='null', amount=None, term='null', until_age=None):  # noqa: E501
        """InsuranceCoverValue - a model defined in Swagger"""  # noqa: E501
        self._premium_structure = None
        self._amount = None
        self._term = None
        self._until_age = None
        self.discriminator = None
        if premium_structure is not None:
            self.premium_structure = premium_structure
        if amount is not None:
            self.amount = amount
        if term is not None:
            self.term = term
        if until_age is not None:
            self.until_age = until_age

    @property
    def premium_structure(self):
        """Gets the premium_structure of this InsuranceCoverValue.  # noqa: E501

        The premium structure for the insurance cover.  # noqa: E501

        :return: The premium_structure of this InsuranceCoverValue.  # noqa: E501
        :rtype: str
        """
        return self._premium_structure

    @premium_structure.setter
    def premium_structure(self, premium_structure):
        """Sets the premium_structure of this InsuranceCoverValue.

        The premium structure for the insurance cover.  # noqa: E501

        :param premium_structure: The premium_structure of this InsuranceCoverValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Stepped", "Level", "Hybrid"]  # noqa: E501
        if premium_structure not in allowed_values:
            raise ValueError(
                "Invalid value for `premium_structure` ({0}), must be one of {1}"  # noqa: E501
                .format(premium_structure, allowed_values)
            )

        self._premium_structure = premium_structure

    @property
    def amount(self):
        """Gets the amount of this InsuranceCoverValue.  # noqa: E501


        :return: The amount of this InsuranceCoverValue.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InsuranceCoverValue.


        :param amount: The amount of this InsuranceCoverValue.  # noqa: E501
        :type: CurrencyValue
        """

        self._amount = amount

    @property
    def term(self):
        """Gets the term of this InsuranceCoverValue.  # noqa: E501

        The cover term in years (format ISO-8601): \"P[n][Y]\").  # noqa: E501

        :return: The term of this InsuranceCoverValue.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this InsuranceCoverValue.

        The cover term in years (format ISO-8601): \"P[n][Y]\").  # noqa: E501

        :param term: The term of this InsuranceCoverValue.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def until_age(self):
        """Gets the until_age of this InsuranceCoverValue.  # noqa: E501

        The age until the cover is valid.  # noqa: E501

        :return: The until_age of this InsuranceCoverValue.  # noqa: E501
        :rtype: int
        """
        return self._until_age

    @until_age.setter
    def until_age(self, until_age):
        """Sets the until_age of this InsuranceCoverValue.

        The age until the cover is valid.  # noqa: E501

        :param until_age: The until_age of this InsuranceCoverValue.  # noqa: E501
        :type: int
        """

        self._until_age = until_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsuranceCoverValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsuranceCoverValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
