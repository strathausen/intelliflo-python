# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DPAPolicyAgreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'client': 'DPAPolicyAgreementClientRef',
        'policy': 'DpaPolicyRef',
        'agreed_at': 'datetime',
        'statements': 'DpaPolicyAgreementResponseValues'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'client': 'client',
        'policy': 'policy',
        'agreed_at': 'agreedAt',
        'statements': 'statements'
    }

    def __init__(self, id=None, href=None, client=None, policy=None, agreed_at=None, statements=None):  # noqa: E501
        """DPAPolicyAgreement - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._client = None
        self._policy = None
        self._agreed_at = None
        self._statements = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.client = client
        if policy is not None:
            self.policy = policy
        self.agreed_at = agreed_at
        self.statements = statements

    @property
    def id(self):
        """Gets the id of this DPAPolicyAgreement.  # noqa: E501

        Id of DPA policy agreement  # noqa: E501

        :return: The id of this DPAPolicyAgreement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DPAPolicyAgreement.

        Id of DPA policy agreement  # noqa: E501

        :param id: The id of this DPAPolicyAgreement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this DPAPolicyAgreement.  # noqa: E501

        Hyperlink to DPA policy agreement  # noqa: E501

        :return: The href of this DPAPolicyAgreement.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DPAPolicyAgreement.

        Hyperlink to DPA policy agreement  # noqa: E501

        :param href: The href of this DPAPolicyAgreement.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def client(self):
        """Gets the client of this DPAPolicyAgreement.  # noqa: E501


        :return: The client of this DPAPolicyAgreement.  # noqa: E501
        :rtype: DPAPolicyAgreementClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this DPAPolicyAgreement.


        :param client: The client of this DPAPolicyAgreement.  # noqa: E501
        :type: DPAPolicyAgreementClientRef
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client

    @property
    def policy(self):
        """Gets the policy of this DPAPolicyAgreement.  # noqa: E501


        :return: The policy of this DPAPolicyAgreement.  # noqa: E501
        :rtype: DpaPolicyRef
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this DPAPolicyAgreement.


        :param policy: The policy of this DPAPolicyAgreement.  # noqa: E501
        :type: DpaPolicyRef
        """

        self._policy = policy

    @property
    def agreed_at(self):
        """Gets the agreed_at of this DPAPolicyAgreement.  # noqa: E501

        DPA policy agreement date  # noqa: E501

        :return: The agreed_at of this DPAPolicyAgreement.  # noqa: E501
        :rtype: datetime
        """
        return self._agreed_at

    @agreed_at.setter
    def agreed_at(self, agreed_at):
        """Sets the agreed_at of this DPAPolicyAgreement.

        DPA policy agreement date  # noqa: E501

        :param agreed_at: The agreed_at of this DPAPolicyAgreement.  # noqa: E501
        :type: datetime
        """
        if agreed_at is None:
            raise ValueError("Invalid value for `agreed_at`, must not be `None`")  # noqa: E501

        self._agreed_at = agreed_at

    @property
    def statements(self):
        """Gets the statements of this DPAPolicyAgreement.  # noqa: E501


        :return: The statements of this DPAPolicyAgreement.  # noqa: E501
        :rtype: DpaPolicyAgreementResponseValues
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this DPAPolicyAgreement.


        :param statements: The statements of this DPAPolicyAgreement.  # noqa: E501
        :type: DpaPolicyAgreementResponseValues
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")  # noqa: E501

        self._statements = statements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DPAPolicyAgreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DPAPolicyAgreement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
