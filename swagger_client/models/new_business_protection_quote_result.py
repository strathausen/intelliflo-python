# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.quote_result import QuoteResult  # noqa: F401,E501

class NewBusinessProtectionQuoteResult(QuoteResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'premiums': 'list[ContributionValue3]',
        'life_cover': 'LifeCoverValue',
        'critical_illness_cover': 'InsuranceCoverValue',
        'income_cover': 'InsuranceCoverValue',
        'expense_cover': 'InsuranceCoverValue',
        'severity_cover': 'SeverityCoverValue',
        'benefits_payable': 'BenefitsPayableValue',
        'index_type': 'str',
        'in_trust': 'bool',
        'in_trust_to_whom': 'str',
        'benefit_options': 'list[str]',
        'is_rated': 'bool',
        'is_premium_waiver_woc': 'bool',
        'benefit_summary': 'str',
        'exclusion_notes': 'str',
        'initial_earnings_period': 'str',
        'waiting_period': 'str',
        'premium_loading': 'str',
        'owner2_percent_of_sum_assured': 'float',
        'sum_assured': 'CurrencyValue',
        'commissions': 'list[CommissionValue]',
        'provider': 'ProductProviderRef',
        'plan_type': 'PlanTypeReference',
        'protection_payout_type': 'str'
    }
    if hasattr(QuoteResult, "swagger_types"):
        swagger_types.update(QuoteResult.swagger_types)

    attribute_map = {
        'premiums': 'premiums',
        'life_cover': 'lifeCover',
        'critical_illness_cover': 'criticalIllnessCover',
        'income_cover': 'incomeCover',
        'expense_cover': 'expenseCover',
        'severity_cover': 'severityCover',
        'benefits_payable': 'benefitsPayable',
        'index_type': 'indexType',
        'in_trust': 'inTrust',
        'in_trust_to_whom': 'inTrustToWhom',
        'benefit_options': 'benefitOptions',
        'is_rated': 'isRated',
        'is_premium_waiver_woc': 'isPremiumWaiverWoc',
        'benefit_summary': 'benefitSummary',
        'exclusion_notes': 'exclusionNotes',
        'initial_earnings_period': 'initialEarningsPeriod',
        'waiting_period': 'waitingPeriod',
        'premium_loading': 'premiumLoading',
        'owner2_percent_of_sum_assured': 'owner2PercentOfSumAssured',
        'sum_assured': 'sumAssured',
        'commissions': 'commissions',
        'provider': 'provider',
        'plan_type': 'planType',
        'protection_payout_type': 'protectionPayoutType'
    }
    if hasattr(QuoteResult, "attribute_map"):
        attribute_map.update(QuoteResult.attribute_map)

    def __init__(self, premiums=None, life_cover=None, critical_illness_cover=None, income_cover=None, expense_cover=None, severity_cover=None, benefits_payable=None, index_type=None, in_trust=False, in_trust_to_whom=None, benefit_options=None, is_rated=None, is_premium_waiver_woc=None, benefit_summary=None, exclusion_notes=None, initial_earnings_period=None, waiting_period=None, premium_loading=None, owner2_percent_of_sum_assured=None, sum_assured=None, commissions=None, provider=None, plan_type=None, protection_payout_type='Indemnity', *args, **kwargs):  # noqa: E501
        """NewBusinessProtectionQuoteResult - a model defined in Swagger"""  # noqa: E501
        self._premiums = None
        self._life_cover = None
        self._critical_illness_cover = None
        self._income_cover = None
        self._expense_cover = None
        self._severity_cover = None
        self._benefits_payable = None
        self._index_type = None
        self._in_trust = None
        self._in_trust_to_whom = None
        self._benefit_options = None
        self._is_rated = None
        self._is_premium_waiver_woc = None
        self._benefit_summary = None
        self._exclusion_notes = None
        self._initial_earnings_period = None
        self._waiting_period = None
        self._premium_loading = None
        self._owner2_percent_of_sum_assured = None
        self._sum_assured = None
        self._commissions = None
        self._provider = None
        self._plan_type = None
        self._protection_payout_type = None
        self.discriminator = None
        if premiums is not None:
            self.premiums = premiums
        if life_cover is not None:
            self.life_cover = life_cover
        if critical_illness_cover is not None:
            self.critical_illness_cover = critical_illness_cover
        if income_cover is not None:
            self.income_cover = income_cover
        if expense_cover is not None:
            self.expense_cover = expense_cover
        if severity_cover is not None:
            self.severity_cover = severity_cover
        if benefits_payable is not None:
            self.benefits_payable = benefits_payable
        if index_type is not None:
            self.index_type = index_type
        if in_trust is not None:
            self.in_trust = in_trust
        if in_trust_to_whom is not None:
            self.in_trust_to_whom = in_trust_to_whom
        if benefit_options is not None:
            self.benefit_options = benefit_options
        if is_rated is not None:
            self.is_rated = is_rated
        if is_premium_waiver_woc is not None:
            self.is_premium_waiver_woc = is_premium_waiver_woc
        if benefit_summary is not None:
            self.benefit_summary = benefit_summary
        if exclusion_notes is not None:
            self.exclusion_notes = exclusion_notes
        if initial_earnings_period is not None:
            self.initial_earnings_period = initial_earnings_period
        if waiting_period is not None:
            self.waiting_period = waiting_period
        if premium_loading is not None:
            self.premium_loading = premium_loading
        if owner2_percent_of_sum_assured is not None:
            self.owner2_percent_of_sum_assured = owner2_percent_of_sum_assured
        if sum_assured is not None:
            self.sum_assured = sum_assured
        if commissions is not None:
            self.commissions = commissions
        if provider is not None:
            self.provider = provider
        if plan_type is not None:
            self.plan_type = plan_type
        if protection_payout_type is not None:
            self.protection_payout_type = protection_payout_type
        QuoteResult.__init__(self, *args, **kwargs)

    @property
    def premiums(self):
        """Gets the premiums of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Premiums for the protection quote result.  # noqa: E501

        :return: The premiums of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: list[ContributionValue3]
        """
        return self._premiums

    @premiums.setter
    def premiums(self, premiums):
        """Sets the premiums of this NewBusinessProtectionQuoteResult.

        Premiums for the protection quote result.  # noqa: E501

        :param premiums: The premiums of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: list[ContributionValue3]
        """

        self._premiums = premiums

    @property
    def life_cover(self):
        """Gets the life_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The life_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: LifeCoverValue
        """
        return self._life_cover

    @life_cover.setter
    def life_cover(self, life_cover):
        """Sets the life_cover of this NewBusinessProtectionQuoteResult.


        :param life_cover: The life_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: LifeCoverValue
        """

        self._life_cover = life_cover

    @property
    def critical_illness_cover(self):
        """Gets the critical_illness_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The critical_illness_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: InsuranceCoverValue
        """
        return self._critical_illness_cover

    @critical_illness_cover.setter
    def critical_illness_cover(self, critical_illness_cover):
        """Sets the critical_illness_cover of this NewBusinessProtectionQuoteResult.


        :param critical_illness_cover: The critical_illness_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: InsuranceCoverValue
        """

        self._critical_illness_cover = critical_illness_cover

    @property
    def income_cover(self):
        """Gets the income_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The income_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: InsuranceCoverValue
        """
        return self._income_cover

    @income_cover.setter
    def income_cover(self, income_cover):
        """Sets the income_cover of this NewBusinessProtectionQuoteResult.


        :param income_cover: The income_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: InsuranceCoverValue
        """

        self._income_cover = income_cover

    @property
    def expense_cover(self):
        """Gets the expense_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The expense_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: InsuranceCoverValue
        """
        return self._expense_cover

    @expense_cover.setter
    def expense_cover(self, expense_cover):
        """Sets the expense_cover of this NewBusinessProtectionQuoteResult.


        :param expense_cover: The expense_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: InsuranceCoverValue
        """

        self._expense_cover = expense_cover

    @property
    def severity_cover(self):
        """Gets the severity_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The severity_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: SeverityCoverValue
        """
        return self._severity_cover

    @severity_cover.setter
    def severity_cover(self, severity_cover):
        """Sets the severity_cover of this NewBusinessProtectionQuoteResult.


        :param severity_cover: The severity_cover of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: SeverityCoverValue
        """

        self._severity_cover = severity_cover

    @property
    def benefits_payable(self):
        """Gets the benefits_payable of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The benefits_payable of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: BenefitsPayableValue
        """
        return self._benefits_payable

    @benefits_payable.setter
    def benefits_payable(self, benefits_payable):
        """Sets the benefits_payable of this NewBusinessProtectionQuoteResult.


        :param benefits_payable: The benefits_payable of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: BenefitsPayableValue
        """

        self._benefits_payable = benefits_payable

    @property
    def index_type(self):
        """Gets the index_type of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Defines how the amount of cover will change over time and, if it does, what governs that change.  # noqa: E501

        :return: The index_type of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._index_type

    @index_type.setter
    def index_type(self, index_type):
        """Sets the index_type of this NewBusinessProtectionQuoteResult.

        Defines how the amount of cover will change over time and, if it does, what governs that change.  # noqa: E501

        :param index_type: The index_type of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["LevelNotIndexed", "RPI", "FixedPercentage", "AEI", "Decreasing", "CPI"]  # noqa: E501
        if index_type not in allowed_values:
            raise ValueError(
                "Invalid value for `index_type` ({0}), must be one of {1}"  # noqa: E501
                .format(index_type, allowed_values)
            )

        self._index_type = index_type

    @property
    def in_trust(self):
        """Gets the in_trust of this NewBusinessProtectionQuoteResult.  # noqa: E501

        In trust flag.  # noqa: E501

        :return: The in_trust of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: bool
        """
        return self._in_trust

    @in_trust.setter
    def in_trust(self, in_trust):
        """Sets the in_trust of this NewBusinessProtectionQuoteResult.

        In trust flag.  # noqa: E501

        :param in_trust: The in_trust of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: bool
        """

        self._in_trust = in_trust

    @property
    def in_trust_to_whom(self):
        """Gets the in_trust_to_whom of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Name of the trust beneficiary.  # noqa: E501

        :return: The in_trust_to_whom of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._in_trust_to_whom

    @in_trust_to_whom.setter
    def in_trust_to_whom(self, in_trust_to_whom):
        """Sets the in_trust_to_whom of this NewBusinessProtectionQuoteResult.

        Name of the trust beneficiary.  # noqa: E501

        :param in_trust_to_whom: The in_trust_to_whom of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """

        self._in_trust_to_whom = in_trust_to_whom

    @property
    def benefit_options(self):
        """Gets the benefit_options of this NewBusinessProtectionQuoteResult.  # noqa: E501

        List of applicable benefits against which payments will be made.  # noqa: E501

        :return: The benefit_options of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._benefit_options

    @benefit_options.setter
    def benefit_options(self, benefit_options):
        """Sets the benefit_options of this NewBusinessProtectionQuoteResult.

        List of applicable benefits against which payments will be made.  # noqa: E501

        :param benefit_options: The benefit_options of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Convertible", "Renewable", "PaymentProtection", "ChildrensBenefit", "TerminalIllness"]  # noqa: E501
        if not set(benefit_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `benefit_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(benefit_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._benefit_options = benefit_options

    @property
    def is_rated(self):
        """Gets the is_rated of this NewBusinessProtectionQuoteResult.  # noqa: E501

        A “rated” life insurance policy is a policy that is also often referred to as a “substandard” policy.  A person with less than average health or who has a high-risk occupation may receive a rated or substandard policy.  # noqa: E501

        :return: The is_rated of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_rated

    @is_rated.setter
    def is_rated(self, is_rated):
        """Sets the is_rated of this NewBusinessProtectionQuoteResult.

        A “rated” life insurance policy is a policy that is also often referred to as a “substandard” policy.  A person with less than average health or who has a high-risk occupation may receive a rated or substandard policy.  # noqa: E501

        :param is_rated: The is_rated of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: bool
        """

        self._is_rated = is_rated

    @property
    def is_premium_waiver_woc(self):
        """Gets the is_premium_waiver_woc of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Has the insured taken out premium waiver/Waiver of Contribution insurance to protect their contributions should they not be able to work as a result of accident or sickness?  # noqa: E501

        :return: The is_premium_waiver_woc of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_premium_waiver_woc

    @is_premium_waiver_woc.setter
    def is_premium_waiver_woc(self, is_premium_waiver_woc):
        """Sets the is_premium_waiver_woc of this NewBusinessProtectionQuoteResult.

        Has the insured taken out premium waiver/Waiver of Contribution insurance to protect their contributions should they not be able to work as a result of accident or sickness?  # noqa: E501

        :param is_premium_waiver_woc: The is_premium_waiver_woc of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: bool
        """

        self._is_premium_waiver_woc = is_premium_waiver_woc

    @property
    def benefit_summary(self):
        """Gets the benefit_summary of this NewBusinessProtectionQuoteResult.  # noqa: E501

        A textual summary of the Benefits associated with this policy.  # noqa: E501

        :return: The benefit_summary of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._benefit_summary

    @benefit_summary.setter
    def benefit_summary(self, benefit_summary):
        """Sets the benefit_summary of this NewBusinessProtectionQuoteResult.

        A textual summary of the Benefits associated with this policy.  # noqa: E501

        :param benefit_summary: The benefit_summary of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """

        self._benefit_summary = benefit_summary

    @property
    def exclusion_notes(self):
        """Gets the exclusion_notes of this NewBusinessProtectionQuoteResult.  # noqa: E501

        A textual summary of any applicable exclusions.  # noqa: E501

        :return: The exclusion_notes of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._exclusion_notes

    @exclusion_notes.setter
    def exclusion_notes(self, exclusion_notes):
        """Sets the exclusion_notes of this NewBusinessProtectionQuoteResult.

        A textual summary of any applicable exclusions.  # noqa: E501

        :param exclusion_notes: The exclusion_notes of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """

        self._exclusion_notes = exclusion_notes

    @property
    def initial_earnings_period(self):
        """Gets the initial_earnings_period of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Period within which the Provider can seek to clawback commissions if premium payments reduce, vary, stop or are suspended. Should be specified in iso8601 format (\"P[n]D\").  # noqa: E501

        :return: The initial_earnings_period of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._initial_earnings_period

    @initial_earnings_period.setter
    def initial_earnings_period(self, initial_earnings_period):
        """Sets the initial_earnings_period of this NewBusinessProtectionQuoteResult.

        Period within which the Provider can seek to clawback commissions if premium payments reduce, vary, stop or are suspended. Should be specified in iso8601 format (\"P[n]D\").  # noqa: E501

        :param initial_earnings_period: The initial_earnings_period of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """

        self._initial_earnings_period = initial_earnings_period

    @property
    def waiting_period(self):
        """Gets the waiting_period of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Waiting period is the time you must wait from when you become unable to work due to illness or injury to the time you become eligible to start receiving payments.  Duration in iso8601 format (\"P[n]D\").  # noqa: E501

        :return: The waiting_period of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._waiting_period

    @waiting_period.setter
    def waiting_period(self, waiting_period):
        """Sets the waiting_period of this NewBusinessProtectionQuoteResult.

        Waiting period is the time you must wait from when you become unable to work due to illness or injury to the time you become eligible to start receiving payments.  Duration in iso8601 format (\"P[n]D\").  # noqa: E501

        :param waiting_period: The waiting_period of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """

        self._waiting_period = waiting_period

    @property
    def premium_loading(self):
        """Gets the premium_loading of this NewBusinessProtectionQuoteResult.  # noqa: E501

        The premiums loading associated with the disclosure of increased risk.  # noqa: E501

        :return: The premium_loading of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._premium_loading

    @premium_loading.setter
    def premium_loading(self, premium_loading):
        """Sets the premium_loading of this NewBusinessProtectionQuoteResult.

        The premiums loading associated with the disclosure of increased risk.  # noqa: E501

        :param premium_loading: The premium_loading of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """

        self._premium_loading = premium_loading

    @property
    def owner2_percent_of_sum_assured(self):
        """Gets the owner2_percent_of_sum_assured of this NewBusinessProtectionQuoteResult.  # noqa: E501

        The percentage of the Sum Assured which is allocated to the policy co-owner.  # noqa: E501

        :return: The owner2_percent_of_sum_assured of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: float
        """
        return self._owner2_percent_of_sum_assured

    @owner2_percent_of_sum_assured.setter
    def owner2_percent_of_sum_assured(self, owner2_percent_of_sum_assured):
        """Sets the owner2_percent_of_sum_assured of this NewBusinessProtectionQuoteResult.

        The percentage of the Sum Assured which is allocated to the policy co-owner.  # noqa: E501

        :param owner2_percent_of_sum_assured: The owner2_percent_of_sum_assured of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: float
        """

        self._owner2_percent_of_sum_assured = owner2_percent_of_sum_assured

    @property
    def sum_assured(self):
        """Gets the sum_assured of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The sum_assured of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._sum_assured

    @sum_assured.setter
    def sum_assured(self, sum_assured):
        """Sets the sum_assured of this NewBusinessProtectionQuoteResult.


        :param sum_assured: The sum_assured of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: CurrencyValue
        """

        self._sum_assured = sum_assured

    @property
    def commissions(self):
        """Gets the commissions of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Commission Value.  # noqa: E501

        :return: The commissions of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: list[CommissionValue]
        """
        return self._commissions

    @commissions.setter
    def commissions(self, commissions):
        """Sets the commissions of this NewBusinessProtectionQuoteResult.

        Commission Value.  # noqa: E501

        :param commissions: The commissions of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: list[CommissionValue]
        """

        self._commissions = commissions

    @property
    def provider(self):
        """Gets the provider of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The provider of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: ProductProviderRef
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NewBusinessProtectionQuoteResult.


        :param provider: The provider of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: ProductProviderRef
        """

        self._provider = provider

    @property
    def plan_type(self):
        """Gets the plan_type of this NewBusinessProtectionQuoteResult.  # noqa: E501


        :return: The plan_type of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: PlanTypeReference
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this NewBusinessProtectionQuoteResult.


        :param plan_type: The plan_type of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: PlanTypeReference
        """

        self._plan_type = plan_type

    @property
    def protection_payout_type(self):
        """Gets the protection_payout_type of this NewBusinessProtectionQuoteResult.  # noqa: E501

        Income Protection Definition.  # noqa: E501

        :return: The protection_payout_type of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :rtype: str
        """
        return self._protection_payout_type

    @protection_payout_type.setter
    def protection_payout_type(self, protection_payout_type):
        """Sets the protection_payout_type of this NewBusinessProtectionQuoteResult.

        Income Protection Definition.  # noqa: E501

        :param protection_payout_type: The protection_payout_type of this NewBusinessProtectionQuoteResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Agreed", "Indemnity"]  # noqa: E501
        if protection_payout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_payout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(protection_payout_type, allowed_values)
            )

        self._protection_payout_type = protection_payout_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewBusinessProtectionQuoteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewBusinessProtectionQuoteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
