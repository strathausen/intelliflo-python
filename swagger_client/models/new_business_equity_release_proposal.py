# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_recommendation2_proposal import BaseRecommendation2Proposal  # noqa: F401,E501

class NewBusinessEquityReleaseProposal(BaseRecommendation2Proposal):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initial_monthly_cost': 'CurrencyValue',
        'proc_fee': 'CurrencyValue',
        'equity_release_type': 'str',
        'ownership_sold': 'float',
        'equity': 'CurrencyValue',
        'property_valuation': 'MortgagedPropertyValuationValue2',
        'lumpsum': 'CurrencyValue',
        'repayment_method': 'str',
        'monthly_income': 'CurrencyValue',
        'loan_value': 'CurrencyValue',
        'loan_to_value': 'float',
        'term': 'MortgageTermValue',
        'interest_only_repayment': 'CurrencyValue',
        'capital_repayment': 'CurrencyValue',
        'interest': 'InterestSchemeValue',
        'redemption_penalty': 'MortgageRedemptionValue3',
        'property_address': 'PropertyAddressRef',
        'additional_owners': 'list[NamedClientReference]',
        'total_fees': 'list[LenderFeeValue2]',
        'new_business_plan': 'NewBusinessPlanValue',
        'currency': 'str'
    }
    if hasattr(BaseRecommendation2Proposal, "swagger_types"):
        swagger_types.update(BaseRecommendation2Proposal.swagger_types)

    attribute_map = {
        'initial_monthly_cost': 'initialMonthlyCost',
        'proc_fee': 'procFee',
        'equity_release_type': 'equityReleaseType',
        'ownership_sold': 'ownershipSold',
        'equity': 'equity',
        'property_valuation': 'propertyValuation',
        'lumpsum': 'lumpsum',
        'repayment_method': 'repaymentMethod',
        'monthly_income': 'monthlyIncome',
        'loan_value': 'loanValue',
        'loan_to_value': 'loanToValue',
        'term': 'term',
        'interest_only_repayment': 'interestOnlyRepayment',
        'capital_repayment': 'capitalRepayment',
        'interest': 'interest',
        'redemption_penalty': 'redemptionPenalty',
        'property_address': 'propertyAddress',
        'additional_owners': 'additionalOwners',
        'total_fees': 'totalFees',
        'new_business_plan': 'newBusinessPlan',
        'currency': 'currency'
    }
    if hasattr(BaseRecommendation2Proposal, "attribute_map"):
        attribute_map.update(BaseRecommendation2Proposal.attribute_map)

    def __init__(self, initial_monthly_cost=None, proc_fee=None, equity_release_type=None, ownership_sold=None, equity=None, property_valuation=None, lumpsum=None, repayment_method=None, monthly_income=None, loan_value=None, loan_to_value=None, term=None, interest_only_repayment=None, capital_repayment=None, interest=None, redemption_penalty=None, property_address=None, additional_owners=None, total_fees=None, new_business_plan=None, currency=None, *args, **kwargs):  # noqa: E501
        """NewBusinessEquityReleaseProposal - a model defined in Swagger"""  # noqa: E501
        self._initial_monthly_cost = None
        self._proc_fee = None
        self._equity_release_type = None
        self._ownership_sold = None
        self._equity = None
        self._property_valuation = None
        self._lumpsum = None
        self._repayment_method = None
        self._monthly_income = None
        self._loan_value = None
        self._loan_to_value = None
        self._term = None
        self._interest_only_repayment = None
        self._capital_repayment = None
        self._interest = None
        self._redemption_penalty = None
        self._property_address = None
        self._additional_owners = None
        self._total_fees = None
        self._new_business_plan = None
        self._currency = None
        self.discriminator = None
        if initial_monthly_cost is not None:
            self.initial_monthly_cost = initial_monthly_cost
        if proc_fee is not None:
            self.proc_fee = proc_fee
        if equity_release_type is not None:
            self.equity_release_type = equity_release_type
        if ownership_sold is not None:
            self.ownership_sold = ownership_sold
        if equity is not None:
            self.equity = equity
        if property_valuation is not None:
            self.property_valuation = property_valuation
        if lumpsum is not None:
            self.lumpsum = lumpsum
        if repayment_method is not None:
            self.repayment_method = repayment_method
        if monthly_income is not None:
            self.monthly_income = monthly_income
        if loan_value is not None:
            self.loan_value = loan_value
        if loan_to_value is not None:
            self.loan_to_value = loan_to_value
        if term is not None:
            self.term = term
        if interest_only_repayment is not None:
            self.interest_only_repayment = interest_only_repayment
        if capital_repayment is not None:
            self.capital_repayment = capital_repayment
        if interest is not None:
            self.interest = interest
        if redemption_penalty is not None:
            self.redemption_penalty = redemption_penalty
        if property_address is not None:
            self.property_address = property_address
        if additional_owners is not None:
            self.additional_owners = additional_owners
        if total_fees is not None:
            self.total_fees = total_fees
        if new_business_plan is not None:
            self.new_business_plan = new_business_plan
        if currency is not None:
            self.currency = currency
        BaseRecommendation2Proposal.__init__(self, *args, **kwargs)

    @property
    def initial_monthly_cost(self):
        """Gets the initial_monthly_cost of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The initial_monthly_cost of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._initial_monthly_cost

    @initial_monthly_cost.setter
    def initial_monthly_cost(self, initial_monthly_cost):
        """Sets the initial_monthly_cost of this NewBusinessEquityReleaseProposal.


        :param initial_monthly_cost: The initial_monthly_cost of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._initial_monthly_cost = initial_monthly_cost

    @property
    def proc_fee(self):
        """Gets the proc_fee of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The proc_fee of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._proc_fee

    @proc_fee.setter
    def proc_fee(self, proc_fee):
        """Sets the proc_fee of this NewBusinessEquityReleaseProposal.


        :param proc_fee: The proc_fee of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._proc_fee = proc_fee

    @property
    def equity_release_type(self):
        """Gets the equity_release_type of this NewBusinessEquityReleaseProposal.  # noqa: E501

        Type of equity release product.  # noqa: E501

        :return: The equity_release_type of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: str
        """
        return self._equity_release_type

    @equity_release_type.setter
    def equity_release_type(self, equity_release_type):
        """Sets the equity_release_type of this NewBusinessEquityReleaseProposal.

        Type of equity release product.  # noqa: E501

        :param equity_release_type: The equity_release_type of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: str
        """

        self._equity_release_type = equity_release_type

    @property
    def ownership_sold(self):
        """Gets the ownership_sold of this NewBusinessEquityReleaseProposal.  # noqa: E501

        Percentage of ownership sold.  # noqa: E501

        :return: The ownership_sold of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: float
        """
        return self._ownership_sold

    @ownership_sold.setter
    def ownership_sold(self, ownership_sold):
        """Sets the ownership_sold of this NewBusinessEquityReleaseProposal.

        Percentage of ownership sold.  # noqa: E501

        :param ownership_sold: The ownership_sold of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: float
        """

        self._ownership_sold = ownership_sold

    @property
    def equity(self):
        """Gets the equity of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The equity of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this NewBusinessEquityReleaseProposal.


        :param equity: The equity of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._equity = equity

    @property
    def property_valuation(self):
        """Gets the property_valuation of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The property_valuation of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: MortgagedPropertyValuationValue2
        """
        return self._property_valuation

    @property_valuation.setter
    def property_valuation(self, property_valuation):
        """Sets the property_valuation of this NewBusinessEquityReleaseProposal.


        :param property_valuation: The property_valuation of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: MortgagedPropertyValuationValue2
        """

        self._property_valuation = property_valuation

    @property
    def lumpsum(self):
        """Gets the lumpsum of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The lumpsum of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._lumpsum

    @lumpsum.setter
    def lumpsum(self, lumpsum):
        """Sets the lumpsum of this NewBusinessEquityReleaseProposal.


        :param lumpsum: The lumpsum of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._lumpsum = lumpsum

    @property
    def repayment_method(self):
        """Gets the repayment_method of this NewBusinessEquityReleaseProposal.  # noqa: E501

        Repayment method type.  # noqa: E501

        :return: The repayment_method of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: str
        """
        return self._repayment_method

    @repayment_method.setter
    def repayment_method(self, repayment_method):
        """Sets the repayment_method of this NewBusinessEquityReleaseProposal.

        Repayment method type.  # noqa: E501

        :param repayment_method: The repayment_method of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: str
        """

        self._repayment_method = repayment_method

    @property
    def monthly_income(self):
        """Gets the monthly_income of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The monthly_income of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._monthly_income

    @monthly_income.setter
    def monthly_income(self, monthly_income):
        """Sets the monthly_income of this NewBusinessEquityReleaseProposal.


        :param monthly_income: The monthly_income of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._monthly_income = monthly_income

    @property
    def loan_value(self):
        """Gets the loan_value of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The loan_value of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._loan_value

    @loan_value.setter
    def loan_value(self, loan_value):
        """Sets the loan_value of this NewBusinessEquityReleaseProposal.


        :param loan_value: The loan_value of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._loan_value = loan_value

    @property
    def loan_to_value(self):
        """Gets the loan_to_value of this NewBusinessEquityReleaseProposal.  # noqa: E501

        Loan to value percentage. Calculated as: (loanAmount / propertyvaluation.value) * 100.  # noqa: E501

        :return: The loan_to_value of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: float
        """
        return self._loan_to_value

    @loan_to_value.setter
    def loan_to_value(self, loan_to_value):
        """Sets the loan_to_value of this NewBusinessEquityReleaseProposal.

        Loan to value percentage. Calculated as: (loanAmount / propertyvaluation.value) * 100.  # noqa: E501

        :param loan_to_value: The loan_to_value of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: float
        """

        self._loan_to_value = loan_to_value

    @property
    def term(self):
        """Gets the term of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The term of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: MortgageTermValue
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this NewBusinessEquityReleaseProposal.


        :param term: The term of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: MortgageTermValue
        """

        self._term = term

    @property
    def interest_only_repayment(self):
        """Gets the interest_only_repayment of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The interest_only_repayment of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._interest_only_repayment

    @interest_only_repayment.setter
    def interest_only_repayment(self, interest_only_repayment):
        """Sets the interest_only_repayment of this NewBusinessEquityReleaseProposal.


        :param interest_only_repayment: The interest_only_repayment of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._interest_only_repayment = interest_only_repayment

    @property
    def capital_repayment(self):
        """Gets the capital_repayment of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The capital_repayment of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._capital_repayment

    @capital_repayment.setter
    def capital_repayment(self, capital_repayment):
        """Sets the capital_repayment of this NewBusinessEquityReleaseProposal.


        :param capital_repayment: The capital_repayment of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: CurrencyValue
        """

        self._capital_repayment = capital_repayment

    @property
    def interest(self):
        """Gets the interest of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The interest of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: InterestSchemeValue
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this NewBusinessEquityReleaseProposal.


        :param interest: The interest of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: InterestSchemeValue
        """

        self._interest = interest

    @property
    def redemption_penalty(self):
        """Gets the redemption_penalty of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The redemption_penalty of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: MortgageRedemptionValue3
        """
        return self._redemption_penalty

    @redemption_penalty.setter
    def redemption_penalty(self, redemption_penalty):
        """Sets the redemption_penalty of this NewBusinessEquityReleaseProposal.


        :param redemption_penalty: The redemption_penalty of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: MortgageRedemptionValue3
        """

        self._redemption_penalty = redemption_penalty

    @property
    def property_address(self):
        """Gets the property_address of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The property_address of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: PropertyAddressRef
        """
        return self._property_address

    @property_address.setter
    def property_address(self, property_address):
        """Sets the property_address of this NewBusinessEquityReleaseProposal.


        :param property_address: The property_address of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: PropertyAddressRef
        """

        self._property_address = property_address

    @property
    def additional_owners(self):
        """Gets the additional_owners of this NewBusinessEquityReleaseProposal.  # noqa: E501

        Additional owners (Maximum 2).  # noqa: E501

        :return: The additional_owners of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: list[NamedClientReference]
        """
        return self._additional_owners

    @additional_owners.setter
    def additional_owners(self, additional_owners):
        """Sets the additional_owners of this NewBusinessEquityReleaseProposal.

        Additional owners (Maximum 2).  # noqa: E501

        :param additional_owners: The additional_owners of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: list[NamedClientReference]
        """

        self._additional_owners = additional_owners

    @property
    def total_fees(self):
        """Gets the total_fees of this NewBusinessEquityReleaseProposal.  # noqa: E501

        Collection of lender specific fees.  # noqa: E501

        :return: The total_fees of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: list[LenderFeeValue2]
        """
        return self._total_fees

    @total_fees.setter
    def total_fees(self, total_fees):
        """Sets the total_fees of this NewBusinessEquityReleaseProposal.

        Collection of lender specific fees.  # noqa: E501

        :param total_fees: The total_fees of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: list[LenderFeeValue2]
        """

        self._total_fees = total_fees

    @property
    def new_business_plan(self):
        """Gets the new_business_plan of this NewBusinessEquityReleaseProposal.  # noqa: E501


        :return: The new_business_plan of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: NewBusinessPlanValue
        """
        return self._new_business_plan

    @new_business_plan.setter
    def new_business_plan(self, new_business_plan):
        """Sets the new_business_plan of this NewBusinessEquityReleaseProposal.


        :param new_business_plan: The new_business_plan of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: NewBusinessPlanValue
        """

        self._new_business_plan = new_business_plan

    @property
    def currency(self):
        """Gets the currency of this NewBusinessEquityReleaseProposal.  # noqa: E501

        ISO 4217 Currency code for the proposal.  # noqa: E501

        :return: The currency of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewBusinessEquityReleaseProposal.

        ISO 4217 Currency code for the proposal.  # noqa: E501

        :param currency: The currency of this NewBusinessEquityReleaseProposal.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewBusinessEquityReleaseProposal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewBusinessEquityReleaseProposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
