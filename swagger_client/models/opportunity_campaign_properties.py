# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpportunityCampaignProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_archived': 'bool',
        'is_organisational': 'bool',
        'campaign_type': 'str',
        'group': 'str'
    }

    attribute_map = {
        'is_archived': 'isArchived',
        'is_organisational': 'isOrganisational',
        'campaign_type': 'campaignType',
        'group': 'group'
    }

    def __init__(self, is_archived=False, is_organisational=None, campaign_type=None, group=None):  # noqa: E501
        """OpportunityCampaignProperties - a model defined in Swagger"""  # noqa: E501
        self._is_archived = None
        self._is_organisational = None
        self._campaign_type = None
        self._group = None
        self.discriminator = None
        if is_archived is not None:
            self.is_archived = is_archived
        self.is_organisational = is_organisational
        self.campaign_type = campaign_type
        if group is not None:
            self.group = group

    @property
    def is_archived(self):
        """Gets the is_archived of this OpportunityCampaignProperties.  # noqa: E501

        Flag indicating whether or not the Opportunity campaign has been archived.  # noqa: E501

        :return: The is_archived of this OpportunityCampaignProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this OpportunityCampaignProperties.

        Flag indicating whether or not the Opportunity campaign has been archived.  # noqa: E501

        :param is_archived: The is_archived of this OpportunityCampaignProperties.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_organisational(self):
        """Gets the is_organisational of this OpportunityCampaignProperties.  # noqa: E501

        Flag indicating if the Opportunity campaign is for an organisation.  # noqa: E501

        :return: The is_organisational of this OpportunityCampaignProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_organisational

    @is_organisational.setter
    def is_organisational(self, is_organisational):
        """Sets the is_organisational of this OpportunityCampaignProperties.

        Flag indicating if the Opportunity campaign is for an organisation.  # noqa: E501

        :param is_organisational: The is_organisational of this OpportunityCampaignProperties.  # noqa: E501
        :type: bool
        """
        if is_organisational is None:
            raise ValueError("Invalid value for `is_organisational`, must not be `None`")  # noqa: E501

        self._is_organisational = is_organisational

    @property
    def campaign_type(self):
        """Gets the campaign_type of this OpportunityCampaignProperties.  # noqa: E501

        The type of the Opportunity campaign.  # noqa: E501

        :return: The campaign_type of this OpportunityCampaignProperties.  # noqa: E501
        :rtype: str
        """
        return self._campaign_type

    @campaign_type.setter
    def campaign_type(self, campaign_type):
        """Sets the campaign_type of this OpportunityCampaignProperties.

        The type of the Opportunity campaign.  # noqa: E501

        :param campaign_type: The campaign_type of this OpportunityCampaignProperties.  # noqa: E501
        :type: str
        """
        if campaign_type is None:
            raise ValueError("Invalid value for `campaign_type`, must not be `None`")  # noqa: E501

        self._campaign_type = campaign_type

    @property
    def group(self):
        """Gets the group of this OpportunityCampaignProperties.  # noqa: E501

        The group to which the Opportunity campaign relates. This is mandatory if IsOrganisational is set to false.  # noqa: E501

        :return: The group of this OpportunityCampaignProperties.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this OpportunityCampaignProperties.

        The group to which the Opportunity campaign relates. This is mandatory if IsOrganisational is set to false.  # noqa: E501

        :param group: The group of this OpportunityCampaignProperties.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpportunityCampaignProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpportunityCampaignProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
