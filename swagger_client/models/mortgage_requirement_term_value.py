# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MortgageRequirementTermValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initial': 'int',
        'capital_repayment': 'int',
        'interest_only': 'int'
    }

    attribute_map = {
        'initial': 'initial',
        'capital_repayment': 'capitalRepayment',
        'interest_only': 'interestOnly'
    }

    def __init__(self, initial=None, capital_repayment=None, interest_only=None):  # noqa: E501
        """MortgageRequirementTermValue - a model defined in Swagger"""  # noqa: E501
        self._initial = None
        self._capital_repayment = None
        self._interest_only = None
        self.discriminator = None
        if initial is not None:
            self.initial = initial
        if capital_repayment is not None:
            self.capital_repayment = capital_repayment
        if interest_only is not None:
            self.interest_only = interest_only

    @property
    def initial(self):
        """Gets the initial of this MortgageRequirementTermValue.  # noqa: E501

        Mortgage initial term in months.  # noqa: E501

        :return: The initial of this MortgageRequirementTermValue.  # noqa: E501
        :rtype: int
        """
        return self._initial

    @initial.setter
    def initial(self, initial):
        """Sets the initial of this MortgageRequirementTermValue.

        Mortgage initial term in months.  # noqa: E501

        :param initial: The initial of this MortgageRequirementTermValue.  # noqa: E501
        :type: int
        """

        self._initial = initial

    @property
    def capital_repayment(self):
        """Gets the capital_repayment of this MortgageRequirementTermValue.  # noqa: E501

        Capital repayment term in months.  # noqa: E501

        :return: The capital_repayment of this MortgageRequirementTermValue.  # noqa: E501
        :rtype: int
        """
        return self._capital_repayment

    @capital_repayment.setter
    def capital_repayment(self, capital_repayment):
        """Sets the capital_repayment of this MortgageRequirementTermValue.

        Capital repayment term in months.  # noqa: E501

        :param capital_repayment: The capital_repayment of this MortgageRequirementTermValue.  # noqa: E501
        :type: int
        """

        self._capital_repayment = capital_repayment

    @property
    def interest_only(self):
        """Gets the interest_only of this MortgageRequirementTermValue.  # noqa: E501

        Interest only term in months.  # noqa: E501

        :return: The interest_only of this MortgageRequirementTermValue.  # noqa: E501
        :rtype: int
        """
        return self._interest_only

    @interest_only.setter
    def interest_only(self, interest_only):
        """Sets the interest_only of this MortgageRequirementTermValue.

        Interest only term in months.  # noqa: E501

        :param interest_only: The interest_only of this MortgageRequirementTermValue.  # noqa: E501
        :type: int
        """

        self._interest_only = interest_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MortgageRequirementTermValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MortgageRequirementTermValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
