# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecommendationStatusValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'reason': 'str',
        'details': 'str',
        'status_at': 'datetime',
        'status_by': 'NamedUserRef'
    }

    attribute_map = {
        'name': 'name',
        'reason': 'reason',
        'details': 'details',
        'status_at': 'statusAt',
        'status_by': 'statusBy'
    }

    def __init__(self, name='New', reason=None, details=None, status_at=None, status_by=None):  # noqa: E501
        """RecommendationStatusValue - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._reason = None
        self._details = None
        self._status_at = None
        self._status_by = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if reason is not None:
            self.reason = reason
        if details is not None:
            self.details = details
        if status_at is not None:
            self.status_at = status_at
        if status_by is not None:
            self.status_by = status_by

    @property
    def name(self):
        """Gets the name of this RecommendationStatusValue.  # noqa: E501

        Recommendation status name.  # noqa: E501

        :return: The name of this RecommendationStatusValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationStatusValue.

        Recommendation status name.  # noqa: E501

        :param name: The name of this RecommendationStatusValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["New", "Accepted", "Deferred", "Rejected", "PresentedToClient", "Complete"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this RecommendationStatusValue.  # noqa: E501

        Status reason description.  # noqa: E501

        :return: The reason of this RecommendationStatusValue.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RecommendationStatusValue.

        Status reason description.  # noqa: E501

        :param reason: The reason of this RecommendationStatusValue.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def details(self):
        """Gets the details of this RecommendationStatusValue.  # noqa: E501

        Status additional details.  # noqa: E501

        :return: The details of this RecommendationStatusValue.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RecommendationStatusValue.

        Status additional details.  # noqa: E501

        :param details: The details of this RecommendationStatusValue.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def status_at(self):
        """Gets the status_at of this RecommendationStatusValue.  # noqa: E501

        Recommendation status date.  # noqa: E501

        :return: The status_at of this RecommendationStatusValue.  # noqa: E501
        :rtype: datetime
        """
        return self._status_at

    @status_at.setter
    def status_at(self, status_at):
        """Sets the status_at of this RecommendationStatusValue.

        Recommendation status date.  # noqa: E501

        :param status_at: The status_at of this RecommendationStatusValue.  # noqa: E501
        :type: datetime
        """

        self._status_at = status_at

    @property
    def status_by(self):
        """Gets the status_by of this RecommendationStatusValue.  # noqa: E501


        :return: The status_by of this RecommendationStatusValue.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._status_by

    @status_by.setter
    def status_by(self, status_by):
        """Sets the status_by of this RecommendationStatusValue.


        :param status_by: The status_by of this RecommendationStatusValue.  # noqa: E501
        :type: NamedUserRef
        """

        self._status_by = status_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecommendationStatusValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationStatusValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
