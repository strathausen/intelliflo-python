# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoalQuestionConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_ref': 'GoalInvestmentPreferenceQuestionRef',
        'override_answer_options': 'bool',
        'answer_options': 'list[GoalInvestmentPreferenceAnswerOption]',
        'objective_categories': 'list[NamedGoalCategoryRef]'
    }

    attribute_map = {
        'question_ref': 'questionRef',
        'override_answer_options': 'overrideAnswerOptions',
        'answer_options': 'answerOptions',
        'objective_categories': 'objectiveCategories'
    }

    def __init__(self, question_ref=None, override_answer_options=None, answer_options=None, objective_categories=None):  # noqa: E501
        """GoalQuestionConfiguration - a model defined in Swagger"""  # noqa: E501
        self._question_ref = None
        self._override_answer_options = None
        self._answer_options = None
        self._objective_categories = None
        self.discriminator = None
        self.question_ref = question_ref
        if override_answer_options is not None:
            self.override_answer_options = override_answer_options
        if answer_options is not None:
            self.answer_options = answer_options
        if objective_categories is not None:
            self.objective_categories = objective_categories

    @property
    def question_ref(self):
        """Gets the question_ref of this GoalQuestionConfiguration.  # noqa: E501


        :return: The question_ref of this GoalQuestionConfiguration.  # noqa: E501
        :rtype: GoalInvestmentPreferenceQuestionRef
        """
        return self._question_ref

    @question_ref.setter
    def question_ref(self, question_ref):
        """Sets the question_ref of this GoalQuestionConfiguration.


        :param question_ref: The question_ref of this GoalQuestionConfiguration.  # noqa: E501
        :type: GoalInvestmentPreferenceQuestionRef
        """
        if question_ref is None:
            raise ValueError("Invalid value for `question_ref`, must not be `None`")  # noqa: E501

        self._question_ref = question_ref

    @property
    def override_answer_options(self):
        """Gets the override_answer_options of this GoalQuestionConfiguration.  # noqa: E501

        Goal and Objective InvestmentPreference Override AnswerOptions.  # noqa: E501

        :return: The override_answer_options of this GoalQuestionConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._override_answer_options

    @override_answer_options.setter
    def override_answer_options(self, override_answer_options):
        """Sets the override_answer_options of this GoalQuestionConfiguration.

        Goal and Objective InvestmentPreference Override AnswerOptions.  # noqa: E501

        :param override_answer_options: The override_answer_options of this GoalQuestionConfiguration.  # noqa: E501
        :type: bool
        """

        self._override_answer_options = override_answer_options

    @property
    def answer_options(self):
        """Gets the answer_options of this GoalQuestionConfiguration.  # noqa: E501

        Goal and Objective InvestmentPreference AnswerOptions.  # noqa: E501

        :return: The answer_options of this GoalQuestionConfiguration.  # noqa: E501
        :rtype: list[GoalInvestmentPreferenceAnswerOption]
        """
        return self._answer_options

    @answer_options.setter
    def answer_options(self, answer_options):
        """Sets the answer_options of this GoalQuestionConfiguration.

        Goal and Objective InvestmentPreference AnswerOptions.  # noqa: E501

        :param answer_options: The answer_options of this GoalQuestionConfiguration.  # noqa: E501
        :type: list[GoalInvestmentPreferenceAnswerOption]
        """

        self._answer_options = answer_options

    @property
    def objective_categories(self):
        """Gets the objective_categories of this GoalQuestionConfiguration.  # noqa: E501

        Goal and Objective InvestmentPreference ObjectiveCategories.  # noqa: E501

        :return: The objective_categories of this GoalQuestionConfiguration.  # noqa: E501
        :rtype: list[NamedGoalCategoryRef]
        """
        return self._objective_categories

    @objective_categories.setter
    def objective_categories(self, objective_categories):
        """Sets the objective_categories of this GoalQuestionConfiguration.

        Goal and Objective InvestmentPreference ObjectiveCategories.  # noqa: E501

        :param objective_categories: The objective_categories of this GoalQuestionConfiguration.  # noqa: E501
        :type: list[NamedGoalCategoryRef]
        """

        self._objective_categories = objective_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalQuestionConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalQuestionConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
