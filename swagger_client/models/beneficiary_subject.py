# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BeneficiarySubject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'type': 'str',
        'name': 'str',
        'date_of_birth': 'datetime',
        'relationship_type': 'BeneficiaryRelationshipNameRef',
        'external_reference': 'str',
        'owner_client_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'type': 'type',
        'name': 'name',
        'date_of_birth': 'dateOfBirth',
        'relationship_type': 'relationshipType',
        'external_reference': 'externalReference',
        'owner_client_id': 'ownerClientId'
    }

    def __init__(self, id=None, href=None, type=None, name=None, date_of_birth=None, relationship_type=None, external_reference=None, owner_client_id=None):  # noqa: E501
        """BeneficiarySubject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._type = None
        self._name = None
        self._date_of_birth = None
        self._relationship_type = None
        self._external_reference = None
        self._owner_client_id = None
        self.discriminator = None
        self.id = id
        if href is not None:
            self.href = href
        self.type = type
        if name is not None:
            self.name = name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if relationship_type is not None:
            self.relationship_type = relationship_type
        if external_reference is not None:
            self.external_reference = external_reference
        if owner_client_id is not None:
            self.owner_client_id = owner_client_id

    @property
    def id(self):
        """Gets the id of this BeneficiarySubject.  # noqa: E501

        BeneficiarySubject unique identifier.  clientid/personalcontactid, existing db column: BeneficiaryCrmContactId  # noqa: E501

        :return: The id of this BeneficiarySubject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BeneficiarySubject.

        BeneficiarySubject unique identifier.  clientid/personalcontactid, existing db column: BeneficiaryCrmContactId  # noqa: E501

        :param id: The id of this BeneficiarySubject.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def href(self):
        """Gets the href of this BeneficiarySubject.  # noqa: E501

        Hypermedia link to the BeneficiarySubject  # noqa: E501

        :return: The href of this BeneficiarySubject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BeneficiarySubject.

        Hypermedia link to the BeneficiarySubject  # noqa: E501

        :param href: The href of this BeneficiarySubject.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def type(self):
        """Gets the type of this BeneficiarySubject.  # noqa: E501

        BeneficiarySubject discriminator  Client|PersonalContact for personalContact: it's always one of the trust's personal contacts  # noqa: E501

        :return: The type of this BeneficiarySubject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BeneficiarySubject.

        BeneficiarySubject discriminator  Client|PersonalContact for personalContact: it's always one of the trust's personal contacts  # noqa: E501

        :param type: The type of this BeneficiarySubject.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Client", "PersonalContact"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this BeneficiarySubject.  # noqa: E501

        Subject's full name  # noqa: E501

        :return: The name of this BeneficiarySubject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BeneficiarySubject.

        Subject's full name  # noqa: E501

        :param name: The name of this BeneficiarySubject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this BeneficiarySubject.  # noqa: E501

        Subject's date of birth  # noqa: E501

        :return: The date_of_birth of this BeneficiarySubject.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this BeneficiarySubject.

        Subject's date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this BeneficiarySubject.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def relationship_type(self):
        """Gets the relationship_type of this BeneficiarySubject.  # noqa: E501


        :return: The relationship_type of this BeneficiarySubject.  # noqa: E501
        :rtype: BeneficiaryRelationshipNameRef
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this BeneficiarySubject.


        :param relationship_type: The relationship_type of this BeneficiarySubject.  # noqa: E501
        :type: BeneficiaryRelationshipNameRef
        """

        self._relationship_type = relationship_type

    @property
    def external_reference(self):
        """Gets the external_reference of this BeneficiarySubject.  # noqa: E501


        :return: The external_reference of this BeneficiarySubject.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this BeneficiarySubject.


        :param external_reference: The external_reference of this BeneficiarySubject.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def owner_client_id(self):
        """Gets the owner_client_id of this BeneficiarySubject.  # noqa: E501

        The unique identifier of the plan's owner.  # noqa: E501

        :return: The owner_client_id of this BeneficiarySubject.  # noqa: E501
        :rtype: int
        """
        return self._owner_client_id

    @owner_client_id.setter
    def owner_client_id(self, owner_client_id):
        """Sets the owner_client_id of this BeneficiarySubject.

        The unique identifier of the plan's owner.  # noqa: E501

        :param owner_client_id: The owner_client_id of this BeneficiarySubject.  # noqa: E501
        :type: int
        """

        self._owner_client_id = owner_client_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeneficiarySubject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeneficiarySubject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
