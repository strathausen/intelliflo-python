# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValuationBatchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'batch_href': 'str',
        'policy_number': 'str',
        'portal_reference': 'str',
        'matched_plan': 'bool',
        'is_imported': 'bool',
        'matched_plan_href': 'str',
        'holdings': 'list[ValuationBatchHoldingValue]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'batch_href': 'batch_href',
        'policy_number': 'policyNumber',
        'portal_reference': 'portalReference',
        'matched_plan': 'matched_plan',
        'is_imported': 'is_imported',
        'matched_plan_href': 'matched_plan_href',
        'holdings': 'holdings'
    }

    def __init__(self, id=None, href=None, batch_href=None, policy_number=None, portal_reference=None, matched_plan=None, is_imported=None, matched_plan_href=None, holdings=None):  # noqa: E501
        """ValuationBatchResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._batch_href = None
        self._policy_number = None
        self._portal_reference = None
        self._matched_plan = None
        self._is_imported = None
        self._matched_plan_href = None
        self._holdings = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if batch_href is not None:
            self.batch_href = batch_href
        if policy_number is not None:
            self.policy_number = policy_number
        if portal_reference is not None:
            self.portal_reference = portal_reference
        if matched_plan is not None:
            self.matched_plan = matched_plan
        if is_imported is not None:
            self.is_imported = is_imported
        if matched_plan_href is not None:
            self.matched_plan_href = matched_plan_href
        if holdings is not None:
            self.holdings = holdings

    @property
    def id(self):
        """Gets the id of this ValuationBatchResult.  # noqa: E501


        :return: The id of this ValuationBatchResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ValuationBatchResult.


        :param id: The id of this ValuationBatchResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ValuationBatchResult.  # noqa: E501


        :return: The href of this ValuationBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ValuationBatchResult.


        :param href: The href of this ValuationBatchResult.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def batch_href(self):
        """Gets the batch_href of this ValuationBatchResult.  # noqa: E501


        :return: The batch_href of this ValuationBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._batch_href

    @batch_href.setter
    def batch_href(self, batch_href):
        """Sets the batch_href of this ValuationBatchResult.


        :param batch_href: The batch_href of this ValuationBatchResult.  # noqa: E501
        :type: str
        """

        self._batch_href = batch_href

    @property
    def policy_number(self):
        """Gets the policy_number of this ValuationBatchResult.  # noqa: E501

        Policy Number  # noqa: E501

        :return: The policy_number of this ValuationBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number):
        """Sets the policy_number of this ValuationBatchResult.

        Policy Number  # noqa: E501

        :param policy_number: The policy_number of this ValuationBatchResult.  # noqa: E501
        :type: str
        """

        self._policy_number = policy_number

    @property
    def portal_reference(self):
        """Gets the portal_reference of this ValuationBatchResult.  # noqa: E501

        Any shared additional reference  # noqa: E501

        :return: The portal_reference of this ValuationBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._portal_reference

    @portal_reference.setter
    def portal_reference(self, portal_reference):
        """Sets the portal_reference of this ValuationBatchResult.

        Any shared additional reference  # noqa: E501

        :param portal_reference: The portal_reference of this ValuationBatchResult.  # noqa: E501
        :type: str
        """

        self._portal_reference = portal_reference

    @property
    def matched_plan(self):
        """Gets the matched_plan of this ValuationBatchResult.  # noqa: E501

        True if a plan have been matched correctly.  # noqa: E501

        :return: The matched_plan of this ValuationBatchResult.  # noqa: E501
        :rtype: bool
        """
        return self._matched_plan

    @matched_plan.setter
    def matched_plan(self, matched_plan):
        """Sets the matched_plan of this ValuationBatchResult.

        True if a plan have been matched correctly.  # noqa: E501

        :param matched_plan: The matched_plan of this ValuationBatchResult.  # noqa: E501
        :type: bool
        """

        self._matched_plan = matched_plan

    @property
    def is_imported(self):
        """Gets the is_imported of this ValuationBatchResult.  # noqa: E501

        True if the holdings for the plan have been imported.  # noqa: E501

        :return: The is_imported of this ValuationBatchResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_imported

    @is_imported.setter
    def is_imported(self, is_imported):
        """Sets the is_imported of this ValuationBatchResult.

        True if the holdings for the plan have been imported.  # noqa: E501

        :param is_imported: The is_imported of this ValuationBatchResult.  # noqa: E501
        :type: bool
        """

        self._is_imported = is_imported

    @property
    def matched_plan_href(self):
        """Gets the matched_plan_href of this ValuationBatchResult.  # noqa: E501

        Matched plan location  # noqa: E501

        :return: The matched_plan_href of this ValuationBatchResult.  # noqa: E501
        :rtype: str
        """
        return self._matched_plan_href

    @matched_plan_href.setter
    def matched_plan_href(self, matched_plan_href):
        """Sets the matched_plan_href of this ValuationBatchResult.

        Matched plan location  # noqa: E501

        :param matched_plan_href: The matched_plan_href of this ValuationBatchResult.  # noqa: E501
        :type: str
        """

        self._matched_plan_href = matched_plan_href

    @property
    def holdings(self):
        """Gets the holdings of this ValuationBatchResult.  # noqa: E501

        Holdings grouped by policyNumber  # noqa: E501

        :return: The holdings of this ValuationBatchResult.  # noqa: E501
        :rtype: list[ValuationBatchHoldingValue]
        """
        return self._holdings

    @holdings.setter
    def holdings(self, holdings):
        """Sets the holdings of this ValuationBatchResult.

        Holdings grouped by policyNumber  # noqa: E501

        :param holdings: The holdings of this ValuationBatchResult.  # noqa: E501
        :type: list[ValuationBatchHoldingValue]
        """

        self._holdings = holdings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValuationBatchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValuationBatchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
