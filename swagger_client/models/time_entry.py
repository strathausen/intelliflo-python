# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client': 'NamedClientRef',
        'category': 'str',
        'started_at': 'datetime',
        'created_at': 'datetime',
        'elapsed_seconds': 'int',
        'hourly_billing_rate': 'CurrencyValue',
        'is_all_day': 'bool',
        'notes': 'str',
        'tags': 'list[str]',
        'tenant': 'TenantReference',
        'owner': 'NamedUserRef',
        'billable_total': 'CurrencyValue',
        'is_chargeable': 'bool',
        'task': 'TaskRef'
    }

    attribute_map = {
        'id': 'id',
        'client': 'client',
        'category': 'category',
        'started_at': 'startedAt',
        'created_at': 'createdAt',
        'elapsed_seconds': 'elapsedSeconds',
        'hourly_billing_rate': 'hourlyBillingRate',
        'is_all_day': 'isAllDay',
        'notes': 'notes',
        'tags': 'tags',
        'tenant': 'tenant',
        'owner': 'owner',
        'billable_total': 'billableTotal',
        'is_chargeable': 'isChargeable',
        'task': 'task'
    }

    def __init__(self, id=None, client=None, category=None, started_at=None, created_at=None, elapsed_seconds=None, hourly_billing_rate=None, is_all_day=None, notes=None, tags=None, tenant=None, owner=None, billable_total=None, is_chargeable=None, task=None):  # noqa: E501
        """TimeEntry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client = None
        self._category = None
        self._started_at = None
        self._created_at = None
        self._elapsed_seconds = None
        self._hourly_billing_rate = None
        self._is_all_day = None
        self._notes = None
        self._tags = None
        self._tenant = None
        self._owner = None
        self._billable_total = None
        self._is_chargeable = None
        self._task = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if client is not None:
            self.client = client
        if category is not None:
            self.category = category
        if started_at is not None:
            self.started_at = started_at
        if created_at is not None:
            self.created_at = created_at
        if elapsed_seconds is not None:
            self.elapsed_seconds = elapsed_seconds
        if hourly_billing_rate is not None:
            self.hourly_billing_rate = hourly_billing_rate
        if is_all_day is not None:
            self.is_all_day = is_all_day
        if notes is not None:
            self.notes = notes
        if tags is not None:
            self.tags = tags
        if tenant is not None:
            self.tenant = tenant
        if owner is not None:
            self.owner = owner
        if billable_total is not None:
            self.billable_total = billable_total
        if is_chargeable is not None:
            self.is_chargeable = is_chargeable
        if task is not None:
            self.task = task

    @property
    def id(self):
        """Gets the id of this TimeEntry.  # noqa: E501


        :return: The id of this TimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeEntry.


        :param id: The id of this TimeEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client(self):
        """Gets the client of this TimeEntry.  # noqa: E501


        :return: The client of this TimeEntry.  # noqa: E501
        :rtype: NamedClientRef
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this TimeEntry.


        :param client: The client of this TimeEntry.  # noqa: E501
        :type: NamedClientRef
        """

        self._client = client

    @property
    def category(self):
        """Gets the category of this TimeEntry.  # noqa: E501


        :return: The category of this TimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TimeEntry.


        :param category: The category of this TimeEntry.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def started_at(self):
        """Gets the started_at of this TimeEntry.  # noqa: E501


        :return: The started_at of this TimeEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this TimeEntry.


        :param started_at: The started_at of this TimeEntry.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def created_at(self):
        """Gets the created_at of this TimeEntry.  # noqa: E501


        :return: The created_at of this TimeEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimeEntry.


        :param created_at: The created_at of this TimeEntry.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def elapsed_seconds(self):
        """Gets the elapsed_seconds of this TimeEntry.  # noqa: E501


        :return: The elapsed_seconds of this TimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_seconds

    @elapsed_seconds.setter
    def elapsed_seconds(self, elapsed_seconds):
        """Sets the elapsed_seconds of this TimeEntry.


        :param elapsed_seconds: The elapsed_seconds of this TimeEntry.  # noqa: E501
        :type: int
        """

        self._elapsed_seconds = elapsed_seconds

    @property
    def hourly_billing_rate(self):
        """Gets the hourly_billing_rate of this TimeEntry.  # noqa: E501


        :return: The hourly_billing_rate of this TimeEntry.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._hourly_billing_rate

    @hourly_billing_rate.setter
    def hourly_billing_rate(self, hourly_billing_rate):
        """Sets the hourly_billing_rate of this TimeEntry.


        :param hourly_billing_rate: The hourly_billing_rate of this TimeEntry.  # noqa: E501
        :type: CurrencyValue
        """

        self._hourly_billing_rate = hourly_billing_rate

    @property
    def is_all_day(self):
        """Gets the is_all_day of this TimeEntry.  # noqa: E501


        :return: The is_all_day of this TimeEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_all_day

    @is_all_day.setter
    def is_all_day(self, is_all_day):
        """Sets the is_all_day of this TimeEntry.


        :param is_all_day: The is_all_day of this TimeEntry.  # noqa: E501
        :type: bool
        """

        self._is_all_day = is_all_day

    @property
    def notes(self):
        """Gets the notes of this TimeEntry.  # noqa: E501


        :return: The notes of this TimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TimeEntry.


        :param notes: The notes of this TimeEntry.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this TimeEntry.  # noqa: E501


        :return: The tags of this TimeEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TimeEntry.


        :param tags: The tags of this TimeEntry.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this TimeEntry.  # noqa: E501


        :return: The tenant of this TimeEntry.  # noqa: E501
        :rtype: TenantReference
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this TimeEntry.


        :param tenant: The tenant of this TimeEntry.  # noqa: E501
        :type: TenantReference
        """

        self._tenant = tenant

    @property
    def owner(self):
        """Gets the owner of this TimeEntry.  # noqa: E501


        :return: The owner of this TimeEntry.  # noqa: E501
        :rtype: NamedUserRef
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TimeEntry.


        :param owner: The owner of this TimeEntry.  # noqa: E501
        :type: NamedUserRef
        """

        self._owner = owner

    @property
    def billable_total(self):
        """Gets the billable_total of this TimeEntry.  # noqa: E501


        :return: The billable_total of this TimeEntry.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._billable_total

    @billable_total.setter
    def billable_total(self, billable_total):
        """Sets the billable_total of this TimeEntry.


        :param billable_total: The billable_total of this TimeEntry.  # noqa: E501
        :type: CurrencyValue
        """

        self._billable_total = billable_total

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this TimeEntry.  # noqa: E501


        :return: The is_chargeable of this TimeEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this TimeEntry.


        :param is_chargeable: The is_chargeable of this TimeEntry.  # noqa: E501
        :type: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def task(self):
        """Gets the task of this TimeEntry.  # noqa: E501


        :return: The task of this TimeEntry.  # noqa: E501
        :rtype: TaskRef
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TimeEntry.


        :param task: The task of this TimeEntry.  # noqa: E501
        :type: TaskRef
        """

        self._task = task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
