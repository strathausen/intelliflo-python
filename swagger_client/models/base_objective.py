# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseObjective(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'discriminator': 'str',
        'category': 'str',
        'created_user': 'ReadOnlyNamedUserRef',
        'created_on': 'datetime',
        'applicants': 'list[NamedCustomerRef]',
        'summary': 'str',
        'details': 'str',
        'status': 'str',
        'time_horizon': 'str',
        'linked_opportunities': 'list[OpportunityRef]',
        'plans': 'list[PlanRef2]',
        'last_reviewed_at': 'datetime',
        'properties': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'discriminator': 'discriminator',
        'category': 'category',
        'created_user': 'createdUser',
        'created_on': 'createdOn',
        'applicants': 'applicants',
        'summary': 'summary',
        'details': 'details',
        'status': 'status',
        'time_horizon': 'timeHorizon',
        'linked_opportunities': 'linkedOpportunities',
        'plans': 'plans',
        'last_reviewed_at': 'lastReviewedAt',
        'properties': 'properties'
    }

    discriminator_value_class_map = {
          'RetirementObjective': 'RetirementObjective',
'ProtectionObjective': 'ProtectionObjective',
'EstatePlanningObjective': 'EstatePlanningObjective',
'BudgetObjective': 'BudgetObjective',
'MortgageObjective': 'MortgageObjective',
'EquityReleaseObjective': 'EquityReleaseObjective',
'InvestmentObjective': 'InvestmentObjective'    }

    def __init__(self, id=None, href=None, discriminator=None, category=None, created_user=None, created_on=None, applicants=None, summary=None, details=None, status=None, time_horizon=None, linked_opportunities=None, plans=None, last_reviewed_at=None, properties=None):  # noqa: E501
        """BaseObjective - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._discriminator = None
        self._category = None
        self._created_user = None
        self._created_on = None
        self._applicants = None
        self._summary = None
        self._details = None
        self._status = None
        self._time_horizon = None
        self._linked_opportunities = None
        self._plans = None
        self._last_reviewed_at = None
        self._properties = None
        self.discriminator = 'discriminator'
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        self.discriminator = discriminator
        self.category = category
        if created_user is not None:
            self.created_user = created_user
        if created_on is not None:
            self.created_on = created_on
        if applicants is not None:
            self.applicants = applicants
        if summary is not None:
            self.summary = summary
        if details is not None:
            self.details = details
        if status is not None:
            self.status = status
        if time_horizon is not None:
            self.time_horizon = time_horizon
        if linked_opportunities is not None:
            self.linked_opportunities = linked_opportunities
        if plans is not None:
            self.plans = plans
        if last_reviewed_at is not None:
            self.last_reviewed_at = last_reviewed_at
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this BaseObjective.  # noqa: E501

        Requirement unique identifier.  # noqa: E501

        :return: The id of this BaseObjective.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseObjective.

        Requirement unique identifier.  # noqa: E501

        :param id: The id of this BaseObjective.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this BaseObjective.  # noqa: E501

        Hypermedia link to the requirement.  # noqa: E501

        :return: The href of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this BaseObjective.

        Hypermedia link to the requirement.  # noqa: E501

        :param href: The href of this BaseObjective.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def discriminator(self):
        """Gets the discriminator of this BaseObjective.  # noqa: E501

        Requirements discriminator.  # noqa: E501

        :return: The discriminator of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this BaseObjective.

        Requirements discriminator.  # noqa: E501

        :param discriminator: The discriminator of this BaseObjective.  # noqa: E501
        :type: str
        """
        if discriminator is None:
            raise ValueError("Invalid value for `discriminator`, must not be `None`")  # noqa: E501
        allowed_values = ["BudgetObjective", "EquityReleaseObjective", "EstatePlanningObjective", "InvestmentObjective", "MortgageObjective", "ProtectionObjective", "RetirementObjective"]  # noqa: E501
        if discriminator not in allowed_values:
            raise ValueError(
                "Invalid value for `discriminator` ({0}), must be one of {1}"  # noqa: E501
                .format(discriminator, allowed_values)
            )

        self._discriminator = discriminator

    @property
    def category(self):
        """Gets the category of this BaseObjective.  # noqa: E501

        Category for the requirement.  # noqa: E501

        :return: The category of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BaseObjective.

        Category for the requirement.  # noqa: E501

        :param category: The category of this BaseObjective.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def created_user(self):
        """Gets the created_user of this BaseObjective.  # noqa: E501


        :return: The created_user of this BaseObjective.  # noqa: E501
        :rtype: ReadOnlyNamedUserRef
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this BaseObjective.


        :param created_user: The created_user of this BaseObjective.  # noqa: E501
        :type: ReadOnlyNamedUserRef
        """

        self._created_user = created_user

    @property
    def created_on(self):
        """Gets the created_on of this BaseObjective.  # noqa: E501

        Requirement created date.  # noqa: E501

        :return: The created_on of this BaseObjective.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this BaseObjective.

        Requirement created date.  # noqa: E501

        :param created_on: The created_on of this BaseObjective.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def applicants(self):
        """Gets the applicants of this BaseObjective.  # noqa: E501

        Owners of the requirement. The owner at index 0 is the primary owner.  # noqa: E501

        :return: The applicants of this BaseObjective.  # noqa: E501
        :rtype: list[NamedCustomerRef]
        """
        return self._applicants

    @applicants.setter
    def applicants(self, applicants):
        """Sets the applicants of this BaseObjective.

        Owners of the requirement. The owner at index 0 is the primary owner.  # noqa: E501

        :param applicants: The applicants of this BaseObjective.  # noqa: E501
        :type: list[NamedCustomerRef]
        """

        self._applicants = applicants

    @property
    def summary(self):
        """Gets the summary of this BaseObjective.  # noqa: E501

        Summary of the requirement.  # noqa: E501

        :return: The summary of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this BaseObjective.

        Summary of the requirement.  # noqa: E501

        :param summary: The summary of this BaseObjective.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def details(self):
        """Gets the details of this BaseObjective.  # noqa: E501

        Additional notes or details of the requirement.  # noqa: E501

        :return: The details of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BaseObjective.

        Additional notes or details of the requirement.  # noqa: E501

        :param details: The details of this BaseObjective.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def status(self):
        """Gets the status of this BaseObjective.  # noqa: E501

        Status of the requirement.  # noqa: E501

        :return: The status of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseObjective.

        Status of the requirement.  # noqa: E501

        :param status: The status of this BaseObjective.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_horizon(self):
        """Gets the time_horizon of this BaseObjective.  # noqa: E501

        Time horizon for the requirement  # noqa: E501

        :return: The time_horizon of this BaseObjective.  # noqa: E501
        :rtype: str
        """
        return self._time_horizon

    @time_horizon.setter
    def time_horizon(self, time_horizon):
        """Sets the time_horizon of this BaseObjective.

        Time horizon for the requirement  # noqa: E501

        :param time_horizon: The time_horizon of this BaseObjective.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "ShortTerm", "MediumTerm", "LongTerm"]  # noqa: E501
        if time_horizon not in allowed_values:
            raise ValueError(
                "Invalid value for `time_horizon` ({0}), must be one of {1}"  # noqa: E501
                .format(time_horizon, allowed_values)
            )

        self._time_horizon = time_horizon

    @property
    def linked_opportunities(self):
        """Gets the linked_opportunities of this BaseObjective.  # noqa: E501

        Linked opportunities to the requirement.  # noqa: E501

        :return: The linked_opportunities of this BaseObjective.  # noqa: E501
        :rtype: list[OpportunityRef]
        """
        return self._linked_opportunities

    @linked_opportunities.setter
    def linked_opportunities(self, linked_opportunities):
        """Sets the linked_opportunities of this BaseObjective.

        Linked opportunities to the requirement.  # noqa: E501

        :param linked_opportunities: The linked_opportunities of this BaseObjective.  # noqa: E501
        :type: list[OpportunityRef]
        """

        self._linked_opportunities = linked_opportunities

    @property
    def plans(self):
        """Gets the plans of this BaseObjective.  # noqa: E501

        Plan reference linked to the recommendation.  # noqa: E501

        :return: The plans of this BaseObjective.  # noqa: E501
        :rtype: list[PlanRef2]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this BaseObjective.

        Plan reference linked to the recommendation.  # noqa: E501

        :param plans: The plans of this BaseObjective.  # noqa: E501
        :type: list[PlanRef2]
        """

        self._plans = plans

    @property
    def last_reviewed_at(self):
        """Gets the last_reviewed_at of this BaseObjective.  # noqa: E501

        Objective last reviewed timestamp.  # noqa: E501

        :return: The last_reviewed_at of this BaseObjective.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reviewed_at

    @last_reviewed_at.setter
    def last_reviewed_at(self, last_reviewed_at):
        """Sets the last_reviewed_at of this BaseObjective.

        Objective last reviewed timestamp.  # noqa: E501

        :param last_reviewed_at: The last_reviewed_at of this BaseObjective.  # noqa: E501
        :type: datetime
        """

        self._last_reviewed_at = last_reviewed_at

    @property
    def properties(self):
        """Gets the properties of this BaseObjective.  # noqa: E501

        Editable on POST, PUT.  Limited to 25 items.  # noqa: E501

        :return: The properties of this BaseObjective.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BaseObjective.

        Editable on POST, PUT.  Limited to 25 items.  # noqa: E501

        :param properties: The properties of this BaseObjective.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseObjective, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseObjective):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
