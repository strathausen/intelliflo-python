# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlanReferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'migration_reference': 'str',
        'portal_reference': 'str',
        'platform_reference': 'str',
        'application_reference': 'str'
    }

    attribute_map = {
        'migration_reference': 'migrationReference',
        'portal_reference': 'portalReference',
        'platform_reference': 'platformReference',
        'application_reference': 'applicationReference'
    }

    def __init__(self, migration_reference='null', portal_reference='null', platform_reference='null', application_reference='null'):  # noqa: E501
        """PlanReferences - a model defined in Swagger"""  # noqa: E501
        self._migration_reference = None
        self._portal_reference = None
        self._platform_reference = None
        self._application_reference = None
        self.discriminator = None
        if migration_reference is not None:
            self.migration_reference = migration_reference
        if portal_reference is not None:
            self.portal_reference = portal_reference
        if platform_reference is not None:
            self.platform_reference = platform_reference
        if application_reference is not None:
            self.application_reference = application_reference

    @property
    def migration_reference(self):
        """Gets the migration_reference of this PlanReferences.  # noqa: E501

        Useful for recording a plan specific reference during data migrations. E.g. when a Plan provider changes policy numbers as the result of changing their back office platform provider.  # noqa: E501

        :return: The migration_reference of this PlanReferences.  # noqa: E501
        :rtype: str
        """
        return self._migration_reference

    @migration_reference.setter
    def migration_reference(self, migration_reference):
        """Sets the migration_reference of this PlanReferences.

        Useful for recording a plan specific reference during data migrations. E.g. when a Plan provider changes policy numbers as the result of changing their back office platform provider.  # noqa: E501

        :param migration_reference: The migration_reference of this PlanReferences.  # noqa: E501
        :type: str
        """

        self._migration_reference = migration_reference

    @property
    def portal_reference(self):
        """Gets the portal_reference of this PlanReferences.  # noqa: E501

        Holds the Plan Provider's Customer ID reference.  # noqa: E501

        :return: The portal_reference of this PlanReferences.  # noqa: E501
        :rtype: str
        """
        return self._portal_reference

    @portal_reference.setter
    def portal_reference(self, portal_reference):
        """Sets the portal_reference of this PlanReferences.

        Holds the Plan Provider's Customer ID reference.  # noqa: E501

        :param portal_reference: The portal_reference of this PlanReferences.  # noqa: E501
        :type: str
        """

        self._portal_reference = portal_reference

    @property
    def platform_reference(self):
        """Gets the platform_reference of this PlanReferences.  # noqa: E501

        Platform specific. E.g. a platform may require an alternate customer reference to be supplied when placing additional buy instructions.  # noqa: E501

        :return: The platform_reference of this PlanReferences.  # noqa: E501
        :rtype: str
        """
        return self._platform_reference

    @platform_reference.setter
    def platform_reference(self, platform_reference):
        """Sets the platform_reference of this PlanReferences.

        Platform specific. E.g. a platform may require an alternate customer reference to be supplied when placing additional buy instructions.  # noqa: E501

        :param platform_reference: The platform_reference of this PlanReferences.  # noqa: E501
        :type: str
        """

        self._platform_reference = platform_reference

    @property
    def application_reference(self):
        """Gets the application_reference of this PlanReferences.  # noqa: E501

        The Application Reference, sometimes referred to as the Deal Reference, holds the order reference returned by the Product Provider platform.  # noqa: E501

        :return: The application_reference of this PlanReferences.  # noqa: E501
        :rtype: str
        """
        return self._application_reference

    @application_reference.setter
    def application_reference(self, application_reference):
        """Sets the application_reference of this PlanReferences.

        The Application Reference, sometimes referred to as the Deal Reference, holds the order reference returned by the Product Provider platform.  # noqa: E501

        :param application_reference: The application_reference of this PlanReferences.  # noqa: E501
        :type: str
        """

        self._application_reference = application_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlanReferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanReferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
