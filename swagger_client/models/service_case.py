# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceCase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'document_binder': 'NamedDocumentBinderRef',
        'description': 'str',
        'category': 'str',
        'reference': 'str',
        'additional_reference': 'str',
        'status': 'str',
        'started_at': 'datetime',
        'client': 'NamedClientValue',
        'joint_client': 'NamedClientValue',
        'adviser': 'NamedAdviserRef',
        'plans': 'list[PlanRef]',
        'objectives': 'list[ObjectiveReference]',
        'plans_href': 'str',
        'servicing_administrator': 'NamedUserReference',
        'paraplanner': 'NamedUserReference',
        'vulnerability_owner1': 'LegacyVulnerabilityValue',
        'vulnerability_owner2': 'LegacyVulnerabilityValue',
        'opportunity': 'OpportunityRef',
        'is_joint': 'bool',
        'is_completed': 'bool',
        'properties': 'dict(str, str)',
        'client1_risk_profile_ref': 'ClientRiskProfileRef',
        'client2_risk_profile_ref': 'ClientRiskProfileRef',
        'client1_investment_preference': 'ClientInvestmentPreferenceRef',
        'client2_investment_preference': 'ClientInvestmentPreferenceRef'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'document_binder': 'documentBinder',
        'description': 'description',
        'category': 'category',
        'reference': 'reference',
        'additional_reference': 'additionalReference',
        'status': 'status',
        'started_at': 'startedAt',
        'client': 'client',
        'joint_client': 'jointClient',
        'adviser': 'adviser',
        'plans': 'plans',
        'objectives': 'objectives',
        'plans_href': 'plans_href',
        'servicing_administrator': 'servicingAdministrator',
        'paraplanner': 'paraplanner',
        'vulnerability_owner1': 'vulnerabilityOwner1',
        'vulnerability_owner2': 'vulnerabilityOwner2',
        'opportunity': 'opportunity',
        'is_joint': 'isJoint',
        'is_completed': 'isCompleted',
        'properties': 'properties',
        'client1_risk_profile_ref': 'client1RiskProfileRef',
        'client2_risk_profile_ref': 'client2RiskProfileRef',
        'client1_investment_preference': 'client1InvestmentPreference',
        'client2_investment_preference': 'client2InvestmentPreference'
    }

    def __init__(self, id=None, href=None, document_binder=None, description=None, category=None, reference=None, additional_reference=None, status=None, started_at=None, client=None, joint_client=None, adviser=None, plans=None, objectives=None, plans_href=None, servicing_administrator=None, paraplanner=None, vulnerability_owner1=None, vulnerability_owner2=None, opportunity=None, is_joint=None, is_completed=None, properties=None, client1_risk_profile_ref=None, client2_risk_profile_ref=None, client1_investment_preference=None, client2_investment_preference=None):  # noqa: E501
        """ServiceCase - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._document_binder = None
        self._description = None
        self._category = None
        self._reference = None
        self._additional_reference = None
        self._status = None
        self._started_at = None
        self._client = None
        self._joint_client = None
        self._adviser = None
        self._plans = None
        self._objectives = None
        self._plans_href = None
        self._servicing_administrator = None
        self._paraplanner = None
        self._vulnerability_owner1 = None
        self._vulnerability_owner2 = None
        self._opportunity = None
        self._is_joint = None
        self._is_completed = None
        self._properties = None
        self._client1_risk_profile_ref = None
        self._client2_risk_profile_ref = None
        self._client1_investment_preference = None
        self._client2_investment_preference = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if document_binder is not None:
            self.document_binder = document_binder
        self.description = description
        if category is not None:
            self.category = category
        if reference is not None:
            self.reference = reference
        if additional_reference is not None:
            self.additional_reference = additional_reference
        if status is not None:
            self.status = status
        if started_at is not None:
            self.started_at = started_at
        if client is not None:
            self.client = client
        if joint_client is not None:
            self.joint_client = joint_client
        self.adviser = adviser
        if plans is not None:
            self.plans = plans
        if objectives is not None:
            self.objectives = objectives
        if plans_href is not None:
            self.plans_href = plans_href
        if servicing_administrator is not None:
            self.servicing_administrator = servicing_administrator
        if paraplanner is not None:
            self.paraplanner = paraplanner
        if vulnerability_owner1 is not None:
            self.vulnerability_owner1 = vulnerability_owner1
        if vulnerability_owner2 is not None:
            self.vulnerability_owner2 = vulnerability_owner2
        if opportunity is not None:
            self.opportunity = opportunity
        if is_joint is not None:
            self.is_joint = is_joint
        if is_completed is not None:
            self.is_completed = is_completed
        if properties is not None:
            self.properties = properties
        if client1_risk_profile_ref is not None:
            self.client1_risk_profile_ref = client1_risk_profile_ref
        if client2_risk_profile_ref is not None:
            self.client2_risk_profile_ref = client2_risk_profile_ref
        if client1_investment_preference is not None:
            self.client1_investment_preference = client1_investment_preference
        if client2_investment_preference is not None:
            self.client2_investment_preference = client2_investment_preference

    @property
    def id(self):
        """Gets the id of this ServiceCase.  # noqa: E501

        Service case Unique Identifier.  # noqa: E501

        :return: The id of this ServiceCase.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceCase.

        Service case Unique Identifier.  # noqa: E501

        :param id: The id of this ServiceCase.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this ServiceCase.  # noqa: E501

        Hypermedia link to Service case.  # noqa: E501

        :return: The href of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ServiceCase.

        Hypermedia link to Service case.  # noqa: E501

        :param href: The href of this ServiceCase.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def document_binder(self):
        """Gets the document_binder of this ServiceCase.  # noqa: E501


        :return: The document_binder of this ServiceCase.  # noqa: E501
        :rtype: NamedDocumentBinderRef
        """
        return self._document_binder

    @document_binder.setter
    def document_binder(self, document_binder):
        """Sets the document_binder of this ServiceCase.


        :param document_binder: The document_binder of this ServiceCase.  # noqa: E501
        :type: NamedDocumentBinderRef
        """

        self._document_binder = document_binder

    @property
    def description(self):
        """Gets the description of this ServiceCase.  # noqa: E501

        Description of the service case.  # noqa: E501

        :return: The description of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceCase.

        Description of the service case.  # noqa: E501

        :param description: The description of this ServiceCase.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def category(self):
        """Gets the category of this ServiceCase.  # noqa: E501

        Category of the service case.  # noqa: E501

        :return: The category of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ServiceCase.

        Category of the service case.  # noqa: E501

        :param category: The category of this ServiceCase.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def reference(self):
        """Gets the reference of this ServiceCase.  # noqa: E501

        Sequential reference for the Service case.  # noqa: E501

        :return: The reference of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ServiceCase.

        Sequential reference for the Service case.  # noqa: E501

        :param reference: The reference of this ServiceCase.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def additional_reference(self):
        """Gets the additional_reference of this ServiceCase.  # noqa: E501

        Service case reference.  # noqa: E501

        :return: The additional_reference of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._additional_reference

    @additional_reference.setter
    def additional_reference(self, additional_reference):
        """Sets the additional_reference of this ServiceCase.

        Service case reference.  # noqa: E501

        :param additional_reference: The additional_reference of this ServiceCase.  # noqa: E501
        :type: str
        """

        self._additional_reference = additional_reference

    @property
    def status(self):
        """Gets the status of this ServiceCase.  # noqa: E501

        Status of the service case.  # noqa: E501

        :return: The status of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceCase.

        Status of the service case.  # noqa: E501

        :param status: The status of this ServiceCase.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def started_at(self):
        """Gets the started_at of this ServiceCase.  # noqa: E501

        The date and time when the service case started.  # noqa: E501

        :return: The started_at of this ServiceCase.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ServiceCase.

        The date and time when the service case started.  # noqa: E501

        :param started_at: The started_at of this ServiceCase.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def client(self):
        """Gets the client of this ServiceCase.  # noqa: E501


        :return: The client of this ServiceCase.  # noqa: E501
        :rtype: NamedClientValue
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ServiceCase.


        :param client: The client of this ServiceCase.  # noqa: E501
        :type: NamedClientValue
        """

        self._client = client

    @property
    def joint_client(self):
        """Gets the joint_client of this ServiceCase.  # noqa: E501


        :return: The joint_client of this ServiceCase.  # noqa: E501
        :rtype: NamedClientValue
        """
        return self._joint_client

    @joint_client.setter
    def joint_client(self, joint_client):
        """Sets the joint_client of this ServiceCase.


        :param joint_client: The joint_client of this ServiceCase.  # noqa: E501
        :type: NamedClientValue
        """

        self._joint_client = joint_client

    @property
    def adviser(self):
        """Gets the adviser of this ServiceCase.  # noqa: E501


        :return: The adviser of this ServiceCase.  # noqa: E501
        :rtype: NamedAdviserRef
        """
        return self._adviser

    @adviser.setter
    def adviser(self, adviser):
        """Sets the adviser of this ServiceCase.


        :param adviser: The adviser of this ServiceCase.  # noqa: E501
        :type: NamedAdviserRef
        """
        if adviser is None:
            raise ValueError("Invalid value for `adviser`, must not be `None`")  # noqa: E501

        self._adviser = adviser

    @property
    def plans(self):
        """Gets the plans of this ServiceCase.  # noqa: E501

        Linked plans.  # noqa: E501

        :return: The plans of this ServiceCase.  # noqa: E501
        :rtype: list[PlanRef]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this ServiceCase.

        Linked plans.  # noqa: E501

        :param plans: The plans of this ServiceCase.  # noqa: E501
        :type: list[PlanRef]
        """

        self._plans = plans

    @property
    def objectives(self):
        """Gets the objectives of this ServiceCase.  # noqa: E501

        Objectives.  # noqa: E501

        :return: The objectives of this ServiceCase.  # noqa: E501
        :rtype: list[ObjectiveReference]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this ServiceCase.

        Objectives.  # noqa: E501

        :param objectives: The objectives of this ServiceCase.  # noqa: E501
        :type: list[ObjectiveReference]
        """

        self._objectives = objectives

    @property
    def plans_href(self):
        """Gets the plans_href of this ServiceCase.  # noqa: E501

        Hypermedia link to linked plans.  # noqa: E501

        :return: The plans_href of this ServiceCase.  # noqa: E501
        :rtype: str
        """
        return self._plans_href

    @plans_href.setter
    def plans_href(self, plans_href):
        """Sets the plans_href of this ServiceCase.

        Hypermedia link to linked plans.  # noqa: E501

        :param plans_href: The plans_href of this ServiceCase.  # noqa: E501
        :type: str
        """

        self._plans_href = plans_href

    @property
    def servicing_administrator(self):
        """Gets the servicing_administrator of this ServiceCase.  # noqa: E501


        :return: The servicing_administrator of this ServiceCase.  # noqa: E501
        :rtype: NamedUserReference
        """
        return self._servicing_administrator

    @servicing_administrator.setter
    def servicing_administrator(self, servicing_administrator):
        """Sets the servicing_administrator of this ServiceCase.


        :param servicing_administrator: The servicing_administrator of this ServiceCase.  # noqa: E501
        :type: NamedUserReference
        """

        self._servicing_administrator = servicing_administrator

    @property
    def paraplanner(self):
        """Gets the paraplanner of this ServiceCase.  # noqa: E501


        :return: The paraplanner of this ServiceCase.  # noqa: E501
        :rtype: NamedUserReference
        """
        return self._paraplanner

    @paraplanner.setter
    def paraplanner(self, paraplanner):
        """Sets the paraplanner of this ServiceCase.


        :param paraplanner: The paraplanner of this ServiceCase.  # noqa: E501
        :type: NamedUserReference
        """

        self._paraplanner = paraplanner

    @property
    def vulnerability_owner1(self):
        """Gets the vulnerability_owner1 of this ServiceCase.  # noqa: E501


        :return: The vulnerability_owner1 of this ServiceCase.  # noqa: E501
        :rtype: LegacyVulnerabilityValue
        """
        return self._vulnerability_owner1

    @vulnerability_owner1.setter
    def vulnerability_owner1(self, vulnerability_owner1):
        """Sets the vulnerability_owner1 of this ServiceCase.


        :param vulnerability_owner1: The vulnerability_owner1 of this ServiceCase.  # noqa: E501
        :type: LegacyVulnerabilityValue
        """

        self._vulnerability_owner1 = vulnerability_owner1

    @property
    def vulnerability_owner2(self):
        """Gets the vulnerability_owner2 of this ServiceCase.  # noqa: E501


        :return: The vulnerability_owner2 of this ServiceCase.  # noqa: E501
        :rtype: LegacyVulnerabilityValue
        """
        return self._vulnerability_owner2

    @vulnerability_owner2.setter
    def vulnerability_owner2(self, vulnerability_owner2):
        """Sets the vulnerability_owner2 of this ServiceCase.


        :param vulnerability_owner2: The vulnerability_owner2 of this ServiceCase.  # noqa: E501
        :type: LegacyVulnerabilityValue
        """

        self._vulnerability_owner2 = vulnerability_owner2

    @property
    def opportunity(self):
        """Gets the opportunity of this ServiceCase.  # noqa: E501


        :return: The opportunity of this ServiceCase.  # noqa: E501
        :rtype: OpportunityRef
        """
        return self._opportunity

    @opportunity.setter
    def opportunity(self, opportunity):
        """Sets the opportunity of this ServiceCase.


        :param opportunity: The opportunity of this ServiceCase.  # noqa: E501
        :type: OpportunityRef
        """

        self._opportunity = opportunity

    @property
    def is_joint(self):
        """Gets the is_joint of this ServiceCase.  # noqa: E501

        Determines if the service case is joint.  # noqa: E501

        :return: The is_joint of this ServiceCase.  # noqa: E501
        :rtype: bool
        """
        return self._is_joint

    @is_joint.setter
    def is_joint(self, is_joint):
        """Sets the is_joint of this ServiceCase.

        Determines if the service case is joint.  # noqa: E501

        :param is_joint: The is_joint of this ServiceCase.  # noqa: E501
        :type: bool
        """

        self._is_joint = is_joint

    @property
    def is_completed(self):
        """Gets the is_completed of this ServiceCase.  # noqa: E501

        Determines if the service case is completed.  # noqa: E501

        :return: The is_completed of this ServiceCase.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this ServiceCase.

        Determines if the service case is completed.  # noqa: E501

        :param is_completed: The is_completed of this ServiceCase.  # noqa: E501
        :type: bool
        """

        self._is_completed = is_completed

    @property
    def properties(self):
        """Gets the properties of this ServiceCase.  # noqa: E501

        Service case related properties.  # noqa: E501

        :return: The properties of this ServiceCase.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ServiceCase.

        Service case related properties.  # noqa: E501

        :param properties: The properties of this ServiceCase.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def client1_risk_profile_ref(self):
        """Gets the client1_risk_profile_ref of this ServiceCase.  # noqa: E501


        :return: The client1_risk_profile_ref of this ServiceCase.  # noqa: E501
        :rtype: ClientRiskProfileRef
        """
        return self._client1_risk_profile_ref

    @client1_risk_profile_ref.setter
    def client1_risk_profile_ref(self, client1_risk_profile_ref):
        """Sets the client1_risk_profile_ref of this ServiceCase.


        :param client1_risk_profile_ref: The client1_risk_profile_ref of this ServiceCase.  # noqa: E501
        :type: ClientRiskProfileRef
        """

        self._client1_risk_profile_ref = client1_risk_profile_ref

    @property
    def client2_risk_profile_ref(self):
        """Gets the client2_risk_profile_ref of this ServiceCase.  # noqa: E501


        :return: The client2_risk_profile_ref of this ServiceCase.  # noqa: E501
        :rtype: ClientRiskProfileRef
        """
        return self._client2_risk_profile_ref

    @client2_risk_profile_ref.setter
    def client2_risk_profile_ref(self, client2_risk_profile_ref):
        """Sets the client2_risk_profile_ref of this ServiceCase.


        :param client2_risk_profile_ref: The client2_risk_profile_ref of this ServiceCase.  # noqa: E501
        :type: ClientRiskProfileRef
        """

        self._client2_risk_profile_ref = client2_risk_profile_ref

    @property
    def client1_investment_preference(self):
        """Gets the client1_investment_preference of this ServiceCase.  # noqa: E501


        :return: The client1_investment_preference of this ServiceCase.  # noqa: E501
        :rtype: ClientInvestmentPreferenceRef
        """
        return self._client1_investment_preference

    @client1_investment_preference.setter
    def client1_investment_preference(self, client1_investment_preference):
        """Sets the client1_investment_preference of this ServiceCase.


        :param client1_investment_preference: The client1_investment_preference of this ServiceCase.  # noqa: E501
        :type: ClientInvestmentPreferenceRef
        """

        self._client1_investment_preference = client1_investment_preference

    @property
    def client2_investment_preference(self):
        """Gets the client2_investment_preference of this ServiceCase.  # noqa: E501


        :return: The client2_investment_preference of this ServiceCase.  # noqa: E501
        :rtype: ClientInvestmentPreferenceRef
        """
        return self._client2_investment_preference

    @client2_investment_preference.setter
    def client2_investment_preference(self, client2_investment_preference):
        """Sets the client2_investment_preference of this ServiceCase.


        :param client2_investment_preference: The client2_investment_preference of this ServiceCase.  # noqa: E501
        :type: ClientInvestmentPreferenceRef
        """

        self._client2_investment_preference = client2_investment_preference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceCase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceCase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
