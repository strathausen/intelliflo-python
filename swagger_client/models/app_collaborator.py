# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppCollaborator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'role': 'str',
        'verified': 'bool',
        'tenant_id': 'int',
        'tenant_name': 'str',
        'approved': 'bool',
        'approved_at': 'datetime'
    }

    attribute_map = {
        'email': 'email',
        'role': 'role',
        'verified': 'verified',
        'tenant_id': 'tenantId',
        'tenant_name': 'tenantName',
        'approved': 'approved',
        'approved_at': 'approved_at'
    }

    def __init__(self, email=None, role=None, verified=None, tenant_id=None, tenant_name=None, approved=None, approved_at=None):  # noqa: E501
        """AppCollaborator - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._role = None
        self._verified = None
        self._tenant_id = None
        self._tenant_name = None
        self._approved = None
        self._approved_at = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if role is not None:
            self.role = role
        if verified is not None:
            self.verified = verified
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if approved is not None:
            self.approved = approved
        if approved_at is not None:
            self.approved_at = approved_at

    @property
    def email(self):
        """Gets the email of this AppCollaborator.  # noqa: E501


        :return: The email of this AppCollaborator.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AppCollaborator.


        :param email: The email of this AppCollaborator.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this AppCollaborator.  # noqa: E501


        :return: The role of this AppCollaborator.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AppCollaborator.


        :param role: The role of this AppCollaborator.  # noqa: E501
        :type: str
        """
        allowed_values = ["Tester", "Developer", "Owner"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def verified(self):
        """Gets the verified of this AppCollaborator.  # noqa: E501


        :return: The verified of this AppCollaborator.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this AppCollaborator.


        :param verified: The verified of this AppCollaborator.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AppCollaborator.  # noqa: E501


        :return: The tenant_id of this AppCollaborator.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AppCollaborator.


        :param tenant_id: The tenant_id of this AppCollaborator.  # noqa: E501
        :type: int
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this AppCollaborator.  # noqa: E501


        :return: The tenant_name of this AppCollaborator.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this AppCollaborator.


        :param tenant_name: The tenant_name of this AppCollaborator.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def approved(self):
        """Gets the approved of this AppCollaborator.  # noqa: E501


        :return: The approved of this AppCollaborator.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this AppCollaborator.


        :param approved: The approved of this AppCollaborator.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def approved_at(self):
        """Gets the approved_at of this AppCollaborator.  # noqa: E501


        :return: The approved_at of this AppCollaborator.  # noqa: E501
        :rtype: datetime
        """
        return self._approved_at

    @approved_at.setter
    def approved_at(self, approved_at):
        """Sets the approved_at of this AppCollaborator.


        :param approved_at: The approved_at of this AppCollaborator.  # noqa: E501
        :type: datetime
        """

        self._approved_at = approved_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppCollaborator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppCollaborator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
