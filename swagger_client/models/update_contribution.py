# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_contribution import BaseContribution  # noqa: F401,E501

class UpdateContribution(BaseContribution):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contribution_type': 'str'
    }
    if hasattr(BaseContribution, "swagger_types"):
        swagger_types.update(BaseContribution.swagger_types)

    attribute_map = {
        'contribution_type': 'contributionType'
    }
    if hasattr(BaseContribution, "attribute_map"):
        attribute_map.update(BaseContribution.attribute_map)

    def __init__(self, contribution_type=None, *args, **kwargs):  # noqa: E501
        """UpdateContribution - a model defined in Swagger"""  # noqa: E501
        self._contribution_type = None
        self.discriminator = None
        if contribution_type is not None:
            self.contribution_type = contribution_type
        BaseContribution.__init__(self, *args, **kwargs)

    @property
    def contribution_type(self):
        """Gets the contribution_type of this UpdateContribution.  # noqa: E501

        Contribution type.  # noqa: E501

        :return: The contribution_type of this UpdateContribution.  # noqa: E501
        :rtype: str
        """
        return self._contribution_type

    @contribution_type.setter
    def contribution_type(self, contribution_type):
        """Sets the contribution_type of this UpdateContribution.

        Contribution type.  # noqa: E501

        :param contribution_type: The contribution_type of this UpdateContribution.  # noqa: E501
        :type: str
        """
        allowed_values = ["Regular", "LumpSum", "Transfer", "Rebate"]  # noqa: E501
        if contribution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contribution_type` ({0}), must be one of {1}"  # noqa: E501
                .format(contribution_type, allowed_values)
            )

        self._contribution_type = contribution_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateContribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateContribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
