# coding: utf-8

"""
    public-v2-prd-gb-01

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2016-08-19T00:00:00Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Expenditure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'href': 'str',
        'description': 'str',
        'category': 'str',
        'net': 'CurrencyValue',
        'frequency': 'str',
        'contribution_href': 'str',
        'starts_on': 'datetime',
        'ends_on': 'datetime',
        'owners': 'list[ClientRef]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'description': 'description',
        'category': 'category',
        'net': 'net',
        'frequency': 'frequency',
        'contribution_href': 'contribution_href',
        'starts_on': 'startsOn',
        'ends_on': 'endsOn',
        'owners': 'owners'
    }

    def __init__(self, id=None, href=None, description='null', category=None, net=None, frequency='Monthly', contribution_href=None, starts_on=None, ends_on=None, owners=None):  # noqa: E501
        """Expenditure - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._href = None
        self._description = None
        self._category = None
        self._net = None
        self._frequency = None
        self._contribution_href = None
        self._starts_on = None
        self._ends_on = None
        self._owners = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if description is not None:
            self.description = description
        self.category = category
        self.net = net
        if frequency is not None:
            self.frequency = frequency
        if contribution_href is not None:
            self.contribution_href = contribution_href
        if starts_on is not None:
            self.starts_on = starts_on
        if ends_on is not None:
            self.ends_on = ends_on
        if owners is not None:
            self.owners = owners

    @property
    def id(self):
        """Gets the id of this Expenditure.  # noqa: E501


        :return: The id of this Expenditure.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Expenditure.


        :param id: The id of this Expenditure.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Expenditure.  # noqa: E501


        :return: The href of this Expenditure.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Expenditure.


        :param href: The href of this Expenditure.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def description(self):
        """Gets the description of this Expenditure.  # noqa: E501

        Description of expenditure.  # noqa: E501

        :return: The description of this Expenditure.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Expenditure.

        Description of expenditure.  # noqa: E501

        :param description: The description of this Expenditure.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def category(self):
        """Gets the category of this Expenditure.  # noqa: E501

        Type of expenditure.  # noqa: E501

        :return: The category of this Expenditure.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Expenditure.

        Type of expenditure.  # noqa: E501

        :param category: The category of this Expenditure.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def net(self):
        """Gets the net of this Expenditure.  # noqa: E501


        :return: The net of this Expenditure.  # noqa: E501
        :rtype: CurrencyValue
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this Expenditure.


        :param net: The net of this Expenditure.  # noqa: E501
        :type: CurrencyValue
        """
        if net is None:
            raise ValueError("Invalid value for `net`, must not be `None`")  # noqa: E501

        self._net = net

    @property
    def frequency(self):
        """Gets the frequency of this Expenditure.  # noqa: E501

        Frequency of expenditure.  # noqa: E501

        :return: The frequency of this Expenditure.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Expenditure.

        Frequency of expenditure.  # noqa: E501

        :param frequency: The frequency of this Expenditure.  # noqa: E501
        :type: str
        """
        allowed_values = ["Monthly", "Weekly", "Fortnightly", "FourWeekly", "Quarterly", "HalfYearly", "Annually"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def contribution_href(self):
        """Gets the contribution_href of this Expenditure.  # noqa: E501

        Read only link to contribution.  # noqa: E501

        :return: The contribution_href of this Expenditure.  # noqa: E501
        :rtype: str
        """
        return self._contribution_href

    @contribution_href.setter
    def contribution_href(self, contribution_href):
        """Sets the contribution_href of this Expenditure.

        Read only link to contribution.  # noqa: E501

        :param contribution_href: The contribution_href of this Expenditure.  # noqa: E501
        :type: str
        """

        self._contribution_href = contribution_href

    @property
    def starts_on(self):
        """Gets the starts_on of this Expenditure.  # noqa: E501

        Start date of expenditure.  # noqa: E501

        :return: The starts_on of this Expenditure.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this Expenditure.

        Start date of expenditure.  # noqa: E501

        :param starts_on: The starts_on of this Expenditure.  # noqa: E501
        :type: datetime
        """

        self._starts_on = starts_on

    @property
    def ends_on(self):
        """Gets the ends_on of this Expenditure.  # noqa: E501

        End date of expenditure.  # noqa: E501

        :return: The ends_on of this Expenditure.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_on

    @ends_on.setter
    def ends_on(self, ends_on):
        """Sets the ends_on of this Expenditure.

        End date of expenditure.  # noqa: E501

        :param ends_on: The ends_on of this Expenditure.  # noqa: E501
        :type: datetime
        """

        self._ends_on = ends_on

    @property
    def owners(self):
        """Gets the owners of this Expenditure.  # noqa: E501

        List Of Owners for expenditure.  # noqa: E501

        :return: The owners of this Expenditure.  # noqa: E501
        :rtype: list[ClientRef]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this Expenditure.

        List Of Owners for expenditure.  # noqa: E501

        :param owners: The owners of this Expenditure.  # noqa: E501
        :type: list[ClientRef]
        """

        self._owners = owners

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Expenditure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Expenditure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
